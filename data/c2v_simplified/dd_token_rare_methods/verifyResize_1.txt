
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wso2-attic__product-emm/modules/mobile-agents/android/app-catalog/volley/src/test/java/com/android/volley/toolbox/ImageRequestTest_verifyResize.java
method_name = verifyResize
method_body = private void verifyResize(NetworkResponse networkResponse, int maxWidth, int maxHeight, ScaleType scaleType, int expectedWidth, int expectedHeight) { ImageRequest request = new ImageRequest("", null, maxWidth, maxHeight, scaleType, Config.RGB_565, null); Response<Bitmap> response = request.parseNetworkResponse(networkResponse); assertNotNull(response); assertTrue(response.isSuccess()); Bitmap bitmap = response.result; assertNotNull(bitmap); assertEquals(expectedWidth, bitmap.getWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }
predict, score, loss = verifyResize, 0.999086856842041, 0.005014343652874231

Trace of simplified code(s):
{"time": "2021-01-20 07:38:13.298949", "n_pass": [1, 1, 1], "score": "0.9994", "loss": "0.003", "code": "private void verifyResize(NetworkResponse networkResponse, int maxWidth, int maxHeight, ScaleType scaleType, int expectedWidth, int expectedHeight) { ImageRequest request = new ImageRequest(\"\", null, maxWidth, maxHeight, scaleType, Config.RGB_565, null); Response<Bitmap> response = request.parseNetworkResponse(networkResponse); assertNotNull(response); assertTrue(response.isSuccess()); Bitmap bitmap = response.result; assertNotNull(bitmap); assertEquals(expectedWidth, bitmap.getWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:16.381500", "n_pass": [9, 2, 2], "score": "0.9937", "loss": "0.0293", "code": "private void verifyResize(NetworkResponse networkResponse, int maxWidth, int maxHeight, ScaleType scaleType, int expectedWidth, int expectedHeight) {  Response<Bitmap> response = request.parseNetworkResponse(networkResponse); assertNotNull(response); assertTrue(response.isSuccess()); Bitmap bitmap = response.result; assertNotNull(bitmap); assertEquals(expectedWidth, bitmap.getWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:24.351868", "n_pass": [20, 5, 3], "score": "0.6762", "loss": "0.6457", "code": "private void verifyResize(NetworkResponse networkResponse, int maxWidth, int maxHeight, ScaleType scaleType, int expectedWidth, int expectedHeight) {  Response<Bitmap> response = request.parseNetworkResponse(networkResponse); assertNotNull= response.result; assertNotNull(bitmap); assertEquals(expectedWidth, bitmap.getWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:27.024528", "n_pass": [37, 6, 4], "score": "0.9993", "loss": "0.0042", "code": "private void verifyResize(NetworkResponse networkResponse, int maxWidth, int maxHeight, ScaleType scaleType, int expectedWidth, int expectedHeight) {  Response<Bitmap> response = request.parseNetworkResponse(networkResponse); assertNotNull= response.result; assertNotNull(bitmapgetWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:29.678636", "n_pass": [41, 7, 5], "score": "0.9993", "loss": "0.0044", "code": "private void verifyResize(NetworkResponse networkResponsemaxHeight, ScaleType scaleType, int expectedWidth, int expectedHeight) {  Response<Bitmap> response = request.parseNetworkResponse(networkResponse); assertNotNull= response.result; assertNotNull(bitmapgetWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:32.326367", "n_pass": [44, 8, 6], "score": "0.9982", "loss": "0.0158", "code": "private void verifyResize(NetworkResponse networkResponsemaxHeight, ScaleType scaleType, int expectedWidth, int expectedHeight) { request.parseNetworkResponse(networkResponse); assertNotNull= response.result; assertNotNull(bitmapgetWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:34.975729", "n_pass": [68, 9, 7], "score": "0.9984", "loss": "0.013", "code": "private void verifyResize(NetworkResponse networkResponsemaxHeight, ScaleType scaleType, int expectedWidth, int expectedHeight) { request.parseNetworkResponse(networkResponse); assertNotNull; assertNotNull(bitmapgetWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:38.047688", "n_pass": [75, 10, 8], "score": "0.9987", "loss": "0.01", "code": "private void verifyResize(NetworkResponse  scaleType, int expectedWidth, int expectedHeight) { request.parseNetworkResponse(networkResponse); assertNotNull; assertNotNull(bitmapgetWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:40.714006", "n_pass": [76, 11, 9], "score": "0.998", "loss": "0.0125", "code": "private void verifyResize(NetworkResponse  expectedWidth, int expectedHeight) { request.parseNetworkResponse(networkResponse); assertNotNull; assertNotNull(bitmapgetWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:43.366030", "n_pass": [77, 12, 10], "score": "0.709", "loss": "0.3855", "code": "private void verifyResize(NetworkResponse  expectedHeight) { request.parseNetworkResponse(networkResponse); assertNotNull; assertNotNull(bitmapgetWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:46.801681", "n_pass": [111, 13, 11], "score": "0.9372", "loss": "0.1235", "code": "private void verifyResize(NetworkResponse  expectedHeight) { parseNetworkResponse(networkResponse); assertNotNull; assertNotNull(bitmapgetWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:49.440687", "n_pass": [115, 14, 12], "score": "0.9551", "loss": "0.1189", "code": "private void verifyResize(NetworkResponse  expectedHeight) { parseNetworkResponse(networkResponse);  assertNotNull(bitmapgetWidth()); assertEquals(expectedHeight, bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:52.074045", "n_pass": [120, 15, 13], "score": "0.7769", "loss": "0.3041", "code": "private void verifyResize(NetworkResponse  expectedHeight) { parseNetworkResponse(networkResponse);  assertNotNull(bitmapgetWidth()); assertEquals(bitmap.getHeight()); }"}
{"time": "2021-01-20 07:38:54.730081", "n_pass": [124, 16, 14], "score": "0.7769", "loss": "0.3041", "code": "void verifyResize(NetworkResponse  expectedHeight) { parseNetworkResponse(networkResponse);  assertNotNull(bitmapgetWidth()); assertEquals(bitmap.getHeight()); }"}
{"time": "2021-01-20 07:39:01.632732", "n_pass": [178, 17, 15], "score": "0.7769", "loss": "0.3041", "code": "void verifyResize(NetworkResponse expectedHeight) { parseNetworkResponse(networkResponse);  assertNotNull(bitmapgetWidth()); assertEquals(bitmap.getHeight()); }"}
{"time": "2021-01-20 07:39:04.255291", "n_pass": [182, 18, 16], "score": "0.7769", "loss": "0.3041", "code": "void verifyResize(NetworkResponse expectedHeight){ parseNetworkResponse(networkResponse);  assertNotNull(bitmapgetWidth()); assertEquals(bitmap.getHeight()); }"}
{"time": "2021-01-20 07:39:06.892816", "n_pass": [184, 19, 17], "score": "0.7769", "loss": "0.3041", "code": "void verifyResize(NetworkResponse expectedHeight){parseNetworkResponse(networkResponse);  assertNotNull(bitmapgetWidth()); assertEquals(bitmap.getHeight()); }"}
{"time": "2021-01-20 07:39:09.539469", "n_pass": [185, 20, 18], "score": "0.3889", "loss": "2.5992", "code": "void verifyResize(NetworkResponse expectedHeight){(networkResponse);  assertNotNull(bitmapgetWidth()); assertEquals(bitmap.getHeight()); }"}
{"time": "2021-01-20 07:39:12.566073", "n_pass": [190, 21, 19], "score": "0.3889", "loss": "2.5992", "code": "void verifyResize(NetworkResponse expectedHeight){(networkResponse); assertNotNull(bitmapgetWidth()); assertEquals(bitmap.getHeight()); }"}
{"time": "2021-01-20 07:39:15.181876", "n_pass": [191, 22, 20], "score": "0.3889", "loss": "2.5992", "code": "void verifyResize(NetworkResponse expectedHeight){(networkResponse);assertNotNull(bitmapgetWidth()); assertEquals(bitmap.getHeight()); }"}
{"time": "2021-01-20 07:39:17.832089", "n_pass": [192, 23, 21], "score": "0.6234", "loss": "1.5896", "code": "void verifyResize(NetworkResponse expectedHeight){(networkResponse);(bitmapgetWidth()); assertEquals(bitmap.getHeight()); }"}
{"time": "2021-01-20 07:39:20.447343", "n_pass": [194, 24, 22], "score": "0.6543", "loss": "1.5708", "code": "void verifyResize(NetworkResponse expectedHeight){(networkResponse);(getWidth()); assertEquals(bitmap.getHeight()); }"}
{"time": "2021-01-20 07:39:23.063221", "n_pass": [199, 25, 23], "score": "0.4456", "loss": "1.9069", "code": "void verifyResize(NetworkResponse expectedHeight){(networkResponse);(getWidth());(bitmap.getHeight()); }"}
{"time": "2021-01-20 07:39:25.676872", "n_pass": [201, 26, 24], "score": "0.4614", "loss": "1.7707", "code": "void verifyResize(NetworkResponse expectedHeight){(networkResponse);(getWidth());(bitmap()); }"}
{"time": "2021-01-20 07:39:28.294876", "n_pass": [202, 27, 25], "score": "0.4614", "loss": "1.7707", "code": "void verifyResize(NetworkResponse expectedHeight){(networkResponse);(getWidth());(bitmap); }"}
{"time": "2021-01-20 07:39:33.274751", "n_pass": [233, 28, 26], "score": "0.4614", "loss": "1.7707", "code": "void verifyResize(NetworkResponse expectedHeight){(networkResponse);(getWidth());(bitmap);}"}

Minimal simplified code:
void verifyResize(NetworkResponse expectedHeight){(networkResponse);(getWidth());(bitmap);}

