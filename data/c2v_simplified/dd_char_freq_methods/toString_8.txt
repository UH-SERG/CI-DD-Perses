
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/el/parser/AstLambdaExpression_toString.java
method_name = toString
method_body = @Override public String toString() { StringBuilder result = new StringBuilder(); for (Node n : children) { result.append(n.toString()); } return result.toString(); }
predict, score, loss = toString, 0.9980858564376831, 0.002634033327922225

Trace of simplified code(s):
{"time": "2020-12-28 09:49:53.040310", "n_pass": [1, 1, 1], "score": "0.9981", "loss": "0.0026", "code": "@Override public String toString() { StringBuilder result = new StringBuilder(); for (Node n : children) { result.append(n.toString()); } return result.toString(); }"}
{"time": "2020-12-28 09:49:58.392434", "n_pass": [44, 3, 2], "score": "0.9741", "loss": "0.0354", "code": "public String toString() { StringBuilder result = new StringBuilder(); for (Node n : children) { result.append(n.toString()); } return result.toString(); }"}
{"time": "2020-12-28 09:50:01.447103", "n_pass": [47, 4, 3], "score": "0.9743", "loss": "0.0353", "code": "public String toString() { Str result = new StringBuilder(); for (Node n : children) { result.append(n.toString()); } return result.toString(); }"}
{"time": "2020-12-28 09:50:04.092752", "n_pass": [49, 5, 4], "score": "0.9857", "loss": "0.0195", "code": "public String toString() { Str result = Builder(); for (Node n : children) { result.append(n.toString()); } return result.toString(); }"}
{"time": "2020-12-28 09:50:06.719334", "n_pass": [57, 6, 5], "score": "0.9834", "loss": "0.0322", "code": "public String toString() { Str result = Builder(); for (Node n : children) { result.append(n.toString()); } returString(); }"}
{"time": "2020-12-28 09:50:12.380094", "n_pass": [62, 8, 6], "score": "0.971", "loss": "0.0576", "code": "public String toString() { StrBuilder(); for (Node n : children) { result.append(n.toString()); } returString(); }"}
{"time": "2020-12-28 09:50:18.054387", "n_pass": [96, 10, 7], "score": "0.9724", "loss": "0.0594", "code": "public String toString() { Strer(); for (Node n : children) { result.append(n.toString()); } returString(); }"}
{"time": "2020-12-28 09:50:20.665492", "n_pass": [100, 11, 8], "score": "0.7533", "loss": "0.5133", "code": "public String toString() { Strer(); for (Node n : ren) { result.append(n.toString()); } returString(); }"}
{"time": "2020-12-28 09:50:25.918126", "n_pass": [104, 13, 9], "score": "0.5207", "loss": "1.2657", "code": "public String toString() { Strer(); for (Node n : ren) { result.a(n.toString()); } returString(); }"}
{"time": "2020-12-28 09:50:31.175000", "n_pass": [109, 15, 10], "score": "0.5207", "loss": "1.2657", "code": "public String toString() { Strer(); for (Node n : ren) { result.a(n.toString()); } retug(); }"}
{"time": "2020-12-28 09:50:42.496949", "n_pass": [164, 19, 11], "score": "0.639", "loss": "0.8033", "code": "public String toString() { Strer(); for (Node n : ren) { result.a(n.toString()); } retu; }"}
{"time": "2020-12-28 09:50:55.023956", "n_pass": [178, 23, 12], "score": "0.639", "loss": "0.8033", "code": "public String toString() {trer(); for (Node n : ren) { result.a(n.toString()); } retu; }"}
{"time": "2020-12-28 09:50:57.639042", "n_pass": [179, 24, 13], "score": "0.6274", "loss": "0.8477", "code": "public String toString() {er(); for (Node n : ren) { result.a(n.toString()); } retu; }"}
{"time": "2020-12-28 09:51:00.287009", "n_pass": [184, 25, 14], "score": "0.6207", "loss": "0.8677", "code": "public String toString() {er(); for (N n : ren) { result.a(n.toString()); } retu; }"}
{"time": "2020-12-28 09:51:02.903531", "n_pass": [189, 26, 15], "score": "0.4996", "loss": "1.2345", "code": "public String toString() {er(); for (N n : ren) { ult.a(n.toString()); } retu; }"}
{"time": "2020-12-28 09:51:16.050924", "n_pass": [198, 31, 16], "score": "0.5056", "loss": "1.2236", "code": "public String toString() {er(); for (N n : ren) { ult.a(n.toString()); } r; }"}
{"time": "2020-12-28 09:51:42.892086", "n_pass": [289, 39, 17], "score": "0.5088", "loss": "1.2004", "code": "public String toString() {er(); for (N n : ren) { ult.a(n.toString()); }  }"}
{"time": "2020-12-28 09:52:07.602728", "n_pass": [315, 47, 18], "score": "0.5088", "loss": "1.2004", "code": "public String toString(){er(); for (N n : ren) { ult.a(n.toString()); }  }"}
{"time": "2020-12-28 09:52:10.210817", "n_pass": [317, 48, 19], "score": "0.5576", "loss": "1.0966", "code": "public String toString(){r(); for (N n : ren) { ult.a(n.toString()); }  }"}
{"time": "2020-12-28 09:52:12.827445", "n_pass": [322, 49, 20], "score": "0.5576", "loss": "1.0966", "code": "public String toString(){r();for (N n : ren) { ult.a(n.toString()); }  }"}
{"time": "2020-12-28 09:52:15.459871", "n_pass": [326, 50, 21], "score": "0.5576", "loss": "1.0966", "code": "public String toString(){r();for(N n : ren) { ult.a(n.toString()); }  }"}
{"time": "2020-12-28 09:52:18.099989", "n_pass": [331, 51, 22], "score": "0.5576", "loss": "1.0966", "code": "public String toString(){r();for(N n: ren) { ult.a(n.toString()); }  }"}
{"time": "2020-12-28 09:52:20.715209", "n_pass": [333, 52, 23], "score": "0.5576", "loss": "1.0966", "code": "public String toString(){r();for(N n:ren) { ult.a(n.toString()); }  }"}
{"time": "2020-12-28 09:52:25.949585", "n_pass": [337, 54, 24], "score": "0.576", "loss": "1.2082", "code": "public String toString(){r();for(N n:ren) {lt.a(n.toString()); }  }"}
{"time": "2020-12-28 09:53:26.603132", "n_pass": [431, 75, 25], "score": "0.576", "loss": "1.2082", "code": "public String toString(){r();for(N n:ren) {lt.a(n.toString());}  }"}
{"time": "2020-12-28 09:53:29.228641", "n_pass": [433, 76, 26], "score": "0.576", "loss": "1.2082", "code": "public String toString(){r();for(N n:ren) {lt.a(n.toString());} }"}
{"time": "2020-12-28 09:53:31.836764", "n_pass": [434, 77, 27], "score": "0.576", "loss": "1.2082", "code": "public String toString(){r();for(N n:ren) {lt.a(n.toString());}}"}
{"time": "2020-12-28 09:54:04.382775", "n_pass": [477, 88, 28], "score": "0.576", "loss": "1.2082", "code": "public String toString(){r();for(N n:ren){lt.a(n.toString());}}"}
{"time": "2020-12-28 09:54:07.003956", "n_pass": [479, 89, 29], "score": "0.6788", "loss": "0.7718", "code": "public String toString(){r();for(N n:ren){t.a(n.toString());}}"}

Minimal simplified code:
public String toString(){r();for(N n:ren){t.a(n.toString());}}

