
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/modules/tomcat-lite/java/org/apache/tomcat/lite/io/jsse/SslChannel_run.java
method_name = run
method_body = public void run() { try { boolean initial = true; SSLEngineResult wrap = null; HandshakeStatus hstatus = sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System.currentTimeMillis() - t0 > handshakeTimeout) { throw new TimeoutException(); } if (wrap != null && wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info("-->doHandshake() loop: status = " + hstatus + " " + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, "Wrap error", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info("UNWRAP: rem=" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe("Unexpected data after unwrap"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info("Read: " + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info("Wait: " + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info("Read after wait: " + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info("Unwrap chunk done " + hstatus + " " + wrap + " " + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info("Tasks done in " + (t1task - t0task) + " new status " + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, "Error handshaking", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, "Error closing", ex); } } }

topk path-contexts:
[0.2081] sslengineresult,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr2),beginhandshake
[0.1813] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),sslengineresult
[0.1627] t,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)^(TryStmt)_(CatchClause)_(Parameter)_(ClassOrInterfaceType1),throwable
[0.0454] t,(VariableDeclaratorId0)^(VariableDeclarator)_(MethodCallExpr1)_(NameExpr2),currenttimemillis
[0.0347] null,(NullLiteralExpr1)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(IfStmt)_(BinaryExpr:and)_(UnaryExpr:not)_(NameExpr0),closehandshake
[0.0288] handshakestatus,(NameExpr0)^(FieldAccessExpr)^(BinaryExpr:notEquals)^(BinaryExpr:and)^(BinaryExpr:and)_(UnaryExpr:not)_(MethodCallExpr0)_(MethodCallExpr0)_(NameExpr0),net
[0.0236] hstatus,(NameExpr0)^(BinaryExpr:notEquals)^(BinaryExpr:and)^(BinaryExpr:and)_(UnaryExpr:not)_(MethodCallExpr0)_(NameExpr2),isappendclosed
[0.0201] null,(NullLiteralExpr1)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),hstatus
[0.0158] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(BooleanLiteralExpr1),true
[0.0150] sslengineresult,(ClassOrInterfaceType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)^(TryStmt)_(CatchClause)_(Parameter)_(VariableDeclaratorId0),t

topk terminals:
['sslengineresult', 'beginhandshake', 'METHOD_NAME', 'sslengineresult', 't', 'throwable', 't', 'currenttimemillis', 'null', 'closehandshake', 'handshakestatus', 'net', 'hstatus', 'isappendclosed', 'null', 'hstatus', 'METHOD_NAME', 'true', 'sslengineresult', 't']

