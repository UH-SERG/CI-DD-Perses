
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/main/java/com/iplanet/services/comm/https/JSSProxy_run.java
method_name = run
method_body = public void run() { Integer remotePort = new Integer(inconnection.getPort()); byte[] prebuffer = new byte[1]; DataInputStream inFrom; try { inFrom = new DataInputStream(inconnection.getInputStream()); inFrom.readFully(prebuffer, 0, 1); } catch (IOException e) { debug.error("JSSProxySessionRunnable: Unable to open input stream on " + inconnection, e); connectHashMap.remove(remotePort); closeSockets(); return; } String info = (String) connectHashMap.remove(remotePort); StringTokenizer st = new StringTokenizer(info); String host = st.nextToken(); int port; try { port = Integer.parseInt(st.nextToken()); } catch (Exception ex) { port = 8080; } try { toProxySocket = new Socket(host, port); toProxySocket.setTcpNoDelay(true); } catch (Exception ex) { toProxySocket = null; if (debug.messageEnabled()) { debug.message("JSSProxySessionRunnable: " + "Unable to connect to " + host + ":" + port + ". ", ex); } } if (toProxySocket == null) { closeSockets(); return; } String desthost = st.nextToken(); String destport = st.nextToken(); OutputStream out = null; InputStream in = null; byte[] reply = new byte[200]; int replyLen = 0; int newlinesSeen = 0; boolean headerDone = false; try { out = toProxySocket.getOutputStream(); String msg = "CONNECT " + desthost + ":" + destport + " HTTP/1.0\n" + "User-Agent: " + sun.net.www.protocol.http.HttpURLConnection.userAgent + "\r\n\r\n"; debug.message(msg); byte[] b; try { b = msg.getBytes("ASCII7"); } catch (UnsupportedEncodingException ignored) { b = msg.getBytes(); } out.write(b); out.flush(); in = toProxySocket.getInputStream(); boolean error = false; while (newlinesSeen < 2) { int i = in.read(); if (i < 0) { debug.error("JSSProxySessionRunnable: " + "Unexpected EOF from proxy"); closeSockets(); return; } if (i == '\n') { headerDone = true; ++newlinesSeen; } else if (i != '\r') { newlinesSeen = 0; if (!headerDone && replyLen < reply.length) { reply[replyLen++] = (byte) i; } } } } catch (IOException ioe) { debug.error("JSSProxySessionRunnable: " + "Unable to get OutputStream", ioe); closeSockets(); return; } String replyStr; try { replyStr = new String(reply, 0, replyLen, "ASCII7"); } catch (UnsupportedEncodingException ignored) { replyStr = new String(reply, 0, replyLen); } if (!replyStr.startsWith("HTTP/1.0 200")) { debug.error("JSSProxySessionRunnable: Unable to tunnel through "); closeSockets(); return; } try { out.write(prebuffer); out.flush(); } catch (IOException ioe) { debug.error("JSSProxySessionRunnable: " + "Unable to write prebuffer.", ioe); closeSockets(); return; } new RWGroupJSSProxy(inconnection, toProxySocket); }

topk path-contexts:
[0.1553] void,(VoidType0)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(CatchClause)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),debug
[0.1308] void,(VoidType0)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(CatchClause)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),debug
[0.0420] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(CastExpr)_(MethodCallExpr1)_(NameExpr3),remove
[0.0406] void,(VoidType0)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(IntegerLiteralExpr4),1
[0.0402] void,(VoidType0)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(CatchClause)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NullLiteralExpr1),null
[0.0377] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(CatchClause)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr4),error
[0.0377] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),host
[0.0343] void,(VoidType0)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr2),flush
[0.0281] void,(VoidType0)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),error
[0.0266] void,(VoidType0)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(ObjectCreationExpr)_(NameExpr1),host

topk terminals:
['void', 'debug', 'void', 'debug', 'METHOD_NAME', 'remove', 'void', '1', 'void', 'null', 'METHOD_NAME', 'error', 'METHOD_NAME', 'host', 'void', 'flush', 'void', 'error', 'void', 'host']

