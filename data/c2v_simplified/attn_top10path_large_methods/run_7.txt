
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/net/ha/JournalClient_run.java
method_name = run
method_body = @Override public void run() { running = true; notifyCallback(JournalClientEvents.EVT_RUNNING); int event = JournalClientEvents.EVT_NONE; boolean connected = false; try { while (true) { if (!connected) { int retryCount = config.getReconnectPolicy().getRetryCount(); int loginRetryCount = config.getReconnectPolicy().getLoginRetryCount(); do { try { closeChannel(); try { openChannel(); counter.incrementAndGet(); } catch (JournalNetworkException e) { if (retryCount-- > 0) { continue; } else { break; } } sendProtocolVersion(); checkAuthAndSendCredential(); resubscribe(); sendReady(); connected = true; notifyCallback(JournalClientEvents.EVT_CONNECTED); } catch (UnauthorizedException e) { notifyCallback(JournalClientEvents.EVT_AUTH_ERROR); loginRetryCount--; } catch (AuthenticationConfigException | AuthenticationProviderException e) { closeChannel(); close0(); notifyCallback(JournalClientEvents.EVT_AUTH_CONFIG_ERROR); return; } catch (JournalNetworkException e) { LOG.info().$(e.getMessage()).$(); closeChannel(); } if (!connected && retryCount-- > 0 && loginRetryCount > 0) { LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(config.getReconnectPolicy().getSleepBetweenRetriesMillis())); LOG.info().$("Retrying reconnect ... [").$(retryCount + 1).$(']').$(); } else { break; } } while (true); if (!connected && (retryCount == 0 || loginRetryCount == 0)) { event = JournalClientEvents.EVT_SERVER_ERROR; } } try { if (connected && channel.isOpen() && isRunning()) { commandConsumer.read(channel); byte cmd = commandConsumer.getCommand(); switch(cmd) { case Command.JOURNAL_DELTA_CMD: statsChannel.setDelegate(channel); int index = intResponseConsumer.getValue(statsChannel); deltaConsumers.getQuick(index).read(statsChannel); statusSentList.set(index, 0); statsChannel.logStats(); break; case Command.SERVER_READY_CMD: sendState(); sendReady(); break; case Command.SERVER_HEARTBEAT: if (processSubscriptionQueue()) { sendReady(); } else { event = JournalClientEvents.EVT_CLIENT_HALT; } break; case Command.SERVER_SHUTDOWN: connected = false; break; default: LOG.info().$("Unknown command: ").$(cmd).$(); break; } } else if (event == JournalClientEvents.EVT_NONE) { event = JournalClientEvents.EVT_CLIENT_HALT; } } catch (IncompatibleJournalException e) { LOG.error().$(e.getMessage()).$(); event = JournalClientEvents.EVT_INCOMPATIBLE_JOURNAL; } catch (JournalNetworkException e) { LOG.error().$("Network error. Server died?").$(); LOG.debug().$("Network error details: ").$(e).$(); notifyCallback(JournalClientEvents.EVT_SERVER_DIED); connected = false; } catch (Throwable e) { LOG.error().$("Unhandled exception in client").$(e).$(); event = JournalClientEvents.EVT_CLIENT_EXCEPTION; } if (event != JournalClientEvents.EVT_NONE) { if (channel != null && channel.isOpen()) { sendDisconnect(); } closeChannel(); close0(); notifyCallback(event); break; } } } catch (Throwable e) { LOG.error().$("Fatal exception when closing client").$(e).$(); closeChannel(); close0(); } finally { running = false; notifyCallback(JournalClientEvents.EVT_TERMINATED); haltLatch.countDown(); LOG.info().$("Terminated").$(); } }

topk path-contexts:
[0.1951] true,(BooleanLiteralExpr0)^(WhileStmt)_(BlockStmt)_(TryStmt)_(CatchClause)_(Parameter)_(VariableDeclaratorId0),e
[0.0509] void,(VoidType1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),running
[0.0509] event,(VariableDeclaratorId0)^(VariableDeclarator)_(FieldAccessExpr1)_(NameExpr2),evtnone
[0.0503] event,(VariableDeclaratorId0)^(VariableDeclarator)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),boolean
[0.0433] journalclientevents,(NameExpr0)^(FieldAccessExpr1)^(MethodCallExpr)_(NameExpr2),notifycallback
[0.0407] true,(BooleanLiteralExpr0)^(WhileStmt)_(BlockStmt)_(IfStmt)_(BlockStmt)_(IfStmt)_(BinaryExpr:and)_(MethodCallExpr1)_(NameExpr0),channel
[0.0357] true,(BooleanLiteralExpr0)^(WhileStmt)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),int
[0.0281] int,(PrimitiveType0)^(VariableDeclarationExpr)^(ExpressionStmt)^(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr2),$
[0.0278] true,(BooleanLiteralExpr0)^(WhileStmt)_(BlockStmt)_(TryStmt)_(CatchClause)_(Parameter)_(ClassOrInterfaceType1),journalnetworkexception
[0.0273] notifycallback,(NameExpr2)^(MethodCallExpr)^(ExpressionStmt)^(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(FieldAccessExpr1)_(NameExpr2),evtnone

topk terminals:
['true', 'e', 'void', 'running', 'event', 'evtnone', 'event', 'boolean', 'journalclientevents', 'notifycallback', 'true', 'channel', 'true', 'int', 'int', '$', 'true', 'journalnetworkexception', 'notifycallback', 'evtnone']

