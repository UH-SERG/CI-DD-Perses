
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/catalina/startup/Tool_main.java
method_name = main
method_body = @SuppressWarnings("null") public static void main(String[] args) { if (catalinaHome == null) { log.error("Must set '" + Globals.CATALINA_HOME_PROP + "' system property"); System.exit(1); } int index = 0; while (true) { if (index == args.length) { usage(); System.exit(1); } if ("-ant".equals(args[index])) ant = true; else if ("-common".equals(args[index])) common = true; else if ("-server".equals(args[index])) server = true; else if ("-shared".equals(args[index])) shared = true; else break; index++; } if (index > args.length) { usage(); System.exit(1); } if (ant) System.setProperty("ant.home", catalinaHome); ClassLoader classLoader = null; try { ArrayList<File> packed = new ArrayList<>(); ArrayList<File> unpacked = new ArrayList<>(); unpacked.add(new File(catalinaHome, "classes")); packed.add(new File(catalinaHome, "lib")); if (common) { unpacked.add(new File(catalinaHome, "common" + File.separator + "classes")); packed.add(new File(catalinaHome, "common" + File.separator + "lib")); } if (server) { unpacked.add(new File(catalinaHome, "server" + File.separator + "classes")); packed.add(new File(catalinaHome, "server" + File.separator + "lib")); } if (shared) { unpacked.add(new File(catalinaHome, "shared" + File.separator + "classes")); packed.add(new File(catalinaHome, "shared" + File.separator + "lib")); } classLoader = ClassLoaderFactory.createClassLoader(unpacked.toArray(new File[0]), packed.toArray(new File[0]), null); } catch (Throwable t) { ExceptionUtils.handleThrowable(t); log.error("Class loader creation threw exception", t); System.exit(1); } Thread.currentThread().setContextClassLoader(classLoader); Class<?> clazz = null; String className = args[index++]; try { if (log.isDebugEnabled()) log.debug("Loading application class " + className); clazz = classLoader.loadClass(className); } catch (Throwable t) { ExceptionUtils.handleThrowable(t); log.error("Exception creating instance of " + className, t); System.exit(1); } Method method = null; String[] params = new String[args.length - index]; System.arraycopy(args, index, params, 0, params.length); try { if (log.isDebugEnabled()) log.debug("Identifying main() method"); String methodName = "main"; Class<?>[] paramTypes = new Class[1]; paramTypes[0] = params.getClass(); method = clazz.getMethod(methodName, paramTypes); } catch (Throwable t) { ExceptionUtils.handleThrowable(t); log.error("Exception locating main() method", t); System.exit(1); } try { if (log.isDebugEnabled()) log.debug("Calling main() method"); Object[] paramValues = new Object[1]; paramValues[0] = params; method.invoke(null, paramValues); } catch (Throwable t) { t = ExceptionUtils.unwrapInvocationTargetException(t); ExceptionUtils.handleThrowable(t); log.error("Exception calling main() method", t); System.exit(1); } }

topk path-contexts:
[0.0989] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(CatchClause)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),system
[0.0750] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:greater)_(FieldAccessExpr1)_(NameExpr0),args
[0.0710] null,(StringLiteralExpr1)^(SingleMemberAnnotationExpr)^(MethodDeclaration)_(VoidType1),void
[0.0540] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(CatchClause)_(Parameter)_(VariableDeclaratorId0),t
[0.0433] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:greater)_(NameExpr0),index
[0.0396] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(CatchClause)_(Parameter)_(ClassOrInterfaceType1),throwable
[0.0315] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType)_(ClassOrInterfaceType0),file
[0.0301] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(CatchClause)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),exceptionutils
[0.0290] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr3),index
[0.0282] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(Parameter)_(ArrayBracketPair2),[]

topk terminals:
['METHOD_NAME', 'system', 'METHOD_NAME', 'args', 'null', 'void', 'METHOD_NAME', 't', 'METHOD_NAME', 'index', 'METHOD_NAME', 'throwable', 'METHOD_NAME', 'file', 'METHOD_NAME', 'exceptionutils', 'METHOD_NAME', 'index', 'METHOD_NAME', '[]']

