
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/pnikosis__materialish-progress/app/src/main/java/com/pnikosis/materialishprogress/sample/MainActivity_onCreate.java
method_name = onCreate
method_body = @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); Button buttonAbout = (Button) findViewById(R.id.button_about); buttonAbout.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { AlertDialog.Builder dialog = new AlertDialog.Builder(MainActivity.this).setTitle(R.string.about).setMessage(R.string.about_text).setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() { @Override public void onClick(DialogInterface dialog, int which) { dialog.dismiss(); } }); dialog.show(); } }); progressWheel = (ProgressWheel) findViewById(R.id.progress_wheel); progressWheelInterpolated = (ProgressWheel) findViewById(R.id.interpolated); progressWheelLinear = (ProgressWheel) findViewById(R.id.linear); interpolatedValue = (TextView) findViewById(R.id.interpolatedValue); linearValue = (TextView) findViewById(R.id.linearValue); Spinner spinnerOptions = (Spinner) findViewById(R.id.spinner_options); spinnerOptions.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { switch(position) { case 0: progressWheelLinear.setProgress(0.0f); progressWheelInterpolated.setProgress(0.0f); progressWheelInterpolated.setCallback(new ProgressWheel.ProgressCallback() { @Override public void onProgressUpdate(float progress) { if (progress == 0) { progressWheelInterpolated.setProgress(1.0f); } else if (progress == 1.0f) { progressWheelInterpolated.setProgress(0.0f); } interpolatedValue.setText(String.format("%.2f", progress)); } }); progressWheelLinear.setCallback(new ProgressWheel.ProgressCallback() { @Override public void onProgressUpdate(float progress) { if (progress == 0) { progressWheelLinear.setProgress(1.0f); } else if (progress == 1.0f) { progressWheelLinear.setProgress(0.0f); } linearValue.setText(String.format("%.2f", progress)); } }); break; case 1: setProgress(0.0f); break; case 2: setProgress(0.1f); break; case 3: setProgress(0.25f); break; case 4: setProgress(0.5f); break; case 5: setProgress(0.75f); break; case 6: setProgress(1.0f); break; } } @Override public void onNothingSelected(AdapterView<?> parent) { } }); final int defaultBarColor = progressWheel.getBarColor(); final int defaultWheelColor = progressWheel.getRimColor(); Spinner colorOptions = (Spinner) findViewById(R.id.spinner_options_color); colorOptions.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { switch(position) { case 0: progressWheel.setBarColor(defaultBarColor); progressWheelInterpolated.setBarColor(defaultBarColor); progressWheelLinear.setBarColor(defaultBarColor); break; case 1: progressWheel.setBarColor(Color.RED); progressWheelInterpolated.setBarColor(Color.RED); progressWheelLinear.setBarColor(Color.RED); break; case 2: progressWheel.setBarColor(Color.MAGENTA); progressWheelInterpolated.setBarColor(Color.MAGENTA); progressWheelLinear.setBarColor(Color.MAGENTA); break; } } @Override public void onNothingSelected(AdapterView<?> parent) { } }); Spinner wheelColorOptions = (Spinner) findViewById(R.id.spinner_options_rim_color); wheelColorOptions.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() { @Override public void onItemSelected(AdapterView<?> parent, View view, int position, long id) { switch(position) { case 0: progressWheel.setRimColor(defaultWheelColor); progressWheelInterpolated.setRimColor(defaultWheelColor); progressWheelLinear.setRimColor(defaultWheelColor); break; case 1: progressWheel.setRimColor(Color.LTGRAY); progressWheelInterpolated.setRimColor(Color.LTGRAY); progressWheelLinear.setRimColor(Color.LTGRAY); break; case 2: progressWheel.setRimColor(Color.GRAY); progressWheelInterpolated.setRimColor(Color.GRAY); progressWheelLinear.setRimColor(Color.GRAY); break; } } @Override public void onNothingSelected(AdapterView<?> parent) { } }); }

topk path-contexts:
[0.5425] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr3),setonitemselectedlistener
[0.2233] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(MethodCallExpr1)_(NameExpr2),getrimcolor
[0.0441] savedinstancestate,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(ObjectCreationExpr)_(MethodDeclaration)_(VoidType1),void
[0.0395] savedinstancestate,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(ObjectCreationExpr)_(MethodDeclaration)_(VoidType1),void
[0.0135] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),buttonabout
[0.0129] savedinstancestate,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),int
[0.0114] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(CastExpr)_(MethodCallExpr1)_(NameExpr2),findviewbyid
[0.0110] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(ObjectCreationExpr)_(MethodDeclaration)_(Parameter)_(VariableDeclaratorId0),position
[0.0094] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(ObjectCreationExpr)_(MethodDeclaration)_(Parameter)_(ClassOrInterfaceType1),view
[0.0067] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(ObjectCreationExpr)_(MethodDeclaration)_(VoidType1),void

topk terminals:
['METHOD_NAME', 'setonitemselectedlistener', 'METHOD_NAME', 'getrimcolor', 'savedinstancestate', 'void', 'savedinstancestate', 'void', 'METHOD_NAME', 'buttonabout', 'savedinstancestate', 'int', 'METHOD_NAME', 'findviewbyid', 'METHOD_NAME', 'position', 'METHOD_NAME', 'view', 'METHOD_NAME', 'void']

