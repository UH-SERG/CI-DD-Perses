
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/qpython-android__qpython/qpysdk/src/main/java/org/renpy/android/PythonActivity_onCreate.java
method_name = onCreate
method_body = @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Hardware.context = this; Action.context = this; mActivity = this; getWindowManager().getDefaultDisplay().getMetrics(Hardware.metrics); resourceManager = new ResourceManager(this); String debugFlag = getIntent().getStringExtra(EXTRA_CONTENT_URL5); if (debugFlag != null) { if (debugFlag.equals("0")) { debugLog = false; } } String root = getIntent().getStringExtra(EXTRA_CONTENT_URL4); if (root != null) { File n = new File(root); if (n.exists()) { externalStorage = n; } else { externalStorage = new File(Environment.getExternalStorageDirectory(), root); } } else { externalStorage = new File(Environment.getExternalStorageDirectory(), "qpython"); } Log.d(TAG, "externalStorage:" + externalStorage); mScript = null; String act = getIntent().getStringExtra(EXTRA_CONTENT_URL1); boolean fullscreen = false; if (act != null && act.equals("execute")) { mPath = new File(getIntent().getStringExtra(EXTRA_CONTENT_URL2)); File f = new File(mPath, "main.py"); if (f.exists()) { if (FileHelper.getFileContents(f.toString()).contains("#qpy:fullscreen")) { fullscreen = true; } } Project p = Project.scanDirectory(mPath); if (p != null) { if (p.landscape) { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); } else { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); } if (p.fullscreen) { fullscreen = true; } } } else { String fn = getIntent().getStringExtra(EXTRA_CONTENT_URL2); if (fn == null) { isMain = true; fn = "/sdcard/qpython/launcher.py"; } mScript = new File(fn); if (!mScript.exists()) { String file1 = FileHelper.LoadDataFromAssets(this, "main.py"); FileHelper.writeToFile(fn, file1); } mPath = mScript.getParentFile(); if (FileHelper.getFileContents(mScript.toString()).contains("#qpy:fullscreen")) { fullscreen = true; } } if (fullscreen) { getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); } try { FileWriter f = new FileWriter(new File(mPath, ".launch")); f.write("started"); f.close(); } catch (IOException e) { } updateNotification(mPath.toString()); requestWindowFeature(Window.FEATURE_NO_TITLE); String full = getIntent().getStringExtra(EXTRA_CONTENT_URL3); File logFile = new File(mPath, ".run.log"); if (logFile.exists()) { logFile.delete(); } String s = ""; if (mScript != null) { s = mScript.getName(); } else { File f = new File(mPath, "main.py"); if (f.exists()) { s = "main.py"; } else { f = new File(mPath, "main.pyo"); if (f.exists()) { s = "main.pyo"; } } } Log.d(TAG, "[RUN param:" + externalStorage.getAbsolutePath().toString() + "-" + mPath.getAbsolutePath().toString() + "-" + s + "]"); mView = new SDLSurfaceView(this, mPath.getAbsolutePath().toString(), s, externalStorage.getAbsolutePath().toString()); IntentFilter filter = new IntentFilter(".PythonActivity"); registerReceiver(mReceiver, filter); startPyScreen(); }

topk path-contexts:
[0.4015] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(IfStmt)_(BinaryExpr:equals)_(NullLiteralExpr1),null
[0.2536] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),logfile
[0.0344] savedinstancestate,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(NameExpr0),debugflag
[0.0314] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:and)_(BinaryExpr:notEquals)_(NameExpr0),act
[0.0253] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(BooleanLiteralExpr1),false
[0.0160] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr2),savedinstancestate
[0.0154] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(MethodCallExpr1)_(NameExpr2),extracontenturl
[0.0150] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(NameExpr0),debugflag
[0.0142] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),root
[0.0140] METHOD_NAME,(NameExpr2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(NameExpr0),mactivity

topk terminals:
['METHOD_NAME', 'null', 'METHOD_NAME', 'logfile', 'savedinstancestate', 'debugflag', 'METHOD_NAME', 'act', 'METHOD_NAME', 'false', 'METHOD_NAME', 'savedinstancestate', 'METHOD_NAME', 'extracontenturl', 'METHOD_NAME', 'debugflag', 'METHOD_NAME', 'root', 'METHOD_NAME', 'mactivity']

