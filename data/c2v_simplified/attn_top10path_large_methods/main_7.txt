
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/main/java/com/sun/identity/monitoring/Agent_main.java
method_name = main
method_body = public static void main(String[] args) { final MBeanServer server; final ObjectName htmlObjName; final ObjectName snmpObjName; final ObjectName sunMibObjName; final ObjectName forgerockCtsMibObjName; final ObjectName forgerockPolicyMibObjName; final ObjectName forgerockSessionMibObjName; final ObjectName trapGeneratorObjName; int htmlPort = 8082; int snmpPort = 11161; if ((args.length != 0) && (args.length != 1)) { usage(); java.lang.System.exit(1); } else if (args.length == 1) { try { nbTraps = (new Integer(args[0])).intValue(); if (nbTraps < 0) { usage(); System.exit(1); } } catch (java.lang.NumberFormatException e) { usage(); System.exit(1); } } try { List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null); if ((servers != null) && !servers.isEmpty()) { server = servers.get(0); } else { server = MBeanServerFactory.createMBeanServer(); } String domain = server.getDefaultDomain(); htmlObjName = new ObjectName(domain + ":class=HtmlAdaptorServer,protocol=html,port=" + htmlPort); println("Adding HTML adaptor to MBean server with name \n " + htmlObjName); println("NOTE: HTML adaptor is bound on TCP port " + htmlPort); HtmlAdaptorServer htmlAdaptor = new HtmlAdaptorServer(htmlPort); server.registerMBean(htmlAdaptor, htmlObjName); htmlAdaptor.start(); snmpPort = 11161; snmpObjName = new ObjectName(domain + ":class=SnmpAdaptorServer,protocol=snmp,port=" + snmpPort); println("Adding SNMP adaptor to MBean server with name \n " + snmpObjName); println("NOTE: SNMP Adaptor is bound on UDP port " + snmpPort); snmpAdaptor = new SnmpAdaptorServer(snmpPort); server.registerMBean(snmpAdaptor, snmpObjName); snmpAdaptor.start(); print("NOTE: Sending a coldStart SNMP trap" + " to each destination defined in the ACL file..."); snmpAdaptor.setTrapPort(new Integer(snmpPort + 1)); snmpAdaptor.snmpV1Trap(0, 0, null); println("Done."); try { JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:9999/server"); JMXConnectorServer cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, server); cs.start(); } catch (Exception ex) { println("Error starting RMI : execute rmiregistry 9999; ex=" + ex); } sunMibObjName = new ObjectName("snmp:class=SUN_OPENSSO_SERVER_MIB"); println("Adding SUN_OPENSSO_SERVER_MIB-MIB to MBean server with name" + "\n " + sunMibObjName); SUN_OPENSSO_SERVER_MIB mib2 = new SUN_OPENSSO_SERVER_MIB(); server.registerMBean(mib2, sunMibObjName); forgerockCtsMibObjName = new ObjectName("snmp:class=FORGEROCK_OPENAM_CTS_MIB"); println("Adding FORGEROCK_OPENAM_CTS_MIB-MIB to MBean server with name" + "\n " + forgerockCtsMibObjName); forgerockPolicyMibObjName = new ObjectName("snmp:class=FORGEROCK_OPENAM_POLICY_MIB"); println("Adding FORGEROCK_OPENAM_POLICY_MIB-MIB to MBean server with name" + "\n " + forgerockPolicyMibObjName); forgerockSessionMibObjName = new ObjectName("snmp:class=FORGEROCK_OPENAM_SESSION_MIB"); println("Adding FORGEROCK_OPENAM_SESSION_MIB-MIB to MBean server with name" + "\n " + forgerockSessionMibObjName); FORGEROCK_OPENAM_CTS_MIB mib3 = new FORGEROCK_OPENAM_CTS_MIB(); server.registerMBean(mib3, forgerockCtsMibObjName); FORGEROCK_OPENAM_POLICY_MIB mib4 = new FORGEROCK_OPENAM_POLICY_MIB(); server.registerMBean(mib4, forgerockPolicyMibObjName); FORGEROCK_OPENAM_SESSION_MIB mib5 = new FORGEROCK_OPENAM_SESSION_MIB(); server.registerMBean(mib5, forgerockSessionMibObjName); mib2.setSnmpAdaptor(snmpAdaptor); int ifIndex = 1; trapGeneratorObjName = new ObjectName("trapGenerator" + ":class=LinkTrapGenerator,ifIndex=" + ifIndex); println("Adding LinkTrapGenerator to MBean server with name" + "\n " + trapGeneratorObjName); LinkTrapGenerator trapGenerator = new LinkTrapGenerator(nbTraps); server.registerMBean(trapGenerator, trapGeneratorObjName); println("\n>> Press <Enter> if you want to start sending traps."); println(" -or-"); println(">> Press <Ctrl-C> if you want to stop this agent."); System.in.read(); trapGenerator.start(); } catch (Exception e) { e.printStackTrace(); } }

topk path-contexts:
[0.1563] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr2),snmpadaptor
[0.1303] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr2),snmpadaptor
[0.1299] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr2),println
[0.1184] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(ObjectCreationExpr)_(StringLiteralExpr1),snmpclasssunopenssoservermib
[0.0477] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr3),sunmibobjname
[0.0398] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),htmladaptor
[0.0398] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(ObjectCreationExpr)_(StringLiteralExpr1),snmpclassforgerockopenampolicymib
[0.0193] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),forgerockopenamsessionmib
[0.0193] args,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),sunmibobjname
[0.0182] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(BinaryExpr:plus)_(StringLiteralExpr0),addingsnmpadaptortombeanserverwithname

topk terminals:
['METHOD_NAME', 'snmpadaptor', 'METHOD_NAME', 'snmpadaptor', 'METHOD_NAME', 'println', 'METHOD_NAME', 'snmpclasssunopenssoservermib', 'METHOD_NAME', 'sunmibobjname', 'METHOD_NAME', 'htmladaptor', 'METHOD_NAME', 'snmpclassforgerockopenampolicymib', 'METHOD_NAME', 'forgerockopenamsessionmib', 'args', 'sunmibobjname', 'METHOD_NAME', 'addingsnmpadaptortombeanserverwithname']

