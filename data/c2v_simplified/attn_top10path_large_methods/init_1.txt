
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/soarcn__BottomSheet/library/src/main/java/com/cocosw/bottomsheet/BottomSheet_init.java
method_name = init
method_body = private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else { icon.setVisibility(View.VISIBLE); icon.setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0); } final TextView title = (TextView) mDialogView.findViewById(R.id.bottom_sheet_title); if (builder.title != null) { title.setVisibility(View.VISIBLE); title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(R.id.bottom_sheet_title_image); list = (GridView) mDialogView.findViewById(R.id.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException("You must set icon for each items in grid style"); } } if (builder.limit > 0) limit = builder.limit * getNumColumns(); else limit = Integer.MAX_VALUE; mDialogView.setCollapsible(false); actions = builder.menu; menuItem = actions; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE); if (builder.grid) convertView = inflater.inflate(mGridItemLayoutId, parent, false); else convertView = inflater.inflate(mListItemLayoutId, parent, false); holder = new ViewHolder(); holder.title = (TextView) convertView.findViewById(R.id.bs_list_title); holder.image = (ImageView) convertView.findViewById(R.id.bs_list_image); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener != null) builder.menulistener.onMenuItemClick((MenuItem) adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }

topk path-contexts:
[0.1864] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:greaterEquals)_(FieldAccessExpr1)_(FieldAccessExpr0)_(NameExpr2),versioncodes
[0.1166] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(ObjectCreationExpr)_(MethodDeclaration)_(ClassOrInterfaceType1),view
[0.0917] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(MethodCallExpr0)_(NameExpr0),mdialogview
[0.0487] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr3),setadapter
[0.0338] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr3),add
[0.0332] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(ObjectCreationExpr)_(MethodDeclaration)_(VoidType1),void
[0.0324] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr3),seticon
[0.0204] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),mdialogview
[0.0198] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(FieldAccessExpr0)_(NameExpr2),grid
[0.0192] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(ObjectCreationExpr)_(MethodDeclaration)_(ClassOrInterfaceType1),menuitem

topk terminals:
['METHOD_NAME', 'versioncodes', 'METHOD_NAME', 'view', 'METHOD_NAME', 'mdialogview', 'METHOD_NAME', 'setadapter', 'METHOD_NAME', 'add', 'METHOD_NAME', 'void', 'METHOD_NAME', 'seticon', 'METHOD_NAME', 'mdialogview', 'METHOD_NAME', 'grid', 'METHOD_NAME', 'menuitem']

