
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/catalina/servlets/CGIServlet_run.java
method_name = run
method_body = protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + ": not ready to run."); } if (debug >= 1) { log("runCGI(envp=[" + env + "], command=" + command + ")"); } if ((command.indexOf(File.separator + "." + File.separator) >= 0) || (command.indexOf(File.separator + "..") >= 0) || (command.indexOf(".." + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + "Illegal Character in CGI command " + "path ('.' or '..') detected. Not " + "running CGI [" + command + "]."); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; BufferedOutputStream commandsStdIn = null; Process proc = null; int bufRead = -1; List<String> cmdAndArgs = new ArrayList<>(); if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get("CONTENT_LENGTH"); if (!"".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !("".equals(line))) { if (debug >= 2) { log("runCGI: addHeader(\"" + line + "\")"); } if (line.startsWith("HTTP")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(":") >= 0) { String header = line.substring(0, line.indexOf(":")).trim(); String value = line.substring(line.indexOf(":") + 1).trim(); if (header.equalsIgnoreCase("status")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log("runCGI: bad header line \"" + line + "\""); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log("runCGI: output " + bufRead + " bytes of data"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log("Caught exception " + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log("Exception closing header reader " + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) { log("Exception closing output stream " + ioe); } } if (errReaderThread != null) { try { errReaderThread.join(stderrTimeout); } catch (InterruptedException e) { log("Interupted waiting for stderr reader thread"); } } if (debug > 4) { log("Running finally block"); } if (proc != null) { proc.destroy(); proc = null; } } }

topk path-contexts:
[0.3281] ioexception,(ClassOrInterfaceType2)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(UnaryExpr:not)_(MethodCallExpr0)_(NameExpr1),isready
[0.1462] ioexception,(ClassOrInterfaceType2)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(IfStmt)_(UnaryExpr:not)_(MethodCallExpr0)_(StringLiteralExpr0),BLANK
[0.1406] ioexception,(ClassOrInterfaceType2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),runtime
[0.0792] ioexception,(ClassOrInterfaceType2)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(IntegerLiteralExpr1),0
[0.0382] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),inputstream
[0.0328] ioexception,(ClassOrInterfaceType2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),cmdandargs
[0.0301] ioexception,(ClassOrInterfaceType2)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:notEquals)_(NullLiteralExpr1),null
[0.0176] ioexception,(ClassOrInterfaceType2)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType)_(ClassOrInterfaceType0),string
[0.0138] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),bufferedreader
[0.0124] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(CatchClause)_(BlockStmt)_(ThrowStmt)_(NameExpr0),e

topk terminals:
['ioexception', 'isready', 'ioexception', 'BLANK', 'ioexception', 'runtime', 'ioexception', '0', 'METHOD_NAME', 'inputstream', 'ioexception', 'cmdandargs', 'ioexception', 'null', 'ioexception', 'string', 'METHOD_NAME', 'bufferedreader', 'METHOD_NAME', 'e']

