
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/yahoo__FEL/src/main/java/com/yahoo/semsearch/fastlinking/hash/QuasiSuccinctEntityHash_main.java
method_name = main
method_body = public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), "Creates a MPHF from a file with the candidates info", new Parameter[] { new FlaggedOption("input", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', "input", "Input " + "file"), new FlaggedOption("entity2id", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'e', "entities", "TAB-separated entity names and corresponding ids"), new FlaggedOption("wikiThreshold", JSAP.INTEGER_PARSER, "0", JSAP.NOT_REQUIRED, 'w', "wikiThreshold", "Minimum number of anchors to store a candidate"), new FlaggedOption("queryThreshold", JSAP.INTEGER_PARSER, "0", JSAP.NOT_REQUIRED, 'q', "queryThreshold", "Minimum number of clicks to store a candidate"), new FlaggedOption("output", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', "output", "Compressed version") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString("input"), jsapResult.getInt("queryThreshold"), jsapResult.getInt("wikiThreshold")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString("entity2id"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split("\t"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC.close(); final BufferedReader lines = new BufferedReader(new FileReader(jsapResult.getString("entity2id"))); ObjectArrayList<String> entityNames = new ObjectArrayList<>(maxIndex); LOGGER.info("Storing entity names"); while ((line = lines.readLine()) != null) { String[] parts = line.split("\t"); try { final int index = Integer.parseInt(parts[1]); if (index >= entityNames.size()) entityNames.size(index + 1); final String oldValue = entityNames.set(index, parts[0]); if (oldValue != null) LOGGER.warn("Duplicate index " + index + " for names \"" + parts[0] + "\" and \"" + oldValue + "\""); } catch (NumberFormatException e) { LOGGER.error("Wrong line (skipping) --> " + line); } } LOGGER.info("done"); lines.close(); for (int i = 0; i < entityNames.size(); i++) if (entityNames.get(i) == null) { entityNames.set(i, ""); } HashMap<Integer, DataOutputStream> valuesArray = new HashMap<Integer, DataOutputStream>(); HashMap<Integer, LongArrayList> pointersArray = new HashMap<Integer, LongArrayList>(); HashMap<Integer, File> tempFiles = new HashMap<Integer, File>(); LongArrayList cutPoints = new LongArrayList(); File tempFile = File.createTempFile("values", "tempfile"); tempFile.deleteOnExit(); int batchNumber = 0; tempFiles.put(batchNumber, tempFile); DataOutputStream values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); long valuesSize = 0; final IntBigArrayBigList entityValues = new IntBigArrayBigList(); entityValues.size(entityNames.size() * PER_ENTITY_FEATURES); ProgressLogger pl = new ProgressLogger(LOGGER); pl.itemsName = "aliases"; int numberOfCandidates = 0; for (StringAndCandidate sc : stringAndCandidates) { pl.lightUpdate(); if (numberOfCandidates++ > ALIASESPERBATCH - 1) { numberOfCandidates = 1; batchNumber++; tempFile = File.createTempFile("values", "tempfile"); tempFile.deleteOnExit(); values.close(); values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints = new LongArrayList(); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); tempFiles.put(batchNumber, tempFile); valuesSize = 0; } CandidatesInfo ci = sc.candidatesInfo; values.writeInt((int) ci.QAF); values.writeInt((int) ci.QAT); values.writeInt((int) ci.QAC); values.writeInt((int) ci.LAF); values.writeInt((int) ci.LAT); valuesSize += PER_CANDIDATE_FEATURES; for (Entity e : ci.entities) { values.writeInt(e.id); values.writeInt((int) e.LAET); values.writeInt((int) e.QAEF); valuesSize += PER_ENTITY_CANDIDATE_FEATURES; entityValues.set(e.id * PER_ENTITY_FEATURES, (int) e.QEF); entityValues.set(e.id * PER_ENTITY_FEATURES + 1, (int) e.LET); entityValues.set(e.id * PER_ENTITY_FEATURES + 2, e.type); } cutPoints.add(valuesSize); } values.close(); pl.done(); Iterable<CharSequence> surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); } LOGGER.info("#Batches= " + tempFiles.size()); QuasiSuccinctEntityHash quasiSuccinctEntityHash = new QuasiSuccinctEntityHash(surfaceForm2Position, cutPointsArray, valuesA, new EliasFanoLongBigList(entityValues), new FrontCodedStringList(entityNames, 8, true)); LOGGER.info("Creating stats"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString("output")); LOGGER.info("... done"); assert checkMap(jsapResult, stringAndCandidates); }

topk path-contexts:
[0.0881] args,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(WhileStmt)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(ArrayBracketPair2),[]
[0.0602] args,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ForStmt)_(IfStmt)_(BinaryExpr:equals)_(MethodCallExpr0)_(NameExpr0),entitynames
[0.0545] args,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(ArrayCreationExpr)_(ClassOrInterfaceType1),eliasfanolongbiglist
[0.0494] args,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ForeachStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),values
[0.0416] args,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr3),add
[0.0415] args,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr2),batchnumber
[0.0415] args,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(VariableDeclaratorId0),quasisuccinctentityhash
[0.0402] args,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(MethodCallExpr0)_(NameExpr2),messageprinted
[0.0380] args,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(MethodCallExpr1)_(NameExpr5),stringandcandidates
[0.0380] args,(VariableDeclaratorId0)^(Parameter)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(ObjectCreationExpr)_(ClassOrInterfaceType0),objectarraylist

topk terminals:
['args', '[]', 'args', 'entitynames', 'args', 'eliasfanolongbiglist', 'args', 'values', 'args', 'add', 'args', 'batchnumber', 'args', 'quasisuccinctentityhash', 'args', 'messageprinted', 'args', 'stringandcandidates', 'args', 'objectarraylist']

