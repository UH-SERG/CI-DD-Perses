
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/wso2-attic__product-emm/modules/tools/emm-qsg/src/main/java/org/wso2/mdm/qsg/QSGExecutor_main.java
method_name = main
method_body = public static void main(String[] args) { boolean status = false; Scanner scanner = new Scanner(System.in); System.out.print("Enter your email address and press enter : "); String email = scanner.next(); if (!QSGUtils.isValidEmailAddress(email)) { do { System.out.print("Please enter a valid email address and press enter : "); email = scanner.next(); } while (!QSGUtils.isValidEmailAddress(email)); } String token = QSGUtils.getOAuthToken(); if (token == null) { System.out.println("Unable to get the OAuth token. Please check the config.properties file."); System.exit(0); } HTTPInvoker.oAuthToken = token; status = UserOperations.createUser("tom", "tom@mobx.com", true); if (!status) { System.out.println("Unable to create the admin user. Please check the config.properties file."); System.exit(0); } status = UserOperations.changePassword("tom", "tomemm"); if (!status) { System.out.println("Unable to change the password of the admin user. Terminating the EMM QSG now."); System.exit(0); } status = UserOperations.createUser("kim", email, false); if (!status) { System.out.println("Unable to create the emm user Kim. Terminating the EMM QSG now."); System.exit(0); } status = UserOperations.changePassword("kim", "kimemm"); if (!status) { System.out.println("Unable to change the password of the emm user. Terminating the EMM QSG now."); System.exit(0); } status = UserOperations.createRole(Constants.EMM_USER_ROLE, new String[] { "kim" }); if (!status) { System.out.println("Unable to create the emm user role. Terminating the EMM QSG now."); System.exit(0); } status = PolicyOperations.createPasscodePolicy("android-passcode-policy1", Constants.DeviceType.ANDROID); if (!status) { System.out.println("Unable to create the android passcode policy. Terminating the EMM QSG now."); System.exit(0); } status = PolicyOperations.createPasscodePolicy("windows-passcode-policy1", Constants.DeviceType.WINDOWS); if (!status) { System.out.println("Unable to create the windows passcode policy. Terminating the EMM QSG now."); System.exit(0); } status = PolicyOperations.createPasscodePolicy("ios-passcode-policy1", Constants.DeviceType.IOS); if (!status) { System.out.println("Unable to create the ios passcode policy. Terminating the EMM QSG now."); System.exit(0); } MobileApplication application = AppOperations.uploadApplication(Constants.DeviceType.ANDROID, "catalog.apk", "application/vnd.android.package-archive"); if (application == null) { System.out.println("Unable to upload the sample android application. Terminating the EMM QSG now."); System.exit(0); } application = AppOperations.uploadAssets(Constants.DeviceType.ANDROID, application); if (application == null) { System.out.println("Unable to upload the assets for sample android application. Terminating the EMM QSG now."); System.exit(0); } status = AppOperations.addApplication("Catalog", application, true); if (!status) { System.out.println("Unable to create the mobile application. Terminating the EMM QSG now."); System.exit(0); } MobileApplication iOSApplication = AppOperations.uploadApplication(Constants.DeviceType.IOS, "PNDemo.ipa", "application/octet-stream"); iOSApplication.setVersion("1.0.0"); iOSApplication = AppOperations.uploadAssets(Constants.DeviceType.IOS, iOSApplication); if (iOSApplication == null) { System.out.println("Unable to upload the assets for sample iOS application. Terminating the EMM QSG now."); System.exit(0); } status = AppOperations.addApplication("WSO2Con", iOSApplication, true); if (!status) { System.out.println("Unable to create the mobile application. Terminating the EMM QSG now."); System.exit(0); } }

topk path-contexts:
[0.0946] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(FieldAccessExpr0)_(NameExpr0),system
[0.0806] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(ClassOrInterfaceType0),string
[0.0781] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr3),exit
[0.0662] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(FieldAccessExpr0)_(NameExpr0),system
[0.0552] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(IntegerLiteralExpr2),0
[0.0366] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr3),println
[0.0336] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(ArrayCreationExpr)_(ArrayCreationLevel0),[]
[0.0323] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BinaryExpr:equals)_(NameExpr0),token
[0.0300] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(IfStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),system
[0.0227] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),boolean

topk terminals:
['METHOD_NAME', 'system', 'METHOD_NAME', 'string', 'METHOD_NAME', 'exit', 'METHOD_NAME', 'system', 'METHOD_NAME', '0', 'METHOD_NAME', 'println', 'METHOD_NAME', '[]', 'METHOD_NAME', 'token', 'METHOD_NAME', 'system', 'METHOD_NAME', 'boolean']

