
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/javaee__javamail/mail/src/oldtest/java/javax/mail/internet/messagecachetest_main.java
method_name = main
method_body = public static void main(String[] argv) { int nummsg = 256; int optind; for (optind = 0; optind < argv.length; optind++) { if (argv[optind].equals("-T")) { protocol = argv[++optind]; } else if (argv[optind].equals("-H")) { host = argv[++optind]; } else if (argv[optind].equals("-U")) { user = argv[++optind]; } else if (argv[optind].equals("-P")) { password = argv[++optind]; } else if (argv[optind].equals("-v")) { verbose = true; } else if (argv[optind].equals("-D")) { debug = true; } else if (argv[optind].equals("-f")) { mbox = argv[++optind]; } else if (argv[optind].equals("-L")) { url = argv[++optind]; } else if (argv[optind].equals("-p")) { port = Integer.parseInt(argv[++optind]); } else if (argv[optind].equals("--")) { optind++; break; } else if (argv[optind].startsWith("-")) { System.out.println("Usage: messagecachetest [-L url] [-T protocol] [-H host] [-p port] [-U user]"); System.out.println("\t[-P password] [-f mailbox] [msgnum] [-v] [-D]"); System.exit(1); } else { break; } } try { if (optind < argv.length) nummsg = Integer.parseInt(argv[optind]); Properties props = System.getProperties(); session = Session.getInstance(props, null); session.setDebug(debug); Store store = null; if (url != null) { URLName urln = new URLName(url); store = session.getStore(urln); store.connect(); } else { if (protocol != null) store = session.getStore(protocol); else store = session.getStore(); if (host != null || user != null || password != null) store.connect(host, port, user, password); else store.connect(); } Folder folder = store.getDefaultFolder(); if (folder == null) { System.out.println("No default folder"); System.exit(1); } if (mbox == null) mbox = "messagecachetest"; folder = folder.getFolder(mbox); if (folder == null) { System.out.println("Invalid folder"); System.exit(1); } Message[] msgs = createMessages(nummsg); if (folder.exists()) folder.delete(false); folder.create(Folder.HOLDS_MESSAGES); folder.open(Folder.READ_WRITE); if (verbose) System.out.println("fill folder"); folder.appendMessages(msgs); folder.close(false); folder.open(Folder.READ_WRITE); if (verbose) System.out.println("test message number"); testMessageNumber(folder); folder.close(false); folder.open(Folder.READ_WRITE); if (verbose) System.out.println("test expunge forward"); testExpungeForward(folder); folder.close(false); folder.open(Folder.READ_WRITE); folder.appendMessages(msgs); folder.close(false); folder.open(Folder.READ_WRITE); if (verbose) System.out.println("test expunge reverse"); testExpungeReverse(folder); folder.close(false); folder.open(Folder.READ_WRITE); folder.appendMessages(msgs); folder.close(false); folder.open(Folder.READ_WRITE); if (verbose) System.out.println("test expunge random"); testExpungeRandom(folder); folder.close(false); folder.open(Folder.READ_WRITE); folder.appendMessages(msgs); folder.close(false); folder.open(Folder.READ_WRITE); if (verbose) System.out.println("test expunge other"); testExpungeOther(folder); folder.close(false); store.close(); } catch (Exception ex) { System.out.println("Oops, got exception! " + ex.getMessage()); ex.printStackTrace(); System.exit(1); } System.exit(0); }

topk path-contexts:
[0.2174] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(NameExpr2),props
[0.1418] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(VariableDeclarator)_(NullLiteralExpr1),null
[0.0885] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),folder
[0.0775] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr3),open
[0.0477] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr0),folder
[0.0364] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(AssignExpr:assign0)_(MethodCallExpr1)_(NameExpr0),session
[0.0359] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(FieldAccessExpr2)_(NameExpr0),folder
[0.0230] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(NameExpr2),testexpungereverse
[0.0191] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(ExpressionStmt)_(VariableDeclarationExpr)_(PrimitiveType0),int
[0.0162] METHOD_NAME,(NameExpr1)^(MethodDeclaration)_(BlockStmt)_(TryStmt)_(BlockStmt)_(ExpressionStmt)_(MethodCallExpr0)_(FieldAccessExpr2)_(NameExpr2),readwrite

topk terminals:
['METHOD_NAME', 'props', 'METHOD_NAME', 'null', 'METHOD_NAME', 'folder', 'METHOD_NAME', 'open', 'METHOD_NAME', 'folder', 'METHOD_NAME', 'session', 'METHOD_NAME', 'folder', 'METHOD_NAME', 'testexpungereverse', 'METHOD_NAME', 'int', 'METHOD_NAME', 'readwrite']

