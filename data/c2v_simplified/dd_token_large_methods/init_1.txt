
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/soarcn__BottomSheet/library/src/main/java/com/cocosw/bottomsheet/BottomSheet_init.java
method_name = init
method_body = private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else { icon.setVisibility(View.VISIBLE); icon.setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0); } final TextView title = (TextView) mDialogView.findViewById(R.id.bottom_sheet_title); if (builder.title != null) { title.setVisibility(View.VISIBLE); title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(R.id.bottom_sheet_title_image); list = (GridView) mDialogView.findViewById(R.id.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException("You must set icon for each items in grid style"); } } if (builder.limit > 0) limit = builder.limit * getNumColumns(); else limit = Integer.MAX_VALUE; mDialogView.setCollapsible(false); actions = builder.menu; menuItem = actions; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE); if (builder.grid) convertView = inflater.inflate(mGridItemLayoutId, parent, false); else convertView = inflater.inflate(mListItemLayoutId, parent, false); holder = new ViewHolder(); holder.title = (TextView) convertView.findViewById(R.id.bs_list_title); holder.image = (ImageView) convertView.findViewById(R.id.bs_list_image); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener != null) builder.menulistener.onMenuItemClick((MenuItem) adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }
predict, score, loss = init, 0.4442545473575592, 1.1846060752868652

Trace of simplified code(s):
{"time": "2021-01-20 17:04:14.395891", "n_pass": [1, 1, 1], "score": "0.359", "loss": "2.438", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else { icon.setVisibility(View.VISIBLE); icon.setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0); } final TextView title = (TextView) mDialogView.findViewById(R.id.bottom_sheet_title); if (builder.title != null) { title.setVisibility(View.VISIBLE); title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(R.id.bottom_sheet_title_image); list = (GridView) mDialogView.findViewById(R.id.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit * getNumColumns(); else limit = Integer.MAX_VALUE; mDialogView.setCollapsible(false); actions = builder.menu; menuItem = actions; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE); if (builder.grid) convertView = inflater.inflate(mGridItemLayoutId, parent, false); else convertView = inflater.inflate(mListItemLayoutId, parent, false); holder = new ViewHolder(); holder.title = (TextView) convertView.findViewById(R.id.bs_list_title); holder.image = (ImageView) convertView.findViewById(R.id.bs_list_image); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener != null) builder.menulistener.onMenuItemClick((MenuItem) adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:04:20.951485", "n_pass": [54, 3, 2], "score": "0.5942", "loss": "1.8821", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else { icon.setVisibility(View.VISIBLE); icon.setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0); } final TextView title = (TextView) mDialogView.findViewById(R.id.bottom_sheet_title); if (builder.title != null) { title.setVisibility(View.VISIBLE); title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(R.id.bottom_sheet_title_image); list = (GridView) mDialogView.findViewById(R.id.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit * getNumColumns(); else limit = Integer.MAX_VALUE; mDialogView.setCollapsible(false); actions = builder.menu; menuItem = actions; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener != null) builder.menulistener.onMenuItemClick((MenuItem) adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:04:27.587593", "n_pass": [117, 5, 3], "score": "0.6059", "loss": "0.9997", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else { icon.setVisibility(View.VISIBLE); icon.setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(R.id.bottom_sheet_title_image); list = (GridView) mDialogView.findViewById(R.id.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit * getNumColumns(); else limit = Integer.MAX_VALUE; mDialogView.setCollapsible(false); actions = builder.menu; menuItem = actions; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener != null) builder.menulistener.onMenuItemClick((MenuItem) adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:04:34.217749", "n_pass": [206, 7, 4], "score": "0.5195", "loss": "1.0312", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else { icon.setVisibility(View.VISIBLE); icon.setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit * getNumColumns(); else limit = Integer.MAX_VALUE; mDialogView.setCollapsible(false); actions = builder.menu; menuItem = actions; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener != null) builder.menulistener.onMenuItemClick((MenuItem) adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:04:54.957296", "n_pass": [390, 13, 5], "score": "0.3463", "loss": "3.6865", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else { icon.setVisibility(View.VISIBLE); icon.setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit .MAX_VALUE; mDialogView.setCollapsible(false); actions = builder.menu; menuItem = actions; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener != null) builder.menulistener.onMenuItemClick((MenuItem) adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:04:58.067167", "n_pass": [392, 14, 6], "score": "0.7538", "loss": "1.1786", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else { icon.setVisibility(View.VISIBLE); icon.setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit .MAX_VALUE; mDialogView.setCollapsible(false); ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener != null) builder.menulistener.onMenuItemClick((MenuItem) adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:05:14.279435", "n_pass": [449, 19, 7], "score": "0.5796", "loss": "2.1881", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else { icon.setVisibility(View.VISIBLE); icon.setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit .MAX_VALUE; mDialogView.setCollapsible(false); ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:05:24.371008", "n_pass": [478, 22, 8], "score": "0.436", "loss": "2.4284", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit .MAX_VALUE; mDialogView.setCollapsible(false); ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:05:39.907710", "n_pass": [504, 27, 9], "score": "0.5198", "loss": "1.3974", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } else { holder = (ViewHolder) convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:05:43.456655", "n_pass": [531, 28, 10], "score": "0.9306", "loss": "0.1052", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); holder.image.setImageDrawable(item.getIcon()); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:05:46.652514", "n_pass": [542, 29, 11], "score": "0.8496", "loss": "0.3498", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list_divider, R.id.headerlayout, R.id.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:05:52.840441", "n_pass": [549, 31, 12], "score": "0.9563", "loss": "0.0732", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout) mDialogView.findViewById(R.id.bs_main); mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:05:59.705408", "n_pass": [573, 33, 13], "score": "0.72", "loss": "0.9535", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); holder.title.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:06:15.921382", "n_pass": [651, 38, 14], "score": "0.2466", "loss": "3.1409", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=adapter.getItem(position)); else if (builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:06:19.187417", "n_pass": [667, 39, 15], "score": "0.3163", "loss": "2.3021", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt(0).setPadding(0, 0, 0, helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:06:26.221005", "n_pass": [702, 41, 16], "score": "0.3421", "loss": "3.3964", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set icon for each items in grid style\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:06:32.403252", "n_pass": [716, 43, 17], "score": "0.1921", "loss": "2.8701", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu().getItem(i).getIcon() == null) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:06:37.023667", "n_pass": [816, 44, 18], "score": "0.8672", "loss": "0.2408", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu; menuItem = builder.menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:06:48.106087", "n_pass": [1127, 47, 19], "score": "0.6112", "loss": "0.9651", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { @Override public int getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:07:03.814153", "n_pass": [1141, 52, 20], "score": "0.2379", "loss": "2.1577", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return actions.size() - hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:07:06.889009", "n_pass": [1143, 53, 21], "score": "0.8873", "loss": "0.6969", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { return getItem(position).isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:07:16.379100", "n_pass": [1158, 56, 22], "score": "0.4706", "loss": "1.5195", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } @Override public boolean areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:07:19.430120", "n_pass": [1160, 57, 23], "score": "0.2921", "loss": "1.8016", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); convertView.getTag(); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:07:26.097277", "n_pass": [1174, 59, 24], "score": "0.5389", "loss": "2.0496", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() == R.id.bs_more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:07:38.658816", "n_pass": [1217, 63, 25], "score": "0.8756", "loss": "0.3567", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem(position)).invoke()) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:07:47.751515", "n_pass": [1223, 66, 26], "score": "0.5211", "loss": "0.9999", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=builder.listener != null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:07:50.822554", "n_pass": [1226, 67, 27], "score": "0.2065", "loss": "3.0066", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.layout.bottom_sheet_dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:07:57.038837", "n_pass": [1245, 69, 28], "score": "0.4768", "loss": "1.1919", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout = (LinearLayout)  mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:08:00.572462", "n_pass": [1248, 70, 29], "score": "0.2932", "loss": "3.5849", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout =mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet.this.dismiss(); } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:08:09.700977", "n_pass": [1261, 73, 30], "score": "0.9242", "loss": "0.475", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout =mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter(adapter); list.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:08:12.831500", "n_pass": [1275, 74, 31], "score": "0.3976", "loss": "1.8647", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout =mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon = (ImageView) mDialogView.findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:08:28.102220", "n_pass": [1302, 79, 32], "score": "0.9338", "loss": "0.172", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout =mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit = builder.limit ; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:08:34.604019", "n_pass": [1321, 81, 33], "score": "0.4663", "loss": "1.2475", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout =mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItem = builder.menu;menu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:08:37.692411", "n_pass": [1325, 82, 34], "score": "0.4355", "loss": "1.807", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout =mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem item = new ActionMenuItem(context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:08:40.728562", "n_pass": [1328, 83, 35], "score": "0.501", "loss": "1.3927", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout =mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions = menuItem; mDialogView.setCollapsible(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:08:49.835761", "n_pass": [1336, 86, 36], "score": "0.7641", "loss": "1.1039", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout =mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return- hidden.size(); } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:08:52.898319", "n_pass": [1341, 87, 37], "score": "0.4345", "loss": "1.8774", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout =mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; private ImageView image; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:08:59.977484", "n_pass": [1393, 89, 38], "score": "0.7013", "loss": "0.8211", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout =mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (builder.dismissListener != null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:09:12.300716", "n_pass": [1425, 93, 39], "score": "0.7221", "loss": "1.3211", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null); LinearLayout mainLayout =mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:09:15.425277", "n_pass": [1437, 94, 40], "score": "0.2102", "loss": "3.0477", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), 0); setContentView(mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:09:18.465789", "n_pass": [1441, 95, 41], "score": "0.5782", "loss": "0.7827", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.swipeable = cancelOnSwipeDown; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:09:21.485990", "n_pass": [1444, 96, 42], "score": "0.5032", "loss": "1.3395", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return actions.getItem(position); } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:09:46.360957", "n_pass": [1526, 104, 43], "score": "0.2146", "loss": "2.2028", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location[0] == 0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:10:05.930072", "n_pass": [1654, 110, 44], "score": "0.2276", "loss": "3.6517", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(); mDialogView.setCollapsible(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:10:28.421065", "n_pass": [1767, 117, 45], "score": "0.7018", "loss": "0.9412", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)).getItemId() ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:10:57.792870", "n_pass": [2287, 126, 46], "score": "0.3193", "loss": "2.3787", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position)).getItemId()); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:11:09.979134", "n_pass": [2306, 130, 47], "score": "0.3333", "loss": "2.5545", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context, R.dialog, null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:11:19.608084", "n_pass": [2330, 133, 48], "score": "0.3936", "loss": "1.2816", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,dialog, null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:11:22.615801", "n_pass": [2331, 134, 49], "score": "0.3526", "loss": "2.9046", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView; mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:11:31.634847", "n_pass": [2343, 137, 50], "score": "0.5769", "loss": "1.0903", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Override public void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:11:37.640600", "n_pass": [2349, 139, 51], "score": "0.5241", "loss": "3.2118", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { @Override public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:11:49.663722", "n_pass": [2366, 143, 52], "score": "0.672", "loss": "0.8317", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:12:07.829500", "n_pass": [2405, 149, 53], "score": "0.4542", "loss": "1.7698", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:12:31.769013", "n_pass": [2418, 157, 54], "score": "0.5824", "loss": "2.0694", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(Rid.bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:12:49.849999", "n_pass": [2438, 163, 55], "score": "0.4364", "loss": "1.3319", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(bottom_sheet_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:12:52.865663", "n_pass": [2439, 164, 56], "score": "0.2858", "loss": "2.0485", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) limit; if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:13:26.413858", "n_pass": [2479, 175, 57], "score": "0.6945", "loss": "0.7293", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, 0, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:13:35.481804", "n_pass": [2492, 178, 58], "score": "0.2515", "loss": "3.5587", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, 0, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:13:44.446264", "n_pass": [2496, 181, 59], "score": "0.6318", "loss": "0.5893", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit - 1, moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:13:50.428261", "n_pass": [2498, 183, 60], "score": "0.3305", "loss": "1.7071", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit , moreText); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:13:53.433268", "n_pass": [2499, 184, 61], "score": "0.7549", "loss": "0.7923", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon(more); menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:13:59.413087", "n_pass": [2502, 186, 62], "score": "0.4411", "loss": "1.9631", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter baseAdapter = new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:14:05.431206", "n_pass": [2510, 188, 63], "score": "0.592", "loss": "1.4724", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { return; } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:14:08.510227", "n_pass": [2516, 189, 64], "score": "0.2624", "loss": "1.9893", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) { return position; } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:14:20.518189", "n_pass": [2528, 193, 65], "score": "0.6533", "loss": "0.6148", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @Override public View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:14:29.603811", "n_pass": [2544, 196, 66], "score": "0.7014", "loss": "1.3171", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) { ViewHolder holder; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:14:38.559933", "n_pass": [2550, 199, 67], "score": "0.8887", "loss": "0.1974", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:14:41.639437", "n_pass": [2556, 200, 68], "score": "0.9454", "loss": "0.2191", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i < hidden.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:14:50.667264", "n_pass": [2567, 203, 69], "score": "0.3653", "loss": "1.4931", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i.size(); i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:14:53.668742", "n_pass": [2568, 204, 70], "score": "0.6102", "loss": "1.1039", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon() == null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:02.740057", "n_pass": [2585, 207, 71], "score": "0.7355", "loss": "0.8379", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder.image.setVisibility(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:05.830212", "n_pass": [2594, 208, 72], "score": "0.8054", "loss": "0.6082", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item.isEnabled()); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:08.892015", "n_pass": [2599, 209, 73], "score": "0.6101", "loss": "0.9055", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; adapter = new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:11.961586", "n_pass": [2607, 210, 74], "score": "0.7515", "loss": "1.1275", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapter, R.layout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:15.037563", "n_pass": [2610, 211, 75], "score": "0.5868", "loss": "0.7608", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlayout.bs_list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:18.032618", "n_pass": [2611, 212, 76], "score": "0.53", "loss": "1.9363", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() { @Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:21.123005", "n_pass": [2621, 213, 77], "score": "0.5516", "loss": "2.2524", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View view, int position, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:24.149921", "n_pass": [2626, 214, 78], "score": "0.213", "loss": "2.6956", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet.this, ((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:30.313957", "n_pass": [2647, 216, 79], "score": "0.3218", "loss": "3.0742", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem) adapter.getItem(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:33.309738", "n_pass": [2649, 217, 80], "score": "0.3163", "loss": "1.7292", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); } dismiss(); } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:36.352230", "n_pass": [2652, 218, 81], "score": "0.5145", "loss": "1.7563", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, mHeaderLayoutId, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:42.939075", "n_pass": [2678, 220, 82], "score": "0.8954", "loss": "0.1608", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() { @Overridevoid onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:48.917999", "n_pass": [2689, 222, 83], "score": "0.3078", "loss": "3.671", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; } @Override public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:51.908188", "n_pass": [2694, 223, 84], "score": "0.5065", "loss": "1.8319", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; } public void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:54.875535", "n_pass": [2695, 224, 85], "score": "0.6745", "loss": "1.2428", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } }); super.setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:15:57.904189", "n_pass": [2702, 225, 86], "score": "0.3474", "loss": "2.1723", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() { public void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:00.929161", "n_pass": [2706, 226, 87], "score": "0.5306", "loss": "1.3961", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null) showListener.onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:03.955719", "n_pass": [2714, 227, 88], "score": "0.8074", "loss": "0.7414", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null) icon.setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:06.987809", "n_pass": [2724, 228, 89], "score": "0.5129", "loss": "1.2929", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } }); int[] location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:10.018776", "n_pass": [2734, 229, 90], "score": "0.7484", "loss": "1.2789", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2]; mDialogView.getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:13.018985", "n_pass": [2739, 230, 91], "score": "0.2552", "loss": "2.9176", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (Build.VERSIONINT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:16.005200", "n_pass": [2743, 231, 92], "score": "0.5095", "loss": "2.971", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_CODES.KITKAT) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:21.964829", "n_pass": [2747, 233, 93], "score": "0.7586", "loss": "0.7576", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) { mDialogView.setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:24.936343", "n_pass": [2749, 234, 94], "score": "0.2958", "loss": "3.0266", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(0, location0 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:27.906947", "n_pass": [2751, 235, 95], "score": "0.6346", "loss": "0.9236", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0, 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:33.834793", "n_pass": [2755, 237, 96], "score": "0.324", "loss": "2.524", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0); mDialogView.getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:36.787791", "n_pass": [2757, 238, 97], "score": "0.2897", "loss": "2.9793", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom() : 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:45.650073", "n_pass": [2766, 241, 98], "score": "0.5763", "loss": "1.9734", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview); mDialogView.mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:51.611175", "n_pass": [2776, 243, 99], "score": "0.6142", "loss": "0.9555", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget = list; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:55.034062", "n_pass": [2778, 244, 100], "score": "0.8969", "loss": "0.236", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) { list.setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:16:58.022556", "n_pass": [2783, 245, 101], "score": "0.3629", "loss": "1.7479", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0; i < getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:03.988215", "n_pass": [2794, 247, 102], "score": "0.6177", "loss": "0.5913", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw new IllegalArgumentException(\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:10.444933", "n_pass": [2804, 249, 103], "score": "0.3453", "loss": "1.6928", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"You must set\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:13.404442", "n_pass": [2806, 250, 104], "score": "0.7004", "loss": "1.2098", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit > 0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:16.399351", "n_pass": [2812, 251, 105], "score": "0.8792", "loss": "0.5662", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { fullMenuItemmenu.clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:19.420957", "n_pass": [2820, 252, 106], "score": "0.7097", "loss": "1.0636", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit - 1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:22.400924", "n_pass": [2822, 253, 107], "score": "0.417", "loss": "1.6036", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R.id.bs_more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:28.336211", "n_pass": [2827, 255, 108], "score": "0.6403", "loss": "1.0834", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R._more, limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:31.311026", "n_pass": [2828, 256, 109], "score": "0.8263", "loss": "0.7302", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); item.setIcon; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:34.287770", "n_pass": [2831, 257, 110], "score": "0.8721", "loss": "0.3102", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } @Override public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:37.351297", "n_pass": [2845, 258, 111], "score": "0.5212", "loss": "1.915", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { } public MenuItem getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:40.344098", "n_pass": [2846, 259, 112], "score": "0.5284", "loss": "1.5907", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() { return 1; } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:46.329442", "n_pass": [2859, 261, 113], "score": "0.4082", "loss": "1.1116", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() { return false; } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:49.355216", "n_pass": [2868, 262, 114], "score": "0.928", "loss": "0.2978", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView(int position, View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:52.319564", "n_pass": [2871, 263, 115], "score": "0.3457", "loss": "1.7768", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertView, ViewGroup parent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:17:55.278287", "n_pass": [2873, 264, 116], "score": "0.9579", "loss": "0.0956", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position) position++; } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:04.251843", "n_pass": [2896, 267, 117], "score": "0.294", "loss": "1.8156", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); holder.title.setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:07.227127", "n_pass": [2901, 268, 118], "score": "0.7641", "loss": "1.533", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem) adapter.getItem)) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:13.572660", "n_pass": [2953, 270, 119], "score": "0.4196", "loss": "2.3794", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build.VERSION_) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:23.392855", "n_pass": [3045, 273, 120], "score": "0.4219", "loss": "1.6387", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);; title.setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:35.193620", "n_pass": [3062, 277, 121], "score": "0.5656", "loss": "1.4593", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview).mTarget ; if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:38.177501", "n_pass": [3069, 278, 122], "score": "0.7796", "loss": "0.8623", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i = 0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:41.196876", "n_pass": [3082, 279, 123], "score": "0.5182", "loss": "1.1947", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu()) throw (\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:44.192326", "n_pass": [3092, 280, 124], "score": "0.9194", "loss": "0.4566", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (builder.limit0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:47.188636", "n_pass": [3098, 281, 125], "score": "0.4759", "loss": "1.0616", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, R. limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:50.220416", "n_pass": [3110, 282, 126], "score": "0.235", "loss": "2.1448", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; } @Override public long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:53.334036", "n_pass": [3130, 283, 127], "score": "0.9589", "loss": "0.1483", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context.LAYOUT_list_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:56.488492", "n_pass": [3157, 284, 128], "score": "0.4805", "loss": "2.2807", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); convertView.setTag(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:18:59.442960", "n_pass": [3159, 285, 129], "score": "0.3611", "loss": "2.6865", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image);(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(context, baseAdapterlist.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:19:05.593419", "n_pass": [3199, 287, 130], "score": "0.6605", "loss": "1.3281", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside); final ClosableSlidingLayout mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image);(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:19:09.455836", "n_pass": [3250, 288, 131], "score": "0.4412", "loss": "2.5008", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ? helper.mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image);(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:19:15.697011", "n_pass": [3320, 290, 132], "score": "0.9246", "loss": "0.1424", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ? helper.getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image);(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:19:21.592947", "n_pass": [3326, 292, 133], "score": "0.9574", "loss": "0.1202", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image);(holder); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:19:28.729698", "n_pass": [3422, 294, 134], "score": "0.8969", "loss": "0.3075", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context, null), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:19:32.947712", "n_pass": [3520, 295, 135], "score": "0.8159", "loss": "0.6716", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (int i0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:19:39.323056", "n_pass": [3608, 297, 136], "score": "0.5643", "loss": "2.6932", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt( helper.mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:19:44.437983", "n_pass": [3839, 298, 137], "score": "0.851", "loss": "0.5573", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); else {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:20:20.458960", "n_pass": [4602, 299, 138], "score": "0.6156", "loss": "1.1749", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView.getPaddingBottom: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:20:32.390003", "n_pass": [4641, 303, 139], "score": "0.7375", "loss": "1.0692", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(builder.title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:20:35.373324", "n_pass": [4646, 304, 140], "score": "0.5916", "loss": "0.713", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!builder.grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:20:41.325417", "n_pass": [4657, 306, 141], "score": "0.9593", "loss": "0.0988", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size(); i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:20:50.173677", "n_pass": [4675, 309, 142], "score": "0.356", "loss": "1.6419", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"Youset\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:20:53.180218", "n_pass": [4685, 310, 143], "score": "0.6123", "loss": "1.193", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(limit1); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:21:02.058506", "n_pass": [4703, 313, 144], "score": "0.3786", "loss": "1.4505", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); } BaseAdapter= new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:21:16.724534", "n_pass": [4721, 318, 145], "score": "0.8847", "loss": "0.3037", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }  getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:21:19.731492", "n_pass": [4730, 319, 146], "score": "0.4611", "loss": "1.909", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) { return; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:21:22.713968", "n_pass": [4735, 320, 147], "score": "0.2544", "loss": "2.5307", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {; }  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:21:25.678530", "n_pass": [4736, 321, 148], "score": "0.8645", "loss": "0.2269", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override public int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:21:31.618311", "n_pass": [4747, 323, 149], "score": "0.7514", "loss": "0.5311", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public boolean isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:21:40.505553", "n_pass": [4756, 326, 150], "score": "0.3717", "loss": "1.4462", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled(); } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:21:43.508876", "n_pass": [4762, 327, 151], "score": "0.3534", "loss": "1.1565", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  } @View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:21:46.515059", "n_pass": [4769, 328, 152], "score": "0.9468", "loss": "0.0979", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater inflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:04.126981", "n_pass": [4784, 334, 153], "score": "0.6124", "loss": "0.7093", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext().getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:07.103771", "n_pass": [4787, 335, 154], "score": "0.3673", "loss": "1.4916", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context_image); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:13.027571", "n_pass": [4790, 337, 155], "score": "0.8818", "loss": "0.2063", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { if (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:21.910682", "n_pass": [4804, 340, 156], "score": "0.7477", "loss": "0.7187", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (hidden.valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:24.873251", "n_pass": [4806, 341, 157], "score": "0.9244", "loss": "0.0992", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <= position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:28.334462", "n_pass": [4810, 342, 158], "score": "0.262", "loss": "2.5291", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } MenuItem item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:31.299889", "n_pass": [4814, 343, 159], "score": "0.8939", "loss": "0.7994", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(item.getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:34.279660", "n_pass": [4821, 344, 160], "score": "0.7569", "loss": "0.3593", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIcon= null) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:40.153603", "n_pass": [4828, 346, 161], "score": "0.3295", "loss": "2.1601", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image.setVisibility(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:46.004379", "n_pass": [4832, 348, 162], "score": "0.4524", "loss": "1.7847", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); else { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:54.832594", "n_pass": [4841, 351, 163], "score": "0.7488", "loss": "0.3234", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); { holder(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:22:57.771772", "n_pass": [4843, 352, 164], "score": "0.4294", "loss": "2.5807", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View.VISIBLE); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:23:00.721496", "n_pass": [4845, 353, 165], "score": "0.5243", "loss": "1.8461", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder.image.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:23:03.678649", "n_pass": [4849, 354, 166], "score": "0.248", "loss": "3.6567", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder.setEnabled(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:23:06.611387", "n_pass": [4850, 355, 167], "score": "0.5415", "loss": "1.635", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); return convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:23:09.563996", "n_pass": [4853, 356, 168], "score": "0.3445", "loss": "1.8363", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { private TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:23:15.455194", "n_pass": [4860, 358, 169], "score": "0.3064", "loss": "1.7896", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; new SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:23:18.435618", "n_pass": [4866, 359, 170], "score": "0.8219", "loss": "0.6848", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); list.setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:23:24.296685", "n_pass": [4871, 361, 171], "score": "0.8309", "loss": "0.4128", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  void onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:23:36.048306", "n_pass": [4886, 365, 172], "score": "0.3467", "loss": "1.3299", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) adapter.getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:23:39.129885", "n_pass": [4903, 366, 173], "score": "0.5162", "loss": "1.4235", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false); return; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:23:45.047418", "n_pass": [4913, 368, 174], "score": "0.4177", "loss": "1.5001", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener.onClick(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:23:56.817685", "n_pass": [4930, 372, 175], "score": "0.963", "loss": "0.1581", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(builder.dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:24:02.822749", "n_pass": [4947, 374, 176], "score": "0.7768", "loss": "0.4126", "code": "private void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:24:05.826311", "n_pass": [4954, 375, 177], "score": "0.8355", "loss": "0.9657", "code": " void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:24:08.771943", "n_pass": [4955, 376, 178], "score": "0.3102", "loss": "1.8651", "code": "void init(final Context context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:24:15.568402", "n_pass": [4961, 378, 179], "score": "0.8996", "loss": "0.4812", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside);  mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:24:33.039983", "n_pass": [4975, 384, 180], "score": "0.4477", "loss": "1.5948", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView = (ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:24:38.910445", "n_pass": [4979, 386, 181], "score": "0.8851", "loss": "0.5773", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) View.inflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:24:47.645292", "n_pass": [4985, 389, 182], "score": "0.7795", "loss": "1.2468", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context,null);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:24:53.531920", "n_pass": [4989, 391, 183], "score": "0.7101", "loss": "0.6851", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View.inflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:25:02.310323", "n_pass": [4998, 394, 184], "score": "0.6399", "loss": "0.5914", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(Viewinflate(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:25:05.242330", "n_pass": [4999, 395, 185], "score": "0.8691", "loss": "0.6525", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(context), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:25:08.184762", "n_pass": [5001, 396, 186], "score": "0.1774", "loss": "2.9295", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView); if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:25:14.053910", "n_pass": [5008, 398, 187], "score": "0.7465", "loss": "1.1923", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (!cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:25:19.943457", "n_pass": [5012, 400, 188], "score": "0.4155", "loss": "2.3802", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener() {void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:25:31.655024", "n_pass": [5027, 404, 189], "score": "0.7035", "loss": "1.0029", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:25:43.354217", "n_pass": [5036, 408, 190], "score": "0.5411", "loss": "2.0616", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {BottomSheet; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:25:46.296208", "n_pass": [5037, 409, 191], "score": "0.6432", "loss": "2.8878", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {; }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:25:49.218386", "n_pass": [5038, 410, 192], "score": "0.9794", "loss": "0.073", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { }void onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:25:55.058835", "n_pass": [5041, 412, 193], "score": "0.9814", "loss": "0.117", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems(); } });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:26:06.718349", "n_pass": [5053, 416, 194], "score": "0.7115", "loss": "0.8389", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();} });setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:26:09.687303", "n_pass": [5055, 417, 195], "score": "0.4428", "loss": "1.2412", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});setOnShowListener(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:26:12.652423", "n_pass": [5059, 418, 196], "score": "0.5033", "loss": "1.4373", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener() {void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:26:15.613672", "n_pass": [5066, 419, 197], "score": "0.8842", "loss": "0.4201", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) { if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:26:27.270326", "n_pass": [5078, 423, 198], "score": "0.7241", "loss": "0.5356", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if (showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:26:30.192085", "n_pass": [5080, 424, 199], "score": "0.6641", "loss": "1.7608", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.setAdapter.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:26:53.524839", "n_pass": [5097, 432, 200], "score": "0.3825", "loss": "2.2666", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT >= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:27:05.292976", "n_pass": [5130, 436, 201], "score": "0.6394", "loss": "0.8222", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu().size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:27:23.115180", "n_pass": [5197, 442, 202], "score": "0.7857", "loss": "0.4355", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView == null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:28:04.215254", "n_pass": [5273, 456, 203], "score": "0.462", "loss": "1.8297", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext.getSystemService(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:28:07.183588", "n_pass": [5279, 457, 204], "score": "0.8729", "loss": "0.242", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View.INVISIBLE); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:28:25.362625", "n_pass": [5322, 463, 205], "score": "0.749", "loss": "0.774", "code": "void init(finalContext context) { setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:29:05.767374", "n_pass": [5432, 476, 206], "score": "0.2393", "loss": "1.9539", "code": "void init(finalContext context){ setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:29:08.711465", "n_pass": [5434, 477, 207], "score": "0.3652", "loss": "1.979", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(contextnull);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:29:34.951290", "n_pass": [5452, 486, 208], "score": "0.4695", "loss": "1.8199", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() { } onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:30:04.626014", "n_pass": [5492, 496, 209], "score": "0.8632", "loss": "0.4669", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {} onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:30:07.557543", "n_pass": [5494, 497, 210], "score": "0.7696", "loss": "0.7615", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){void onShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:30:19.297832", "n_pass": [5517, 501, 211], "score": "0.6267", "loss": "2.0746", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener != null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:30:30.997126", "n_pass": [5532, 505, 212], "score": "0.473", "loss": "1.3931", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)onShow(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:30:33.960915", "n_pass": [5535, 506, 213], "score": "0.6103", "loss": "1.0366", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INT= Build) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:30:52.032751", "n_pass": [5575, 512, 214], "score": "0.9441", "loss": "0.0764", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu().size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:31:01.091437", "n_pass": [5621, 515, 215], "score": "0.3731", "loss": "1.4535", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; menuItem.add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:31:21.597015", "n_pass": [5656, 522, 216], "score": "0.2588", "loss": "3.6727", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  long getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:31:24.670718", "n_pass": [5678, 523, 217], "score": "0.5413", "loss": "0.9506", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override int getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:31:27.671931", "n_pass": [5687, 524, 218], "score": "0.7146", "loss": "0.5213", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {; if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:31:39.460356", "n_pass": [5712, 528, 219], "score": "0.4635", "loss": "1.7946", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertView =null) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:31:42.398019", "n_pass": [5715, 529, 220], "score": "0.6408", "loss": "1.0204", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater = getContext(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:31:45.341353", "n_pass": [5720, 530, 221], "score": "0.4766", "loss": "1.2646", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View.GONE : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:32:00.676792", "n_pass": [5760, 535, 222], "score": "0.4686", "loss": "1.9153", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(list.header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:32:09.553618", "n_pass": [5783, 538, 223], "score": "0.9091", "loss": "0.4068", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new AdapterView.OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:32:18.377954", "n_pass": [5796, 541, 224], "score": "0.5196", "loss": "1.1522", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (builder.menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:32:27.399197", "n_pass": [5835, 544, 225], "score": "0.6022", "loss": "1.8964", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder.listener(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:32:30.354038", "n_pass": [5840, 545, 226], "score": "0.3406", "loss": "2.1603", "code": "void init(finalContext context){setCanceledOnTouchOutside(cancelOnTouchOutside); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:32:43.152853", "n_pass": [5875, 549, 227], "score": "0.4809", "loss": "2.25", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate(context);mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:33:00.639927", "n_pass": [5889, 555, 228], "score": "0.3486", "loss": "1.4778", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed() {}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:33:27.209459", "n_pass": [5927, 564, 229], "score": "0.682", "loss": "0.9255", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener !=null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:33:44.706858", "n_pass": [5964, 570, 230], "score": "0.5321", "loss": "1.744", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); list.startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:33:51.031862", "n_pass": [5974, 572, 231], "score": "0.3553", "loss": "1.2193", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(builder.icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:33:59.818895", "n_pass": [5989, 575, 232], "score": "0.5841", "loss": "1.4546", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder.grid) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:34:05.950541", "n_pass": [6045, 577, 233], "score": "0.9267", "loss": "0.1948", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu.size; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:34:08.914062", "n_pass": [6052, 578, 234], "score": "0.2663", "loss": "3.365", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size() > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:34:14.804436", "n_pass": [6072, 580, 235], "score": "0.8379", "loss": "0.2936", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) { isEnabled; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:34:32.479613", "n_pass": [6126, 586, 236], "score": "0.5252", "loss": "1.7365", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (item.getIconnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:34:50.655265", "n_pass": [6177, 592, 237], "score": "0.3549", "loss": "2.6246", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); } holder(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:34:56.545132", "n_pass": [6191, 594, 238], "score": "0.6308", "loss": "1.6292", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item); convertView; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:34:59.489665", "n_pass": [6194, 595, 239], "score": "0.5892", "loss": "1.3413", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) { showFullItems(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:35:11.402464", "n_pass": [6243, 599, 240], "score": "0.4514", "loss": "0.9098", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);; } if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:35:14.330881", "n_pass": [6246, 600, 241], "score": "0.54", "loss": "0.7883", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null) builder(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:35:17.349242", "n_pass": [6259, 601, 242], "score": "0.3055", "loss": "3.3914", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }; } }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:35:20.320295", "n_pass": [6267, 602, 243], "score": "0.7139", "loss": "1.3358", "code": "void init(finalContext context){setCanceledOnTouchOutside(); mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:35:27.271351", "n_pass": [6296, 604, 244], "score": "0.9024", "loss": "0.2653", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView =(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:35:30.213083", "n_pass": [6298, 605, 245], "score": "0.8483", "loss": "0.2212", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout) Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:35:33.134310", "n_pass": [6303, 606, 246], "score": "0.5704", "loss": "1.5928", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)Viewinflate();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:35:38.975362", "n_pass": [6305, 608, 247], "score": "0.7014", "loss": "0.7703", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayout.addView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:35:41.896945", "n_pass": [6310, 609, 248], "score": "0.4269", "loss": "2.4183", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(), mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:35:47.734150", "n_pass": [6317, 611, 249], "score": "0.254", "loss": "3.0258", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown) mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:35:54.028436", "n_pass": [6326, 613, 250], "score": "0.283", "loss": "2.8185", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){void onClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:36:05.618300", "n_pass": [6340, 617, 251], "score": "0.6218", "loss": "0.7773", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened() { showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:36:08.585612", "n_pass": [6349, 618, 252], "score": "0.7176", "loss": "0.7602", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu.size > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:36:42.358019", "n_pass": [6482, 629, 253], "score": "0.4031", "loss": "2.5437", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); ; add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:36:51.084784", "n_pass": [6495, 632, 254], "score": "0.8042", "loss": "0.2363", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  } @Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:36:54.182428", "n_pass": [6523, 633, 255], "score": "0.5868", "loss": "1.1541", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }Override getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:36:57.091010", "n_pass": [6524, 634, 256], "score": "0.7756", "loss": "0.2946", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {; } areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:37:02.945271", "n_pass": [6536, 636, 257], "score": "0.7138", "loss": "0.9934", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {} areAllItemsEnabled() {  }View getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:37:05.883503", "n_pass": [6542, 637, 258], "score": "0.3692", "loss": "2.7814", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) { LayoutInflater =(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:37:08.843147", "n_pass": [6553, 638, 259], "score": "0.4457", "loss": "1.3246", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) { LayoutInflater(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder.image(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:37:18.204644", "n_pass": [6588, 641, 260], "score": "0.5522", "loss": "1.8423", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();mainLayoutaddView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) { LayoutInflater(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:37:34.404438", "n_pass": [6707, 646, 261], "score": "0.8201", "loss": "0.2567", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if (cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) { LayoutInflater(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:37:37.785869", "n_pass": [6718, 647, 262], "score": "0.5147", "loss": "1.1927", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){voidonClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) { LayoutInflater(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:37:46.521365", "n_pass": [6734, 650, 263], "score": "0.437", "loss": "2.8601", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){onClosed(){}onOpened(){ showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) { LayoutInflater(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:37:49.462202", "n_pass": [6744, 651, 264], "score": "0.9023", "loss": "0.5028", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); liststartLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) { LayoutInflater(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:38:04.465785", "n_pass": [6781, 656, 265], "score": "0.5045", "loss": "2.6998", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View.GONE); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) { LayoutInflater(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:38:10.277510", "n_pass": [6792, 658, 266], "score": "0.5194", "loss": "0.964", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0;  getMenu; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) { LayoutInflater(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:38:16.374183", "n_pass": [6856, 660, 267], "score": "0.317", "loss": "3.1156", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override public isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) { LayoutInflater(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:38:22.541430", "n_pass": [6920, 662, 268], "score": "0.5232", "loss": "2.3339", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) { LayoutInflater(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:38:25.572585", "n_pass": [6939, 663, 269], "score": "0.5443", "loss": "2.0273", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);; } class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:38:37.880189", "n_pass": [6986, 667, 270], "score": "0.2135", "loss": "4.188", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogView.setSlideListener(new ClosableSlidingLayout.SlideListener(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:38:51.594200", "n_pass": [7106, 671, 271], "score": "0.3385", "loss": "1.739", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogViewsetSlideListener(new ClosableSlidingLayout.SlideListener(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:38:57.381853", "n_pass": [7112, 673, 272], "score": "0.3406", "loss": "1.6924", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogViewsetSlideListener(new ClosableSlidingLayoutSlideListener(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:39:00.277306", "n_pass": [7113, 674, 273], "score": "0.5502", "loss": "2.3849", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogViewsetSlideListener(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface) {if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:39:06.240928", "n_pass": [7148, 676, 274], "score": "0.8", "loss": "0.2332", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogViewsetSlideListener(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface){if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull) holder(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:39:34.190032", "n_pass": [7349, 685, 275], "score": "0.3934", "loss": "1.2907", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogViewsetSlideListener(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface){if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); list.setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:39:40.202031", "n_pass": [7381, 687, 276], "score": "0.4043", "loss": "1.2124", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)mDialogViewsetSlideListener(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface){if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:39:48.020216", "n_pass": [7480, 689, 277], "score": "0.2871", "loss": "3.3387", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)setSlideListener(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface){if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:39:50.942200", "n_pass": [7481, 690, 278], "score": "0.2914", "loss": "1.4804", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface){if(showListener =null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:39:56.909853", "n_pass": [7524, 692, 279], "score": "0.6723", "loss": "0.6222", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface){if(showListener=null)(dialogInterface); startLayoutAnimation(); if (builder.icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:40:06.071631", "n_pass": [7537, 695, 280], "score": "0.6132", "loss": "1.5534", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface){if(showListener=null)(dialogInterface); startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem (context, limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:40:12.372251", "n_pass": [7632, 697, 281], "score": "0.188", "loss": "4.0745", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface){if(showListener=null)(dialogInterface); startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( limit ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:40:15.276317", "n_pass": [7633, 698, 282], "score": "0.9646", "loss": "0.1076", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface){if(showListener=null)(dialogInterface); startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); adapter.setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:40:28.029140", "n_pass": [7747, 702, 283], "score": "0.4535", "loss": "1.2283", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){voidonShow(DialogInterface dialogInterface){if(showListener=null)(dialogInterface); startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:40:35.975961", "n_pass": [7880, 704, 284], "score": "0.6589", "loss": "1.1398", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener=null)(dialogInterface); startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:40:38.914615", "n_pass": [7891, 705, 285], "score": "0.6713", "loss": "0.4551", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListenernull)(dialogInterface); startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:40:45.195062", "n_pass": [7898, 707, 286], "score": "0.5522", "loss": "1.6805", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListenernull)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  } @Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:40:52.835194", "n_pass": [8030, 709, 287], "score": "0.357", "loss": "2.9156", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListenernull)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (int i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:40:58.751888", "n_pass": [8055, 711, 288], "score": "0.6037", "loss": "0.6149", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListenernull)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0; i; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:41:01.666273", "n_pass": [8059, 712, 289], "score": "0.2614", "loss": "2.3142", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListenernull)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:41:13.873298", "n_pass": [8252, 715, 290], "score": "0.535", "loss": "1.5289", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }Override isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:41:20.853880", "n_pass": [8389, 717, 291], "score": "0.1748", "loss": "4.3125", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon =findViewById(_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:41:31.107694", "n_pass": [8666, 719, 292], "score": "0.3152", "loss": "2.7394", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } icon (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:41:41.784356", "n_pass": [9019, 721, 293], "score": "0.6938", "loss": "0.6213", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } } if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:43:16.819841", "n_pass": [9923, 725, 294], "score": "0.152", "loss": "4.0309", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu > limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:43:28.413324", "n_pass": [9934, 729, 295], "score": "0.6896", "loss": "0.9957", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( ); add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:43:48.640566", "n_pass": [9953, 736, 296], "score": "0.386", "loss": "2.0647", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(item); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:43:54.425373", "n_pass": [9956, 738, 297], "score": "0.2596", "loss": "2.9284", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true); }  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:44:06.044482", "n_pass": [9967, 742, 298], "score": "0.6398", "loss": "0.9218", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);}  new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:44:08.966591", "n_pass": [9969, 743, 299], "score": "0.4745", "loss": "1.8957", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() { }getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:44:23.445555", "n_pass": [9984, 748, 300], "score": "0.5591", "loss": "1.7456", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() {  }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:44:46.617264", "n_pass": [10013, 756, 301], "score": "0.3283", "loss": "2.3896", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent) {if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:45:15.539179", "n_pass": [10042, 766, 302], "score": "0.4866", "loss": "1.685", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertViewnull) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:45:24.202168", "n_pass": [10048, 769, 303], "score": "0.3145", "loss": "2.3658", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i) <position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:45:58.932713", "n_pass": [10082, 781, 304], "score": "0.3038", "loss": "2.6966", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position); } item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:46:01.861627", "n_pass": [10087, 782, 305], "score": "0.6102", "loss": "1.8377", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position); setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:46:19.187199", "n_pass": [10099, 788, 306], "score": "0.2939", "loss": "1.5039", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);setText(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:46:22.096228", "n_pass": [10100, 789, 307], "score": "0.2525", "loss": "1.7698", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if (itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:46:28.401732", "n_pass": [10109, 791, 308], "score": "0.5043", "loss": "1.9206", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View : View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:46:42.837900", "n_pass": [10120, 796, 309], "score": "0.2397", "loss": "3.1286", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View); {(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:46:48.633135", "n_pass": [10126, 798, 310], "score": "0.6485", "loss": "1.2742", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View); }(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:46:51.577987", "n_pass": [10132, 799, 311], "score": "0.3012", "loss": "3.2053", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; } }; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:47:06.136316", "n_pass": [10152, 804, 312], "score": "0.2829", "loss": "3.7605", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header); setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:47:17.696255", "n_pass": [10161, 808, 313], "score": "0.3532", "loss": "2.4165", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() {  onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:47:43.732686", "n_pass": [10183, 817, 314], "score": "0.7743", "loss": "0.3618", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent, View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:47:52.459759", "n_pass": [10194, 820, 315], "score": "0.4855", "loss": "1.7116", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View viewposition, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:47:58.281340", "n_pass": [10198, 822, 316], "score": "0.5921", "loss": "1.0639", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if (((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:48:09.850644", "n_pass": [10209, 826, 317], "score": "0.1882", "loss": "4.221", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) getItem(position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:48:15.682497", "n_pass": [10216, 828, 318], "score": "0.3962", "loss": "2.0101", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position)) ==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:48:18.603360", "n_pass": [10221, 829, 319], "score": "0.3048", "loss": "1.7816", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (!((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:48:31.217179", "n_pass": [10237, 833, 320], "score": "0.2862", "loss": "1.7599", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if (menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:48:39.905625", "n_pass": [10248, 836, 321], "score": "0.7881", "loss": "0.3676", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener !=null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:48:45.693267", "n_pass": [10252, 838, 322], "score": "0.6244", "loss": "0.9039", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(BottomSheet((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:48:48.623175", "n_pass": [10257, 839, 323], "score": "0.2144", "loss": "3.238", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} }); if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:48:57.417472", "n_pass": [10275, 842, 324], "score": "0.2613", "loss": "4.0278", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if (null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:49:00.323660", "n_pass": [10277, 843, 325], "score": "0.4864", "loss": "1.9903", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null) { setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:49:03.242205", "n_pass": [10281, 844, 326], "score": "0.271", "loss": "2.0037", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener(dismissListener); } setListLayout(); }"}
{"time": "2021-01-20 17:49:11.918651", "n_pass": [10286, 847, 327], "score": "0.3226", "loss": "2.4226", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener(); } setListLayout(); }"}
{"time": "2021-01-20 17:49:14.849607", "n_pass": [10289, 848, 328], "score": "0.3117", "loss": "1.5171", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();} setListLayout(); }"}
{"time": "2021-01-20 17:49:17.751902", "n_pass": [10291, 849, 329], "score": "0.8724", "loss": "0.1622", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon == null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:49:43.527614", "n_pass": [10392, 857, 330], "score": "0.5467", "loss": "1.1026", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)setVisibility(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:49:46.431375", "n_pass": [10395, 858, 331], "score": "0.6649", "loss": "1.4402", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View); {setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:49:49.361080", "n_pass": [10400, 859, 332], "score": "0.5864", "loss": "1.047", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{setImageDrawable(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:49:52.268343", "n_pass": [10402, 860, 333], "score": "0.6028", "loss": "1.1855", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon); } } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:49:55.179101", "n_pass": [10407, 861, 334], "score": "0.4216", "loss": "2.5828", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });  location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:50:03.872431", "n_pass": [10415, 864, 335], "score": "0.3754", "loss": "2.4369", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } }); location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:50:06.773501", "n_pass": [10416, 865, 336], "score": "0.2495", "loss": "1.6693", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location = new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:50:09.680850", "n_pass": [10418, 866, 337], "score": "0.4069", "loss": "3.2331", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild) {setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:50:35.661045", "n_pass": [10440, 875, 338], "score": "0.752", "loss": "0.4878", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(00 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:50:41.470324", "n_pass": [10444, 877, 339], "score": "0.2564", "loss": "3.3474", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0 ?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:50:44.397428", "n_pass": [10446, 878, 340], "score": "0.5244", "loss": "2.4682", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight : 0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:50:50.179244", "n_pass": [10451, 880, 341], "score": "0.7134", "loss": "0.6522", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) + mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:51:01.777794", "n_pass": [10468, 884, 342], "score": "0.5762", "loss": "0.8865", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if (!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:51:33.516622", "n_pass": [10491, 895, 343], "score": "0.3816", "loss": "2.4681", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns(1); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:51:45.073958", "n_pass": [10500, 899, 344], "score": "0.4067", "loss": "1.0342", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns(); } if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:51:47.983873", "n_pass": [10503, 900, 345], "score": "0.4505", "loss": "1.9622", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder) { for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:51:56.711001", "n_pass": [10511, 903, 346], "score": "0.3276", "loss": "1.8258", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for (0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:52:02.516220", "n_pass": [10515, 905, 347], "score": "0.8003", "loss": "0.2938", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(0; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:52:05.421124", "n_pass": [10517, 906, 348], "score": "0.4933", "loss": "1.0122", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(; ; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:52:08.319703", "n_pass": [10519, 907, 349], "score": "0.5221", "loss": "1.0746", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++) { if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:52:14.121113", "n_pass": [10526, 909, 350], "score": "0.3393", "loss": "1.443", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0) if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:52:31.471290", "n_pass": [10550, 915, 351], "score": "0.4375", "loss": "1.4411", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone(); ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:52:45.976647", "n_pass": [10566, 920, 352], "score": "0.2168", "loss": "3.7467", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add(); actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:52:54.662160", "n_pass": [10577, 923, 353], "score": "0.3363", "loss": "2.4667", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount() {}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:53:11.994181", "n_pass": [10598, 929, 354], "score": "0.3398", "loss": "1.602", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}  getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:53:17.825154", "n_pass": [10610, 931, 355], "score": "0.7277", "loss": "0.5144", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {} getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:53:20.721683", "n_pass": [10611, 932, 356], "score": "0.3945", "loss": "2.2771", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) {  }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:53:26.562102", "n_pass": [10620, 934, 357], "score": "0.4591", "loss": "1.6717", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled() {  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:53:43.940000", "n_pass": [10643, 940, 358], "score": "0.8612", "loss": "0.2775", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertViewparent){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:53:58.370817", "n_pass": [10654, 945, 359], "score": "0.2353", "loss": "3.6912", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); } for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:54:09.966196", "n_pass": [10670, 949, 360], "score": "0.3573", "loss": "1.7082", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem(position);(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:54:47.499011", "n_pass": [10706, 962, 361], "score": "0.3129", "loss": "1.44", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle()); if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:54:51.775557", "n_pass": [10715, 963, 362], "score": "0.3336", "loss": "2.692", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(itemnull)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:54:55.178983", "n_pass": [10718, 964, 363], "score": "0.4006", "loss": "1.2307", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons ? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:54:58.111641", "n_pass": [10723, 965, 364], "score": "0.2427", "loss": "1.8947", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder { TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:55:09.763284", "n_pass": [10747, 969, 365], "score": "0.3347", "loss": "2.8041", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter(header);setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:55:24.245609", "n_pass": [10761, 974, 366], "score": "0.3459", "loss": "2.0479", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); setOnItemClickListener(new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:55:44.466456", "n_pass": [10776, 981, 367], "score": "0.4303", "loss": "0.961", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() { onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:55:50.273548", "n_pass": [10785, 983, 368], "score": "0.6029", "loss": "1.2131", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation(); if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:56:43.488207", "n_pass": [10970, 1000, 369], "score": "0.2789", "loss": "1.7449", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext()) +mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:57:38.310482", "n_pass": [11040, 1019, 370], "score": "0.6557", "loss": "0.5888", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext())+mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();} if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:58:15.713460", "n_pass": [11075, 1032, 371], "score": "0.5095", "loss": "0.7866", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext())+mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if (builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:58:18.607238", "n_pass": [11077, 1033, 372], "score": "0.3526", "loss": "1.4335", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext())+mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){ for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:58:21.529422", "n_pass": [11082, 1034, 373], "score": "0.3537", "loss": "1.6982", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext())+mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) { clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:58:50.446224", "n_pass": [11125, 1044, 374], "score": "0.3088", "loss": "2.5777", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext())+mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) {clone();ActionMenuItem ( );add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:58:56.248117", "n_pass": [11133, 1046, 375], "score": "0.3408", "loss": "1.816", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext())+mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position) {}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 17:59:13.677332", "n_pass": [11168, 1052, 376], "score": "0.3277", "loss": "1.6504", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext())+mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item = getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:00:20.219454", "n_pass": [11258, 1075, 377], "score": "0.1885", "loss": "2.3846", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext())+mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item =getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener =null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:01:31.174191", "n_pass": [11392, 1099, 378], "score": "0.3715", "loss": "1.191", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?getNavigationBarHeight(getContext())+mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item =getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:02:43.454295", "n_pass": [11580, 1123, 379], "score": "0.3823", "loss": "1.9806", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView: 0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item =getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:02:46.397596", "n_pass": [11589, 1124, 380], "score": "0.229", "loss": "3.5827", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); } }if (0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item =getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:03:32.683104", "n_pass": [11650, 1140, 381], "score": "0.3209", "loss": "2.2318", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if (0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item =getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:03:35.627748", "n_pass": [11653, 1141, 382], "score": "0.5327", "loss": "1.1181", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions =(true);} new BaseAdapter() { getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item =getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:03:50.175055", "n_pass": [11681, 1146, 383], "score": "0.7853", "loss": "0.3467", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);} new BaseAdapter() { getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item =getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:03:55.984302", "n_pass": [11688, 1148, 384], "score": "0.4955", "loss": "1.28", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() { getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item =getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:04:01.797277", "n_pass": [11696, 1150, 385], "score": "0.6486", "loss": "1.5578", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context); }for (i = 0;; i++) { (valueAt(i)<position);} item =getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:04:36.712761", "n_pass": [11763, 1162, 386], "score": "0.5936", "loss": "0.6032", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++) { (valueAt(i)<position);} item =getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:04:51.229616", "n_pass": [11780, 1167, 387], "score": "0.5427", "loss": "0.7226", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} item =getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:05:05.686049", "n_pass": [11795, 1172, 388], "score": "0.5286", "loss": "1.4512", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} item=getItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:05:08.583967", "n_pass": [11796, 1173, 389], "score": "0.8112", "loss": "0.4601", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); setGridView(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:05:40.632326", "n_pass": [11857, 1184, 390], "score": "0.6021", "loss": "0.631", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);} if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:06:08.420688", "n_pass": [11914, 1193, 391], "score": "0.4111", "loss": "1.0839", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }} });if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:06:25.914267", "n_pass": [11947, 1199, 392], "score": "0.2553", "loss": "2.3557", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);} } });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:06:51.846561", "n_pass": [12073, 1207, 393], "score": "0.5107", "loss": "0.9103", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= new int[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:07:00.533890", "n_pass": [12083, 1210, 394], "score": "0.6025", "loss": "0.5535", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if (INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:07:12.116978", "n_pass": [12096, 1214, 395], "score": "0.4157", "loss": "1.8331", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if (getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:08:07.045764", "n_pass": [12172, 1233, 396], "score": "0.3161", "loss": "2.132", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) { }getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:08:33.332903", "n_pass": [12248, 1242, 397], "score": "0.3065", "loss": "1.7021", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() { }isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:08:39.124150", "n_pass": [12255, 1244, 398], "score": "0.3117", "loss": "2.1357", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position) {} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:08:42.089141", "n_pass": [12263, 1245, 399], "score": "0.6196", "loss": "0.7297", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i = 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:09:05.316064", "n_pass": [12298, 1253, 400], "score": "0.5703", "loss": "1.9996", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;; i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:09:11.156536", "n_pass": [12304, 1255, 401], "score": "0.1747", "loss": "3.7208", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} itemgetItem();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:09:28.517489", "n_pass": [12323, 1261, 402], "score": "0.615", "loss": "0.6395", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} item();(getTitle());if(null)(collapseListIcons? View: View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:09:34.425012", "n_pass": [12343, 1263, 403], "score": "0.4295", "loss": "1.2178", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view, long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:10:06.967172", "n_pass": [12409, 1274, 404], "score": "0.2035", "loss": "3.5887", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if (((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:10:22.523211", "n_pass": [12440, 1279, 405], "score": "0.3203", "loss": "1.3763", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))) { if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:10:25.472871", "n_pass": [12448, 1280, 406], "score": "0.3742", "loss": "1.4344", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); } (_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:11:43.670779", "n_pass": [12656, 1306, 407], "score": "0.3728", "loss": "1.1474", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid) {setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:11:58.105964", "n_pass": [12668, 1311, 408], "score": "0.2882", "loss": "3.3529", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid){setNumColumns();}if(builder){for(;; i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:12:01.098076", "n_pass": [12684, 1312, 409], "score": "0.4008", "loss": "1.1891", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter() {getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:12:24.464163", "n_pass": [12744, 1320, 410], "score": "0.4816", "loss": "1.5054", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){} areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:12:33.333273", "n_pass": [12782, 1323, 411], "score": "0.5569", "loss": "0.802", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){  }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:12:39.159895", "n_pass": [12788, 1325, 412], "score": "0.2306", "loss": "4.1675", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);} item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:13:05.333629", "n_pass": [12835, 1334, 413], "score": "0.448", "loss": "1.3999", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{ TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:13:14.250894", "n_pass": [12875, 1337, 414], "score": "0.3736", "loss": "1.2519", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter); (list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:13:28.739768", "n_pass": [12894, 1342, 415], "score": "0.2148", "loss": "4.4345", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener() {onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:13:35.061212", "n_pass": [12906, 1344, 416], "score": "0.7307", "loss": "0.3943", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistener=null)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:13:56.689093", "n_pass": [12963, 1351, 417], "score": "0.2908", "loss": "3.0564", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position))); }}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:14:02.582095", "n_pass": [12977, 1353, 418], "score": "0.2793", "loss": "2.5311", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(_gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:15:12.017681", "n_pass": [13166, 1376, 419], "score": "0.4614", "loss": "1.09", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if (convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:15:53.125357", "n_pass": [13302, 1390, 420], "score": "0.6644", "loss": "0.7065", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for (i= 0;;i++){ (valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:15:58.970801", "n_pass": [13314, 1392, 421], "score": "0.5688", "loss": "0.9485", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){ (valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:16:04.799130", "n_pass": [13327, 1394, 422], "score": "0.4173", "loss": "1.0228", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if (icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:17:11.288586", "n_pass": [13584, 1415, 423], "score": "0.49", "loss": "0.9523", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location= newint[2];getLocationOnScreen(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:17:28.752743", "n_pass": [13616, 1421, 424], "score": "0.2929", "loss": "2.242", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location= newint[2];(location); if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:17:31.707952", "n_pass": [13621, 1422, 425], "score": "0.4072", "loss": "1.1965", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location= newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){ setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:19:41.241341", "n_pass": [13978, 1465, 426], "score": "0.7265", "loss": "0.5002", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location= newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:20:04.361499", "n_pass": [14101, 1472, 427], "score": "0.6369", "loss": "0.6217", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview); if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:20:36.356625", "n_pass": [14156, 1483, 428], "score": "0.4144", "loss": "0.9696", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem ();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:20:56.836846", "n_pass": [14216, 1490, 429], "score": "0.7952", "loss": "0.3702", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position) {}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:21:02.820314", "n_pass": [14256, 1492, 430], "score": "0.3524", "loss": "1.5677", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt(i)<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:21:23.328708", "n_pass": [14314, 1499, 431], "score": "0.2426", "loss": "3.6212", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons? View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:21:26.376737", "n_pass": [14338, 1500, 432], "score": "0.493", "loss": "1.9612", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title; }}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:21:32.337501", "n_pass": [14364, 1502, 433], "score": "0.3312", "loss": "2.0276", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight :0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:22:44.288672", "n_pass": [14611, 1525, 434], "score": "0.2697", "loss": "2.0663", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);;setText(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:22:53.073495", "n_pass": [14632, 1528, 435], "score": "0.5474", "loss": "1.964", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);setText(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:22:55.975653", "n_pass": [14633, 1529, 436], "score": "0.5091", "loss": "2.0983", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if (getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:23:10.665126", "n_pass": [14689, 1534, 437], "score": "0.3518", "loss": "1.575", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon ==null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if(getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:24:32.047514", "n_pass": [15052, 1560, 438], "score": "0.3283", "loss": "1.8809", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(INTBuild){setPadding(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if(getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:24:40.868355", "n_pass": [15084, 1563, 439], "score": "0.3366", "loss": "1.9996", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){setPadding(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if(getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:24:43.813030", "n_pass": [15088, 1564, 440], "score": "0.4018", "loss": "1.5763", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if(getMenu> limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:25:01.481507", "n_pass": [15171, 1570, 441], "score": "0.6755", "loss": "1.7461", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if(getMenu>limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount() {}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:25:10.447784", "n_pass": [15225, 1573, 442], "score": "0.4691", "loss": "0.8587", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if(getMenu>limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter(adapter);(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:25:34.157372", "n_pass": [15335, 1581, 443], "score": "0.636", "loss": "0.7185", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable ?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if(getMenu>limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:26:23.132476", "n_pass": [15575, 1596, 444], "score": "0.2221", "loss": "3.3531", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if(getMenu>limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){ }getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:26:46.999485", "n_pass": [15713, 1604, 445], "score": "0.3123", "loss": "1.3188", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if(getMenu>limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView( View convertView){if(convertView) {(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:26:52.858800", "n_pass": [15727, 1606, 446], "score": "0.3615", "loss": "1.9765", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if(getMenu>limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView( View convertView){if(convertView){(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more) {(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:27:21.091362", "n_pass": [15857, 1615, 447], "score": "0.3622", "loss": "1.9526", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){ if(getMenu())(\"\"); }}if(0)if(getMenu>limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView( View convertView){if(convertView){(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:27:56.887366", "n_pass": [16094, 1626, 448], "score": "0.4686", "loss": "1.2031", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu>limit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView( View convertView){if(convertView){(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:28:02.781763", "n_pass": [16116, 1628, 449], "score": "0.3949", "loss": "1.5155", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenulimit) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView( View convertView){if(convertView){(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:28:05.686763", "n_pass": [16117, 1629, 450], "score": "0.2775", "loss": "1.4199", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu) {clone();ActionMenuItem();add();actions=(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView( View convertView){if(convertView){(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:28:11.586196", "n_pass": [16134, 1631, 451], "score": "0.2542", "loss": "2.5674", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu) {clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView( View convertView){if(convertView){(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:28:17.641562", "n_pass": [16187, 1633, 452], "score": "0.2301", "loss": "2.5076", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu) {clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i= 0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:28:20.650608", "n_pass": [16207, 1634, 453], "score": "0.402", "loss": "1.249", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu) {clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i=0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) { if(((MenuItem) (position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:28:39.138076", "n_pass": [16310, 1640, 454], "score": "0.3476", "loss": "1.9444", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu) {clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i=0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) {if(((MenuItem) (position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:28:42.107632", "n_pass": [16317, 1641, 455], "score": "0.3888", "loss": "2.5644", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon =null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu) {clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i=0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) {if(((MenuItem)(position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:29:04.225665", "n_pass": [16468, 1647, 456], "score": "0.4296", "loss": "1.4306", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon=null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title); }(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu) {clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i=0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) {if(((MenuItem)(position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:29:16.028336", "n_pass": [16531, 1651, 457], "score": "0.3632", "loss": "3.0486", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon=null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title);}(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu) {clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i=0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) {if(((MenuItem)(position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:29:34.069232", "n_pass": [16669, 1657, 458], "score": "0.4658", "loss": "1.1304", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon=null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title);}(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu) {clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) {if(((MenuItem)(position))==more){(false);}if(((ActionMenuItem))){ if(menulistenernull)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:30:00.073846", "n_pass": [16804, 1665, 459], "score": "0.2849", "loss": "1.4583", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon=null)(View);{(icon);}} });location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title);}(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu) {clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) {if(((MenuItem)(position))==more){(false);}if(((ActionMenuItem))){ if(null)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:30:14.701054", "n_pass": [16942, 1669, 460], "score": "0.2471", "loss": "3.1711", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon=null)(View);{(icon);}}});location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title);}(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\"); }}if(0)if(getMenu) {clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) {if(((MenuItem)(position))==more){(false);}if(((ActionMenuItem))){ if(null)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:30:23.798909", "n_pass": [17031, 1672, 461], "score": "0.605", "loss": "0.5759", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon=null)(View);{(icon);}}});location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title);}(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\");}}if(0)if(getMenu) {clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) {if(((MenuItem)(position))==more){(false);}if(((ActionMenuItem))){ if(null)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:30:26.762464", "n_pass": [17042, 1673, 462], "score": "0.3233", "loss": "1.7706", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon=null)(View);{(icon);}}});location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title);}(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\");}}if(0)if(getMenu){clone();ActionMenuItem();add();actions(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) {if(((MenuItem)(position))==more){(false);}if(((ActionMenuItem))){ if(null)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}
{"time": "2021-01-20 18:30:29.746300", "n_pass": [17056, 1674, 463], "score": "0.3428", "loss": "2.6474", "code": "void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon=null)(View);{(icon);}}});location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title);}(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())(\"\");}}if(0)if(getMenu){clone();ActionMenuItem();add();(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) {if(((MenuItem)(position))==more){(false);}if(((ActionMenuItem))){ if(null)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }"}

Minimal simplified code:
void init(finalContext context){setCanceledOnTouchOutside();mDialogView=(ClosableSlidingLayout)View();addView(View(),mDialogView);if(cancelOnSwipeDown)(new ClosableSlidingLayout(){onClosed(){}onOpened(){showFullItems();}});(new OnShowListener(){onShow(DialogInterface dialogInterface){if(showListener)(dialogInterface);startLayoutAnimation();if(icon=null)(View);{(icon);}}});location=newint[2];(location);if(Build){(0?mStatusBarHeight:0).getChildAt(mNavBarAvailable?(getContext())+mDialogView:0);(title);}(gridview);if(!grid){setNumColumns();}if(builder){for(;;i++){if(getMenu())("");}}if(0)if(getMenu){clone();ActionMenuItem();add();(true);}new BaseAdapter(){getCount(){}getItem(int position){}getItemId(int position){}getViewTypeCount(){}isEnabled(int position){}areAllItemsEnabled(){}getView(View convertView){if(convertView){(Context);}for(i0;;i++){(valueAt()<position);}item();(getTitle());if(null)(collapseListIcons?View:View);{(View);}(item);} class ViewHolder{TextView title;}}; SimpleSectionedGridAdapter();setAdapter();(list); (new OnItemClickListener(){onItemClick(AdapterView<?> parent,View view,long id) {if(((MenuItem)(position))==more){(false);}if(((ActionMenuItem))){ if(null)(((MenuItem)(position)));}}});if(null){setOnDismissListener();}setListLayout(); }

