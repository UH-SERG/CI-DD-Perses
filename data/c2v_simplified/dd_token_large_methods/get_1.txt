
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/droidefense__engine/mods/memapktool/src/main/java/org/jf/dexlib2/analysis/ClassProto_get.java
method_name = get
method_body = @Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto) classPath.getClass("Ljava/lang/Object;")).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { ClassProto superclass = (ClassProto) classPath.getClass(superclassType); vtable.addAll(superclass.getVtable()); if (!superclass.vtableFullyResolved) { vtableFullyResolved = false; return vtable; } } if (!isInterface()) { addToVtable(getClassDef().getVirtualMethods(), vtable, true, true); Iterable<ClassDef> interfaces = Lists.reverse(Lists.newArrayList(getDirectInterfaces())); List<Method> defaultMethods = Lists.newArrayList(); List<Method> defaultConflictMethods = Lists.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else { int defaultMethodIndex = findMethodIndexInVtable(defaultMethods, interfaceMethod); if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; } int mirandaMethodIndex = findMethodIndexInVtable(mirandaMethods, interfaceMethod); if (mirandaMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrder.put(interfaceMethod, methodOrder.size()); } else { mirandaMethods.add(interfaceMethod); methodOrder.put(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(mirandaMethods, comparator); addToVtable(defaultMethods, vtable, false, false); addToVtable(defaultConflictMethods, vtable, false, false); addToVtable(mirandaMethods, vtable, false, false); } return vtable; }
predict, score, loss = get, 0.9996308088302612, 0.0014577010879293084

Trace of simplified code(s):
{"time": "2021-01-20 20:37:54.061730", "n_pass": [1, 1, 1], "score": "0.9408", "loss": "0.6952", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto) classPath.getClass(\"Ljava/lang/Object;\")).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { ClassProto superclass = (ClassProto) classPath.getClass(superclassType); vtable.addAll(superclass.getVtable()); if (!superclass.vtableFullyResolved) { vtableFullyResolved = false; return vtable; } } if (!isInterface()) { addToVtable(getClassDef().getVirtualMethods(), vtable, true, true); Iterable<ClassDef> interfaces = Lists.reverse(Lists.newArrayList(getDirectInterfaces())); List<Method> defaultMethods = Lists.newArrayList(); List<Method> defaultConflictMethods = Lists.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else { int defaultMethodIndex = findMethodIndexInVtable(defaultMethods, interfaceMethod); if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; } int mirandaMethodIndex = findMethodIndexInVtable(mirandaMethods, interfaceMethod); if (mirandaMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrder.put(interfaceMethod, methodOrder.size()); } else { mirandaMethods.add(interfaceMethod); methodOrder.put(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(mirandaMethods, comparator); addToVtable(defaultMethods, vtable, false, false); addToVtable(defaultConflictMethods, vtable, false, false); addToVtable(mirandaMethods, vtable, false, false); } return vtable; }"}
{"time": "2021-01-20 20:37:57.044240", "n_pass": [21, 2, 2], "score": "0.9997", "loss": "0.0006", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto) classPath.getClass(\"Ljava/lang/Object;\")).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList(); List<Method> defaultConflictMethods = Lists.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else { int defaultMethodIndex = findMethodIndexInVtable(defaultMethods, interfaceMethod); if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; } int mirandaMethodIndex = findMethodIndexInVtable(mirandaMethods, interfaceMethod); if (mirandaMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrder.put(interfaceMethod, methodOrder.size()); } else { mirandaMethods.add(interfaceMethod); methodOrder.put(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(mirandaMethods, comparator); addToVtable(defaultMethods, vtable, false, false); addToVtable(defaultConflictMethods, vtable, false, false); addToVtable(mirandaMethods, vtable, false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:00.218419", "n_pass": [95, 3, 3], "score": "0.9999", "loss": "0.0001", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto) classPath.getClass(\"Ljava/lang/Object;\")).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList(); List<Method> defaultConflictMethods = Lists.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else { int defaultMethodIndex = findMethodIndexInVtable(defaultMethods, interfaceMethod); if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrder.put(interfaceMethod, methodOrder.size()); } else { mirandaMethods.add(interfaceMethod); methodOrder.put(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(mirandaMethods, comparator); addToVtable(defaultMethods, vtable, false, false); addToVtable(defaultConflictMethods, vtable, false, false); addToVtable(mirandaMethods, vtable, false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:03.170883", "n_pass": [101, 4, 4], "score": "0.9848", "loss": "0.2243", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto) classPath.getClass(\"Ljava/lang/Object;\")).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList(); List<Method> defaultConflictMethods = Lists.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else { int defaultMethodIndex = findMethodIndexInVtable(defaultMethods, interfaceMethod); if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(mirandaMethods, comparator); addToVtable(defaultMethods, vtable, false, false); addToVtable(defaultConflictMethods, vtable, false, false); addToVtable(mirandaMethods, vtable, false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:06.108477", "n_pass": [106, 5, 5], "score": "0.468", "loss": "2.8829", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto) classPath.getClass(\"Ljava/lang/Object;\")).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList(); List<Method> defaultConflictMethods = Lists.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else { int defaultMethodIndex = findMethodIndexInVtable(defaultMethods, interfaceMethod); if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); addToVtable(mirandaMethods, vtable, false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:09.165402", "n_pass": [182, 6, 6], "score": "0.2337", "loss": "4.2581", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto) classPath.getClass(\"Ljava/lang/Object;\")).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList(); List<Method> defaultConflictMethods = Lists.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else { int defaultMethodIndex = findMethodIndexInVtable(defaultMethods, interfaceMethod); if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:12.568238", "n_pass": [188, 7, 7], "score": "0.5717", "loss": "2.3437", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList(); List<Method> defaultConflictMethods = Lists.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else { int defaultMethodIndex = findMethodIndexInVtable(defaultMethods, interfaceMethod); if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:15.485829", "n_pass": [192, 8, 8], "score": "0.9751", "loss": "0.2192", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else { int defaultMethodIndex = findMethodIndexInVtable(defaultMethods, interfaceMethod); if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:30.178668", "n_pass": [354, 12, 9], "score": "0.8836", "loss": "0.5414", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {findMethodIndexInVtable(defaultMethods, interfaceMethod); if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:33.039444", "n_pass": [355, 13, 10], "score": "0.5611", "loss": "2.8842", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:35.910284", "n_pass": [362, 14, 11], "score": "0.95", "loss": "0.1102", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (defaultMethods.get(defaultMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:38.756523", "n_pass": [363, 15, 12], "score": "0.2204", "loss": "4.4541", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndex); defaultConflictMethods.add(removedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:41.704547", "n_pass": [369, 16, 13], "score": "0.1856", "loss": "3.198", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.get(oldMethod); methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:47.438086", "n_pass": [387, 18, 14], "score": "0.9726", "loss": "0.1054", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); defaultMethods.add(interfaceMethod); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:50.266435", "n_pass": [389, 19, 15], "score": "0.8786", "loss": "1.1693", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrder.get(o1), methodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:55.974115", "n_pass": [404, 21, 16], "score": "0.9882", "loss": "0.0381", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collections.sort(defaultMethods, comparator); Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:38:58.795595", "n_pass": [407, 22, 17], "score": "0.9454", "loss": "0.2052", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList(); String superclassType; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collections; Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:01.647241", "n_pass": [416, 23, 18], "score": "0.6269", "loss": "2.5093", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod = mirandaMethods.remove(mirandaMethodIndex); int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collections; Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:08.546665", "n_pass": [474, 25, 19], "score": "0.9674", "loss": "0.2715", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { defaultMethods.add(interfaceMethod); methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collections; Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:11.398822", "n_pass": [481, 26, 20], "score": "0.945", "loss": "0.2489", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override public int compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collections; Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:21.217183", "n_pass": [739, 29, 21], "score": "0.7439", "loss": "0.7729", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collections; Collections.sort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:24.088664", "n_pass": [750, 30, 22], "score": "0.2968", "loss": "3.7668", "code": "@Override public List<Method> get() { List<Method> vtable = Lists.newArrayList; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:30.202928", "n_pass": [760, 32, 23], "score": "0.925", "loss": "0.4667", "code": "@Override public List get() { List<Method> vtable = Lists.newArrayList; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:34.356140", "n_pass": [766, 33, 24], "score": "0.955", "loss": "0.314", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType = getSuperclass(); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:37.185836", "n_pass": [770, 34, 25], "score": "0.9921", "loss": "0.0324", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) { vtable.addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:40.038067", "n_pass": [776, 35, 26], "score": "0.9831", "loss": "0.0612", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; return vtable; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:46.149375", "n_pass": [784, 37, 27], "score": "0.8785", "loss": "0.8974", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods = Lists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:49.107589", "n_pass": [791, 38, 28], "score": "0.8885", "loss": "0.5283", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethodsLists.newArrayList.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:51.914127", "n_pass": [792, 39, 29], "score": "0.9509", "loss": "0.2441", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference, Integer> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:39:58.422343", "n_pass": [802, 41, 30], "score": "0.9743", "loss": "0.0824", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex >= 0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:01.306195", "n_pass": [821, 42, 31], "score": "0.9534", "loss": "0.2124", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod, vtable.get(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:04.129016", "n_pass": [825, 43, 32], "score": "0.2464", "loss": "4.366", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(vtableIndex, interfaceMethod); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:06.948267", "n_pass": [829, 44, 33], "score": "0.7501", "loss": "2.4942", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex >= 0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:09.765454", "n_pass": [834, 45, 34], "score": "0.9903", "loss": "0.0656", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:12.578688", "n_pass": [839, 46, 35], "score": "0.9433", "loss": "0.5113", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(defaultConflictMethods, interfaceMethod); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:15.485763", "n_pass": [857, 47, 36], "score": "0.4515", "loss": "3.8061", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex >= 0) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:18.308116", "n_pass": [860, 48, 37], "score": "0.9229", "loss": "0.4697", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:21.135016", "n_pass": [864, 49, 38], "score": "0.7875", "loss": "1.358", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = (ClassProto) classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:23.948320", "n_pass": [869, 50, 39], "score": "0.8959", "loss": "0.8313", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface = classPath.getClass(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:26.772001", "n_pass": [870, 51, 40], "score": "0.72", "loss": "2.2233", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface =(mirandaMethods.get(mirandaMethodIndex).getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:29.562884", "n_pass": [872, 52, 41], "score": "0.9552", "loss": "0.2857", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface =(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method oldMethod ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:32.374021", "n_pass": [879, 53, 42], "score": "0.8372", "loss": "1.3848", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface =(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { ; int methodOrderValue = methodOrder.put(interfaceMethod, methodOrderValue); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:37.947945", "n_pass": [883, 55, 43], "score": "0.7868", "loss": "2.2636", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface =(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { ; int methodOrderValue = methodOrder.put(); } } continue; } if (!AccessFlags.ABSTRACT.isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:40.741584", "n_pass": [888, 56, 44], "score": "0.947", "loss": "0.3961", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface =(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { ; int methodOrderValue = methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethod, methodOrder.size()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:43.558593", "n_pass": [893, 57, 45], "score": "0.9604", "loss": "0.2442", "code": "@Override public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface =(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { ; int methodOrderValue = methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:46.506327", "n_pass": [920, 58, 46], "score": "0.9495", "loss": "0.2227", "code": "public List get() { List<Method> vtable =newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface =(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { ; int methodOrderValue = methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:50.604803", "n_pass": [926, 59, 47], "score": "0.9942", "loss": "0.0279", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved = false; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface =(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { ; int methodOrderValue = methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:53.883455", "n_pass": [940, 60, 48], "score": "0.8952", "loss": "0.3987", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolvedfalse; ; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface =(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { ; int methodOrderValue = methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:40:56.673064", "n_pass": [941, 61, 49], "score": "0.9944", "loss": "0.0498", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList(); final HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface =(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { ; int methodOrderValue = methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:00.557332", "n_pass": [955, 62, 50], "score": "0.9948", "loss": "0.0214", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList();HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto existingInterface =(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { ; int methodOrderValue = methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:04.469627", "n_pass": [1014, 63, 51], "score": "0.4594", "loss": "2.5657", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList();HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { ; int methodOrderValue = methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:07.283312", "n_pass": [1022, 64, 52], "score": "0.9532", "loss": "0.1887", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList();HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrderValue = methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:10.073875", "n_pass": [1023, 65, 53], "score": "0.5768", "loss": "2.7236", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); vtableFullyResolved; } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList();HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:14.373379", "n_pass": [1076, 66, 54], "score": "0.9655", "loss": "0.2903", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex) {addAll(((ClassProto)).getVtable()); } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList();HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:31.796706", "n_pass": [1470, 67, 55], "score": "0.5388", "loss": "2.9989", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassType != null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList();HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:34.624416", "n_pass": [1482, 68, 56], "score": "0.6988", "loss": "2.087", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassType= null) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList();HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:37.414691", "n_pass": [1483, 69, 57], "score": "0.801", "loss": "1.2191", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethods.newArrayList(); List<Method> mirandaMethods = Lists.newArrayList();HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:40.249470", "n_pass": [1487, 70, 58], "score": "0.9868", "loss": "0.0593", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethods(); List<Method> mirandaMethods = Lists.newArrayList();HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:43.033928", "n_pass": [1488, 71, 59], "score": "0.4381", "loss": "2.8228", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethods; List<Method> mirandaMethods = Lists.newArrayList();HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:45.867492", "n_pass": [1489, 72, 60], "score": "0.3943", "loss": "2.6917", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList();HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:52.314519", "n_pass": [1496, 74, 61], "score": "0.9126", "loss": "0.6663", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = Maps.newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:41:56.409802", "n_pass": [1502, 75, 62], "score": "0.5738", "loss": "2.3616", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { int vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:02.047966", "n_pass": [1521, 77, 63], "score": "0.1609", "loss": "4.96", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides(interfaceMethod,(vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:07.642426", "n_pass": [1536, 79, 64], "score": "0.6992", "loss": "1.7391", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.ABSTRACT.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:18.795852", "n_pass": [1556, 83, 65], "score": "0.8365", "loss": "1.2349", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags.isSet(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:21.586789", "n_pass": [1557, 84, 66], "score": "0.8496", "loss": "0.6466", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { ClassProto existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:24.370060", "n_pass": [1561, 85, 67], "score": "0.7904", "loss": "1.0733", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:32.756343", "n_pass": [1572, 88, 68], "score": "0.2891", "loss": "4.3673", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method removedMethod = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:38.335284", "n_pass": [1578, 90, 69], "score": "0.5808", "loss": "2.4879", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = defaultMethods.remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:41.130996", "n_pass": [1580, 91, 70], "score": "0.5665", "loss": "2.6657", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(defaultMethodIndexremovedMethod); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:43.898875", "n_pass": [1582, 92, 71], "score": "0.6683", "loss": "2.2042", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } } continue; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:46.693172", "n_pass": [1586, 93, 72], "score": "0.9038", "loss": "0.6232", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } int defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:52.234785", "n_pass": [1589, 95, 73], "score": "0.3957", "loss": "3.6181", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) { continue; if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:55.042042", "n_pass": [1599, 96, 74], "score": "0.3927", "loss": "3.4525", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if (!AccessFlags(interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:42:57.833732", "n_pass": [1602, 97, 75], "score": "0.1898", "loss": "4.5954", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod.getAccessFlags())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:43:00.611623", "n_pass": [1604, 98, 76], "score": "0.6461", "loss": "2.6427", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) { ClassProto(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:43:06.206285", "n_pass": [1608, 100, 77], "score": "0.4089", "loss": "4.2149", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethods.getgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:43:09.001585", "n_pass": [1610, 101, 78], "score": "0.5497", "loss": "2.7088", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(interfaceMethod.getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:43:14.562050", "n_pass": [1618, 103, 79], "score": "0.4151", "loss": "3.9035", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { methodOrderput(interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:43:25.738551", "n_pass": [1639, 107, 80], "score": "0.643", "loss": "3.1417", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { return Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:43:32.242790", "n_pass": [1667, 109, 81], "score": "0.5799", "loss": "2.9885", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { Ints.compare(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:43:35.052014", "n_pass": [1669, 110, 82], "score": "0.8089", "loss": "1.5827", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { Ints(methodOrdermethodOrder.get(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:43:37.835767", "n_pass": [1671, 111, 83], "score": "0.7776", "loss": "1.8549", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { Ints(methodOrderget(o2)); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:43:40.605981", "n_pass": [1673, 112, 84], "score": "0.5168", "loss": "3.2731", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { Ints(methodOrderget()); } }; Collectionssort(defaultConflictMethods, comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:43:46.170555", "n_pass": [1680, 114, 85], "score": "0.3154", "loss": "4.0266", "code": "public List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { Ints(methodOrderget()); } }; Collectionssort( comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:44:00.026800", "n_pass": [1693, 119, 86], "score": "0.328", "loss": "3.8255", "code": " List get() { List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { Ints(methodOrderget()); } }; Collectionssort( comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:44:09.792350", "n_pass": [1702, 122, 87], "score": "0.6776", "loss": "1.1003", "code": " List get() {List<Method> newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { Ints(methodOrderget()); } }; Collectionssort( comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:44:12.975971", "n_pass": [1707, 123, 88], "score": "0.5607", "loss": "3.3027", "code": " List get() {List<Method>newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if (!AccessFlags(interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { Ints(methodOrderget()); } }; Collectionssort( comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:44:56.795432", "n_pass": [1805, 138, 89], "score": "0.3343", "loss": "4.3261", "code": " List get() {List<Method>newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { Ints(methodOrderget()); } }; Collectionssort( comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:45:10.776846", "n_pass": [1852, 143, 90], "score": "0.2091", "loss": "5.0706", "code": " List get() {List<Method>newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) { Ints(methodOrderget()); } }; Collectionssort( comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:45:25.568272", "n_pass": [1901, 148, 91], "score": "0.1956", "loss": "4.6353", "code": " List get() {List<Method>newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } }; Collectionssort( comparator); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:45:31.162905", "n_pass": [1910, 150, 92], "score": "0.365", "loss": "4.047", "code": " List get() {List<Method>newArrayList; try { superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } }; Collectionssort(); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:45:52.653101", "n_pass": [1938, 157, 93], "score": "0.2706", "loss": "4.4904", "code": " List get() {List<Method>newArrayList; try{ superclassType (); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } }; Collectionssort(); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:45:58.205187", "n_pass": [1942, 159, 94], "score": "0.6607", "loss": "1.7726", "code": " List get() {List<Method>newArrayList; try{ superclassType(); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } }; Collectionssort(); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:46:54.563487", "n_pass": [2131, 178, 95], "score": "0.3483", "loss": "4.0434", "code": " List get() {List<Method>newArrayList; try{ superclassType(); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections.sort(false, false); } return vtable; }"}
{"time": "2021-01-20 20:46:57.361316", "n_pass": [2135, 179, 96], "score": "0.7811", "loss": "1.904", "code": " List get() {List<Method>newArrayList; try{ superclassType(); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:47:05.657352", "n_pass": [2144, 182, 97], "score": "0.3108", "loss": "4.2571", "code": "List get() {List<Method>newArrayList; try{ superclassType(); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:47:16.139176", "n_pass": [2161, 185, 98], "score": "0.2067", "loss": "4.6984", "code": "List get() {List<Method>newArrayList; try{superclassType(); } catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:47:18.921789", "n_pass": [2166, 186, 99], "score": "0.7862", "loss": "1.2068", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists.newArrayList;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:47:30.896138", "n_pass": [2195, 190, 100], "score": "0.3334", "loss": "4.0997", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtable, interfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:47:37.785363", "n_pass": [2223, 192, 101], "score": "0.3229", "loss": "4.2906", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface = (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:47:48.914858", "n_pass": [2255, 196, 102], "score": "0.5933", "loss": "2.3455", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }; } defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:47:54.536343", "n_pass": [2274, 198, 103], "score": "0.5327", "loss": "3.0908", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(interfaceMethod.getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:48:05.683430", "n_pass": [2313, 202, 104], "score": "0.3074", "loss": "4.2325", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : interfaceDef.getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:48:36.004252", "n_pass": [2429, 211, 105], "score": "0.4294", "loss": "3.4167", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { vtable.set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:48:41.596905", "n_pass": [2450, 213, 106], "score": "0.2902", "loss": "4.1415", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set(); } } else {; if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:48:47.112637", "n_pass": [2457, 215, 107], "score": "0.3204", "loss": "4.161", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set(); } } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { methodOrder.put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:48:58.338104", "n_pass": [2513, 219, 108], "score": "0.9489", "loss": "0.3887", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()) { vtableIndex = findMethodIndexInVtable(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set(); } } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:49:31.721584", "n_pass": [2644, 229, 109], "score": "0.3304", "loss": "3.916", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()) { vtableIndex =(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set(); } } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() { @Override compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:49:49.443578", "n_pass": [2752, 235, 110], "score": "0.9601", "loss": "0.2324", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()) { vtableIndex =(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set(); } } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() {  compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } return vtable; }"}
{"time": "2021-01-20 20:49:55.044102", "n_pass": [2775, 237, 111], "score": "0.4707", "loss": "2.855", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()) { vtableIndex =(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set(); } } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod())) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() {  compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 20:50:30.043908", "n_pass": [2911, 248, 112], "score": "0.2332", "loss": "4.3633", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()) { vtableIndex =(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set(); } } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) { put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() {  compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 20:52:09.915957", "n_pass": [3473, 266, 113], "score": "0.2897", "loss": "4.8009", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()) { vtableIndex =(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set(); } } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>() {  compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 20:53:13.872058", "n_pass": [3535, 289, 114], "score": "0.3519", "loss": "3.604", "code": "List get() {List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()) { vtableIndex =(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set(); } } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 20:54:02.202144", "n_pass": [3591, 306, 115], "score": "0.2419", "loss": "4.6597", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()) { vtableIndex =(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set(); } } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 20:55:24.352599", "n_pass": [3694, 335, 116], "score": "0.4777", "loss": "3.4447", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set(); } } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 20:56:08.710796", "n_pass": [3732, 351, 117], "score": "0.3761", "loss": "4.0601", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if (!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 20:57:56.454470", "n_pass": [3835, 390, 118], "score": "0.3897", "loss": "2.5775", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o2) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 20:59:19.917433", "n_pass": [3922, 420, 119], "score": "0.3471", "loss": "4.2963", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex0) { if (interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:01:36.200559", "n_pass": [4080, 468, 120], "score": "0.7222", "loss": "1.2503", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if (interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:01:44.489309", "n_pass": [4086, 471, 121], "score": "0.171", "loss": "5.1136", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex0) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:02:12.042200", "n_pass": [4113, 481, 122], "score": "0.4405", "loss": "2.7739", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if (!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:02:36.910101", "n_pass": [4138, 490, 123], "score": "0.227", "loss": "5.1358", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())) { Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:02:45.238443", "n_pass": [4150, 493, 124], "score": "0.4744", "loss": "3.0357", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove(); } }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:02:56.350493", "n_pass": [4161, 497, 125], "score": "0.3231", "loss": "4.1227", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();} }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<MethodReference>(){  compare(MethodReference o1, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:04:47.918350", "n_pass": [4272, 537, 126], "score": "0.5578", "loss": "3.3146", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();} }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){  compare(MethodReference o1, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:04:50.700861", "n_pass": [4277, 538, 127], "score": "0.2561", "loss": "4.0539", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();} }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o1, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:04:56.303118", "n_pass": [4284, 540, 128], "score": "0.4202", "loss": "3.5984", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch (UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();} }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:05:40.292917", "n_pass": [4347, 555, 129], "score": "0.1708", "loss": "5.4194", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch(UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods = Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();} }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:06:14.029474", "n_pass": [4386, 567, 130], "score": "0.4711", "loss": "2.8721", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch(UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods= Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();} }} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:08:17.108986", "n_pass": [4524, 611, 131], "score": "0.4629", "loss": "2.7384", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch(UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods= Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();}}} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if (!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:09:24.134703", "n_pass": [4591, 635, 132], "score": "0.391", "loss": "4.1944", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch(UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods= Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();}}} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if(!isSet(getAccessFlags())) { (interfaceMethodsize()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:09:38.019182", "n_pass": [4605, 640, 133], "score": "0.1929", "loss": "4.9665", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch(UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods= Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();}}} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if(!isSet(getAccessFlags())) { (size()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget()); } };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:10:17.286961", "n_pass": [4658, 654, 134], "score": "0.4739", "loss": "3.4253", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch(UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods= Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();}}} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if(!isSet(getAccessFlags())) { (size()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget());} };sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:10:20.066743", "n_pass": [4660, 655, 135], "score": "0.2822", "loss": "3.7347", "code": "List get(){List<Method>newArrayList; try{superclassType();} catch(UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods= Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();}}} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if(!isSet(getAccessFlags())) { (size()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget());}};sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:10:44.493502", "n_pass": [4703, 663, 136], "score": "0.25", "loss": "4.8921", "code": "List get(){List<Method>newArrayList; try{superclassType();}catch(UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods= Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces) { for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();}}} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if(!isSet(getAccessFlags())) { (size()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget());}};sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:11:41.212155", "n_pass": [4772, 683, 137], "score": "0.3236", "loss": "3.26", "code": "List get(){List<Method>newArrayList; try{superclassType();}catch(UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods= Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces){ for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method = remove();}}} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if(!isSet(getAccessFlags())) { (size()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget());}};sort(); Collections(false, false); } vtable; }"}
{"time": "2021-01-20 21:13:12.542362", "n_pass": [4872, 716, 138], "score": "0.3935", "loss": "3.6218", "code": "List get(){List<Method>newArrayList; try{superclassType();}catch(UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods= Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces){ for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method= remove();}}} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if(!isSet(getAccessFlags())) { (size()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget());}};sort(); Collections(false, false); } vtable; }"}

Minimal simplified code:
List get(){List<Method>newArrayList; try{superclassType();}catch(UnresolvedClassException ex){addAll(((ClassProto)).getVtable()); } if (superclassTypenull) { defaultMethodsList<Method> mirandaMethods= Lists;HashMap<MethodReference> methodOrder = newHashMap(); for (ClassDef interfaceDef : interfaces){ for (Method interfaceMethod : getVirtualMethods()){ vtableIndex =(vtableinterfaceMethod); if (vtableIndex) { if(interfaceMethodOverrides((vtableIndex))) { set();} } else {if (defaultMethodIndex) { if ((interfaceMethod)) { existingInterface (getDefiningClass()); if(!existingInterface.implementsInterface(getDefiningClass())){ Method= remove();}}} defaultConflictMethodIndex = findMethodIndexInVtable(); if (defaultConflictMethodIndex ) {  if ((interfaceMethod)) {(mirandaMethodsgetDefiningClass()); if(!implementsInterface(getDefiningClass())) {put(); } } continue; } if(!isSet(getAccessFlags())) { (size()); } } } } Comparator<MethodReference> comparator = new Comparator<>(){ compare(MethodReference o, MethodReference o) {(methodOrderget());}};sort(); Collections(false, false); } vtable; }

