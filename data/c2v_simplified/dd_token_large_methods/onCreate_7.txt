
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Piasy__AppRTC-Android/app/src/main/java/org/appspot/apprtc/CallActivity_onCreate.java
method_name = onCreate
method_body = @Override @SuppressWarnings("deprecation") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON); getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility()); setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0); int videoOutHeight = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException("Failed to open video file for output: " + saveRemoteVideoToFile, e); } } fullscreenRenderer.init(eglBase.getEglBaseContext(), null); fullscreenRenderer.setScalingType(ScalingType.SCALE_ASPECT_FILL); pipRenderer.setZOrderMediaOverlay(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { logAndToast("Permission " + permission + " is not granted"); setResult(RESULT_CANCELED); finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, "Didn't get any URL in intent!"); setResult(RESULT_CANCELED); finish(); return; } String roomId = intent.getStringExtra(EXTRA_ROOMID); Log.d(TAG, "Room ID: " + roomId); if (roomId == null || roomId.length() == 0) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, "Incorrect room ID in intent!"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1), intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEO_BITRATE, 0), intent.getStringExtra(EXTRA_VIDEOCODEC), intent.getBooleanExtra(EXTRA_HWCODEC_ENABLED, true), intent.getBooleanExtra(EXTRA_FLEXFEC_ENABLED, false), intent.getIntExtra(EXTRA_AUDIO_BITRATE, 0), intent.getStringExtra(EXTRA_AUDIOCODEC), intent.getBooleanExtra(EXTRA_NOAUDIOPROCESSING_ENABLED, false), intent.getBooleanExtra(EXTRA_AECDUMP_ENABLED, false), intent.getBooleanExtra(EXTRA_SAVE_INPUT_AUDIO_TO_FILE_ENABLED, false), intent.getBooleanExtra(EXTRA_OPENSLES_ENABLED, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AEC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AGC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_NS, false), intent.getBooleanExtra(EXTRA_DISABLE_WEBRTC_AGC_AND_HPF, false), intent.getBooleanExtra(EXTRA_ENABLE_RTCEVENTLOG, false), intent.getBooleanExtra(EXTRA_USE_LEGACY_AUDIO_DEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, "VIDEO_FILE: '" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + "'"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, "Using DirectRTCClient because room name looks like an IP."); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }
predict, score, loss = onCreate, 0.9971151351928711, 0.0029714026022702456

Trace of simplified code(s):
{"time": "2021-01-21 06:20:36.917505", "n_pass": [1, 1, 1], "score": "0.9125", "loss": "0.0945", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON); getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility()); setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0); int videoOutHeight = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer.init(eglBase.getEglBaseContext(), null); fullscreenRenderer.setScalingType(ScalingType.SCALE_ASPECT_FILL); pipRenderer.setZOrderMediaOverlay(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { logAndToast(\"Permission \" + permission + \" is not granted\"); setResult(RESULT_CANCELED); finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn't get any URL in intent!\"); setResult(RESULT_CANCELED); finish(); return; } String roomId = intent.getStringExtra(EXTRA_ROOMID); Log.d(TAG, \"Room ID: \" + roomId); if (roomId == null || roomId.length() == 0) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Incorrect room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1), intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEO_BITRATE, 0), intent.getStringExtra(EXTRA_VIDEOCODEC), intent.getBooleanExtra(EXTRA_HWCODEC_ENABLED, true), intent.getBooleanExtra(EXTRA_FLEXFEC_ENABLED, false), intent.getIntExtra(EXTRA_AUDIO_BITRATE, 0), intent.getStringExtra(EXTRA_AUDIOCODEC), intent.getBooleanExtra(EXTRA_NOAUDIOPROCESSING_ENABLED, false), intent.getBooleanExtra(EXTRA_AECDUMP_ENABLED, false), intent.getBooleanExtra(EXTRA_SAVE_INPUT_AUDIO_TO_FILE_ENABLED, false), intent.getBooleanExtra(EXTRA_OPENSLES_ENABLED, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AEC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AGC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_NS, false), intent.getBooleanExtra(EXTRA_DISABLE_WEBRTC_AGC_AND_HPF, false), intent.getBooleanExtra(EXTRA_ENABLE_RTCEVENTLOG, false), intent.getBooleanExtra(EXTRA_USE_LEGACY_AUDIO_DEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:20:40.305229", "n_pass": [50, 2, 2], "score": "1.0", "loss": "0.0", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON); getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility()); setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0); int videoOutHeight = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer.init(eglBase.getEglBaseContext(), null); fullscreenRenderer.setScalingType(ScalingType.SCALE_ASPECT_FILL); pipRenderer.setZOrderMediaOverlay(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { logAndToast(\"Permission \" + permission + \" is not granted\"); setResult(RESULT_CANCELED); finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1), intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEO_BITRATE, 0), intent.getStringExtra(EXTRA_VIDEOCODEC), intent.getBooleanExtra(EXTRA_HWCODEC_ENABLED, true), intent.getBooleanExtra(EXTRA_FLEXFEC_ENABLED, false), intent.getIntExtra(EXTRA_AUDIO_BITRATE, 0), intent.getStringExtra(EXTRA_AUDIOCODEC), intent.getBooleanExtra(EXTRA_NOAUDIOPROCESSING_ENABLED, false), intent.getBooleanExtra(EXTRA_AECDUMP_ENABLED, false), intent.getBooleanExtra(EXTRA_SAVE_INPUT_AUDIO_TO_FILE_ENABLED, false), intent.getBooleanExtra(EXTRA_OPENSLES_ENABLED, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AEC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AGC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_NS, false), intent.getBooleanExtra(EXTRA_DISABLE_WEBRTC_AGC_AND_HPF, false), intent.getBooleanExtra(EXTRA_ENABLE_RTCEVENTLOG, false), intent.getBooleanExtra(EXTRA_USE_LEGACY_AUDIO_DEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:20:43.432495", "n_pass": [53, 3, 3], "score": "0.9821", "loss": "0.0186", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON); getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility()); setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0); int videoOutHeight = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer.init(eglBase.getEglBaseContext(), null); fullscreenRenderer.setScalingType(ScalingType.SCALE_ASPECT_FILL); pipRenderer.setZOrderMediaOverlay(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { logAndToast(\"Permission \" + permission + \" is not granted\"); setResult(RESULT_CANCELED); finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1), intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEO), intent.getBooleanExtra(EXTRA_OPENSLES_ENABLED, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AEC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AGC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_NS, false), intent.getBooleanExtra(EXTRA_DISABLE_WEBRTC_AGC_AND_HPF, false), intent.getBooleanExtra(EXTRA_ENABLE_RTCEVENTLOG, false), intent.getBooleanExtra(EXTRA_USE_LEGACY_AUDIO_DEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:20:46.448498", "n_pass": [54, 4, 4], "score": "0.9985", "loss": "0.0015", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON); getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility()); setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0); int videoOutHeight = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer.init(eglBase.getEglBaseContext(), null); fullscreenRenderer.setScalingType(ScalingType.SCALE_ASPECT_FILL); pipRenderer.setZOrderMediaOverlay(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { logAndToast(\"Permission \" + permission + \" is not granted\"); setResult(RESULT_CANCELED); finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1), intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:20:49.811943", "n_pass": [103, 5, 5], "score": "0.9106", "loss": "0.0938", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow(). setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0); int videoOutHeight = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer.init(eglBase.getEglBaseContext(), null); fullscreenRenderer.setScalingType(ScalingType.SCALE_ASPECT_FILL); pipRenderer.setZOrderMediaOverlay(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { logAndToast(\"Permission \" + permission + \" is not granted\"); setResult(RESULT_CANCELED); finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1), intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:20:53.670628", "n_pass": [189, 6, 6], "score": "1.0", "loss": "0.0", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow(). setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer.init(eglBase.getEglBaseContext(), null); fullscreenRenderer.setScalingType(ScalingType.SCALE_ASPECT_FILL); pipRenderer.setZOrderMediaOverlay(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { logAndToast(\"Permission \" + permission + \" is not granted\"); setResult(RESULT_CANCELED); finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1), intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:20:56.680330", "n_pass": [193, 7, 7], "score": "0.9102", "loss": "0.0949", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow(). setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { logAndToast(\"Permission \" + permission + \" is not granted\"); setResult(RESULT_CANCELED); finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1), intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:20:59.760881", "n_pass": [196, 8, 8], "score": "0.9694", "loss": "0.0356", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow(). setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1), intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:02.874187", "n_pass": [207, 9, 9], "score": "0.5625", "loss": "0.576", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow(). setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:06.047568", "n_pass": [224, 10, 10], "score": "0.9998", "loss": "0.0002", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow(). setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:09.114610", "n_pass": [228, 11, 11], "score": "0.9276", "loss": "0.0769", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:14.245420", "n_pass": [362, 12, 12], "score": "0.9475", "loss": "0.0637", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected= findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:17.272900", "n_pass": [363, 13, 13], "score": "0.9974", "loss": "0.0026", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:20.275977", "n_pass": [366, 14, 14], "score": "0.9996", "loss": "0.0004", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:23.633770", "n_pass": [399, 15, 15], "score": "0.5407", "loss": "0.6162", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:26.598031", "n_pass": [401, 16, 16], "score": "0.859", "loss": "0.1536", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:29.577576", "n_pass": [405, 17, 17], "score": "0.9861", "loss": "0.0143", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:32.537464", "n_pass": [407, 18, 18], "score": "1.0", "loss": "0.0", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:35.563987", "n_pass": [415, 19, 19], "score": "0.855", "loss": "0.167", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEODEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:38.512867", "n_pass": [417, 20, 20], "score": "0.9999", "loss": "0.0001", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:41.467889", "n_pass": [419, 21, 21], "score": "0.9995", "loss": "0.0005", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent. intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:44.406741", "n_pass": [420, 22, 22], "score": "0.9896", "loss": "0.0104", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:47.340460", "n_pass": [422, 23, 23], "score": "0.9998", "loss": "0.0002", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:50.321646", "n_pass": [429, 24, 24], "score": "0.9993", "loss": "0.0008", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:53.271854", "n_pass": [434, 25, 25], "score": "0.9991", "loss": "0.0009", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:56.196029", "n_pass": [437, 26, 26], "score": "0.803", "loss": "0.2443", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:21:59.207687", "n_pass": [444, 27, 27], "score": "0.9598", "loss": "0.0416", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = PeerConnectionFactory.Options(); if (loopback) (options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:03.297218", "n_pass": [516, 28, 28], "score": "0.998", "loss": "0.002", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:07.373736", "n_pass": [743, 29, 29], "score": "0.641", "loss": "0.468", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:10.358297", "n_pass": [757, 30, 30], "score": "0.9623", "loss": "0.0386", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:13.310720", "n_pass": [759, 31, 31], "score": "0.9853", "loss": "0.0163", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalgetIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:16.215990", "n_pass": [760, 32, 32], "score": "0.9986", "loss": "0.0014", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:19.299197", "n_pass": [762, 33, 33], "score": "0.9999", "loss": "0.0001", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:22.226517", "n_pass": [769, 34, 34], "score": "0.9906", "loss": "0.0103", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:25.212984", "n_pass": [774, 35, 35], "score": "0.8455", "loss": "0.1685", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:28.127199", "n_pass": [778, 36, 36], "score": "0.7217", "loss": "0.3366", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:31.054139", "n_pass": [780, 37, 37], "score": "0.9978", "loss": "0.0049", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:33.955646", "n_pass": [784, 38, 38], "score": "1.0", "loss": "0.0", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:36.885749", "n_pass": [788, 39, 39], "score": "1.0", "loss": "0.0", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:39.769871", "n_pass": [789, 40, 40], "score": "0.9052", "loss": "0.1124", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:42.752353", "n_pass": [793, 41, 41], "score": "0.9974", "loss": "0.0029", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:45.651010", "n_pass": [795, 42, 42], "score": "0.948", "loss": "0.0623", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn'room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:48.620378", "n_pass": [803, 43, 43], "score": "0.9797", "loss": "0.0245", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:51.578898", "n_pass": [814, 44, 44], "score": "0.9998", "loss": "0.0003", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics displayMetrics = getDisplayMetrics(); heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:54.468053", "n_pass": [817, 45, 45], "score": "0.9436", "loss": "0.0644", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:22:57.390114", "n_pass": [821, 46, 46], "score": "0.9989", "loss": "0.0011", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:00.304911", "n_pass": [825, 47, 47], "score": "0.9666", "loss": "0.0359", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:03.259384", "n_pass": [832, 48, 48], "score": "0.8574", "loss": "0.1544", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:06.242984", "n_pass": [846, 49, 49], "score": "0.9456", "loss": "0.1039", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:09.193948", "n_pass": [855, 50, 50], "score": "0.4696", "loss": "0.7568", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container,_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:12.134202", "n_pass": [861, 51, 51], "score": "0.9596", "loss": "0.0413", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:15.062477", "n_pass": [866, 52, 52], "score": "0.8035", "loss": "0.2414", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListeneradd(remoteProxyRenderer); finalEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:18.328346", "n_pass": [898, 53, 53], "score": "0.9998", "loss": "0.0002", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListenerEglBase eglBase = EglBase.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:21.174202", "n_pass": [899, 54, 54], "score": "0.999", "loss": "0.001", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer(true); pipRenderer(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:24.154767", "n_pass": [919, 55, 55], "score": "0.9995", "loss": "0.0005", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:27.149033", "n_pass": [940, 56, 56], "score": "0.9912", "loss": "0.0089", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true_MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:31.171509", "n_pass": [1298, 57, 57], "score": "0.6634", "loss": "0.416", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA__MAXEXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:34.051407", "n_pass": [1299, 58, 58], "score": "1.0", "loss": "0.0", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:36.936524", "n_pass": [1302, 59, 59], "score": "0.826", "loss": "0.1951", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:39.833099", "n_pass": [1306, 60, 60], "score": "0.9996", "loss": "0.0004", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_FILE: '\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:43.286257", "n_pass": [1319, 61, 61], "score": "0.9855", "loss": "0.0147", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:46.216891", "n_pass": [1325, 62, 62], "score": "0.9959", "loss": "0.0042", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:49.160323", "n_pass": [1336, 63, 63], "score": "0.9989", "loss": "0.0011", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"like an IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:52.034178", "n_pass": [1337, 64, 64], "score": "1.0", "loss": "0.0", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:55.375732", "n_pass": [1343, 65, 65], "score": "0.9931", "loss": "0.007", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:23:58.314053", "n_pass": [1352, 66, 66], "score": "0.9144", "loss": "0.2789", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:24:01.184837", "n_pass": [1353, 67, 67], "score": "0.879", "loss": "0.1356", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) {(cpuMonitor); } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:24:04.068803", "n_pass": [1354, 68, 68], "score": "0.766", "loss": "0.2671", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:24:06.980763", "n_pass": [1360, 69, 69], "score": "0.9878", "loss": "0.0123", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R._container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:24:09.869996", "n_pass": [1363, 70, 70], "score": "0.9952", "loss": "0.0049", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:24:12.763559", "n_pass": [1368, 71, 71], "score": "0.8388", "loss": "0.1789", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun  > 0) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:24:15.615292", "n_pass": [1369, 72, 72], "score": "0.9947", "loss": "0.0053", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:24:18.517673", "n_pass": [1374, 73, 73], "score": "0.9997", "loss": "0.0003", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }"}
{"time": "2021-01-21 06:24:21.480652", "n_pass": [1384, 74, 74], "score": "0.9976", "loss": "0.0024", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else { startCall(); } }"}
{"time": "2021-01-21 06:24:24.344587", "n_pass": [1387, 75, 75], "score": "0.9997", "loss": "0.0004", "code": "@Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:27.194132", "n_pass": [1389, 76, 76], "score": "0.813", "loss": "0.2088", "code": "@SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:30.038296", "n_pass": [1391, 77, 77], "score": "0.9995", "loss": "0.0005", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:33.345193", "n_pass": [1397, 78, 78], "score": "0.9439", "loss": "0.0597", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R.layout.activity_call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:36.638579", "n_pass": [1401, 79, 79], "score": "0.9993", "loss": "0.0007", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected fullscreenRenderer = findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:39.480277", "n_pass": [1404, 80, 80], "score": "0.9219", "loss": "0.0875", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected= findViewById(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:42.314447", "n_pass": [1405, 81, 81], "score": "0.9882", "loss": "0.0123", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.id.fullscreen_video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:45.171017", "n_pass": [1407, 82, 82], "score": "0.9966", "loss": "0.0036", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R._video_view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:48.007193", "n_pass": [1408, 83, 83], "score": "0.9019", "loss": "0.1053", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);CallFragment(); listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:50.895460", "n_pass": [1410, 84, 84], "score": "0.7326", "loss": "0.6283", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:53.789248", "n_pass": [1416, 85, 85], "score": "0.9286", "loss": "0.0743", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() { public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:56.649655", "n_pass": [1417, 86, 86], "score": "0.8971", "loss": "0.1728", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:24:59.531015", "n_pass": [1428, 87, 87], "score": "0.7851", "loss": "0.243", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:02.359900", "n_pass": [1429, 88, 88], "score": "0.7448", "loss": "0.3136", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:05.270100", "n_pass": [1441, 89, 89], "score": "0.9893", "loss": "0.0109", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__FILE, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:08.159224", "n_pass": [1454, 90, 90], "score": "0.9522", "loss": "0.054", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { throw new RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:11.044483", "n_pass": [1464, 91, 91], "score": "0.8377", "loss": "0.1787", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed to open: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:13.873679", "n_pass": [1466, 92, 92], "score": "0.9699", "loss": "0.031", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } }(true); for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:16.726313", "n_pass": [1471, 93, 93], "score": "0.792", "loss": "0.2495", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (PackageManager.PERMISSION_GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:19.650760", "n_pass": [1477, 94, 94], "score": "0.6667", "loss": "0.4078", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:22.528162", "n_pass": [1485, 95, 95], "score": "0.9998", "loss": "0.0002", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:25.379431", "n_pass": [1488, 96, 96], "score": "0.9725", "loss": "0.0312", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:28.244226", "n_pass": [1496, 97, 97], "score": "0.6588", "loss": "0.4242", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED);; return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:31.102598", "n_pass": [1497, 98, 98], "score": "0.8737", "loss": "0.1633", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, falseTRACING, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:33.977416", "n_pass": [1502, 99, 99], "score": "0.7358", "loss": "0.3106", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false), intent.getIntExtra(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:37.211368", "n_pass": [1529, 100, 100], "score": "0.758", "loss": "0.2792", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:42.565316", "n_pass": [1647, 101, 101], "score": "0.9938", "loss": "0.0063", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA__); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:25:58.811648", "n_pass": [2198, 102, 102], "score": "0.9878", "loss": "0.0123", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:01.677700", "n_pass": [2204, 103, 103], "score": "0.6275", "loss": "0.4664", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer = VideoFileRenderer(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:04.509253", "n_pass": [2205, 104, 104], "score": "0.9004", "loss": "0.1053", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFileeglBase.getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:07.358291", "n_pass": [2207, 105, 105], "score": "0.9735", "loss": "0.0415", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed: \" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:10.251176", "n_pass": [2219, 106, 106], "score": "0.8473", "loss": "0.1808", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" + saveRemoteVideoToFile, e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:13.095156", "n_pass": [2222, 107, 107], "score": "0.9888", "loss": "0.0114", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : MANDATORY_PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:16.284531", "n_pass": [2232, 108, 108], "score": "0.998", "loss": "0.0021", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {; } } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:19.152807", "n_pass": [2239, 109, 109], "score": "0.764", "loss": "0.2708", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } Uri roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:22.010278", "n_pass": [2242, 110, 110], "score": "0.9802", "loss": "0.0201", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = intent.getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:24.883691", "n_pass": [2245, 111, 111], "score": "0.7237", "loss": "0.967", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(missing_url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:27.762312", "n_pass": [2255, 112, 112], "score": "0.9664", "loss": "0.0459", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log.e(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:30.601886", "n_pass": [2259, 113, 113], "score": "0.9993", "loss": "0.0007", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\"); setResult(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:33.447455", "n_pass": [2265, 114, 114], "score": "0.9475", "loss": "0.0831", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT_CANCELED); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:36.272928", "n_pass": [2267, 115, 115], "score": "0.9997", "loss": "0.0003", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:39.136803", "n_pass": [2270, 116, 116], "score": "0.951", "loss": "0.0513", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:42.007894", "n_pass": [2274, 117, 117], "score": "0.95", "loss": "0.0708", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRA_LOOPBACK, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:44.863279", "n_pass": [2276, 118, 118], "score": "0.9623", "loss": "0.0387", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRA, false); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:47.686838", "n_pass": [2277, 119, 119], "score": "0.9657", "loss": "0.0374", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); int videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:50.548860", "n_pass": [2280, 120, 120], "score": "0.9136", "loss": "0.1105", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = intent.videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:53.386442", "n_pass": [2283, 121, 121], "score": "0.9949", "loss": "0.0054", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:56.229115", "n_pass": [2286, 122, 122], "score": "0.8748", "loss": "0.135", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra(EXTRA_VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:26:59.056507", "n_pass": [2288, 123, 123], "score": "0.9979", "loss": "0.0021", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra(VIDEO_HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:01.896753", "n_pass": [2289, 124, 124], "score": "0.9984", "loss": "0.0017", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra(HEIGHT, 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:04.718181", "n_pass": [2290, 125, 125], "score": "0.9963", "loss": "0.0038", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra( 0);; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:07.557038", "n_pass": [2291, 126, 126], "score": "0.3731", "loss": "1.0143", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();; if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:10.386699", "n_pass": [2293, 127, 127], "score": "0.8812", "loss": "0.1285", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabled && videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:13.212173", "n_pass": [2296, 128, 128], "score": "0.9736", "loss": "0.027", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabled& videoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:16.035657", "n_pass": [2297, 129, 129], "score": "0.9927", "loss": "0.0078", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { DisplayMetrics; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:18.873474", "n_pass": [2300, 130, 130], "score": "0.9989", "loss": "0.0012", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) {; heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:21.694495", "n_pass": [2301, 131, 131], "score": "0.8995", "loss": "0.1103", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) {heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:24.516645", "n_pass": [2302, 132, 132], "score": "0.9899", "loss": "0.0135", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:27.355713", "n_pass": [2304, 133, 133], "score": "0.9804", "loss": "0.02", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent.getBooleanExtra(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:30.213234", "n_pass": [2311, 134, 134], "score": "0.5923", "loss": "0.6559", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:33.069911", "n_pass": [2318, 135, 135], "score": "0.9934", "loss": "0.007", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(intent.getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:35.893549", "n_pass": [2320, 136, 136], "score": "0.9713", "loss": "0.0338", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(EXTRA_PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:38.730634", "n_pass": [2322, 137, 137], "score": "0.9652", "loss": "0.0522", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), intent.getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:41.566781", "n_pass": [2325, 138, 138], "score": "0.9424", "loss": "0.0597", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra( false),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:44.407647", "n_pass": [2327, 139, 139], "score": "0.9554", "loss": "0.047", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA_ID)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:47.235209", "n_pass": [2330, 140, 140], "score": "0.9884", "loss": "0.0127", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = new PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:50.078169", "n_pass": [2336, 141, 141], "score": "0.9153", "loss": "0.0891", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters(intent. intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:52.887359", "n_pass": [2338, 142, 142], "score": "0.9792", "loss": "0.0232", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent.getIntExtra(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:55.720452", "n_pass": [2340, 143, 143], "score": "0.969", "loss": "0.0378", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRA_VIDEO, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:27:58.532024", "n_pass": [2342, 144, 144], "score": "0.7415", "loss": "0.3012", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRA, false), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:01.361817", "n_pass": [2343, 145, 145], "score": "0.988", "loss": "0.0128", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = intent.d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:04.225334", "n_pass": [2350, 146, 146], "score": "0.977", "loss": "0.0245", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d(TAG, \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:07.039534", "n_pass": [2352, 147, 147], "score": "0.9487", "loss": "0.1329", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"VIDEO_\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:09.843574", "n_pass": [2354, 148, 148], "score": "0.7904", "loss": "0.2368", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback || !PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:12.689881", "n_pass": [2364, 149, 149], "score": "0.8962", "loss": "0.1098", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:15.489204", "n_pass": [2365, 150, 150], "score": "0.9904", "loss": "0.0098", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:18.337576", "n_pass": [2369, 151, 151], "score": "0.7049", "loss": "0.3502", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:21.175661", "n_pass": [2374, 152, 152], "score": "0.9805", "loss": "0.0204", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } else { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:24.013989", "n_pass": [2379, 153, 153], "score": "0.9982", "loss": "0.0021", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { Log.i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:26.832819", "n_pass": [2381, 154, 154], "score": "0.9651", "loss": "0.0361", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i(TAG, \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:29.655532", "n_pass": [2383, 155, 155], "score": "0.7311", "loss": "0.3386", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"IP.\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:32.470605", "n_pass": [2385, 156, 156], "score": "0.7173", "loss": "0.3671", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = new DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:35.324327", "n_pass": [2390, 157, 157], "score": "0.9957", "loss": "0.0044", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:38.172818", "n_pass": [2395, 158, 158], "score": "0.9481", "loss": "0.0601", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:41.001232", "n_pass": [2397, 159, 159], "score": "0.9901", "loss": "0.0101", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:43.824256", "n_pass": [2401, 160, 160], "score": "0.9916", "loss": "0.0087", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (CpuMonitor.isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:46.665069", "n_pass": [2407, 161, 161], "score": "0.827", "loss": "0.1974", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment.setArguments(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:49.507131", "n_pass": [2413, 162, 162], "score": "0.8815", "loss": "0.1272", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); FragmentTransaction ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:52.313219", "n_pass": [2416, 163, 163], "score": "0.8565", "loss": "0.2614", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManager(); ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:55.128876", "n_pass": [2420, 164, 164], "score": "0.9885", "loss": "0.0128", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManager; ft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:28:57.928649", "n_pass": [2421, 165, 165], "score": "0.997", "loss": "0.0031", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManagerft.add(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:29:00.750889", "n_pass": [2422, 166, 166], "score": "0.9824", "loss": "0.018", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(R.hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:29:03.555069", "n_pass": [2424, 167, 167], "score": "0.9575", "loss": "0.0448", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); ft.commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:29:06.381600", "n_pass": [2427, 168, 168], "score": "0.9779", "loss": "0.0261", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() { @Override run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:29:09.284729", "n_pass": [2440, 169, 169], "score": "0.9937", "loss": "0.0064", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect(); } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:29:12.098822", "n_pass": [2445, 170, 170], "score": "0.9731", "loss": "0.0323", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); } peerConnectionClient(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:29:14.934906", "n_pass": [2452, 171, 171], "score": "0.9364", "loss": "0.0666", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {; } else {  } }"}
{"time": "2021-01-21 06:29:17.773310", "n_pass": [2459, 172, 172], "score": "0.9882", "loss": "0.0125", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} else {  } }"}
{"time": "2021-01-21 06:29:20.568974", "n_pass": [2461, 173, 173], "score": "0.9093", "loss": "0.0963", "code": "@SuppressWarnings() public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:23.390069", "n_pass": [2469, 174, 174], "score": "0.9813", "loss": "0.0211", "code": "@SuppressWarnings()public void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:26.177011", "n_pass": [2470, 175, 175], "score": "0.9701", "loss": "0.0308", "code": "@SuppressWarnings() void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:28.969747", "n_pass": [2471, 176, 176], "score": "0.9603", "loss": "0.0416", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState) { (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:32.660871", "n_pass": [2480, 177, 177], "score": "0.9809", "loss": "0.0203", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){ (savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:35.457559", "n_pass": [2482, 178, 178], "score": "0.9883", "loss": "0.012", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState). setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:38.704077", "n_pass": [2487, 179, 179], "score": "0.9886", "loss": "0.0121", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(R._call); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:41.585170", "n_pass": [2490, 180, 180], "score": "0.7973", "loss": "0.2393", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(R.view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:44.406902", "n_pass": [2494, 181, 181], "score": "0.991", "loss": "0.0093", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View.OnClickListener() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:47.225193", "n_pass": [2501, 182, 182], "score": "0.9843", "loss": "0.0206", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:50.032006", "n_pass": [2504, 183, 183], "score": "0.9102", "loss": "0.0967", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:52.829090", "n_pass": [2510, 184, 184], "score": "0.9964", "loss": "0.0038", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer.setOnClickListener(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:55.621478", "n_pass": [2515, 185, 185], "score": "0.8313", "loss": "0.1859", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View.OnClickListener() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:29:58.439596", "n_pass": [2518, 186, 186], "score": "0.9929", "loss": "0.0076", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:01.256994", "n_pass": [2525, 187, 187], "score": "0.986", "loss": "0.0155", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:04.058981", "n_pass": [2532, 188, 188], "score": "0.9914", "loss": "0.0096", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); setOnClickListener.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:06.837000", "n_pass": [2533, 189, 189], "score": "0.9853", "loss": "0.0167", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:09.616771", "n_pass": [2535, 190, 190], "score": "0.7965", "loss": "1.1884", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:12.414326", "n_pass": [2541, 191, 191], "score": "0.9988", "loss": "0.0012", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:15.197091", "n_pass": [2543, 192, 192], "score": "0.9946", "loss": "0.0056", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:17.976147", "n_pass": [2545, 193, 193], "score": "0.9918", "loss": "0.0088", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:20.770251", "n_pass": [2549, 194, 194], "score": "0.9676", "loss": "0.0368", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_SAVE_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:23.563534", "n_pass": [2551, 195, 195], "score": "0.9807", "loss": "0.0212", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFile != null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:26.375088", "n_pass": [2556, 196, 196], "score": "0.9878", "loss": "0.016", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFile= null) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:29.154121", "n_pass": [2557, 197, 197], "score": "0.9824", "loss": "0.0193", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { int videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:31.960133", "n_pass": [2560, 198, 198], "score": "0.9237", "loss": "0.1034", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth =(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:34.740848", "n_pass": [2562, 199, 199], "score": "0.9766", "loss": "0.0475", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer =(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:37.541097", "n_pass": [2568, 200, 200], "score": "0.9978", "loss": "0.0022", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback = intent(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:40.560221", "n_pass": [2624, 201, 201], "score": "0.9872", "loss": "0.0133", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:43.793459", "n_pass": [2629, 202, 202], "score": "0.9921", "loss": "0.0084", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth videoHeight = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:46.570480", "n_pass": [2630, 203, 203], "score": "0.9734", "loss": "0.0305", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters( intent(EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:49.512268", "n_pass": [2664, 204, 204], "score": "0.9297", "loss": "0.0813", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse), dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:52.290030", "n_pass": [2667, 205, 205], "score": "0.9962", "loss": "0.0045", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId).matches) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:55.167529", "n_pass": [2685, 206, 206], "score": "0.9992", "loss": "0.0009", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), roomIdloopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:30:58.412457", "n_pass": [2708, 207, 207], "score": "0.983", "loss": "0.0173", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(),loopback, urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:01.175013", "n_pass": [2709, 208, 208], "score": "0.9724", "loss": "0.0368", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { } callFragment(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:03.992450", "n_pass": [2718, 209, 209], "score": "0.998", "loss": "0.0023", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft = getFragmentManageradd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:06.783557", "n_pass": [2723, 210, 210], "score": "0.9971", "loss": "0.003", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft =add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() { disconnect; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:09.667751", "n_pass": [2742, 211, 211], "score": "0.886", "loss": "0.1231", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft =add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {; } }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:12.429605", "n_pass": [2743, 212, 212], "score": "0.955", "loss": "0.0511", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) { toggleCallControlFragmentVisibility; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft =add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:16.688916", "n_pass": [2793, 213, 213], "score": "0.9987", "loss": "0.0016", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {; } }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft =add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:19.479366", "n_pass": [2794, 214, 214], "score": "0.9854", "loss": "0.1501", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} }; pipRenderer(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft =add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:22.251470", "n_pass": [2797, 215, 215], "score": "0.9995", "loss": "0.0006", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null); pipRenderer(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft =add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:25.080110", "n_pass": [2817, 216, 216], "score": "0.905", "loss": "0.1205", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType); saveRemoteVideoToFile = intent(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft =add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:27.863027", "n_pass": [2822, 217, 217], "score": "0.9985", "loss": "0.0016", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType); saveRemoteVideoToFile =(EXTRA_); if (saveRemoteVideoToFilenull) { videoOutWidth(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft =add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:30.678961", "n_pass": [2830, 218, 218], "score": "0.9935", "loss": "0.0066", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType); saveRemoteVideoToFile =(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA); try { videoFileRenderer(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft =add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:33.464421", "n_pass": [2835, 219, 219], "score": "0.9992", "loss": "0.0009", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType); saveRemoteVideoToFile =(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA); try {(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback =(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft =add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:36.447796", "n_pass": [2890, 220, 220], "score": "0.9967", "loss": "0.0106", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType); saveRemoteVideoToFile =(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA); try {(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ft =add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:39.673155", "n_pass": [2980, 221, 221], "score": "0.9996", "loss": "0.0004", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType); saveRemoteVideoToFile =(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA); try {(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ftadd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:44.107842", "n_pass": [3072, 222, 222], "score": "0.9968", "loss": "0.0038", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType); saveRemoteVideoToFile(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA); try {(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); } loopback(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ftadd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:47.122423", "n_pass": [3137, 223, 223], "score": "0.9998", "loss": "0.0003", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType); saveRemoteVideoToFile(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA); try {(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent); ftadd(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:50.754853", "n_pass": [3226, 224, 224], "score": "0.9983", "loss": "0.0018", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType); saveRemoteVideoToFile(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA); try {(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:31:55.183048", "n_pass": [3317, 225, 225], "score": "0.928", "loss": "0.0763", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA); try {(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:32:59.406957", "n_pass": [4013, 226, 226], "score": "0.9968", "loss": "0.0035", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try {(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:02.186745", "n_pass": [4014, 227, 227], "score": "0.9667", "loss": "0.0368", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(saveRemoteVideoToFilegetEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:04.987584", "n_pass": [4017, 228, 228], "score": "0.9198", "loss": "0.1909", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext()); } catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:07.808701", "n_pass": [4023, 229, 229], "score": "0.9981", "loss": "0.0021", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());} catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:10.612663", "n_pass": [4025, 230, 230], "score": "0.991", "loss": "0.0108", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch (IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:13.416565", "n_pass": [4027, 231, 231], "score": "0.9988", "loss": "0.0013", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e) { RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:16.217678", "n_pass": [4033, 232, 232], "score": "0.9877", "loss": "0.0142", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){ RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:19.001623", "n_pass": [4035, 233, 233], "score": "0.9709", "loss": "0.0491", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){RuntimeException(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:21.786245", "n_pass": [4036, 234, 234], "score": "0.9961", "loss": "0.0041", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"Failed\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:24.568645", "n_pass": [4039, 235, 235], "score": "0.9989", "loss": "0.0013", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\" +  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:27.350975", "n_pass": [4041, 236, 236], "score": "0.9997", "loss": "0.0003", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+  e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:30.153980", "n_pass": [4043, 237, 237], "score": "0.9918", "loss": "0.009", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+ e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:32.933571", "n_pass": [4044, 238, 238], "score": "0.9918", "loss": "0.0084", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e); } } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:35.722132", "n_pass": [4048, 239, 239], "score": "0.9988", "loss": "0.0013", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);} } for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:38.502964", "n_pass": [4050, 240, 240], "score": "0.9835", "loss": "0.018", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}} for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:41.316838", "n_pass": [4052, 241, 241], "score": "0.9217", "loss": "0.1167", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for (String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:44.103257", "n_pass": [4054, 242, 242], "score": "0.9982", "loss": "0.0019", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission : PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:46.906902", "n_pass": [4059, 243, 243], "score": "0.9929", "loss": "0.0111", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission: PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:49.693667", "n_pass": [4061, 244, 244], "score": "0.9968", "loss": "0.0033", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS) { if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:52.478827", "n_pass": [4064, 245, 245], "score": "0.99", "loss": "0.0104", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){ if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:55.259253", "n_pass": [4066, 246, 246], "score": "0.9801", "loss": "0.0206", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if (GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:33:58.042027", "n_pass": [4068, 247, 247], "score": "0.9949", "loss": "0.0056", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED) {} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:00.832620", "n_pass": [4072, 248, 248], "score": "0.9831", "loss": "0.0661", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){} } roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:03.617008", "n_pass": [4075, 249, 249], "score": "0.9989", "loss": "0.0012", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}} roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:06.387619", "n_pass": [4077, 250, 250], "score": "0.9748", "loss": "0.0262", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri = getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:09.184173", "n_pass": [4079, 251, 251], "score": "0.9978", "loss": "0.0024", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri= getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:11.971078", "n_pass": [4081, 252, 252], "score": "0.9961", "loss": "0.0047", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData(); if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:14.757707", "n_pass": [4086, 253, 253], "score": "0.9695", "loss": "0.0319", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if (roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:17.539692", "n_pass": [4088, 254, 254], "score": "0.9991", "loss": "0.001", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri ) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:20.318812", "n_pass": [4091, 255, 255], "score": "0.9989", "loss": "0.0013", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri) { logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:23.099678", "n_pass": [4093, 256, 256], "score": "0.9933", "loss": "0.007", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){ logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:25.879374", "n_pass": [4095, 257, 257], "score": "0.9871", "loss": "0.017", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){logAndToast(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:28.654244", "n_pass": [4096, 258, 258], "score": "0.9992", "loss": "0.0009", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){(getString(url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:31.427701", "n_pass": [4098, 259, 259], "score": "0.9994", "loss": "0.0006", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url)); Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:34.243811", "n_pass": [4104, 260, 260], "score": "0.9982", "loss": "0.0031", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG, \"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:37.048765", "n_pass": [4109, 261, 261], "score": "0.9997", "loss": "0.0003", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"Didn!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:39.819508", "n_pass": [4111, 262, 262], "score": "0.9987", "loss": "0.0014", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"!\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:42.622624", "n_pass": [4112, 263, 263], "score": "0.9992", "loss": "0.0009", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT); }(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:45.423771", "n_pass": [4120, 264, 264], "score": "0.9746", "loss": "0.0684", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(EXTRAfalse); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:48.206456", "n_pass": [4123, 265, 265], "score": "0.9982", "loss": "0.0022", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false); videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:51.018960", "n_pass": [4127, 266, 266], "score": "0.9852", "loss": "0.0158", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth = getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:53.790865", "n_pass": [4129, 267, 267], "score": "0.9881", "loss": "0.0124", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth= getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:56.580532", "n_pass": [4131, 268, 268], "score": "0.9252", "loss": "0.085", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if (screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:34:59.398292", "n_pass": [4137, 269, 269], "score": "0.9988", "loss": "0.002", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(screencaptureEnabledvideoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:02.202749", "n_pass": [4139, 270, 270], "score": "0.939", "loss": "0.0641", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth) { } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:04.981237", "n_pass": [4142, 271, 271], "score": "0.9979", "loss": "0.0023", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){ } dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:07.747254", "n_pass": [4144, 272, 272], "score": "0.9989", "loss": "0.0012", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){} dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:10.530038", "n_pass": [4146, 273, 273], "score": "0.9463", "loss": "0.0678", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters = null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:13.326919", "n_pass": [4148, 274, 274], "score": "0.9025", "loss": "0.1211", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters= null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:16.122636", "n_pass": [4150, 275, 275], "score": "0.9829", "loss": "0.0257", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null; if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:18.898755", "n_pass": [4153, 276, 276], "score": "0.9927", "loss": "0.0079", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if (intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:21.696308", "n_pass": [4155, 277, 277], "score": "0.9983", "loss": "0.0019", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if(intent(EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:24.474737", "n_pass": [4157, 278, 278], "score": "0.9972", "loss": "0.0031", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((EXTRAfalse)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:27.251588", "n_pass": [4159, 279, 279], "score": "0.9991", "loss": "0.0009", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)) { dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:30.044213", "n_pass": [4163, 280, 280], "score": "0.9597", "loss": "0.0673", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){ dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:32.839574", "n_pass": [4165, 281, 281], "score": "0.8755", "loss": "0.1365", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters = DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:35.609287", "n_pass": [4167, 282, 282], "score": "0.9196", "loss": "0.0879", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters= DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:38.375016", "n_pass": [4169, 283, 283], "score": "0.9987", "loss": "0.0017", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters(getBooleanExtra(PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:41.176009", "n_pass": [4172, 284, 284], "score": "0.999", "loss": "0.0011", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL), getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:43.953042", "n_pass": [4176, 285, 285], "score": "0.9941", "loss": "0.0074", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL) getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:46.716557", "n_pass": [4177, 286, 286], "score": "0.9891", "loss": "0.0129", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA)); } peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:49.547079", "n_pass": [4187, 287, 287], "score": "0.9991", "loss": "0.001", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));} peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:52.319599", "n_pass": [4189, 288, 288], "score": "0.9484", "loss": "0.0566", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters = PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:55.093864", "n_pass": [4191, 289, 289], "score": "0.953", "loss": "0.0503", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters= PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:35:57.863790", "n_pass": [4193, 290, 290], "score": "0.9983", "loss": "0.0017", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=PeerConnectionParameters((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:00.653680", "n_pass": [4194, 291, 291], "score": "0.9925", "loss": "0.009", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRAfalse)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:03.433325", "n_pass": [4198, 292, 292], "score": "0.999", "loss": "0.0011", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA)dataChannelParameters); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:06.203294", "n_pass": [4200, 293, 293], "score": "0.9873", "loss": "0.016", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA)); commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:08.984072", "n_pass": [4203, 294, 294], "score": "0.9981", "loss": "0.0024", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun = d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:11.775783", "n_pass": [4205, 295, 295], "score": "0.9993", "loss": "0.0008", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun= d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:14.544773", "n_pass": [4207, 296, 296], "score": "0.9989", "loss": "0.0012", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=d( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:17.302048", "n_pass": [4208, 297, 297], "score": "0.9863", "loss": "0.0143", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=( \"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:20.064652", "n_pass": [4210, 298, 298], "score": "0.9572", "loss": "0.0445", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\" +  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:22.829522", "n_pass": [4213, 299, 299], "score": "0.9957", "loss": "0.0045", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+  \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:25.621517", "n_pass": [4215, 300, 300], "score": "0.9989", "loss": "0.0011", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+ \"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:28.376567", "n_pass": [4216, 301, 301], "score": "0.956", "loss": "0.055", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"'\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:31.162532", "n_pass": [4218, 302, 302], "score": "0.8956", "loss": "0.1141", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\"); if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:33.935216", "n_pass": [4222, 303, 303], "score": "0.9964", "loss": "0.004", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if (loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:36.722631", "n_pass": [4224, 304, 304], "score": "0.9959", "loss": "0.0042", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback ||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:39.523013", "n_pass": [4227, 305, 305], "score": "0.975", "loss": "0.0268", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback||matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:42.289312", "n_pass": [4228, 306, 306], "score": "0.999", "loss": "0.0011", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback|matcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:45.070453", "n_pass": [4229, 307, 307], "score": "0.9935", "loss": "0.0073", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopbackmatcher(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:47.832817", "n_pass": [4230, 308, 308], "score": "0.9989", "loss": "0.0012", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback(roomId)) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:50.594377", "n_pass": [4232, 309, 309], "score": "0.9773", "loss": "0.0244", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()) { appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:53.362404", "n_pass": [4235, 310, 310], "score": "0.9992", "loss": "0.0009", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){ appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:56.147785", "n_pass": [4237, 311, 311], "score": "0.9866", "loss": "0.0144", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient = WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:36:58.940946", "n_pass": [4239, 312, 312], "score": "0.999", "loss": "0.001", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient= WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:01.720424", "n_pass": [4241, 313, 313], "score": "0.9991", "loss": "0.001", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=WebSocketRTCClient(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:04.497874", "n_pass": [4242, 314, 314], "score": "0.9806", "loss": "0.02", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this); } { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:07.283953", "n_pass": [4247, 315, 315], "score": "0.8811", "loss": "0.2664", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);} { i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:10.072271", "n_pass": [4249, 316, 316], "score": "0.9298", "loss": "0.0773", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{ i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:12.838839", "n_pass": [4251, 317, 317], "score": "0.9946", "loss": "0.0062", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{i( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:15.599464", "n_pass": [4252, 318, 318], "score": "0.95", "loss": "0.0533", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{( \"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:18.370282", "n_pass": [4254, 319, 319], "score": "0.9947", "loss": "0.0061", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\"); appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:21.137725", "n_pass": [4259, 320, 320], "score": "0.9968", "loss": "0.0035", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient = DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:23.905720", "n_pass": [4261, 321, 321], "score": "0.9806", "loss": "0.0203", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient= DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:26.663699", "n_pass": [4263, 322, 322], "score": "0.9975", "loss": "0.0026", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=DirectRTCClient(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:29.421507", "n_pass": [4264, 323, 323], "score": "0.9449", "loss": "0.0614", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this); } RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:32.199460", "n_pass": [4269, 324, 324], "score": "0.9233", "loss": "0.0884", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);} RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:34.971466", "n_pass": [4271, 325, 325], "score": "0.9943", "loss": "0.0063", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(), urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:37.742707", "n_pass": [4278, 326, 326], "score": "0.9815", "loss": "0.0189", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters); if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:40.507303", "n_pass": [4282, 327, 327], "score": "0.9991", "loss": "0.0009", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if (isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:43.295346", "n_pass": [4284, 328, 328], "score": "0.9975", "loss": "0.0026", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()) { }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:46.080540", "n_pass": [4290, 329, 329], "score": "0.9916", "loss": "0.0087", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){ }(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:48.840557", "n_pass": [4292, 330, 330], "score": "0.9984", "loss": "0.0016", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);add(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:52.049898", "n_pass": [4298, 331, 331], "score": "0.995", "loss": "0.0053", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment); commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:55.256729", "n_pass": [4303, 332, 332], "score": "0.9888", "loss": "0.0125", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit(); if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:37:58.035598", "n_pass": [4308, 333, 333], "score": "0.9947", "loss": "0.0058", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if (commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:00.790457", "n_pass": [4310, 334, 334], "score": "0.9932", "loss": "0.0071", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun ) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:03.590464", "n_pass": [4313, 335, 335], "score": "0.9702", "loss": "0.0362", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun) { postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:06.351351", "n_pass": [4315, 336, 336], "score": "0.9933", "loss": "0.0085", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){ postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:09.109510", "n_pass": [4317, 337, 337], "score": "0.9975", "loss": "0.0026", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable() {  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:11.904767", "n_pass": [4325, 338, 338], "score": "0.9988", "loss": "0.0013", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){  run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:14.677207", "n_pass": [4327, 339, 339], "score": "0.9752", "loss": "0.0258", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){ run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:17.445403", "n_pass": [4328, 340, 340], "score": "0.9219", "loss": "0.0844", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run() {} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:20.221408", "n_pass": [4332, 341, 341], "score": "0.9968", "loss": "0.0034", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){} }, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:23.012001", "n_pass": [4335, 342, 342], "score": "0.9601", "loss": "0.0438", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}}, runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:25.777821", "n_pass": [4338, 343, 343], "score": "0.9975", "loss": "0.0026", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs); }(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:28.567287", "n_pass": [4342, 344, 344], "score": "0.9983", "loss": "0.0018", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options); if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:31.344353", "n_pass": [4348, 345, 345], "score": "0.9966", "loss": "0.0035", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if (screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:34.104241", "n_pass": [4350, 346, 346], "score": "0.9934", "loss": "0.0073", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled) {} {  } }"}
{"time": "2021-01-21 06:38:36.899870", "n_pass": [4354, 347, 347], "score": "0.893", "loss": "0.1149", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){} {  } }"}
{"time": "2021-01-21 06:38:39.657534", "n_pass": [4357, 348, 348], "score": "0.9925", "loss": "0.0097", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{  } }"}
{"time": "2021-01-21 06:38:42.427825", "n_pass": [4359, 349, 349], "score": "0.9926", "loss": "0.0077", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{ } }"}
{"time": "2021-01-21 06:38:45.194367", "n_pass": [4360, 350, 350], "score": "0.9954", "loss": "0.0048", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{} }"}
{"time": "2021-01-21 06:38:47.972725", "n_pass": [4362, 351, 351], "score": "0.9748", "loss": "0.0285", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(Rcall); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:38:52.063357", "n_pass": [4383, 352, 352], "score": "0.9848", "loss": "0.0158", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(call); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:38:54.805657", "n_pass": [4384, 353, 353], "score": "0.9457", "loss": "0.0612", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView(); iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:38:57.581238", "n_pass": [4387, 354, 354], "score": "0.9993", "loss": "0.0007", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();iceConnected(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:00.342671", "n_pass": [4388, 355, 355], "score": "0.999", "loss": "0.0011", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);; listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:03.094798", "n_pass": [4392, 356, 356], "score": "0.9973", "loss": "0.0028", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view); listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:06.277544", "n_pass": [4394, 357, 357], "score": "0.9948", "loss": "0.0058", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener = new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:09.048872", "n_pass": [4396, 358, 358], "score": "0.9935", "loss": "0.0075", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener= new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:11.796649", "n_pass": [4398, 359, 359], "score": "0.9727", "loss": "0.0309", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View() {onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:14.554520", "n_pass": [4404, 360, 360], "score": "0.9992", "loss": "0.0009", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view) {} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:17.319731", "n_pass": [4412, 361, 361], "score": "0.9995", "loss": "0.0005", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){} };(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:20.100338", "n_pass": [4415, 362, 362], "score": "0.9987", "loss": "0.0014", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View() {onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:22.868097", "n_pass": [4424, 363, 363], "score": "0.985", "loss": "0.0166", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view) {(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:25.638245", "n_pass": [4432, 364, 364], "score": "0.9979", "loss": "0.0022", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(!isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:28.410854", "n_pass": [4435, 365, 365], "score": "0.9865", "loss": "0.0146", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds); } }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:31.156476", "n_pass": [4439, 366, 366], "score": "0.9867", "loss": "0.0142", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);} }); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:33.904301", "n_pass": [4441, 367, 367], "score": "0.9994", "loss": "0.0007", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}}); init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:36.660469", "n_pass": [4445, 368, 368], "score": "0.9983", "loss": "0.0018", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(), null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:39.415891", "n_pass": [4452, 369, 369], "score": "0.9911", "loss": "0.0106", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(EXTRA_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:42.619665", "n_pass": [4461, 370, 370], "score": "0.9952", "loss": "0.0055", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_); if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:45.373126", "n_pass": [4465, 371, 371], "score": "0.9987", "loss": "0.0014", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if (saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:48.148495", "n_pass": [4467, 372, 372], "score": "0.9977", "loss": "0.0024", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(saveRemoteVideoToFilenull) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:50.899829", "n_pass": [4469, 373, 373], "score": "0.9972", "loss": "0.003", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null) {(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:53.681013", "n_pass": [4472, 374, 374], "score": "0.9895", "loss": "0.0112", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri=getData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:56.584278", "n_pass": [4520, 375, 375], "score": "0.9964", "loss": "0.0042", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUrigetData();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:39:59.336431", "n_pass": [4521, 376, 376], "score": "0.9463", "loss": "0.0607", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth=getIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:02.215605", "n_pass": [4554, 377, 377], "score": "0.9948", "loss": "0.0057", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidthgetIntExtra();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:04.989479", "n_pass": [4555, 378, 378], "score": "0.9993", "loss": "0.0008", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}dataChannelParameters=null;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:07.799753", "n_pass": [4566, 379, 379], "score": "0.9974", "loss": "0.0028", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}dataChannelParametersnull;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:10.542115", "n_pass": [4567, 380, 380], "score": "0.9653", "loss": "0.0379", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}dataChannelParameters;if((false)){dataChannelParameters=DataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:13.318108", "n_pass": [4577, 381, 381], "score": "0.9872", "loss": "0.0133", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}dataChannelParameters;if((false)){dataChannelParametersDataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:16.071748", "n_pass": [4578, 382, 382], "score": "0.9994", "loss": "0.0006", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}dataChannelParameters;if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters=((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:18.873172", "n_pass": [4594, 383, 383], "score": "0.9981", "loss": "0.002", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}dataChannelParameters;if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters((EXTRA));commandLineRun=(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:21.669961", "n_pass": [4602, 384, 384], "score": "0.9979", "loss": "0.0027", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}dataChannelParameters;if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters((EXTRA));commandLineRun(\"\"+\"\");if(loopback()){appRtcClient=(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:24.487660", "n_pass": [4619, 385, 385], "score": "0.9991", "loss": "0.001", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}dataChannelParameters;if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters((EXTRA));commandLineRun(\"\"+\"\");if(loopback()){appRtcClient(this);}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:27.231053", "n_pass": [4621, 386, 386], "score": "0.9928", "loss": "0.0076", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}dataChannelParameters;if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters((EXTRA));commandLineRun(\"\"+\"\");if(loopback()){appRtcClient();}{(\"\");appRtcClient=(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:30.032536", "n_pass": [4632, 387, 387], "score": "0.9883", "loss": "0.0133", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}dataChannelParameters;if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters((EXTRA));commandLineRun(\"\"+\"\");if(loopback()){appRtcClient();}{(\"\");appRtcClient(this);}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:32.780158", "n_pass": [4634, 388, 388], "score": "0.9984", "loss": "0.0018", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}dataChannelParameters;if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters((EXTRA));commandLineRun(\"\"+\"\");if(loopback()){appRtcClient();}{(\"\");appRtcClient();}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:39.392665", "n_pass": [4878, 389, 389], "score": "0.9989", "loss": "0.0014", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){};if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters((EXTRA));commandLineRun(\"\"+\"\");if(loopback()){appRtcClient();}{(\"\");appRtcClient();}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:42.162185", "n_pass": [4879, 390, 390], "score": "0.9723", "loss": "0.0659", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}peerConnectionParameters((EXTRA));commandLineRun(\"\"+\"\");if(loopback()){appRtcClient();}{(\"\");appRtcClient();}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:44.998749", "n_pass": [4902, 391, 391], "score": "0.999", "loss": "0.0011", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}((EXTRA));commandLineRun(\"\"+\"\");if(loopback()){appRtcClient();}{(\"\");appRtcClient();}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}
{"time": "2021-01-21 06:40:47.760725", "n_pass": [4909, 392, 392], "score": "0.9983", "loss": "0.0017", "code": "@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(\"\"+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,\"\");(RESULT);}(false);videoWidth();if(videoWidth){}if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}((EXTRA));(\"\"+\"\");if(loopback()){appRtcClient();}{(\"\");appRtcClient();}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}"}

Minimal simplified code:
@SuppressWarnings()void onCreate(Bundle savedInstanceState){(savedInstanceState).setContentView();(view);listener=new View(){onClick(View view){}};(new View(){onClick(View view){(isSwappedFeeds);}});init(getEglBaseContext(),null);(ScalingType);(_);if(null){(EXTRA);try{(getEglBaseContext());}catch(IOException e){(""+e);}}for(String permission:PERMISSIONS){if(GRANTED){}}roomUri();if(roomUri){((url));Log(TAG,"");(RESULT);}(false);videoWidth();if(videoWidth){}if((false)){dataChannelParameters((PROTOCOL)getBooleanExtra(),(EXTRA));}((EXTRA));(""+"");if(loopback()){appRtcClient();}{("");appRtcClient();}RoomConnectionParameters(toString(),urlParameters);if(isSupported()){}(intent);(hudFragment);commit();if(commandLineRun){postDelayed(new Runnable(){run(){}},runTimeMs);}(options);if(screencaptureEnabled){}{}}

