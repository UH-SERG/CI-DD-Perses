
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Stericson__RootShell/src/androidTest/java/com/stericson/RootShellTests/SanityCheckRootShell_run.java
method_name = run
method_body = public void run() { visualUpdate(TestHandler.ACTION_SHOW, null); boolean result; visualUpdate(TestHandler.ACTION_PDISPLAY, "Testing getPath"); visualUpdate(TestHandler.ACTION_DISPLAY, "[ getPath ]\n"); try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + " k\n\n"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, "Testing A ton of commands"); visualUpdate(TestHandler.ACTION_DISPLAY, "[ Ton of Commands ]\n"); for (int i = 0; i < 100; i++) { RootShell.exists("/system/xbin/busybox"); } visualUpdate(TestHandler.ACTION_PDISPLAY, "Testing Find Binary"); result = RootShell.isRootAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, "[ Checking Root ]\n"); visualUpdate(TestHandler.ACTION_DISPLAY, result + " k\n\n"); result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, "[ Checking Busybox ]\n"); visualUpdate(TestHandler.ACTION_DISPLAY, result + " k\n\n"); visualUpdate(TestHandler.ACTION_PDISPLAY, "Testing file exists"); visualUpdate(TestHandler.ACTION_DISPLAY, "[ Checking Exists() ]\n"); visualUpdate(TestHandler.ACTION_DISPLAY, RootShell.exists("/system/sbin/[") + " k\n\n"); visualUpdate(TestHandler.ACTION_PDISPLAY, "Testing Is Access Given"); result = RootShell.isAccessGiven(); visualUpdate(TestHandler.ACTION_DISPLAY, "[ Checking for Access to Root ]\n"); visualUpdate(TestHandler.ACTION_DISPLAY, result + " k\n\n"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, "Testing output capture"); visualUpdate(TestHandler.ACTION_DISPLAY, "[ busybox ash --help ]\n"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, "busybox ash --help") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + "\n"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, "Switching RootContext - SYSTEM_APP"); visualUpdate(TestHandler.ACTION_DISPLAY, "[ Switching Root Context - SYSTEM_APP ]\n"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, "id") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + "\n"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, "Switching RootContext - UNTRUSTED"); visualUpdate(TestHandler.ACTION_DISPLAY, "[ Switching Root Context - UNTRUSTED ]\n"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, "id") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + "\n"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, "echo done") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log("CAUGHT!!!"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, "All tests complete."); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, "All tests complete."); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }
predict, score, loss = run, 0.998105525970459, 0.0037699120584875345

Trace of simplified code(s):
{"time": "2021-01-21 03:17:58.302153", "n_pass": [1, 1, 1], "score": "0.9862", "loss": "0.1066", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null); boolean result; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing getPath\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ getPath ]\\n\"); try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing A ton of commands\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Root ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Busybox ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Exists() ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, RootShell.exists(\"/system/sbin/[\") + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); result = RootShell.isAccessGiven(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking for Access to Root ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - SYSTEM_APP\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:01.598058", "n_pass": [98, 2, 2], "score": "0.9952", "loss": "0.0295", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null); boolean result; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing getPath\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ getPath ]\\n\"); try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing A ton of commands\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Busybox ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Exists() ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, RootShell.exists(\"/system/sbin/[\") + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); result = RootShell.isAccessGiven(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking for Access to Root ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - SYSTEM_APP\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:04.615268", "n_pass": [100, 3, 3], "score": "0.9968", "loss": "0.0629", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null); boolean result; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing getPath\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ getPath ]\\n\"); try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing A ton of commands\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Busybox ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); result = RootShell.isAccessGiven(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking for Access to Root ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - SYSTEM_APP\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:07.849910", "n_pass": [194, 4, 4], "score": "0.9666", "loss": "0.1594", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null); boolean result; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing getPath\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ getPath ]\\n\"); try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing A ton of commands\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Busybox ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); result = RootShell.isAccessGiven(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking for Access to Root k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - SYSTEM_APP\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:10.938285", "n_pass": [203, 5, 5], "score": "0.9996", "loss": "0.0014", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null); boolean result; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing getPath\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ getPath ]\\n\"); try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing A ton of commands\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Busybox ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); result = RootShell.isAccessGiven(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking for Access to Root k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:14.022464", "n_pass": [216, 6, 6], "score": "0.9983", "loss": "0.0047", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null); boolean result; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing getPath\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ getPath ]\\n\"); try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing A ton of commands\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Busybox ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); result = RootShell.isAccessGiven(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking for Access to Root k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:17.161503", "n_pass": [236, 7, 7], "score": "0.997", "loss": "0.0153", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ getPath ]\\n\"); try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing A ton of commands\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Busybox ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); result = RootShell.isAccessGiven(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking for Access to Root k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:20.102747", "n_pass": [237, 8, 8], "score": "0.9959", "loss": "0.0081", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing A ton of commands\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Busybox ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); result = RootShell.isAccessGiven(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking for Access to Root k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:23.096275", "n_pass": [242, 9, 9], "score": "0.998", "loss": "0.0086", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAYDISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking Busybox ]\\n\"); visualUpdate(TestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); result = RootShell.isAccessGiven(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking for Access to Root k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:26.113944", "n_pass": [248, 10, 10], "score": "0.9994", "loss": "0.0053", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAYDISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); result = RootShell.isAccessGiven(); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking for Access to Root k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:29.572772", "n_pass": [415, 11, 11], "score": "0.978", "loss": "0.0503", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAYDISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Checking for Access to Root k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:32.542222", "n_pass": [417, 12, 12], "score": "0.9924", "loss": "0.0192", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAYDISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ busybox ash --help ]\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:35.512608", "n_pass": [422, 13, 13], "score": "0.9058", "loss": "0.5019", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAYDISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shell = RootShell.getShell(true); Command cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:38.431861", "n_pass": [424, 14, 14], "score": "0.9978", "loss": "0.0074", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAYDISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0, \"busybox ash --help\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:41.412382", "n_pass": [426, 15, 15], "score": "0.9982", "loss": "0.0113", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAYDISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - UNTRUSTED ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:44.539551", "n_pass": [452, 16, 16], "score": "0.8507", "loss": "1.0458", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path + \" k\\n\\n\"); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAYDISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:47.889266", "n_pass": [500, 17, 17], "score": "0.9957", "loss": "0.0172", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.ACTION_DISPLAY, path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAYDISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:53.203629", "n_pass": [798, 18, 18], "score": "0.9374", "loss": "0.2303", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAYDISPLAY, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:56.165604", "n_pass": [805, 19, 19], "score": "0.9989", "loss": "0.0031", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[ Ton of Commands ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:18:59.149830", "n_pass": [807, 20, 20], "score": "0.9839", "loss": "0.082", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; i < 100; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:02.125811", "n_pass": [812, 21, 21], "score": "0.9959", "loss": "0.0186", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); Shell shell; visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:08.150289", "n_pass": [847, 23, 22], "score": "0.9254", "loss": "0.3152", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:11.140194", "n_pass": [858, 24, 23], "score": "0.9983", "loss": "0.0187", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:14.074056", "n_pass": [862, 25, 24], "score": "0.9916", "loss": "0.0581", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:17.214076", "n_pass": [869, 26, 25], "score": "0.9674", "loss": "0.3861", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:20.145760", "n_pass": [871, 27, 26], "score": "0.9896", "loss": "0.1729", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - SYSTEM_APP ]\\n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:26.006862", "n_pass": [874, 29, 27], "score": "0.7554", "loss": "1.7286", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:31.764230", "n_pass": [880, 31, 28], "score": "0.9758", "loss": "0.4833", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell = RootShell.getShell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:40.639522", "n_pass": [905, 34, 29], "score": "0.9464", "loss": "0.4981", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell = RootShell.getShell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:46.983421", "n_pass": [923, 36, 30], "score": "0.7781", "loss": "1.0743", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:52.924805", "n_pass": [945, 38, 31], "score": "0.9833", "loss": "0.148", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:55.881143", "n_pass": [947, 39, 32], "score": "0.9992", "loss": "0.0082", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:19:58.787044", "n_pass": [954, 40, 33], "score": "0.9984", "loss": "0.0116", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catch = true; visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:20:04.619544", "n_pass": [966, 42, 34], "score": "0.9744", "loss": "0.183", "code": "public void run() { visualUpdate(TestHandler.ACTION_SHOW, null);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:20:13.337482", "n_pass": [987, 45, 35], "score": "0.9913", "loss": "0.0327", "code": "public void run() { visualUpdate(TestHandler.ACTION);try { List<String> paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:20:16.239305", "n_pass": [989, 46, 36], "score": "0.8639", "loss": "0.7542", "code": "public void run() { visualUpdate(TestHandler.ACTION);try { paths = RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:20:19.089306", "n_pass": [990, 47, 37], "score": "0.8957", "loss": "1.4919", "code": "public void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:20:34.161807", "n_pass": [1083, 52, 38], "score": "0.6264", "loss": "2.3064", "code": "public void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:20:37.024692", "n_pass": [1085, 53, 39], "score": "0.9568", "loss": "0.2384", "code": "public void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson.RootShellTests.SanityCheckRootShell.this) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:20:46.389984", "n_pass": [1146, 56, 40], "score": "0.3278", "loss": "4.396", "code": "public void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try { RootShell.closeAllShells(); } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:20:49.265674", "n_pass": [1154, 57, 41], "score": "0.4288", "loss": "2.5366", "code": "public void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY, result + \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:20:58.085270", "n_pass": [1201, 60, 42], "score": "0.6713", "loss": "1.997", "code": "public void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching Root Context - n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:01.461320", "n_pass": [1240, 61, 43], "score": "0.9195", "loss": "0.1386", "code": "public void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(true, Shell.ShellContext.SYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:04.306395", "n_pass": [1244, 62, 44], "score": "0.938", "loss": "0.4715", "code": "public void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command(0, \"id\") { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:07.732292", "n_pass": [1272, 63, 45], "score": "0.591", "loss": "3.0859", "code": "public void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell(true); Command cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:10.675165", "n_pass": [1285, 64, 46], "score": "0.3651", "loss": "3.5095", "code": "public void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:13.949528", "n_pass": [1334, 65, 47], "score": "0.6729", "loss": "2.6278", "code": "public void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:23.377271", "n_pass": [1847, 67, 48], "score": "0.7624", "loss": "1.4649", "code": "void run() { visualUpdate(TestHandler.ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:26.722867", "n_pass": [1853, 68, 49], "score": "0.7767", "loss": "1.9775", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) { visualUpdate(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:32.515122", "n_pass": [1867, 70, 50], "score": "0.2882", "loss": "2.7479", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler.path); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:35.439681", "n_pass": [1869, 71, 51], "score": "0.98", "loss": "0.1845", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e.printStackTrace(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:38.425902", "n_pass": [1879, 72, 52], "score": "0.8112", "loss": "1.5571", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e(); } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:41.274249", "n_pass": [1880, 73, 53], "score": "0.6222", "loss": "2.6842", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate(TestHandler, \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:44.142987", "n_pass": [1884, 74, 54], "score": "0.6886", "loss": "0.6093", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"[  ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:47.059543", "n_pass": [1886, 75, 55], "score": "0.2618", "loss": "3.5209", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \" ]\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:49.949493", "n_pass": [1887, 76, 56], "score": "0.9432", "loss": "0.2743", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\\n\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:52.821383", "n_pass": [1888, 77, 57], "score": "0.9815", "loss": "0.0656", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; 00; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:55.692736", "n_pass": [1897, 78, 58], "score": "0.9995", "loss": "0.0019", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell.exists(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:21:58.629274", "n_pass": [1903, 79, 59], "score": "0.8968", "loss": "0.6168", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"/system/xbin/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:01.519061", "n_pass": [1905, 80, 60], "score": "0.3721", "loss": "2.3545", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); result = RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:07.271060", "n_pass": [1915, 82, 61], "score": "0.937", "loss": "0.3983", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  RootShell.isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:10.117305", "n_pass": [1916, 83, 62], "score": "0.996", "loss": "0.0112", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); isRootAvailable(); ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:13.024191", "n_pass": [1917, 84, 63], "score": "0.7292", "loss": "0.7992", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\"); ; ; result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:15.882096", "n_pass": [1918, 85, 64], "score": "0.4797", "loss": "2.1582", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandlerTestHandler.ACTION_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:21.626349", "n_pass": [1924, 87, 65], "score": "0.5903", "loss": "2.2624", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:24.553833", "n_pass": [1927, 88, 66], "score": "0.9676", "loss": "0.163", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing file exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:27.438791", "n_pass": [1933, 89, 67], "score": "0.9263", "loss": "0.227", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:33.124411", "n_pass": [1942, 91, 68], "score": "0.959", "loss": "0.2254", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate(_PDISPLAY, \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:35.993366", "n_pass": [1943, 92, 69], "score": "0.6249", "loss": "1.7063", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing Is Access Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:38.825387", "n_pass": [1945, 93, 70], "score": "0.7379", "loss": "1.6358", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate(TestHandler.ACTION_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:44.662858", "n_pass": [1949, 95, 71], "score": "0.4761", "loss": "2.064", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate(_DISPLAY, \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:47.522343", "n_pass": [1950, 96, 72], "score": "0.9532", "loss": "0.1382", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" k\\n\\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:50.387839", "n_pass": [1952, 97, 73], "score": "0.9593", "loss": "0.2507", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing output capture\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:56.148531", "n_pass": [1959, 99, 74], "score": "0.9053", "loss": "0.3449", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate(TestHandler.ACTION_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:22:59.009607", "n_pass": [1962, 100, 75], "score": "0.7276", "loss": "2.0711", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate(_DISPLAY, \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:01.873993", "n_pass": [1963, 101, 76], "score": "0.7009", "loss": "1.4006", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try { shellCommand cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:04.763621", "n_pass": [1968, 102, 77], "score": "0.4283", "loss": "2.2828", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try { cmd = new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:07.587049", "n_pass": [1969, 103, 78], "score": "0.9602", "loss": "0.3311", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try { shell = RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:19.109932", "n_pass": [1998, 107, 79], "score": "0.9403", "loss": "0.335", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(trueSYSTEM_APP); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:24.848679", "n_pass": [2001, 109, 80], "score": "0.7278", "loss": "1.1514", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override public void commandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:27.744971", "n_pass": [2009, 110, 81], "score": "0.9936", "loss": "0.0196", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY, line + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:30.685234", "n_pass": [2017, 111, 82], "score": "0.5207", "loss": "1.1988", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\"); super.commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:33.529113", "n_pass": [2021, 112, 83], "score": "0.7223", "loss": "1.2097", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:36.382104", "n_pass": [2023, 113, 84], "score": "0.8793", "loss": "0.5767", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:39.236032", "n_pass": [2026, 114, 85], "score": "0.5029", "loss": "2.8908", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching RootContext - UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:42.132002", "n_pass": [2036, 115, 86], "score": "0.9744", "loss": "0.0898", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:47.913682", "n_pass": [2040, 117, 87], "score": "0.6577", "loss": "1.3221", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate(_DISPLAY, \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:50.780287", "n_pass": [2041, 118, 88], "score": "0.4779", "loss": "1.7455", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[ Switchingn\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:23:53.618007", "n_pass": [2043, 119, 89], "score": "0.7426", "loss": "1.0918", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { @Override public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:05.401644", "n_pass": [2056, 123, 90], "score": "0.5762", "loss": "1.3131", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id, line); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:11.075957", "n_pass": [2064, 125, 91], "score": "0.3443", "loss": "2.9947", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell cmd = new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:19.741415", "n_pass": [2079, 128, 92], "score": "0.7714", "loss": "0.8262", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, false, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:25.499534", "n_pass": [2083, 130, 93], "score": "0.8292", "loss": "1.4414", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch = false; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:28.448941", "n_pass": [2089, 131, 94], "score": "0.8948", "loss": "0.727", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(id, line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:34.279697", "n_pass": [2107, 133, 95], "score": "0.9614", "loss": "0.1482", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } @Override public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:37.151469", "n_pass": [2110, 134, 96], "score": "0.9041", "loss": "0.2792", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:42.877192", "n_pass": [2120, 136, 97], "score": "0.8859", "loss": "0.4019", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:45.740700", "n_pass": [2122, 137, 98], "score": "0.7835", "loss": "1.0307", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:48.602628", "n_pass": [2125, 138, 99], "score": "0.9524", "loss": "0.3156", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:51.471737", "n_pass": [2130, 139, 100], "score": "0.989", "loss": "0.0796", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } @Override public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:54.432449", "n_pass": [2142, 140, 101], "score": "0.3729", "loss": "2.5966", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } public void commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:24:57.348789", "n_pass": [2143, 141, 102], "score": "0.9368", "loss": "0.379", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) { _catchvisualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:00.262383", "n_pass": [2152, 142, 103], "score": "0.6904", "loss": "1.8478", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandler.ACTION_PDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:03.188102", "n_pass": [2154, 143, 104], "score": "0.8368", "loss": "1.075", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All tests complete.\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:06.059707", "n_pass": [2157, 144, 105], "score": "0.9781", "loss": "0.3185", "code": "void run() { visualUpdate(ACTION);try {RootShell.getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:12.460524", "n_pass": [2191, 146, 106], "score": "0.5549", "loss": "1.8225", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) { e; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:15.384679", "n_pass": [2210, 147, 107], "score": "0.5164", "loss": "1.8349", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {; } visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:18.230049", "n_pass": [2211, 148, 108], "score": "0.9781", "loss": "0.1079", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) { RootShell(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:21.113165", "n_pass": [2227, 149, 109], "score": "0.93", "loss": "0.3694", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result = RootShell.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:26.864659", "n_pass": [2239, 151, 110], "score": "0.7788", "loss": "1.4742", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"TestingAccess Given\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:32.615990", "n_pass": [2259, 153, 111], "score": "0.9399", "loss": "0.3806", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:35.471752", "n_pass": [2266, 154, 112], "score": "0.8344", "loss": "0.981", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate( line + \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:38.379030", "n_pass": [2284, 155, 113], "score": "0.4176", "loss": "3.7342", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }; shell.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:41.234140", "n_pass": [2289, 156, 114], "score": "0.9874", "loss": "0.0912", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[ Switching n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:44.184192", "n_pass": [2299, 157, 115], "score": "0.9725", "loss": "0.1906", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try {  RootShell.getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:47.015470", "n_pass": [2303, 158, 116], "score": "0.5846", "loss": "2.5561", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching- UNTRUSTED\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:49.969102", "n_pass": [2334, 159, 117], "score": "0.7051", "loss": "2.6884", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true, Shell.ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:52.858892", "n_pass": [2342, 160, 118], "score": "0.7303", "loss": "1.4172", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,ShellContext.UNTRUSTED_APP); Command cmd = new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:25:58.543098", "n_pass": [2346, 162, 119], "score": "0.8576", "loss": "0.6868", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,ShellContext.UNTRUSTED_APP); Command= new Command() { public void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:26:01.381122", "n_pass": [2350, 163, 120], "score": "0.946", "loss": "0.2616", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,ShellContext.UNTRUSTED_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }; shell.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:26:04.263396", "n_pass": [2359, 164, 121], "score": "0.7927", "loss": "0.8618", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,ShellContext.UNTRUSTED_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) { e.printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:26:07.127234", "n_pass": [2366, 165, 122], "score": "0.7648", "loss": "2.2968", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,ShellContext.UNTRUSTED_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {printStackTrace(); } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:26:09.962973", "n_pass": [2367, 166, 123], "score": "0.724", "loss": "2.3917", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,ShellContext.UNTRUSTED_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command(42, \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:26:12.858882", "n_pass": [2373, 167, 124], "score": "0.8888", "loss": "0.8495", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,ShellContext.UNTRUSTED_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); } public void commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:26:18.688073", "n_pass": [2398, 169, 125], "score": "0.9733", "loss": "0.7209", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,ShellContext.UNTRUSTED_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); }  commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE, null); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:26:21.780376", "n_pass": [2440, 170, 126], "score": "0.8331", "loss": "0.9084", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \"Testing Find Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,ShellContext.UNTRUSTED_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); }  commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:26:25.721145", "n_pass": [2509, 171, 127], "score": "0.8584", "loss": "1.1448", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandler.ACTION_DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,ShellContext.UNTRUSTED_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); }  commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:26:28.646096", "n_pass": [2526, 172, 128], "score": "0.3858", "loss": "3.5715", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,ShellContext.UNTRUSTED_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); }  commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:26:31.928300", "n_pass": [2608, 173, 129], "score": "0.962", "loss": "0.2052", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"echo done\") { boolean _catch ; @Override public void commandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); }  commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:26:35.409921", "n_pass": [2640, 174, 130], "score": "0.9928", "loss": "0.0309", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"echo done\") { boolean _catch ; @Override publiccommandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); }  commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:22.673345", "n_pass": [3429, 175, 131], "score": "0.9941", "loss": "0.0654", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ; @Override publiccommandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); }  commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:25.571128", "n_pass": [3436, 176, 132], "score": "0.922", "loss": "0.5572", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;Override publiccommandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); }  commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:28.465034", "n_pass": [3437, 177, 133], "score": "0.9867", "loss": "0.2309", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { RootShell.log(\"CAUGHT!!!\"); } super.commandOutput(line); }  commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:31.420903", "n_pass": [3450, 178, 134], "score": "0.9943", "loss": "0.0177", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!!!\"); } super.commandOutput(line); }  commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:34.267396", "n_pass": [3453, 179, 135], "score": "0.9962", "loss": "0.0336", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }  commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:37.627242", "n_pass": [3462, 180, 136], "score": "0.9904", "loss": "0.0364", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:40.568774", "n_pass": [3472, 181, 137], "score": "0.9906", "loss": "0.0402", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:43.470066", "n_pass": [3478, 182, 138], "score": "0.9917", "loss": "0.0421", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:46.339531", "n_pass": [3481, 183, 139], "score": "0.9928", "loss": "0.0424", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:49.216294", "n_pass": [3483, 184, 140], "score": "0.8163", "loss": "1.0122", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:52.124895", "n_pass": [3484, 185, 141], "score": "0.9211", "loss": "0.4927", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {; } catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:55.083502", "n_pass": [3488, 186, 142], "score": "0.9697", "loss": "0.2354", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { e.printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:27:58.069303", "n_pass": [3495, 187, 143], "score": "0.5943", "loss": "1.7487", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }  commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:28:00.996588", "n_pass": [3501, 188, 144], "score": "0.9613", "loss": "0.4154", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com.stericson) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:28:04.025090", "n_pass": [3511, 189, 145], "score": "0.9842", "loss": "0.1058", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \"All .\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:28:06.973644", "n_pass": [3517, 190, 146], "score": "0.9775", "loss": "0.1076", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\"); visualUpdate(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:28:09.891431", "n_pass": [3520, 191, 147], "score": "0.9435", "loss": "0.7983", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler.ACTION_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:28:12.793621", "n_pass": [3522, 192, 148], "score": "0.3599", "loss": "1.9783", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler_HIDE); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:28:15.669031", "n_pass": [3523, 193, 149], "score": "0.8397", "loss": "0.564", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {; } catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:28:18.563631", "n_pass": [3527, 194, 150], "score": "0.9713", "loss": "0.4824", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { e.printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:28:21.540904", "n_pass": [3534, 195, 151], "score": "0.962", "loss": "0.3482", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; ; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:28:24.455518", "n_pass": [3541, 196, 152], "score": "0.973", "loss": "0.101", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { e.printStackTrace(); } }"}
{"time": "2021-01-21 03:28:27.377674", "n_pass": [3549, 197, 153], "score": "0.8325", "loss": "2.2245", "code": "void run() { visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:28:31.167374", "n_pass": [3559, 198, 154], "score": "0.9982", "loss": "0.0108", "code": "void run(){ visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:28:34.089866", "n_pass": [3561, 199, 155], "score": "0.9117", "loss": "0.9685", "code": "void run(){visualUpdate(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:28:36.969960", "n_pass": [3562, 200, 156], "score": "0.5586", "loss": "1.8446", "code": "void run(){(ACTION);try {getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:28:39.921089", "n_pass": [3568, 201, 157], "score": "0.983", "loss": "0.0745", "code": "void run(){(ACTION);try{getPath(); for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:28:42.811212", "n_pass": [3574, 202, 158], "score": "0.9747", "loss": "0.1242", "code": "void run(){(ACTION);try{getPath();for (String path : paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:28:48.568734", "n_pass": [3581, 204, 159], "score": "0.9893", "loss": "0.101", "code": "void run(){(ACTION);try{getPath();for (String path: paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:28:51.452704", "n_pass": [3583, 205, 160], "score": "0.8679", "loss": "0.6699", "code": "void run(){(ACTION);try{getPath();for (String path:paths) {(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:28:54.315268", "n_pass": [3586, 206, 161], "score": "0.4907", "loss": "1.9456", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler); } } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:28:57.194014", "n_pass": [3592, 207, 162], "score": "0.9586", "loss": "0.1388", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} } catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:02.936321", "n_pass": [3596, 209, 163], "score": "0.9969", "loss": "0.0196", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch (Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:05.822148", "n_pass": [3598, 210, 164], "score": "0.9948", "loss": "0.0264", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e) {} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:08.723494", "n_pass": [3604, 211, 165], "score": "0.9894", "loss": "0.1142", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){} visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:11.606223", "n_pass": [3607, 212, 166], "score": "0.9885", "loss": "0.0363", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}visualUpdate( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:14.481834", "n_pass": [3608, 213, 167], "score": "0.991", "loss": "0.1025", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}( \"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:17.359486", "n_pass": [3610, 214, 168], "score": "0.9927", "loss": "0.0297", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\"); for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:20.673710", "n_pass": [3615, 215, 169], "score": "0.9896", "loss": "0.1269", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for (int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:23.568271", "n_pass": [3617, 216, 170], "score": "0.9622", "loss": "0.3966", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(int i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:26.464873", "n_pass": [3619, 217, 171], "score": "0.9972", "loss": "0.0099", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for( i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:29.366482", "n_pass": [3620, 218, 172], "score": "0.8918", "loss": "0.3521", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i = 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:32.264505", "n_pass": [3622, 219, 173], "score": "0.9396", "loss": "0.8617", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i= 0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:35.147603", "n_pass": [3624, 220, 174], "score": "0.9751", "loss": "0.3189", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0; ; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:38.016822", "n_pass": [3627, 221, 175], "score": "0.7762", "loss": "2.358", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;; i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:40.871261", "n_pass": [3629, 222, 176], "score": "0.7514", "loss": "1.5745", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++) {(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:43.735235", "n_pass": [3634, 223, 177], "score": "0.9711", "loss": "0.1187", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"//busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:46.597982", "n_pass": [3638, 224, 178], "score": "0.951", "loss": "0.9037", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"/busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:49.481817", "n_pass": [3639, 225, 179], "score": "0.9668", "loss": "0.2234", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"busybox\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:52.354460", "n_pass": [3640, 226, 180], "score": "0.9814", "loss": "0.1336", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\"); } visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:55.213494", "n_pass": [3644, 227, 181], "score": "0.961", "loss": "0.1408", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");} visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:29:58.111755", "n_pass": [3646, 228, 182], "score": "0.9618", "loss": "0.18", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler.ACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:01.014234", "n_pass": [3650, 229, 183], "score": "0.9737", "loss": "0.317", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandlerACTION_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:03.932198", "n_pass": [3651, 230, 184], "score": "0.2305", "loss": "4.8178", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_PDISPLAY, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:09.869612", "n_pass": [3653, 232, 185], "score": "0.9917", "loss": "0.0299", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \" Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:15.586868", "n_pass": [3657, 234, 186], "score": "0.9922", "loss": "0.0324", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"Binary\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:18.470258", "n_pass": [3658, 235, 187], "score": "0.6401", "loss": "2.3468", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");  result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:21.330485", "n_pass": [3662, 236, 188], "score": "0.8044", "loss": "2.1389", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\"); result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:24.206243", "n_pass": [3663, 237, 189], "score": "0.5469", "loss": "1.3986", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result .isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:27.103889", "n_pass": [3665, 238, 190], "score": "0.9918", "loss": "0.1047", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result.isBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:29.996622", "n_pass": [3666, 239, 191], "score": "0.9489", "loss": "0.6745", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");resultisBusyboxAvailable(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:32.901366", "n_pass": [3667, 240, 192], "score": "0.9206", "loss": "0.8923", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result(); visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:35.763550", "n_pass": [3671, 241, 193], "score": "0.6643", "loss": "1.6469", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(TestHandler_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:38.630174", "n_pass": [3674, 242, 194], "score": "0.9337", "loss": "0.6497", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(_DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:41.501878", "n_pass": [3675, 243, 195], "score": "0.7106", "loss": "2.4063", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\" kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:44.385496", "n_pass": [3679, 244, 196], "score": "0.9573", "loss": "0.4323", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"kn\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:47.244299", "n_pass": [3680, 245, 197], "score": "0.9994", "loss": "0.0033", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"n\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:50.136044", "n_pass": [3681, 246, 198], "score": "0.9771", "loss": "0.183", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\"); visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:52.995824", "n_pass": [3685, 247, 199], "score": "0.9143", "loss": "0.873", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.ACTION_PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:30:58.770160", "n_pass": [3690, 249, 200], "score": "0.9521", "loss": "0.3899", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler._PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:01.601181", "n_pass": [3691, 250, 201], "score": "0.988", "loss": "0.2536", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY, \" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:04.471385", "n_pass": [3694, 251, 202], "score": "0.7185", "loss": "2.5094", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\" exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:07.363553", "n_pass": [3696, 252, 203], "score": "0.8401", "loss": "0.9235", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"exists\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:10.238426", "n_pass": [3697, 253, 204], "score": "0.9888", "loss": "0.1511", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\"); visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:13.117116", "n_pass": [3701, 254, 205], "score": "0.8896", "loss": "1.4789", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(TestHandlerDISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:15.975264", "n_pass": [3704, 255, 206], "score": "0.9921", "loss": "0.0355", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY, \"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:18.827909", "n_pass": [3707, 256, 207], "score": "0.9588", "loss": "0.3294", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"[n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:21.659675", "n_pass": [3709, 257, 208], "score": "0.5228", "loss": "3.1711", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"n\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:24.520142", "n_pass": [3710, 258, 209], "score": "0.9918", "loss": "0.0603", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\"); visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:27.385090", "n_pass": [3714, 259, 210], "score": "0.9232", "loss": "1.4142", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate( \"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:33.095777", "n_pass": [3717, 261, 211], "score": "0.7249", "loss": "2.2125", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"Testing\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:35.950848", "n_pass": [3719, 262, 212], "score": "0.8449", "loss": "1.6348", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\"); visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:38.798026", "n_pass": [3723, 263, 213], "score": "0.9789", "loss": "0.6299", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");visualUpdate( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:41.662447", "n_pass": [3724, 264, 214], "score": "0.8464", "loss": "0.7751", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");( \" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:44.540565", "n_pass": [3726, 265, 215], "score": "0.9963", "loss": "0.0247", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\" \\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:47.373348", "n_pass": [3728, 266, 216], "score": "0.9369", "loss": "0.6157", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(TestHandlerPDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:55.912505", "n_pass": [3737, 269, 217], "score": "0.5486", "loss": "2.3647", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY, \"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:31:58.787250", "n_pass": [3740, 270, 218], "score": "0.7928", "loss": "1.9862", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"Testing \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:01.632000", "n_pass": [3742, 271, 219], "score": "0.9181", "loss": "0.3779", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\" \"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:04.482471", "n_pass": [3743, 272, 220], "score": "0.838", "loss": "1.4642", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\"); visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:07.478250", "n_pass": [3747, 273, 221], "score": "0.9967", "loss": "0.023", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");visualUpdate( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:10.349124", "n_pass": [3748, 274, 222], "score": "0.5874", "loss": "2.9217", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");( \"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:13.218733", "n_pass": [3750, 275, 223], "score": "0.7038", "loss": "3.0945", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\\n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:16.097816", "n_pass": [3752, 276, 224], "score": "0.461", "loss": "2.347", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"n\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:18.982268", "n_pass": [3753, 277, 225], "score": "0.9708", "loss": "0.4883", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try {  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:24.691461", "n_pass": [3759, 279, 226], "score": "0.6594", "loss": "2.3179", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{  new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:27.543340", "n_pass": [3761, 280, 227], "score": "0.9706", "loss": "0.1187", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{ new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:30.392739", "n_pass": [3762, 281, 228], "score": "0.7453", "loss": "1.8167", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(0) {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:33.245499", "n_pass": [3767, 282, 229], "score": "0.7156", "loss": "1.1944", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command() {void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:36.142993", "n_pass": [3769, 283, 230], "score": "0.601", "loss": "2.1311", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){void commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:38.983430", "n_pass": [3771, 284, 231], "score": "0.6313", "loss": "1.6573", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){ commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:41.855543", "n_pass": [3772, 285, 232], "score": "0.9761", "loss": "0.3981", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id, String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:44.715651", "n_pass": [3779, 286, 233], "score": "0.6179", "loss": "2.2641", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) { visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:50.419622", "n_pass": [3786, 288, 234], "score": "0.7031", "loss": "1.5406", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(+ \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:56.081582", "n_pass": [3789, 290, 235], "score": "0.9548", "loss": "0.8908", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate( \"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:32:58.955623", "n_pass": [3790, 291, 236], "score": "0.591", "loss": "1.5513", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"\\n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:01.804248", "n_pass": [3792, 292, 237], "score": "0.4273", "loss": "3.6411", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\"); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:07.500586", "n_pass": [3797, 294, 238], "score": "0.9142", "loss": "0.4312", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");} }.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:10.365525", "n_pass": [3799, 295, 239], "score": "0.9694", "loss": "0.3823", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add(cmd); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:13.250117", "n_pass": [3804, 296, 240], "score": "0.8937", "loss": "0.6955", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add(); } catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:16.118706", "n_pass": [3807, 297, 241], "score": "0.9022", "loss": "0.5793", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();} catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:18.967252", "n_pass": [3809, 298, 242], "score": "0.7486", "loss": "2.0604", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch (Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:21.842507", "n_pass": [3811, 299, 243], "score": "0.9742", "loss": "0.2469", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e) {; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:24.795666", "n_pass": [3817, 300, 244], "score": "0.548", "loss": "1.5839", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){; } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:27.635285", "n_pass": [3819, 301, 245], "score": "0.8466", "loss": "1.0215", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } visualUpdate( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:36.116498", "n_pass": [3823, 304, 246], "score": "0.983", "loss": "0.1476", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } ( \"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:38.989293", "n_pass": [3825, 305, 247], "score": "0.9703", "loss": "0.0803", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"[n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:41.878407", "n_pass": [3827, 306, 248], "score": "0.9901", "loss": "0.1227", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"n\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:44.708324", "n_pass": [3828, 307, 249], "score": "0.9555", "loss": "0.8565", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\"); try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:47.598431", "n_pass": [3832, 308, 250], "score": "0.8611", "loss": "0.9895", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try { getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:53.279400", "n_pass": [3836, 310, 251], "score": "0.3632", "loss": "4.3549", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {getShell(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:56.120235", "n_pass": [3837, 311, 252], "score": "0.9452", "loss": "0.3708", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true); new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:33:59.009258", "n_pass": [3842, 312, 253], "score": "0.3187", "loss": "4.6471", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") { @Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:01.883110", "n_pass": [3852, 313, 254], "score": "0.5443", "loss": "2.6227", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override publiccommandOutput(int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:07.527756", "n_pass": [3854, 315, 255], "score": "0.4358", "loss": "2.5008", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) { visualUpdate(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:10.383564", "n_pass": [3861, 316, 256], "score": "0.7727", "loss": "1.424", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler.ACTION_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:13.232349", "n_pass": [3863, 317, 257], "score": "0.4593", "loss": "2.9916", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler_DISPLAY + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:16.060557", "n_pass": [3864, 318, 258], "score": "0.6072", "loss": "2.8527", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {; } visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:21.780055", "n_pass": [3883, 320, 259], "score": "0.8779", "loss": "0.6058", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\"); visualUpdate( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:24.625347", "n_pass": [3889, 321, 260], "score": "0.9284", "loss": "0.7032", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(true,_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:27.481312", "n_pass": [3897, 322, 261], "score": "0.9613", "loss": "0.1885", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(_APP); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:30.306414", "n_pass": [3898, 323, 262], "score": "0.9853", "loss": "0.093", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch ;publiccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:33.405803", "n_pass": [3940, 324, 263], "score": "0.247", "loss": "4.1866", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catchpubliccommandOutput(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:36.220670", "n_pass": [3941, 325, 264], "score": "0.9971", "loss": "0.0375", "code": "void run(){(ACTION);try{getPath();for (String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:41.017923", "n_pass": [4054, 326, 265], "score": "0.5501", "loss": "1.906", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i=0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:46.743479", "n_pass": [4086, 328, 266], "score": "0.8949", "loss": "0.8563", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_, \"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:34:58.127083", "n_pass": [4106, 332, 267], "score": "0.9768", "loss": "0.1757", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line) {visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:35:15.328620", "n_pass": [4187, 338, 268], "score": "0.7949", "loss": "2.2082", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){visualUpdate(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:35:18.176201", "n_pass": [4189, 339, 269], "score": "0.9758", "loss": "0.3007", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"n\");}}.add();}catch(Exception e){ } (\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:35:26.749363", "n_pass": [4213, 342, 270], "score": "0.8279", "loss": "1.3787", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"n\");}}.add();}catch(Exception e){ }(\"\");try {(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:35:29.613815", "n_pass": [4220, 343, 271], "score": "0.272", "loss": "3.7784", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"n\");}}.add();}catch(Exception e){ }(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\\n\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:35:32.543223", "n_pass": [4245, 344, 272], "score": "0.9869", "loss": "0.1311", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler.PDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"n\");}}.add();}catch(Exception e){ }(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:35:55.306228", "n_pass": [4495, 351, 273], "score": "0.4981", "loss": "3.5981", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandlerPDISPLAY,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"n\");}}.add();}catch(Exception e){ }(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:35:58.154511", "n_pass": [4496, 352, 274], "score": "0.3279", "loss": "4.2008", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");visualUpdate(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"n\");}}.add();}catch(Exception e){ }(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:01.034712", "n_pass": [4510, 353, 275], "score": "0.9781", "loss": "0.4732", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"n\");}}.add();}catch(Exception e){ }(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:12.523502", "n_pass": [4559, 357, 276], "score": "0.5743", "loss": "2.1459", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){ }(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:15.426299", "n_pass": [4578, 358, 277], "score": "0.2634", "loss": "3.0165", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { boolean _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:18.695386", "n_pass": [4676, 359, 278], "score": "0.2375", "loss": "5.0569", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);} }catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:23.469471", "n_pass": [4803, 360, 279], "score": "0.4028", "loss": "3.0886", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(i0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:26.344537", "n_pass": [4820, 361, 280], "score": "0.9084", "loss": "0.9554", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(0;;i++){(\"\");}visualUpdate(TestHandler_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:32.034493", "n_pass": [4837, 363, 281], "score": "0.43", "loss": "4.1677", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(0;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\\n\"); visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:37.866353", "n_pass": [4884, 365, 282], "score": "0.5133", "loss": "3.2978", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(0;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\\n\");visualUpdate(PDISPLAY,\"\");(\"\"); try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:40.727006", "n_pass": [4898, 366, 283], "score": "0.8994", "loss": "1.1588", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(0;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\\n\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:46.165229", "n_pass": [5177, 367, 284], "score": "0.9696", "loss": "0.4703", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\\n\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:49.159172", "n_pass": [5234, 368, 285], "score": "0.9844", "loss": "0.1918", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"n\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:36:52.006500", "n_pass": [5235, 369, 286], "score": "0.9059", "loss": "1.2761", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0, \"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:37:45.707675", "n_pass": [5939, 370, 287], "score": "0.8734", "loss": "1.2499", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\") {Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:37:51.332370", "n_pass": [5944, 372, 288], "score": "0.7082", "loss": "2.4032", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler + \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:38:05.587121", "n_pass": [5962, 377, 289], "score": "0.8033", "loss": "0.556", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd); } catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:38:25.358570", "n_pass": [5984, 384, 290], "score": "0.8818", "loss": "1.2666", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch (Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:38:31.052083", "n_pass": [5988, 386, 291], "score": "0.5599", "loss": "1.9145", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e) {} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:38:33.952809", "n_pass": [5994, 387, 292], "score": "0.9579", "loss": "0.7525", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){} visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:38:36.814096", "n_pass": [5997, 388, 293], "score": "0.802", "loss": "0.6268", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}visualUpdate( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:38:39.635015", "n_pass": [5998, 389, 294], "score": "0.987", "loss": "0.0969", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}( \"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:38:42.458115", "n_pass": [6000, 390, 295], "score": "0.9089", "loss": "0.5444", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"Switching\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:38:45.286174", "n_pass": [6002, 391, 296], "score": "0.669", "loss": "2.7522", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\"); try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:38:53.760712", "n_pass": [6013, 394, 297], "score": "0.4602", "loss": "2.1464", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try { shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:38:56.596495", "n_pass": [6015, 395, 298], "score": "0.8218", "loss": "2.1335", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell(); Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:02.289669", "n_pass": [6022, 397, 299], "score": "0.6202", "loss": "1.042", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command= new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:05.118071", "n_pass": [6025, 398, 300], "score": "0.9971", "loss": "0.0249", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command() {void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:07.989397", "n_pass": [6031, 399, 301], "score": "0.7304", "loss": "1.5664", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){void commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:10.821259", "n_pass": [6033, 400, 302], "score": "0.8158", "loss": "1.1593", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){ commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:13.638460", "n_pass": [6034, 401, 303], "score": "0.5758", "loss": "2.497", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id, String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:16.488161", "n_pass": [6041, 402, 304], "score": "0.9833", "loss": "0.0394", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {commandOutput(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:22.155553", "n_pass": [6048, 404, 305], "score": "0.9735", "loss": "0.1265", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id); } }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:24.995089", "n_pass": [6053, 405, 306], "score": "0.4933", "loss": "2.6366", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);} }.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:27.828601", "n_pass": [6055, 406, 307], "score": "0.9885", "loss": "0.0562", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); } catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:36.292675", "n_pass": [6065, 409, 308], "score": "0.9834", "loss": "0.065", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch (Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:39.164913", "n_pass": [6067, 410, 309], "score": "0.7962", "loss": "1.9256", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {; } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:44.826306", "n_pass": [6075, 412, 310], "score": "0.98", "loss": "0.1156", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) { } try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:47.638366", "n_pass": [6076, 413, 311], "score": "0.9632", "loss": "0.2333", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {} try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:50.475700", "n_pass": [6078, 414, 312], "score": "0.9991", "loss": "0.0027", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try { shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:53.324566", "n_pass": [6080, 415, 313], "score": "0.9882", "loss": "0.0522", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{ shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:39:56.150580", "n_pass": [6082, 416, 314], "score": "0.8021", "loss": "0.4917", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command( \"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:01.800012", "n_pass": [6090, 418, 315], "score": "0.9964", "loss": "0.0265", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\") { _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:07.536181", "n_pass": [6095, 420, 316], "score": "0.686", "loss": "2.252", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){ _catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:10.382242", "n_pass": [6097, 421, 317], "score": "0.4004", "loss": "3.002", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_catch(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:13.229422", "n_pass": [6099, 422, 318], "score": "0.9878", "loss": "0.0675", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id, String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:16.095249", "n_pass": [6105, 423, 319], "score": "0.9053", "loss": "0.7492", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line) { if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:18.978819", "n_pass": [6110, 424, 320], "score": "0.5982", "loss": "1.7538", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){ if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:21.807186", "n_pass": [6112, 425, 321], "score": "0.9484", "loss": "0.5471", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if (_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:24.628635", "n_pass": [6114, 426, 322], "score": "0.997", "loss": "0.0321", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_catch) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:27.449788", "n_pass": [6117, 427, 323], "score": "0.9737", "loss": "0.3016", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_) { log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:30.268735", "n_pass": [6119, 428, 324], "score": "0.9799", "loss": "0.0736", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){ log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:33.108968", "n_pass": [6121, 429, 325], "score": "0.8009", "loss": "0.4048", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){log(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:35.936747", "n_pass": [6122, 430, 326], "score": "0.7968", "loss": "0.3587", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"CAUGHT!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:38.775769", "n_pass": [6125, 431, 327], "score": "0.9654", "loss": "0.0531", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\"); } super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:44.410597", "n_pass": [6130, 433, 328], "score": "0.9492", "loss": "0.3406", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} super.commandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:50.062814", "n_pass": [6134, 435, 329], "score": "0.9996", "loss": "0.0016", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(line); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:53.306817", "n_pass": [6137, 436, 330], "score": "0.9774", "loss": "0.1112", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id, String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:40:58.970224", "n_pass": [6148, 438, 331], "score": "0.9761", "loss": "0.135", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:01.805317", "n_pass": [6153, 439, 332], "score": "0.9986", "loss": "0.0111", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){ synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:04.633989", "n_pass": [6155, 440, 333], "score": "0.9996", "loss": "0.0017", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:07.446886", "n_pass": [6157, 441, 334], "score": "0.6139", "loss": "1.8533", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:10.280153", "n_pass": [6161, 442, 335], "score": "0.9998", "loss": "0.0004", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:13.131660", "n_pass": [6165, 443, 336], "score": "0.975", "loss": "0.3281", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:18.840850", "n_pass": [6170, 445, 337], "score": "0.996", "loss": "0.0183", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:21.686604", "n_pass": [6178, 446, 338], "score": "0.9982", "loss": "0.0077", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try {} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:24.526550", "n_pass": [6180, 447, 339], "score": "0.9997", "loss": "0.0012", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{} catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:27.370673", "n_pass": [6183, 448, 340], "score": "0.9955", "loss": "0.014", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch (IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:30.226435", "n_pass": [6185, 449, 341], "score": "0.8902", "loss": "0.1435", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e) { printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:33.084155", "n_pass": [6191, 450, 342], "score": "0.9961", "loss": "0.0061", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){ printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:35.906721", "n_pass": [6193, 451, 343], "score": "0.8788", "loss": "0.9532", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace(); } } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:38.740798", "n_pass": [6198, 452, 344], "score": "0.9877", "loss": "0.0722", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();} } }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:41.589663", "n_pass": [6200, 453, 345], "score": "0.8122", "loss": "0.906", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}} }commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:44.404112", "n_pass": [6202, 454, 346], "score": "0.7546", "loss": "0.391", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id, int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:47.274363", "n_pass": [6210, 455, 347], "score": "0.995", "loss": "0.0338", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode) { synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:50.127620", "n_pass": [6215, 456, 348], "score": "0.9742", "loss": "0.1283", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){ synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:53.036863", "n_pass": [6217, 457, 349], "score": "0.968", "loss": "0.0708", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized (com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:55.888435", "n_pass": [6219, 458, 350], "score": "0.9872", "loss": "0.0417", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com) {visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:41:58.745320", "n_pass": [6223, 459, 351], "score": "0.8189", "loss": "1.4465", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(TestHandlerPDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:01.578550", "n_pass": [6227, 460, 352], "score": "0.9567", "loss": "0.601", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY, \".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:04.408547", "n_pass": [6230, 461, 353], "score": "0.9988", "loss": "0.0074", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\".\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:07.223643", "n_pass": [6232, 462, 354], "score": "0.9994", "loss": "0.001", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler); try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:10.084470", "n_pass": [6240, 463, 355], "score": "0.9859", "loss": "0.0864", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try {} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:12.918062", "n_pass": [6242, 464, 356], "score": "0.9248", "loss": "0.8278", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{} catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:15.752271", "n_pass": [6245, 465, 357], "score": "0.9991", "loss": "0.0039", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch (IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:18.570874", "n_pass": [6247, 466, 358], "score": "0.8501", "loss": "0.2318", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e) { printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:21.432878", "n_pass": [6253, 467, 359], "score": "0.9459", "loss": "0.0822", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){ printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:24.275728", "n_pass": [6255, 468, 360], "score": "0.9982", "loss": "0.0089", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace(); } } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:27.135669", "n_pass": [6260, 469, 361], "score": "0.9888", "loss": "0.0908", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();} } } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:29.962527", "n_pass": [6262, 470, 362], "score": "0.9836", "loss": "0.1099", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}} } }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:32.781957", "n_pass": [6264, 471, 363], "score": "0.8025", "loss": "0.3701", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}} }; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:35.606808", "n_pass": [6266, 472, 364], "score": "0.9758", "loss": "0.04", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}}; } catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:38.446431", "n_pass": [6269, 473, 365], "score": "0.9086", "loss": "0.2118", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};} catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:41.272491", "n_pass": [6271, 474, 366], "score": "0.9946", "loss": "0.026", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch (Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:44.113355", "n_pass": [6273, 475, 367], "score": "0.8177", "loss": "0.4319", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e) { printStackTrace(); } }"}
{"time": "2021-01-21 03:42:46.981073", "n_pass": [6279, 476, 368], "score": "0.9989", "loss": "0.0088", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){ printStackTrace(); } }"}
{"time": "2021-01-21 03:42:49.800421", "n_pass": [6281, 477, 369], "score": "0.7086", "loss": "1.1373", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace(); } }"}
{"time": "2021-01-21 03:42:52.633478", "n_pass": [6286, 478, 370], "score": "0.9355", "loss": "0.6562", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"id\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:42:59.730426", "n_pass": [6466, 480, 371], "score": "0.9611", "loss": "0.5646", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override (int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:02.562421", "n_pass": [6471, 481, 372], "score": "0.6155", "loss": "0.6528", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id, String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:05.406917", "n_pass": [6477, 482, 373], "score": "0.9974", "loss": "0.0118", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line) {(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:08.256426", "n_pass": [6482, 483, 374], "score": "0.8328", "loss": "0.2841", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(TestHandler+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:11.095969", "n_pass": [6485, 484, 375], "score": "0.9973", "loss": "0.0084", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(+ \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:13.914609", "n_pass": [6486, 485, 376], "score": "0.9154", "loss": "0.842", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){( \"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:16.727365", "n_pass": [6487, 486, 377], "score": "0.6412", "loss": "1.9462", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");commandOutput(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:19.565798", "n_pass": [6492, 487, 378], "score": "0.991", "loss": "0.0954", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id); } }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:22.398680", "n_pass": [6497, 488, 379], "score": "0.9874", "loss": "0.0506", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);} }.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:25.213744", "n_pass": [6499, 489, 380], "score": "0.9991", "loss": "0.0017", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add(cmd);} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:28.051588", "n_pass": [6504, 490, 381], "score": "0.9493", "loss": "0.1821", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();} catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:30.871921", "n_pass": [6508, 491, 382], "score": "0.9988", "loss": "0.0031", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");( \"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:33.730564", "n_pass": [6523, 492, 383], "score": "0.9446", "loss": "0.6762", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"[\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:36.534169", "n_pass": [6525, 493, 384], "score": "0.7159", "loss": "0.4493", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{ shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:39.363543", "n_pass": [6531, 494, 385], "score": "0.6904", "loss": "2.2031", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line) {(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:42.275876", "n_pass": [6554, 495, 386], "score": "0.99", "loss": "0.0338", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add(cmd); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:45.137296", "n_pass": [6565, 496, 387], "score": "0.4936", "loss": "2.5794", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add(); }catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:47.951839", "n_pass": [6568, 497, 388], "score": "0.9948", "loss": "0.0434", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add();}catch(Exception e) {}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:50.798716", "n_pass": [6576, 498, 389], "score": "0.9927", "loss": "0.0529", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add();}catch(Exception e){}try{shell= new Command(\"done\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:56.526191", "n_pass": [6589, 500, 390], "score": "0.636", "loss": "0.5403", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add();}catch(Exception e){}try{shell= new Command(\"\"){_(int id,String line){if(_){(\"!\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:43:59.441007", "n_pass": [6611, 501, 391], "score": "0.9986", "loss": "0.0089", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add();}catch(Exception e){}try{shell= new Command(\"\"){_(int id,String line){if(_){(\"\");} supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:44:02.273930", "n_pass": [6616, 502, 392], "score": "0.9654", "loss": "0.5345", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add();}catch(Exception e){}try{shell= new Command(\"\"){_(int id,String line){if(_){(\"\");}supercommandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:44:05.091481", "n_pass": [6617, 503, 393], "score": "0.9472", "loss": "0.0997", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add();}catch(Exception e){}try{shell= new Command(\"\"){_(int id,String line){if(_){(\"\");}commandOutput(); }commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:44:07.921694", "n_pass": [6622, 504, 394], "score": "0.9067", "loss": "0.1183", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add();}catch(Exception e){}try{shell= new Command(\"\"){_(int id,String line){if(_){(\"\");}commandOutput();}commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY, \"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:44:10.873742", "n_pass": [6644, 505, 395], "score": "0.9609", "loss": "0.2609", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add();}catch(Exception e){}try{shell= new Command(\"\"){_(int id,String line){if(_){(\"\");}commandOutput();}commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:44:18.808899", "n_pass": [7006, 507, 396], "score": "0.9978", "loss": "0.0127", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add();}catch(Exception e){}try{shell=new Command(\"\"){_(int id,String line){if(_){(\"\");}commandOutput();}commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();} }"}
{"time": "2021-01-21 03:44:22.365573", "n_pass": [7147, 508, 397], "score": "0.9786", "loss": "0.1064", "code": "void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}(\"\");for(;;i++){(\"\");}visualUpdate(_,\"\");result();visualUpdate(DISPLAY,\"\");visualUpdate(TestHandler,\"\");visualUpdate(DISPLAY,\"\");(\"\");(\"\");visualUpdate(PDISPLAY,\"\");(\"\");try{new Command(){commandOutput(int id,String line){(\"\");}}.add();}catch(Exception e){}(\"\");try{(true);new Command(0,\"\"){Override(int id,String line){(\"\");(id);}}.add();}catch(Exception e){}(\"\");(\"\");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add();}catch(Exception e){}try{shell=new Command(\"\"){_(int id,String line){if(_){(\"\");}commandOutput();}commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,\"\");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();}}"}

Minimal simplified code:
void run(){(ACTION);try{getPath();for(String path:paths){(TestHandler);}}catch(Exception e){}("");for(;;i++){("");}visualUpdate(_,"");result();visualUpdate(DISPLAY,"");visualUpdate(TestHandler,"");visualUpdate(DISPLAY,"");("");("");visualUpdate(PDISPLAY,"");("");try{new Command(){commandOutput(int id,String line){("");}}.add();}catch(Exception e){}("");try{(true);new Command(0,""){Override(int id,String line){("");(id);}}.add();}catch(Exception e){}("");("");try{shell();Command=new Command(){commandOutput(int id,String line){(id);}}.add();}catch(Exception e){}try{shell=new Command(""){_(int id,String line){if(_){("");}commandOutput();}commandTerminated(int id,String reason){synchronized(com){visualUpdate(PDISPLAY,"");(TestHandler);try{}catch(IOException e){printStackTrace();}}}commandCompleted(int id,int exitCode){synchronized(com){visualUpdate(PDISPLAY,"");(TestHandler);try{}catch(IOException e){printStackTrace();}}}};}catch(Exception e){printStackTrace();}}

