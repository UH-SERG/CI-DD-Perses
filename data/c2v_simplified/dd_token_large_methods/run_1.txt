
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/catalina/servlets/CGIServlet_run.java
method_name = run
method_body = protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + ": not ready to run."); } if (debug >= 1) { log("runCGI(envp=[" + env + "], command=" + command + ")"); } if ((command.indexOf(File.separator + "." + File.separator) >= 0) || (command.indexOf(File.separator + "..") >= 0) || (command.indexOf(".." + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + "Illegal Character in CGI command " + "path ('.' or '..') detected. Not " + "running CGI [" + command + "]."); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; BufferedOutputStream commandsStdIn = null; Process proc = null; int bufRead = -1; List<String> cmdAndArgs = new ArrayList<>(); if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get("CONTENT_LENGTH"); if (!"".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !("".equals(line))) { if (debug >= 2) { log("runCGI: addHeader(\"" + line + "\")"); } if (line.startsWith("HTTP")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(":") >= 0) { String header = line.substring(0, line.indexOf(":")).trim(); String value = line.substring(line.indexOf(":") + 1).trim(); if (header.equalsIgnoreCase("status")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log("runCGI: bad header line \"" + line + "\""); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log("runCGI: output " + bufRead + " bytes of data"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log("Caught exception " + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log("Exception closing header reader " + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) { log("Exception closing output stream " + ioe); } } if (errReaderThread != null) { try { errReaderThread.join(stderrTimeout); } catch (InterruptedException e) { log("Interupted waiting for stderr reader thread"); } } if (debug > 4) { log("Running finally block"); } if (proc != null) { proc.destroy(); proc = null; } } }
predict, score, loss = run, 0.9999867677688599, 2.6225699912174605e-05

Trace of simplified code(s):
{"time": "2021-01-20 15:30:18.023343", "n_pass": [1, 1, 1], "score": "0.9787", "loss": "0.0232", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \": not ready to run.\"); } if (debug >= 1) { log(\"runCGI(envp=[\" + env + \"], command=\" + command + \")\"); } if ((command.indexOf(File.separator + \".\" + File.separator) >= 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + \"path ('.' or '..') detected. Not \" + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; BufferedOutputStream commandsStdIn = null; Process proc = null; int bufRead = -1; List<String> cmdAndArgs = new ArrayList<>(); if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) { log(\"Exception closing output stream \" + ioe); } } if (errReaderThread != null) { try { errReaderThread.join(stderrTimeout); } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:30:21.726073", "n_pass": [93, 2, 2], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if ((command.indexOf(File.separator + \".\" + File.separator) >= 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + \"path ('.' or '..') detected. Not \" + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; BufferedOutputStream commandsStdIn = null; Process proc = null; int bufRead = -1; List<String> cmdAndArgs = new ArrayList<>(); if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) { log(\"Exception closing output stream \" + ioe); } } if (errReaderThread != null) { try { errReaderThread.join(stderrTimeout); } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:30:24.691748", "n_pass": [99, 3, 3], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if ((command.indexOf(File.separator + \".\" + File.separator) >= 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + \"path ('.' or '..') detected. Not \" + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) { log(\"Exception closing output stream \" + ioe); } } if (errReaderThread != null) { try { errReaderThread.join(stderrTimeout); } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:30:27.815972", "n_pass": [121, 4, 4], "score": "1.0", "loss": "0.0001", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if ((command.indexOf(File.separator + \".\" + File.separator) >= 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + \"path ('.' or '..') detected. Not \" + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:30:31.458358", "n_pass": [216, 5, 5], "score": "1.0", "loss": "0.0001", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + \"path ('.' or '..') detected. Not \" + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:30:34.413606", "n_pass": [221, 6, 6], "score": "0.9999", "loss": "0.0002", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:30:37.395382", "n_pass": [226, 7, 7], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:30:40.394024", "n_pass": [237, 8, 8], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:30:44.898598", "n_pass": [428, 9, 9], "score": "0.9995", "loss": "0.0007", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:30:47.866701", "n_pass": [435, 10, 10], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:30:54.185042", "n_pass": [480, 12, 11], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:30:57.137175", "n_pass": [483, 13, 12], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:00.134715", "n_pass": [492, 14, 13], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:03.076100", "n_pass": [500, 15, 14], "score": "0.9884", "loss": "0.1999", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:05.977094", "n_pass": [501, 16, 15], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:08.927427", "n_pass": [505, 17, 16], "score": "0.9965", "loss": "0.0094", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:16.151329", "n_pass": [813, 19, 17], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:19.103837", "n_pass": [818, 20, 18], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:22.339393", "n_pass": [841, 21, 19], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:25.281441", "n_pass": [845, 22, 20], "score": "0.9942", "loss": "0.0116", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimvalue = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:28.198365", "n_pass": [846, 23, 21], "score": "0.9999", "loss": "0.0002", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:31.200846", "n_pass": [858, 24, 22], "score": "0.9998", "loss": "0.0003", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:34.146967", "n_pass": [860, 25, 23], "score": "0.9993", "loss": "0.0019", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:37.061834", "n_pass": [862, 26, 24], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:39.992326", "n_pass": [865, 27, 25], "score": "0.9998", "loss": "0.0006", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:42.946238", "n_pass": [868, 28, 26], "score": "0.9999", "loss": "0.0002", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:45.955104", "n_pass": [871, 29, 27], "score": "0.9999", "loss": "0.0001", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:49.016857", "n_pass": [888, 30, 28], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:52.280605", "n_pass": [926, 31, 29], "score": "0.9995", "loss": "0.0007", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 15:31:55.273800", "n_pass": [935, 32, 30], "score": "0.9996", "loss": "0.0008", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:31:58.243755", "n_pass": [943, 33, 31], "score": "0.9999", "loss": "0.0004", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:01.185141", "n_pass": [948, 34, 32], "score": "0.9995", "loss": "0.0019", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"+ \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:04.117104", "n_pass": [949, 35, 33], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:07.108024", "n_pass": [965, 36, 34], "score": "0.9996", "loss": "0.0009", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:10.041073", "n_pass": [968, 37, 35], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:13.155763", "n_pass": [973, 38, 36], "score": "0.9739", "loss": "0.0403", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:16.089643", "n_pass": [976, 39, 37], "score": "0.9999", "loss": "0.0003", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:19.028035", "n_pass": [980, 40, 38], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:21.930520", "n_pass": [984, 41, 39], "score": "0.9988", "loss": "0.0044", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:24.826786", "n_pass": [987, 42, 40], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:27.730368", "n_pass": [991, 43, 41], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:30.647856", "n_pass": [998, 44, 42], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:33.562594", "n_pass": [1002, 45, 43], "score": "0.9999", "loss": "0.0003", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:37.696264", "n_pass": [1155, 46, 44], "score": "0.998", "loss": "0.013", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:40.583433", "n_pass": [1156, 47, 45], "score": "0.9981", "loss": "0.0104", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutput = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:46.251582", "n_pass": [1670, 48, 46], "score": "0.9999", "loss": "0.0001", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:49.414173", "n_pass": [1672, 49, 47], "score": "0.9999", "loss": "0.0005", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:52.414396", "n_pass": [1690, 50, 48], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:55.305803", "n_pass": [1691, 51, 49], "score": "0.9969", "loss": "0.021", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:32:58.216504", "n_pass": [1692, 52, 50], "score": "0.9997", "loss": "0.0007", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:01.119650", "n_pass": [1694, 53, 51], "score": "0.999", "loss": "0.003", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:04.034013", "n_pass": [1699, 54, 52], "score": "0.9994", "loss": "0.0041", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:06.955199", "n_pass": [1704, 55, 53], "score": "0.9963", "loss": "0.0597", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:09.865658", "n_pass": [1706, 56, 54], "score": "1.0", "loss": "0.0", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:12.788160", "n_pass": [1710, 57, 55], "score": "0.9774", "loss": "0.3664", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:15.727361", "n_pass": [1718, 58, 56], "score": "0.9997", "loss": "0.0007", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() { public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:18.641221", "n_pass": [1719, 59, 57], "score": "0.9978", "loss": "0.005", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:21.549370", "n_pass": [1723, 60, 58], "score": "0.9288", "loss": "0.2076", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:24.440020", "n_pass": [1726, 61, 59], "score": "0.9997", "loss": "0.0009", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:27.394823", "n_pass": [1738, 62, 60], "score": "0.9965", "loss": "0.0049", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:30.347296", "n_pass": [1746, 63, 61], "score": "0.9074", "loss": "0.2465", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:33.282721", "n_pass": [1754, 64, 62], "score": "0.9983", "loss": "0.0024", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:36.164125", "n_pass": [1757, 65, 63], "score": "0.9971", "loss": "0.0031", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:39.105608", "n_pass": [1767, 66, 64], "score": "0.9486", "loss": "0.4184", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:42.013630", "n_pass": [1769, 67, 65], "score": "0.9999", "loss": "0.0002", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:44.983796", "n_pass": [1781, 68, 66], "score": "0.9988", "loss": "0.0023", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:47.917478", "n_pass": [1787, 69, 67], "score": "0.9953", "loss": "0.0352", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:50.823599", "n_pass": [1793, 70, 68], "score": "0.9427", "loss": "0.7004", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:53.709671", "n_pass": [1797, 71, 69], "score": "0.9981", "loss": "0.0077", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:56.611421", "n_pass": [1801, 72, 70], "score": "0.9969", "loss": "0.0244", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:33:59.521039", "n_pass": [1804, 73, 71], "score": "0.9936", "loss": "0.0383", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:02.429691", "n_pass": [1808, 74, 72], "score": "0.9936", "loss": "0.0373", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:05.329875", "n_pass": [1814, 75, 73], "score": "0.821", "loss": "1.4332", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:08.202007", "n_pass": [1815, 76, 74], "score": "0.9939", "loss": "0.0079", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } }  response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:11.066649", "n_pass": [1816, 77, 75], "score": "0.9936", "loss": "0.0128", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:13.924296", "n_pass": [1817, 78, 76], "score": "0.9795", "loss": "0.1288", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:16.842587", "n_pass": [1825, 79, 77], "score": "0.8804", "loss": "0.1788", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:19.752792", "n_pass": [1834, 80, 78], "score": "0.9983", "loss": "0.0038", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:22.643516", "n_pass": [1835, 81, 79], "score": "0.9814", "loss": "0.2267", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:25.544904", "n_pass": [1840, 82, 80], "score": "0.9988", "loss": "0.0013", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:28.472170", "n_pass": [1847, 83, 81], "score": "0.9991", "loss": "0.0027", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:31.367016", "n_pass": [1852, 84, 82], "score": "0.9998", "loss": "0.0003", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:34.289467", "n_pass": [1858, 85, 83], "score": "0.7139", "loss": "2.5614", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:37.148374", "n_pass": [1859, 86, 84], "score": "0.9962", "loss": "0.0176", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:40.015362", "n_pass": [1861, 87, 85], "score": "0.9969", "loss": "0.0044", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:42.952424", "n_pass": [1868, 88, 86], "score": "0.998", "loss": "0.0185", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:45.916825", "n_pass": [1883, 89, 87], "score": "0.944", "loss": "0.8273", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:48.972786", "n_pass": [1904, 90, 88], "score": "0.998", "loss": "0.0026", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception  reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:51.841144", "n_pass": [1905, 91, 89], "score": "0.9997", "loss": "0.0009", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:55.160801", "n_pass": [1928, 92, 90], "score": "0.9374", "loss": "1.623", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:34:58.069597", "n_pass": [1933, 93, 91], "score": "0.9883", "loss": "0.0149", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:00.948573", "n_pass": [1937, 94, 92], "score": "0.9996", "loss": "0.0019", "code": "protected void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:03.892067", "n_pass": [1949, 95, 93], "score": "0.9854", "loss": "0.0191", "code": "void run() throws IOException { if (!isReady()) { (this.getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:09.465730", "n_pass": [1962, 97, 94], "score": "0.9801", "loss": "0.0346", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":  command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:12.343901", "n_pass": [1969, 98, 95], "score": "0.8494", "loss": "0.2172", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":command=\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:15.181099", "n_pass": [1970, 99, 96], "score": "0.9996", "loss": "0.0039", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:18.097570", "n_pass": [1980, 100, 97], "score": "0.9992", "loss": "0.0039", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:20.976380", "n_pass": [1992, 101, 98], "score": "0.9975", "loss": "0.0193", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) { throw new IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:23.831478", "n_pass": [1997, 102, 99], "score": "0.9976", "loss": "0.0144", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal CharacterCGI [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:26.678884", "n_pass": [2002, 103, 100], "score": "0.9873", "loss": "0.0765", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" + command + \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:29.507687", "n_pass": [2005, 104, 101], "score": "0.9991", "loss": "0.006", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); } ; InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:32.358749", "n_pass": [2009, 105, 102], "score": "0.9993", "loss": "0.0008", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }InputStream cgiOutputnull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:35.179688", "n_pass": [2010, 106, 103], "score": "0.8899", "loss": "1.3526", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }null; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:38.002789", "n_pass": [2011, 107, 104], "score": "0.9725", "loss": "0.1032", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }; isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:41.680633", "n_pass": [2163, 108, 105], "score": "1.0", "loss": "0.0", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }false; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:35:44.505105", "n_pass": [2164, 109, 106], "score": "0.9813", "loss": "0.0257", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:36:31.575703", "n_pass": [3012, 111, 107], "score": "0.9996", "loss": "0.0006", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:36:34.433026", "n_pass": [3013, 112, 108], "score": "0.9994", "loss": "0.0018", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:36:37.321427", "n_pass": [3016, 113, 109], "score": "0.9685", "loss": "0.8171", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:36:40.172849", "n_pass": [3018, 114, 110], "score": "0.9959", "loss": "0.0711", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:36:43.027229", "n_pass": [3022, 115, 111], "score": "0.9988", "loss": "0.0055", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:36:45.875695", "n_pass": [3024, 116, 112], "score": "0.9977", "loss": "0.0093", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write( bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:36:48.719630", "n_pass": [3025, 117, 113], "score": "0.9973", "loss": "0.004", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:36:51.632549", "n_pass": [3033, 118, 114], "score": "0.9984", "loss": "0.0044", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead .read(bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:36:54.554006", "n_pass": [3040, 119, 115], "score": "0.9997", "loss": "0.0004", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:36:57.537542", "n_pass": [3056, 120, 116], "score": "0.9999", "loss": "0.0003", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:00.543110", "n_pass": [3080, 121, 117], "score": "0.9827", "loss": "0.1858", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:03.375625", "n_pass": [3081, 122, 118], "score": "0.9996", "loss": "0.0018", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:06.219297", "n_pass": [3083, 123, 119], "score": "0.9953", "loss": "0.0062", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:09.146415", "n_pass": [3094, 124, 120], "score": "0.999", "loss": "0.0045", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:12.045182", "n_pass": [3103, 125, 121], "score": "0.9994", "loss": "0.0028", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:14.891613", "n_pass": [3105, 126, 122], "score": "0.9932", "loss": "0.0092", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:17.790472", "n_pass": [3114, 127, 123], "score": "0.9998", "loss": "0.0007", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutput= null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:20.627162", "n_pass": [3115, 128, 124], "score": "0.998", "loss": "0.0038", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:23.500386", "n_pass": [3121, 129, 125], "score": "0.9958", "loss": "0.0168", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:26.368600", "n_pass": [3122, 130, 126], "score": "0.9071", "loss": "0.4559", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:29.322930", "n_pass": [3136, 131, 127], "score": "0.97", "loss": "0.0392", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:32.148199", "n_pass": [3138, 132, 128], "score": "0.9488", "loss": "0.2173", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:35.041146", "n_pass": [3147, 133, 129], "score": "0.9889", "loss": "0.0254", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:37.879330", "n_pass": [3149, 134, 130], "score": "0.9766", "loss": "0.5372", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:40.750449", "n_pass": [3155, 135, 131], "score": "0.9949", "loss": "0.0096", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (proc= null) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:43.582192", "n_pass": [3156, 136, 132], "score": "0.999", "loss": "0.0031", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) { procproc = null; } } }"}
{"time": "2021-01-20 15:37:46.434343", "n_pass": [3159, 137, 133], "score": "0.9992", "loss": "0.0016", "code": "void run() throws IOException { if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:37:57.490572", "n_pass": [3175, 141, 134], "score": "0.9971", "loss": "0.0126", "code": "void run() throws IOException{ if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:00.328651", "n_pass": [3177, 142, 135], "score": "0.9949", "loss": "0.041", "code": "void run() throws IOException{if (!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:03.158954", "n_pass": [3179, 143, 136], "score": "0.997", "loss": "0.0041", "code": "void run() throws IOException{if(!isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:05.985276", "n_pass": [3181, 144, 137], "score": "0.9999", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()) { (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:08.836849", "n_pass": [3186, 145, 138], "score": "0.9992", "loss": "0.002", "code": "void run() throws IOException{if(isReady()){ (getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:11.667390", "n_pass": [3188, 146, 139], "score": "0.9742", "loss": "0.1814", "code": "void run() throws IOException{if(isReady()){(getClass().getName() + \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:14.547540", "n_pass": [3197, 147, 140], "score": "0.9027", "loss": "0.1366", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+ \":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:17.412221", "n_pass": [3199, 148, 141], "score": "0.9282", "loss": "0.362", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\":\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:20.251271", "n_pass": [3201, 149, 142], "score": "1.0", "loss": "0.0001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\"); } if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:23.095446", "n_pass": [3205, 150, 143], "score": "0.9996", "loss": "0.0011", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");} if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:25.936971", "n_pass": [3207, 151, 144], "score": "1.0", "loss": "0.0", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if (( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:28.769324", "n_pass": [3209, 152, 145], "score": "0.9943", "loss": "0.0381", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if(( 0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:31.633212", "n_pass": [3212, 153, 146], "score": "0.9994", "loss": "0.001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0) || ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:34.498535", "n_pass": [3215, 154, 147], "score": "0.9968", "loss": "0.0186", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|| ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:37.337183", "n_pass": [3216, 155, 148], "score": "0.9999", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)| ((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:40.174421", "n_pass": [3218, 156, 149], "score": "0.9994", "loss": "0.0015", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File.separator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:43.020315", "n_pass": [3222, 157, 150], "score": "0.9971", "loss": "0.033", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((Fileseparator + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:45.843826", "n_pass": [3223, 158, 151], "score": "0.9955", "loss": "0.0158", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File + \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:48.669332", "n_pass": [3224, 159, 152], "score": "0.9939", "loss": "0.0744", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+ \"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:51.526670", "n_pass": [3226, 160, 153], "score": "0.9994", "loss": "0.0013", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"..\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:54.360953", "n_pass": [3228, 161, 154], "score": "0.9979", "loss": "0.0112", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\".\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:38:57.186849", "n_pass": [3229, 162, 155], "score": "0.997", "loss": "0.0072", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\") >= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:00.027449", "n_pass": [3232, 163, 156], "score": "0.9974", "loss": "0.003", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>= 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:03.312058", "n_pass": [3234, 164, 157], "score": "0.9971", "loss": "0.0065", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")> 0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:06.139431", "n_pass": [3235, 165, 158], "score": "0.999", "loss": "0.0073", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0) || (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:08.973208", "n_pass": [3238, 166, 159], "score": "0.9938", "loss": "0.0066", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|| (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:11.812038", "n_pass": [3239, 167, 160], "score": "0.9974", "loss": "0.0039", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)| (command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:14.650023", "n_pass": [3241, 168, 161], "score": "0.9089", "loss": "0.1079", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command.indexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:17.491660", "n_pass": [3244, 169, 162], "score": "0.9884", "loss": "0.0135", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(commandindexOf(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:20.317901", "n_pass": [3245, 170, 163], "score": "0.9968", "loss": "0.004", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"..\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:23.150376", "n_pass": [3248, 171, 164], "score": "0.8824", "loss": "1.7906", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\".\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:25.979299", "n_pass": [3249, 172, 165], "score": "0.996", "loss": "0.0084", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\" +separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:28.797971", "n_pass": [3251, 173, 166], "score": "0.9997", "loss": "0.0011", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator) >= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:31.636874", "n_pass": [3255, 174, 167], "score": "0.9997", "loss": "0.001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>= 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:34.922943", "n_pass": [3257, 175, 168], "score": "0.9314", "loss": "1.1827", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)> 0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:37.757134", "n_pass": [3258, 176, 169], "score": "0.9782", "loss": "0.1527", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)) {  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:40.595656", "n_pass": [3262, 177, 170], "score": "0.9976", "loss": "0.0105", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){  IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:43.453830", "n_pass": [3264, 178, 171], "score": "0.9988", "loss": "0.0092", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){ IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:46.298632", "n_pass": [3265, 179, 172], "score": "0.9968", "loss": "0.0093", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){IOException(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:49.117421", "n_pass": [3266, 180, 173], "score": "0.9854", "loss": "0.1372", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(thisgetName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:51.940026", "n_pass": [3268, 181, 174], "score": "0.9906", "loss": "0.0376", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName() + \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:54.784977", "n_pass": [3272, 182, 175], "score": "0.9949", "loss": "0.0272", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+ \"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:39:57.598313", "n_pass": [3274, 183, 176], "score": "0.9934", "loss": "0.0088", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"Illegal [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:00.415477", "n_pass": [3276, 184, 177], "score": "0.9998", "loss": "0.0003", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\" [\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:03.276082", "n_pass": [3277, 185, 178], "score": "0.9918", "loss": "0.0949", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"[\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:06.111297", "n_pass": [3278, 186, 179], "score": "0.9632", "loss": "0.0387", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\" +  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:08.957597", "n_pass": [3280, 187, 180], "score": "0.9983", "loss": "0.0126", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+  \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:11.807237", "n_pass": [3282, 188, 181], "score": "0.8745", "loss": "1.65", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+ \"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:14.624053", "n_pass": [3283, 189, 182], "score": "0.9887", "loss": "0.0654", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"].\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:17.850821", "n_pass": [3285, 190, 183], "score": "1.0", "loss": "0.0001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\".\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:20.688828", "n_pass": [3286, 191, 184], "score": "0.9978", "loss": "0.0053", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\"); }if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:23.550054", "n_pass": [3290, 192, 185], "score": "0.9922", "loss": "0.0106", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:26.397724", "n_pass": [3293, 193, 186], "score": "0.9998", "loss": "0.0008", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:29.232061", "n_pass": [3297, 194, 187], "score": "0.9911", "loss": "0.0096", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){ cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:32.061495", "n_pass": [3299, 195, 188], "score": "0.9995", "loss": "0.0012", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:34.894084", "n_pass": [3301, 196, 189], "score": "0.9999", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgsadd(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:37.727219", "n_pass": [3302, 197, 190], "score": "0.9988", "loss": "0.0022", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:40.543291", "n_pass": [3304, 198, 191], "score": "0.9983", "loss": "0.0048", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs(); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:43.393021", "n_pass": [3307, 199, 192], "score": "0.9998", "loss": "0.0008", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:46.251116", "n_pass": [3309, 200, 193], "score": "0.9986", "loss": "0.0027", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:49.081903", "n_pass": [3311, 201, 194], "score": "0.9987", "loss": "0.0099", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgsadd.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:51.927239", "n_pass": [3312, 202, 195], "score": "0.9981", "loss": "0.0022", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:54.750388", "n_pass": [3313, 203, 196], "score": "0.9998", "loss": "0.0006", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgsaddAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:40:57.589092", "n_pass": [3314, 204, 197], "score": "0.9917", "loss": "0.0151", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:00.449393", "n_pass": [3316, 205, 198], "score": "0.9997", "loss": "0.001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:03.282139", "n_pass": [3319, 206, 199], "score": "0.9997", "loss": "0.001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:06.105088", "n_pass": [3321, 207, 200], "score": "0.9999", "loss": "0.0004", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{ rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:08.959119", "n_pass": [3323, 208, 201], "score": "0.9989", "loss": "0.0023", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:11.796961", "n_pass": [3327, 209, 202], "score": "0.8825", "loss": "0.1562", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgstoArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:14.631474", "n_pass": [3328, 210, 203], "score": "0.9998", "loss": "0.0007", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:17.453040", "n_pass": [3330, 211, 204], "score": "0.9998", "loss": "0.0009", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs( String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:20.289634", "n_pass": [3331, 212, 205], "score": "0.9964", "loss": "0.0111", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:23.124882", "n_pass": [3335, 213, 206], "score": "0.9971", "loss": "0.0173", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgssize()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:25.971258", "n_pass": [3336, 214, 207], "score": "0.9995", "loss": "0.0013", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:28.810574", "n_pass": [3342, 215, 208], "score": "0.978", "loss": "0.0595", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:31.641669", "n_pass": [3346, 216, 209], "score": "0.9999", "loss": "0.0003", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:34.486650", "n_pass": [3352, 217, 210], "score": "0.9997", "loss": "0.0011", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:37.297536", "n_pass": [3354, 218, 211], "score": "0.9999", "loss": "0.0003", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:40.123193", "n_pass": [3356, 219, 212], "score": "0.9988", "loss": "0.0017", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:42.947760", "n_pass": [3362, 220, 213], "score": "0.9991", "loss": "0.0016", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){ BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:45.794273", "n_pass": [3364, 221, 214], "score": "0.8583", "loss": "1.0742", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:48.608718", "n_pass": [3365, 222, 215], "score": "0.9989", "loss": "0.0035", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:51.424304", "n_pass": [3368, 223, 216], "score": "0.9999", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(procgetOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:54.240292", "n_pass": [3369, 224, 217], "score": "0.9765", "loss": "0.1203", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:57.070714", "n_pass": [3374, 225, 218], "score": "0.9992", "loss": "0.0011", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());} commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:41:59.895102", "n_pass": [3376, 226, 219], "score": "0.947", "loss": "0.0626", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:02.712407", "n_pass": [3378, 227, 220], "score": "0.999", "loss": "0.004", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr= new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:05.549867", "n_pass": [3380, 228, 221], "score": "0.9999", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:08.388703", "n_pass": [3381, 229, 222], "score": "0.9998", "loss": "0.0006", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr= BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:11.203776", "n_pass": [3382, 230, 223], "score": "0.9956", "loss": "0.008", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:14.021209", "n_pass": [3383, 231, 224], "score": "0.9999", "loss": "0.0004", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:16.847300", "n_pass": [3387, 232, 225], "score": "0.9998", "loss": "0.0003", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((procgetErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:19.680246", "n_pass": [3388, 233, 226], "score": "0.9986", "loss": "0.0031", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:22.546367", "n_pass": [3394, 234, 227], "score": "0.9871", "loss": "0.0216", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:25.369876", "n_pass": [3396, 235, 228], "score": "0.9978", "loss": "0.006", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread= new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:28.193253", "n_pass": [3398, 236, 229], "score": "0.9984", "loss": "0.0066", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:31.041270", "n_pass": [3404, 237, 230], "score": "0.9988", "loss": "0.0035", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:33.883715", "n_pass": [3406, 238, 231], "score": "0.955", "loss": "1.197", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){ run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:36.708673", "n_pass": [3407, 239, 232], "score": "1.0", "loss": "0.0001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:39.545617", "n_pass": [3411, 240, 233], "score": "0.9856", "loss": "0.123", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){ sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:42.380689", "n_pass": [3413, 241, 234], "score": "0.6669", "loss": "1.6057", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:45.193020", "n_pass": [3414, 242, 235], "score": "0.9998", "loss": "0.0006", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:48.001998", "n_pass": [3415, 243, 236], "score": "0.9966", "loss": "0.0136", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){ } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:50.813921", "n_pass": [3416, 244, 237], "score": "1.0", "loss": "0.0001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){} };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:53.625887", "n_pass": [3418, 245, 238], "score": "0.9995", "loss": "0.0011", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:56.442232", "n_pass": [3421, 246, 239], "score": "0.9297", "loss": "1.5612", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:42:59.252475", "n_pass": [3423, 247, 240], "score": "1.0", "loss": "0.0001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};( InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:02.063304", "n_pass": [3424, 248, 241], "score": "0.9998", "loss": "0.0008", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};(InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:04.889441", "n_pass": [3425, 249, 242], "score": "0.9908", "loss": "0.1026", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:07.721514", "n_pass": [3431, 250, 243], "score": "0.9952", "loss": "0.1012", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:10.536368", "n_pass": [3433, 251, 244], "score": "0.9999", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:13.361372", "n_pass": [3437, 252, 245], "score": "1.0", "loss": "0.0001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){ try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:16.206710", "n_pass": [3439, 253, 246], "score": "0.9999", "loss": "0.0005", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:19.020924", "n_pass": [3441, 254, 247], "score": "1.0", "loss": "0.0001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{ String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:21.830541", "n_pass": [3443, 255, 248], "score": "0.9997", "loss": "0.001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:24.636658", "n_pass": [3444, 256, 249], "score": "0.9998", "loss": "0.0004", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:27.479259", "n_pass": [3445, 257, 250], "score": "0.9993", "loss": "0.0063", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{ while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:30.287344", "n_pass": [3446, 258, 251], "score": "0.9933", "loss": "0.0401", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:33.101594", "n_pass": [3448, 259, 252], "score": "0.9999", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:35.938453", "n_pass": [3453, 260, 253], "score": "0.9992", "loss": "0.0216", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line.readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:38.747510", "n_pass": [3454, 261, 254], "score": "0.9995", "loss": "0.002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((linereadLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:41.546531", "n_pass": [3455, 262, 255], "score": "0.9965", "loss": "0.0111", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:44.364589", "n_pass": [3459, 263, 256], "score": "0.9996", "loss": "0.0024", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!= null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:47.629283", "n_pass": [3462, 264, 257], "score": "1.0", "loss": "0.0", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:50.444535", "n_pass": [3465, 265, 258], "score": "1.0", "loss": "0.0001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&& !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:53.242806", "n_pass": [3466, 266, 259], "score": "0.9996", "loss": "0.001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)& !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:56.049712", "n_pass": [3468, 267, 260], "score": "0.9999", "loss": "0.0004", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:43:58.863189", "n_pass": [3469, 268, 261], "score": "0.9951", "loss": "0.0252", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:01.723011", "n_pass": [3479, 269, 262], "score": "0.9998", "loss": "0.0007", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:04.526223", "n_pass": [3480, 270, 263], "score": "0.9976", "loss": "0.0058", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:07.368433", "n_pass": [3483, 271, 264], "score": "1.0", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:10.212566", "n_pass": [3485, 272, 265], "score": "0.9996", "loss": "0.0014", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:13.023075", "n_pass": [3486, 273, 266], "score": "0.5842", "loss": "3.3622", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:15.858818", "n_pass": [3490, 274, 267], "score": "0.9996", "loss": "0.0019", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:18.678227", "n_pass": [3496, 275, 268], "score": "0.9999", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:21.516794", "n_pass": [3505, 276, 269], "score": "0.9995", "loss": "0.0021", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:24.325698", "n_pass": [3508, 277, 270], "score": "1.0", "loss": "0.0", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:27.599239", "n_pass": [3513, 278, 271], "score": "0.9793", "loss": "0.0972", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:30.416241", "n_pass": [3517, 279, 272], "score": "0.9997", "loss": "0.0016", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:33.248985", "n_pass": [3525, 280, 273], "score": "0.8694", "loss": "2.3123", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:36.073271", "n_pass": [3531, 281, 274], "score": "1.0", "loss": "0.0", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:38.927284", "n_pass": [3543, 282, 275], "score": "0.9999", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:41.729382", "n_pass": [3545, 283, 276], "score": "0.9991", "loss": "0.0039", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:44.530623", "n_pass": [3549, 284, 277], "score": "1.0", "loss": "0.0001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:47.333157", "n_pass": [3551, 285, 278], "score": "1.0", "loss": "0.0001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:50.191116", "n_pass": [3558, 286, 279], "score": "0.9999", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput(); try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:52.996145", "n_pass": [3560, 287, 280], "score": "0.9957", "loss": "0.02", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) -1) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:55.842952", "n_pass": [3569, 288, 281], "score": "0.998", "loss": "0.015", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:44:58.772215", "n_pass": [3593, 289, 282], "score": "0.9999", "loss": "0.0004", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:02.029358", "n_pass": [3664, 290, 283], "score": "0.9999", "loss": "0.0001", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:04.818839", "n_pass": [3665, 291, 284], "score": "0.9999", "loss": "0.0002", "code": "void run() throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:08.748205", "n_pass": [3706, 292, 285], "score": "0.9998", "loss": "0.0002", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((File+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:11.645726", "n_pass": [3740, 293, 286], "score": "0.9997", "loss": "0.0008", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((+\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:14.432445", "n_pass": [3741, 294, 287], "score": "1.0", "loss": "0.0", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|(command(\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:17.259500", "n_pass": [3750, 295, 288], "score": "1.0", "loss": "0.0", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:20.637141", "n_pass": [3793, 296, 289], "score": "0.9997", "loss": "0.0008", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:23.541250", "n_pass": [3827, 297, 290], "score": "1.0", "loss": "0.0", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:27.223368", "n_pass": [3925, 298, 291], "score": "1.0", "loss": "0.0", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:30.080543", "n_pass": [3937, 299, 292], "score": "1.0", "loss": "0.0", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:32.935516", "n_pass": [3948, 300, 293], "score": "1.0", "loss": "0.0", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:35.718451", "n_pass": [3949, 301, 294], "score": "0.9998", "loss": "0.0007", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:45:40.577395", "n_pass": [4205, 302, 295], "score": "0.9968", "loss": "0.0064", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:46:41.369686", "n_pass": [4980, 303, 296], "score": "0.7349", "loss": "0.5122", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:46:44.173479", "n_pass": [4984, 304, 297], "score": "0.9742", "loss": "0.0538", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\" + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:46:46.975423", "n_pass": [4985, 305, 298], "score": "0.9907", "loss": "0.0177", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+ \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:46:50.330635", "n_pass": [4987, 306, 299], "score": "0.9991", "loss": "0.0014", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:46:53.148200", "n_pass": [4989, 307, 300], "score": "0.5302", "loss": "1.688", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:46:55.963970", "n_pass": [4993, 308, 301], "score": "0.9958", "loss": "0.0125", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");} if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:46:58.774348", "n_pass": [4995, 309, 302], "score": "0.9981", "loss": "0.0042", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:01.595058", "n_pass": [4997, 310, 303], "score": "0.9994", "loss": "0.0011", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if(startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:04.405927", "n_pass": [4999, 311, 304], "score": "0.9983", "loss": "0.0026", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:07.222183", "n_pass": [5002, 312, 305], "score": "0.9828", "loss": "0.0435", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:10.052688", "n_pass": [5006, 313, 306], "score": "0.9565", "loss": "0.0681", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:12.868569", "n_pass": [5008, 314, 307], "score": "0.9322", "loss": "0.1767", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:15.688335", "n_pass": [5013, 315, 308], "score": "0.9974", "loss": "0.0041", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);} if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:18.490668", "n_pass": [5015, 316, 309], "score": "0.9985", "loss": "0.0025", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:21.305572", "n_pass": [5017, 317, 310], "score": "0.9885", "loss": "0.0208", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if(indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:24.104341", "n_pass": [5019, 318, 311], "score": "0.9863", "loss": "0.0191", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:26.903415", "n_pass": [5022, 319, 312], "score": "0.9473", "loss": "0.1425", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:29.701543", "n_pass": [5025, 320, 313], "score": "0.9989", "loss": "0.0022", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:32.535359", "n_pass": [5029, 321, 314], "score": "0.9999", "loss": "0.0001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){ line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:35.360390", "n_pass": [5031, 322, 315], "score": "0.9973", "loss": "0.005", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:38.168330", "n_pass": [5036, 323, 316], "score": "0.8397", "loss": "0.3658", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:40.977483", "n_pass": [5039, 324, 317], "score": "0.9967", "loss": "0.0101", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:43.786534", "n_pass": [5044, 325, 318], "score": "0.9984", "loss": "0.0036", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:46.614549", "n_pass": [5050, 326, 319], "score": "0.9993", "loss": "0.0011", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+ 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:49.414730", "n_pass": [5052, 327, 320], "score": "0.988", "loss": "0.0181", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:52.230703", "n_pass": [5056, 328, 321], "score": "0.9992", "loss": "0.0015", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:55.039007", "n_pass": [5058, 329, 322], "score": "0.9922", "loss": "0.0154", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:47:57.883013", "n_pass": [5062, 330, 323], "score": "0.9896", "loss": "0.0486", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:00.697924", "n_pass": [5066, 331, 324], "score": "0.9968", "loss": "0.0058", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){ (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:03.500805", "n_pass": [5068, 332, 325], "score": "0.9999", "loss": "0.0002", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){(getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:06.309145", "n_pass": [5070, 333, 326], "score": "0.9995", "loss": "0.0008", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:09.133997", "n_pass": [5076, 334, 327], "score": "0.9989", "loss": "0.002", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:11.967566", "n_pass": [5081, 335, 328], "score": "0.9996", "loss": "0.0008", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:14.780925", "n_pass": [5086, 336, 329], "score": "0.9996", "loss": "0.0005", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+ \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:17.598007", "n_pass": [5088, 337, 330], "score": "0.998", "loss": "0.0047", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:20.407685", "n_pass": [5093, 338, 331], "score": "0.9964", "loss": "0.0089", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");} }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:23.228493", "n_pass": [5095, 339, 332], "score": "0.9997", "loss": "0.0008", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:26.048191", "n_pass": [5098, 340, 333], "score": "1.0", "loss": "0.0", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{ while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:28.843141", "n_pass": [5100, 341, 334], "score": "0.9994", "loss": "0.0015", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:31.667293", "n_pass": [5102, 342, 335], "score": "0.9999", "loss": "0.0001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:34.491006", "n_pass": [5105, 343, 336], "score": "0.9986", "loss": "0.0024", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:37.308613", "n_pass": [5110, 344, 337], "score": "1.0", "loss": "0.0", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:40.112065", "n_pass": [5112, 345, 338], "score": "0.9646", "loss": "0.0682", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){ if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:42.911526", "n_pass": [5114, 346, 339], "score": "0.9998", "loss": "0.0003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:45.715865", "n_pass": [5116, 347, 340], "score": "0.9976", "loss": "0.0054", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:48.526482", "n_pass": [5118, 348, 341], "score": "0.9874", "loss": "0.0215", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:51.331056", "n_pass": [5121, 349, 342], "score": "0.9983", "loss": "0.003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:54.178638", "n_pass": [5128, 350, 343], "score": "0.9824", "loss": "0.0253", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");} write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:56.978021", "n_pass": [5130, 351, 344], "score": "0.9994", "loss": "0.001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write(); } } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:48:59.800211", "n_pass": [5135, 352, 345], "score": "0.9733", "loss": "0.0646", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();} } finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:02.601569", "n_pass": [5137, 353, 346], "score": "0.999", "loss": "0.0018", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}} finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:05.395693", "n_pass": [5139, 354, 347], "score": "0.9997", "loss": "0.0005", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally { if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:08.187090", "n_pass": [5141, 355, 348], "score": "0.9986", "loss": "0.0023", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{ if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:10.995602", "n_pass": [5143, 356, 349], "score": "0.9998", "loss": "0.0003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if (-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:13.801079", "n_pass": [5145, 357, 350], "score": "0.9837", "loss": "0.0521", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(-1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:16.600128", "n_pass": [5147, 358, 351], "score": "0.9998", "loss": "0.0003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1) { while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:19.405927", "n_pass": [5150, 359, 352], "score": "0.9998", "loss": "0.0003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){ while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:22.208128", "n_pass": [5152, 360, 353], "score": "0.9998", "loss": "0.0003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while (((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:25.020790", "n_pass": [5154, 361, 354], "score": "0.999", "loss": "0.0017", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))) { } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:27.850606", "n_pass": [5162, 362, 355], "score": "1.0", "loss": "0.0", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){ } } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:30.648479", "n_pass": [5164, 363, 356], "score": "0.9998", "loss": "0.0002", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){} } }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:33.446738", "n_pass": [5166, 364, 357], "score": "0.9999", "loss": "0.0002", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}} }} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:36.264757", "n_pass": [5168, 365, 358], "score": "0.9979", "loss": "0.003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:39.071602", "n_pass": [5171, 366, 359], "score": "0.9997", "loss": "0.0004", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:41.864612", "n_pass": [5173, 367, 360], "score": "0.9999", "loss": "0.0001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:44.686580", "n_pass": [5179, 368, 361], "score": "0.9788", "loss": "0.0511", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){ try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:47.487695", "n_pass": [5181, 369, 362], "score": "0.9849", "loss": "0.0279", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:50.296794", "n_pass": [5183, 370, 363], "score": "0.9986", "loss": "0.0018", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:53.104945", "n_pass": [5185, 371, 364], "score": "0.9956", "loss": "0.0082", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:55.921342", "n_pass": [5190, 372, 365], "score": "0.9846", "loss": "0.0224", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);} catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:49:58.737539", "n_pass": [5192, 373, 366], "score": "0.9744", "loss": "0.0415", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:01.539911", "n_pass": [5194, 374, 367], "score": "0.9985", "loss": "0.0022", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:04.349819", "n_pass": [5200, 375, 368], "score": "0.9998", "loss": "0.0002", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:07.148055", "n_pass": [5202, 376, 369], "score": "0.9985", "loss": "0.002", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){} } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:09.971879", "n_pass": [5204, 377, 370], "score": "0.9032", "loss": "0.165", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}} } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:12.789042", "n_pass": [5206, 378, 371], "score": "0.9997", "loss": "0.0005", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}} } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:15.603952", "n_pass": [5208, 379, 372], "score": "0.3201", "loss": "1.5698", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}} catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:18.398356", "n_pass": [5210, 380, 373], "score": "0.9995", "loss": "0.0008", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:21.219944", "n_pass": [5212, 381, 374], "score": "0.9971", "loss": "0.007", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:24.035043", "n_pass": [5218, 382, 375], "score": "0.9999", "loss": "0.0001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){ log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:26.879312", "n_pass": [5220, 383, 376], "score": "0.9994", "loss": "0.001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:29.673362", "n_pass": [5221, 384, 377], "score": "0.9996", "loss": "0.0006", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:32.467450", "n_pass": [5224, 385, 378], "score": "0.9952", "loss": "0.0069", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:35.277991", "n_pass": [5226, 386, 379], "score": "0.9994", "loss": "0.001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+ e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:38.074163", "n_pass": [5228, 387, 380], "score": "0.9996", "loss": "0.0005", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:40.884889", "n_pass": [5232, 388, 381], "score": "0.999", "loss": "0.0014", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e); } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:43.671211", "n_pass": [5233, 389, 382], "score": "1.0", "loss": "0.0", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);} { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:46.458809", "n_pass": [5235, 390, 383], "score": "0.9995", "loss": "0.0007", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{ if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:49.249646", "n_pass": [5237, 391, 384], "score": "0.9999", "loss": "0.0001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:52.072513", "n_pass": [5239, 392, 385], "score": "0.9997", "loss": "0.0005", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:54.871462", "n_pass": [5242, 393, 386], "score": "0.9837", "loss": "0.0233", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader!= null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:50:57.651626", "n_pass": [5243, 394, 387], "score": "0.9917", "loss": "0.0117", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader= null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:00.439711", "n_pass": [5245, 395, 388], "score": "0.9999", "loss": "0.0002", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:03.263107", "n_pass": [5248, 396, 389], "score": "0.9516", "loss": "0.0877", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){ try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:06.078032", "n_pass": [5250, 397, 390], "score": "0.9993", "loss": "0.0012", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:08.888181", "n_pass": [5252, 398, 391], "score": "0.9987", "loss": "0.0018", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{ close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:11.678181", "n_pass": [5254, 399, 392], "score": "0.9211", "loss": "0.1309", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:14.509821", "n_pass": [5259, 400, 393], "score": "0.9687", "loss": "0.0549", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();} catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:17.304130", "n_pass": [5261, 401, 394], "score": "0.9891", "loss": "0.021", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:20.101665", "n_pass": [5263, 402, 395], "score": "0.9965", "loss": "0.0048", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:22.918607", "n_pass": [5269, 403, 396], "score": "0.995", "loss": "0.0073", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:25.732233", "n_pass": [5274, 404, 397], "score": "0.941", "loss": "0.199", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:28.520588", "n_pass": [5276, 405, 398], "score": "0.99", "loss": "0.0124", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:31.318642", "n_pass": [5280, 406, 399], "score": "0.9999", "loss": "0.0001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);} } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:34.116439", "n_pass": [5282, 407, 400], "score": "0.9933", "loss": "0.0122", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}} if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:36.909701", "n_pass": [5284, 408, 401], "score": "0.9941", "loss": "0.0087", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:39.729270", "n_pass": [5286, 409, 402], "score": "0.9854", "loss": "0.0182", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:42.548415", "n_pass": [5288, 410, 403], "score": "0.9765", "loss": "0.0323", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:45.362169", "n_pass": [5291, 411, 404], "score": "0.9996", "loss": "0.0006", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){ try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:48.171328", "n_pass": [5293, 412, 405], "score": "0.9995", "loss": "0.0007", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:50.985385", "n_pass": [5295, 413, 406], "score": "0.9981", "loss": "0.0028", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:53.795597", "n_pass": [5298, 414, 407], "score": "0.9992", "loss": "0.0016", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:56.601659", "n_pass": [5300, 415, 408], "score": "0.8606", "loss": "0.3513", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:51:59.418985", "n_pass": [5306, 416, 409], "score": "0.9998", "loss": "0.0003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:02.220110", "n_pass": [5308, 417, 410], "score": "0.9963", "loss": "0.0061", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:05.042805", "n_pass": [5309, 418, 411], "score": "0.9998", "loss": "0.0003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){} catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:07.846374", "n_pass": [5311, 419, 412], "score": "0.9997", "loss": "0.0004", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:10.640607", "n_pass": [5313, 420, 413], "score": "0.9998", "loss": "0.0003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:13.468272", "n_pass": [5319, 421, 414], "score": "0.9995", "loss": "0.0007", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:16.286255", "n_pass": [5326, 422, 415], "score": "0.9993", "loss": "0.001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");} } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:19.114410", "n_pass": [5328, 423, 416], "score": "0.9954", "loss": "0.0064", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}} if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:21.907854", "n_pass": [5330, 424, 417], "score": "0.9994", "loss": "0.0008", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:24.706909", "n_pass": [5332, 425, 418], "score": "0.996", "loss": "0.0065", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:27.508075", "n_pass": [5334, 426, 419], "score": "0.9999", "loss": "0.0001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:30.309896", "n_pass": [5337, 427, 420], "score": "0.9994", "loss": "0.001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:33.124927", "n_pass": [5344, 428, 421], "score": "0.9971", "loss": "0.0043", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");} if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:35.933365", "n_pass": [5346, 429, 422], "score": "0.9985", "loss": "0.0027", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:38.729666", "n_pass": [5348, 430, 423], "score": "0.9984", "loss": "0.002", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(procnull) {proc = null; } } }"}
{"time": "2021-01-20 15:52:41.531058", "n_pass": [5350, 431, 424], "score": "0.9997", "loss": "0.0006", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null) {proc = null; } } }"}
{"time": "2021-01-20 15:52:44.334563", "n_pass": [5353, 432, 425], "score": "0.9971", "loss": "0.0041", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc = null; } } }"}
{"time": "2021-01-20 15:52:47.133128", "n_pass": [5356, 433, 426], "score": "0.9985", "loss": "0.003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc= null; } } }"}
{"time": "2021-01-20 15:52:49.933186", "n_pass": [5358, 434, 427], "score": "0.9998", "loss": "0.0003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc=null; } } }"}
{"time": "2021-01-20 15:52:52.734546", "n_pass": [5361, 435, 428], "score": "0.999", "loss": "0.0014", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc=null;} } }"}
{"time": "2021-01-20 15:52:58.337416", "n_pass": [5365, 437, 429], "score": "0.9991", "loss": "0.0012", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)) { if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc=null;} }}"}
{"time": "2021-01-20 15:53:03.016415", "n_pass": [5543, 438, 430], "score": "0.979", "loss": "0.0355", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){ if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc=null;} }}"}
{"time": "2021-01-20 15:53:05.827405", "n_pass": [5545, 439, 431], "score": "0.9973", "loss": "0.0039", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if (debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc=null;} }}"}
{"time": "2021-01-20 15:53:08.627223", "n_pass": [5547, 440, 432], "score": "0.9499", "loss": "0.0642", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(debug2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc=null;} }}"}
{"time": "2021-01-20 15:53:11.437673", "n_pass": [5549, 441, 433], "score": "1.0", "loss": "0.0001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader=null){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc=null;} }}"}
{"time": "2021-01-20 15:53:15.030027", "n_pass": [5725, 442, 434], "score": "0.9999", "loss": "0.0001", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReadernull){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc=null;} }}"}
{"time": "2021-01-20 15:53:17.848438", "n_pass": [5726, 443, 435], "score": "0.9997", "loss": "0.0004", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc=null;} }}"}
{"time": "2021-01-20 15:53:21.041207", "n_pass": [5799, 444, 436], "score": "0.9998", "loss": "0.0003", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){procnull;} }}"}
{"time": "2021-01-20 15:53:23.857546", "n_pass": [5800, 445, 437], "score": "0.9966", "loss": "0.0053", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc;} }}"}
{"time": "2021-01-20 15:53:26.657452", "n_pass": [5803, 446, 438], "score": "0.6423", "loss": "0.9926", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc;}}}"}
{"time": "2021-01-20 15:53:32.566473", "n_pass": [6231, 447, 439], "score": "0.9582", "loss": "0.0854", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){;}}}"}
{"time": "2021-01-20 15:53:35.360355", "n_pass": [6232, 448, 440], "score": "0.9504", "loss": "0.1", "code": "void run()throws IOException{if(isReady()){(getClass().getName()+\"\");}if((0)|((\"\")>0)|((\"\"+separator)>0)){(getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(4){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){}}}"}

Minimal simplified code:
void run()throws IOException{if(isReady()){(getClass().getName()+"");}if((0)|(("")>0)|((""+separator)>0)){(getName()+""+"");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);("");if("".equals){(proc());}((proc()));errReaderThread=new Thread(){run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&("".equals)){if(2){(""+"");}if(("")){(getSCFromHttpStatusLine);}if(("")>0){line(0,("")).substring(indexOf()+1);if(("")){((value));(value);}(""+"");}}try{while(((bBuf))){if(4){("");}write();}}finally{if(1){while(((bBuf))){}}}}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(""+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(""+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){("");}}if(4){("");}if(null){}}}

