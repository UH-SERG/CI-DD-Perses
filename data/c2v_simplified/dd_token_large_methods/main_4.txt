
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/yahoo__FEL/src/main/java/com/yahoo/semsearch/fastlinking/hash/QuasiSuccinctEntityHash_main.java
method_name = main
method_body = public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), "Creates a MPHF from a file with the candidates info", new Parameter[] { new FlaggedOption("input", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', "input", "Input " + "file"), new FlaggedOption("entity2id", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'e', "entities", "TAB-separated entity names and corresponding ids"), new FlaggedOption("wikiThreshold", JSAP.INTEGER_PARSER, "0", JSAP.NOT_REQUIRED, 'w', "wikiThreshold", "Minimum number of anchors to store a candidate"), new FlaggedOption("queryThreshold", JSAP.INTEGER_PARSER, "0", JSAP.NOT_REQUIRED, 'q', "queryThreshold", "Minimum number of clicks to store a candidate"), new FlaggedOption("output", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', "output", "Compressed version") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString("input"), jsapResult.getInt("queryThreshold"), jsapResult.getInt("wikiThreshold")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString("entity2id"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split("\t"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC.close(); final BufferedReader lines = new BufferedReader(new FileReader(jsapResult.getString("entity2id"))); ObjectArrayList<String> entityNames = new ObjectArrayList<>(maxIndex); LOGGER.info("Storing entity names"); while ((line = lines.readLine()) != null) { String[] parts = line.split("\t"); try { final int index = Integer.parseInt(parts[1]); if (index >= entityNames.size()) entityNames.size(index + 1); final String oldValue = entityNames.set(index, parts[0]); if (oldValue != null) LOGGER.warn("Duplicate index " + index + " for names \"" + parts[0] + "\" and \"" + oldValue + "\""); } catch (NumberFormatException e) { LOGGER.error("Wrong line (skipping) --> " + line); } } LOGGER.info("done"); lines.close(); for (int i = 0; i < entityNames.size(); i++) if (entityNames.get(i) == null) { entityNames.set(i, ""); } HashMap<Integer, DataOutputStream> valuesArray = new HashMap<Integer, DataOutputStream>(); HashMap<Integer, LongArrayList> pointersArray = new HashMap<Integer, LongArrayList>(); HashMap<Integer, File> tempFiles = new HashMap<Integer, File>(); LongArrayList cutPoints = new LongArrayList(); File tempFile = File.createTempFile("values", "tempfile"); tempFile.deleteOnExit(); int batchNumber = 0; tempFiles.put(batchNumber, tempFile); DataOutputStream values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); long valuesSize = 0; final IntBigArrayBigList entityValues = new IntBigArrayBigList(); entityValues.size(entityNames.size() * PER_ENTITY_FEATURES); ProgressLogger pl = new ProgressLogger(LOGGER); pl.itemsName = "aliases"; int numberOfCandidates = 0; for (StringAndCandidate sc : stringAndCandidates) { pl.lightUpdate(); if (numberOfCandidates++ > ALIASESPERBATCH - 1) { numberOfCandidates = 1; batchNumber++; tempFile = File.createTempFile("values", "tempfile"); tempFile.deleteOnExit(); values.close(); values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints = new LongArrayList(); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); tempFiles.put(batchNumber, tempFile); valuesSize = 0; } CandidatesInfo ci = sc.candidatesInfo; values.writeInt((int) ci.QAF); values.writeInt((int) ci.QAT); values.writeInt((int) ci.QAC); values.writeInt((int) ci.LAF); values.writeInt((int) ci.LAT); valuesSize += PER_CANDIDATE_FEATURES; for (Entity e : ci.entities) { values.writeInt(e.id); values.writeInt((int) e.LAET); values.writeInt((int) e.QAEF); valuesSize += PER_ENTITY_CANDIDATE_FEATURES; entityValues.set(e.id * PER_ENTITY_FEATURES, (int) e.QEF); entityValues.set(e.id * PER_ENTITY_FEATURES + 1, (int) e.LET); entityValues.set(e.id * PER_ENTITY_FEATURES + 2, e.type); } cutPoints.add(valuesSize); } values.close(); pl.done(); Iterable<CharSequence> surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); } LOGGER.info("#Batches= " + tempFiles.size()); QuasiSuccinctEntityHash quasiSuccinctEntityHash = new QuasiSuccinctEntityHash(surfaceForm2Position, cutPointsArray, valuesA, new EliasFanoLongBigList(entityValues), new FrontCodedStringList(entityNames, 8, true)); LOGGER.info("Creating stats"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString("output")); LOGGER.info("... done"); assert checkMap(jsapResult, stringAndCandidates); }
predict, score, loss = main, 0.9637412428855896, 0.3783702552318573

Trace of simplified code(s):
{"time": "2021-01-20 21:43:53.793725", "n_pass": [1, 1, 1], "score": "0.9975", "loss": "0.0201", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'e', \"entities\", \"TAB-separated entity names and corresponding ids\"), new FlaggedOption(\"wikiThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"output\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', \"output\", \"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC.close(); final BufferedReader lines = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); ObjectArrayList<String> entityNames = new ObjectArrayList<>(maxIndex); LOGGER.info(\"Storing entity names\"); while ((line = lines.readLine()) != null) { String[] parts = line.split(\"\\t\"); try { final int index = Integer.parseInt(parts[1]); if (index >= entityNames.size()) entityNames.size(index + 1); final String oldValue = entityNames.set(index, parts[0]); if (oldValue != null) LOGGER.warn(\"Duplicate index \" + index + \" for names \\\"\" + parts[0] + \"\\\" and \\\"\" + oldValue + \"\\\"\"); } catch (NumberFormatException e) { LOGGER.error(\"Wrong line (skipping) --> \" + line); } } LOGGER.info(\"done\"); lines.close(); for (int i = 0; i < entityNames.size(); i++) if (entityNames.get(i) == null) { entityNames.set(i, \"\"); } HashMap<Integer, DataOutputStream> valuesArray = new HashMap<Integer, DataOutputStream>(); HashMap<Integer, LongArrayList> pointersArray = new HashMap<Integer, LongArrayList>(); HashMap<Integer, File> tempFiles = new HashMap<Integer, File>(); LongArrayList cutPoints = new LongArrayList(); File tempFile = File.createTempFile(\"values\", \"tempfile\"); tempFile.deleteOnExit(); int batchNumber = 0; tempFiles.put(batchNumber, tempFile); DataOutputStream values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); long valuesSize = 0; final IntBigArrayBigList entityValues = new IntBigArrayBigList(); entityValues.size(entityNames.size() * PER_ENTITY_FEATURES); ProgressLogger pl = new ProgressLogger(LOGGER); pl.itemsName = \"aliases\"; int numberOfCandidates = 0; for (StringAndCandidate sc : stringAndCandidates) { pl.lightUpdate(); if (numberOfCandidates++ > ALIASESPERBATCH - 1) { numberOfCandidates = 1; batchNumber++; tempFile = File.createTempFile(\"values\", \"tempfile\"); tempFile.deleteOnExit(); values.close(); values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints = new LongArrayList(); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); tempFiles.put(batchNumber, tempFile); valuesSize = 0; } CandidatesInfo ci = sc.candidatesInfo; values.writeInt((int) ci.QAF); values.writeInt((int) ci.QAT); values.writeInt((int) ci.QAC); values.writeInt((int) ci.LAF); values.writeInt((int) ci.LAT); valuesSize += PER_CANDIDATE_FEATURES; for (Entity e : ci.entities) { values.writeInt(e.id); values.writeInt((int) e.LAET); values.writeInt((int) e.QAEF); valuesSize += PER_ENTITY_CANDIDATE_FEATURES; entityValues.set(e.id * PER_ENTITY_FEATURES, (int) e.QEF); entityValues.set(e.id * PER_ENTITY_FEATURES + 1, (int) e.LET); entityValues.set(e.id * PER_ENTITY_FEATURES + 2, e.type); } cutPoints.add(valuesSize); } values.close(); pl.done(); Iterable<CharSequence> surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); } LOGGER.info(\"#Batches= \" + tempFiles.size()); QuasiSuccinctEntityHash quasiSuccinctEntityHash = new QuasiSuccinctEntityHash(surfaceForm2Position, cutPointsArray, valuesA, new EliasFanoLongBigList(entityValues), new FrontCodedStringList(entityNames, 8, true)); LOGGER.info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:43:56.932957", "n_pass": [9, 2, 2], "score": "0.9669", "loss": "0.6058", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'e', \"entities\", \"TAB-separated entity names and corresponding ids\"), new FlaggedOption(\"wikiThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"output\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', \"output\", \"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesCput(batchNumber, values); pointersArray.put(batchNumber, cutPoints); long valuesSize = 0; final IntBigArrayBigList entityValues = new IntBigArrayBigList(); entityValues.size(entityNames.size() * PER_ENTITY_FEATURES); ProgressLogger pl = new ProgressLogger(LOGGER); pl.itemsName = \"aliases\"; int numberOfCandidates = 0; for (StringAndCandidate sc : stringAndCandidates) { pl.lightUpdate(); if (numberOfCandidates++ > ALIASESPERBATCH - 1) { numberOfCandidates = 1; batchNumber++; tempFile = File.createTempFile(\"values\", \"tempfile\"); tempFile.deleteOnExit(); values.close(); values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints = new LongArrayList(); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); tempFiles.put(batchNumber, tempFile); valuesSize = 0; } CandidatesInfo ci = sc.candidatesInfo; values.writeInt((int) ci.QAF); values.writeInt((int) ci.QAT); values.writeInt((int) ci.QAC); values.writeInt((int) ci.LAF); values.writeInt((int) ci.LAT); valuesSize += PER_CANDIDATE_FEATURES; for (Entity e : ci.entities) { values.writeInt(e.id); values.writeInt((int) e.LAET); values.writeInt((int) e.QAEF); valuesSize += PER_ENTITY_CANDIDATE_FEATURES; entityValues.set(e.id * PER_ENTITY_FEATURES, (int) e.QEF); entityValues.set(e.id * PER_ENTITY_FEATURES + 1, (int) e.LET); entityValues.set(e.id * PER_ENTITY_FEATURES + 2, e.type); } cutPoints.add(valuesSize); } values.close(); pl.done(); Iterable<CharSequence> surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); } LOGGER.info(\"#Batches= \" + tempFiles.size()); QuasiSuccinctEntityHash quasiSuccinctEntityHash = new QuasiSuccinctEntityHash(surfaceForm2Position, cutPointsArray, valuesA, new EliasFanoLongBigList(entityValues), new FrontCodedStringList(entityNames, 8, true)); LOGGER.info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:43:59.892889", "n_pass": [10, 3, 3], "score": "0.9999", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'e', \"entities\", \"TAB-separated entity names and corresponding ids\"), new FlaggedOption(\"wikiThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"output\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', \"output\", \"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); } LOGGER.info(\"#Batches= \" + tempFiles.size()); QuasiSuccinctEntityHash quasiSuccinctEntityHash = new QuasiSuccinctEntityHash(surfaceForm2Position, cutPointsArray, valuesA, new EliasFanoLongBigList(entityValues), new FrontCodedStringList(entityNames, 8, true)); LOGGER.info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:02.985824", "n_pass": [57, 4, 4], "score": "0.994", "loss": "0.043", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'e', \"entities\", \"TAB-separated entity names and corresponding ids\"), new FlaggedOption(\"wikiThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"output\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', \"output\", \"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:05.953922", "n_pass": [60, 5, 5], "score": "0.9999", "loss": "0.0003", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"output\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', \"output\", \"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:08.998568", "n_pass": [106, 6, 6], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:11.995225", "n_pass": [117, 7, 7], "score": "0.9985", "loss": "0.003", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:15.022430", "n_pass": [130, 8, 8], "score": "0.9999", "loss": "0.0006", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:18.068916", "n_pass": [211, 9, 9], "score": "0.9727", "loss": "0.1862", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:20.986678", "n_pass": [213, 10, 10], "score": "0.9981", "loss": "0.0043", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsapreturn; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:23.896252", "n_pass": [214, 11, 11], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:26.812157", "n_pass": [221, 12, 12], "score": "0.9978", "loss": "0.0362", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:29.759816", "n_pass": [229, 13, 13], "score": "0.9999", "loss": "0.0004", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:32.724331", "n_pass": [243, 14, 14], "score": "0.9596", "loss": "0.8382", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:35.640593", "n_pass": [255, 15, 15], "score": "0.3772", "loss": "4.4864", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP. JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:39.142040", "n_pass": [385, 16, 16], "score": "0.9979", "loss": "0.0306", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:42.013085", "n_pass": [386, 17, 17], "score": "0.9396", "loss": "0.6673", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:44.892981", "n_pass": [388, 18, 18], "score": "0.9988", "loss": "0.0115", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:47.771187", "n_pass": [392, 19, 19], "score": "0.3313", "loss": "5.2302", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:50.644010", "n_pass": [395, 20, 20], "score": "0.9999", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:53.526855", "n_pass": [402, 21, 21], "score": "0.8933", "loss": "0.4591", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:56.400415", "n_pass": [406, 22, 22], "score": "0.9992", "loss": "0.0089", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:44:59.337876", "n_pass": [424, 23, 23], "score": "0.9988", "loss": "0.0104", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:02.198600", "n_pass": [425, 24, 24], "score": "0.999", "loss": "0.011", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:05.100007", "n_pass": [435, 25, 25], "score": "0.9491", "loss": "0.4804", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:07.962673", "n_pass": [438, 26, 26], "score": "0.9832", "loss": "0.1026", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { final File xx = tempFileslI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:10.856143", "n_pass": [444, 27, 27], "score": "0.9968", "loss": "0.0348", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { final File xx = tempFileslI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:13.728300", "n_pass": [447, 28, 28], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { final File xx = tempFileslI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:16.660123", "n_pass": [467, 29, 29], "score": "0.9994", "loss": "0.0018", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { final File xx = tempFileslI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:19.710643", "n_pass": [513, 30, 30], "score": "0.9999", "loss": "0.0003", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:22.886154", "n_pass": [730, 31, 31], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:25.762556", "n_pass": [733, 32, 32], "score": "0.9699", "loss": "0.1338", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() { iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:28.620239", "n_pass": [734, 33, 33], "score": "0.9999", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:31.474654", "n_pass": [737, 34, 34], "score": "0.9996", "loss": "0.0011", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:34.340957", "n_pass": [740, 35, 35], "score": "0.4236", "loss": "2.5524", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } };LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:37.217122", "n_pass": [741, 36, 36], "score": "0.9998", "loss": "0.0013", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:40.092578", "n_pass": [744, 37, 37], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:42.958982", "n_pass": [746, 38, 38], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:45.845608", "n_pass": [751, 39, 39], "score": "0.998", "loss": "0.0289", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:49.198133", "n_pass": [756, 40, 40], "score": "0.996", "loss": "0.005", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:52.051354", "n_pass": [759, 41, 41], "score": "0.9999", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:54.944609", "n_pass": [767, 42, 42], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:45:57.812087", "n_pass": [775, 43, 43], "score": "1.0", "loss": "0.0001", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:00.658294", "n_pass": [778, 44, 44], "score": "0.9933", "loss": "0.0179", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:03.486132", "n_pass": [779, 45, 45], "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:06.333655", "n_pass": [785, 46, 46], "score": "0.9997", "loss": "0.0006", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:09.177343", "n_pass": [787, 47, 47], "score": "0.9999", "loss": "0.0011", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:12.018627", "n_pass": [792, 48, 48], "score": "1.0", "loss": "0.0001", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:14.864980", "n_pass": [796, 49, 49], "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:17.717199", "n_pass": [806, 50, 50], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:20.588990", "n_pass": [817, 51, 51], "score": "0.9995", "loss": "0.0018", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:23.442657", "n_pass": [822, 52, 52], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:26.266062", "n_pass": [823, 53, 53], "score": "0.9999", "loss": "0.0005", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:29.103732", "n_pass": [829, 54, 54], "score": "0.9999", "loss": "0.0007", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:31.948975", "n_pass": [836, 55, 55], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:34.846166", "n_pass": [853, 56, 56], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:37.673926", "n_pass": [857, 57, 57], "score": "1.0", "loss": "0.0001", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:40.487712", "n_pass": [858, 58, 58], "score": "0.9972", "loss": "0.0097", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:43.322112", "n_pass": [862, 59, 59], "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:46.169679", "n_pass": [863, 60, 60], "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:54.718521", "n_pass": [1200, 61, 61], "score": "0.9987", "loss": "0.0099", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:46:57.550296", "n_pass": [1201, 62, 62], "score": "0.9993", "loss": "0.003", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:00.470061", "n_pass": [1220, 63, 63], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:03.296293", "n_pass": [1221, 64, 64], "score": "0.9999", "loss": "0.0003", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:06.117149", "n_pass": [1223, 65, 65], "score": "1.0", "loss": "0.0001", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:08.930336", "n_pass": [1230, 66, 66], "score": "1.0", "loss": "0.0001", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:11.763553", "n_pass": [1231, 67, 67], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI;  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:14.587522", "n_pass": [1233, 68, 68], "score": "0.9996", "loss": "0.0023", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:17.397783", "n_pass": [1235, 69, 69], "score": "1.0", "loss": "0.0001", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:20.290083", "n_pass": [1251, 70, 70], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:23.122403", "n_pass": [1254, 71, 71], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:25.948306", "n_pass": [1256, 72, 72], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString()); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:28.775646", "n_pass": [1258, 73, 73], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:31.594873", "n_pass": [1260, 74, 74], "score": "0.9999", "loss": "0.0004", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:34.920168", "n_pass": [1275, 75, 75], "score": "0.9998", "loss": "0.0003", "code": "void main(String[] args) throws Exception { jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:37.727737", "n_pass": [1278, 76, 76], "score": "0.9991", "loss": "0.0049", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:40.559464", "n_pass": [1281, 77, 77], "score": "0.9997", "loss": "0.0005", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:43.374066", "n_pass": [1284, 78, 78], "score": "0.9999", "loss": "0.0008", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:46.222990", "n_pass": [1290, 79, 79], "score": "0.9995", "loss": "0.0011", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:49.058107", "n_pass": [1296, 80, 80], "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:51.879981", "n_pass": [1299, 81, 81], "score": "0.9971", "loss": "0.0153", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:54.744757", "n_pass": [1304, 82, 82], "score": "0.9998", "loss": "0.0006", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\", NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:47:57.578735", "n_pass": [1305, 83, 83], "score": "0.9984", "loss": "0.0043", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\", REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:00.394019", "n_pass": [1306, 84, 84], "score": "0.8856", "loss": "0.3453", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:03.218552", "n_pass": [1311, 85, 85], "score": "0.9991", "loss": "0.0039", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:06.041782", "n_pass": [1315, 86, 86], "score": "0.9999", "loss": "0.0003", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:08.872668", "n_pass": [1320, 87, 87], "score": "0.9962", "loss": "0.0252", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:11.693767", "n_pass": [1325, 88, 88], "score": "0.9999", "loss": "0.0001", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:14.519227", "n_pass": [1333, 89, 89], "score": "0.9955", "loss": "0.0188", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:17.325987", "n_pass": [1335, 90, 90], "score": "1.0", "loss": "0.0", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:20.159215", "n_pass": [1337, 91, 91], "score": "0.9996", "loss": "0.0013", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:22.998867", "n_pass": [1340, 92, 92], "score": "0.8908", "loss": "0.3089", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:25.828115", "n_pass": [1344, 93, 93], "score": "0.9963", "loss": "0.0074", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\")));  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:28.641350", "n_pass": [1345, 94, 94], "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); ; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:31.461925", "n_pass": [1346, 95, 95], "score": "0.9988", "loss": "0.0037", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:34.296756", "n_pass": [1349, 96, 96], "score": "0.9999", "loss": "0.0001", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:37.580147", "n_pass": [1357, 97, 97], "score": "0.9982", "loss": "0.0025", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:40.413995", "n_pass": [1369, 98, 98], "score": "0.9473", "loss": "0.2317", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:43.268922", "n_pass": [1378, 99, 99], "score": "0.9987", "loss": "0.0065", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:46.082051", "n_pass": [1384, 100, 100], "score": "0.999", "loss": "0.0024", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:48.922821", "n_pass": [1395, 101, 101], "score": "0.9679", "loss": "0.3971", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:51.729712", "n_pass": [1400, 102, 102], "score": "0.9991", "loss": "0.0021", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:54.544737", "n_pass": [1401, 103, 103], "score": "0.9968", "loss": "0.0108", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:48:57.370088", "n_pass": [1412, 104, 104], "score": "0.9983", "loss": "0.0057", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:49:00.160343", "n_pass": [1414, 105, 105], "score": "0.9864", "loss": "0.0571", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:49:02.982749", "n_pass": [1417, 106, 106], "score": "0.9866", "loss": "0.1539", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:49:05.798717", "n_pass": [1419, 107, 107], "score": "0.9792", "loss": "0.1261", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:49:08.698014", "n_pass": [1448, 108, 108], "score": "0.9377", "loss": "0.6288", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:49:11.487491", "n_pass": [1449, 109, 109], "score": "0.9502", "loss": "0.5031", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:49:14.902306", "n_pass": [1521, 110, 110], "score": "0.985", "loss": "0.0812", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:49:18.230765", "n_pass": [1544, 111, 111], "score": "0.9664", "loss": "0.3143", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:49:21.164587", "n_pass": [1581, 112, 112], "score": "0.6688", "loss": "0.6261", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:49:23.980367", "n_pass": [1582, 113, 113], "score": "0.9909", "loss": "0.0326", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:08.266902", "n_pass": [2099, 114, 114], "score": "0.9992", "loss": "0.0034", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){ } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:11.035466", "n_pass": [2101, 115, 115], "score": "0.9944", "loss": "0.0159", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){} }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:13.807140", "n_pass": [2103, 116, 116], "score": "0.9796", "loss": "0.0285", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}}; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:16.582254", "n_pass": [2106, 117, 117], "score": "0.9984", "loss": "0.009", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};} }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:19.362296", "n_pass": [2108, 118, 118], "score": "0.9974", "loss": "0.0237", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}}; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:22.138069", "n_pass": [2111, 119, 119], "score": "0.9982", "loss": "0.0038", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:24.903644", "n_pass": [2113, 120, 120], "score": "0.9981", "loss": "0.0052", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap= ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:27.701973", "n_pass": [2115, 121, 121], "score": "0.9935", "loss": "0.0379", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:30.478593", "n_pass": [2116, 122, 122], "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:33.256115", "n_pass": [2120, 123, 123], "score": "0.9998", "loss": "0.0004", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator) EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:36.017346", "n_pass": [2121, 124, 124], "score": "0.9995", "loss": "0.0011", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:38.806308", "n_pass": [2122, 125, 125], "score": "0.9961", "loss": "0.0447", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:41.600640", "n_pass": [2129, 126, 126], "score": "0.9999", "loss": "0.0003", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:44.385316", "n_pass": [2137, 127, 127], "score": "0.9805", "loss": "0.192", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:47.141922", "n_pass": [2139, 128, 128], "score": "0.9948", "loss": "0.0473", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:49.923486", "n_pass": [2141, 129, 129], "score": "0.9941", "loss": "0.0528", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for( i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:52.708341", "n_pass": [2142, 130, 130], "score": "0.9991", "loss": "0.0037", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:55.483614", "n_pass": [2144, 131, 131], "score": "0.9994", "loss": "0.0015", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i= 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:50:58.274940", "n_pass": [2146, 132, 132], "score": "0.9978", "loss": "0.0105", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:01.049613", "n_pass": [2149, 133, 133], "score": "0.9995", "loss": "0.0017", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:03.841214", "n_pass": [2151, 134, 134], "score": "0.999", "loss": "0.0034", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:06.614100", "n_pass": [2156, 135, 135], "score": "0.9995", "loss": "0.0022", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){ new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:09.398748", "n_pass": [2158, 136, 136], "score": "0.9998", "loss": "0.0004", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:12.195007", "n_pass": [2164, 137, 137], "score": "0.9984", "loss": "0.0038", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:14.951240", "n_pass": [2167, 138, 138], "score": "0.9997", "loss": "0.0006", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:17.707807", "n_pass": [2168, 139, 139], "score": "0.998", "loss": "0.0062", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:20.486199", "n_pass": [2175, 140, 140], "score": "0.999", "loss": "0.0028", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());} };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:23.245572", "n_pass": [2177, 141, 141], "score": "0.999", "loss": "0.0029", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:26.025599", "n_pass": [2180, 142, 142], "score": "0.9976", "loss": "0.0069", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:28.784571", "n_pass": [2182, 143, 143], "score": "0.9999", "loss": "0.0001", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:31.568757", "n_pass": [2188, 144, 144], "score": "0.9997", "loss": "0.0006", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:34.329127", "n_pass": [2193, 145, 145], "score": "0.9998", "loss": "0.0007", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]= new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:37.090190", "n_pass": [2195, 146, 146], "score": "0.9701", "loss": "0.2996", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:39.845420", "n_pass": [2196, 147, 147], "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]= EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:42.605303", "n_pass": [2197, 148, 148], "score": "0.9731", "loss": "0.0986", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:45.365930", "n_pass": [2201, 149, 149], "score": "0.9993", "loss": "0.0011", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lIiterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:48.104185", "n_pass": [2202, 150, 150], "score": "0.9994", "loss": "0.0014", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:50.872931", "n_pass": [2204, 151, 151], "score": "0.9907", "loss": "0.1136", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:53.638674", "n_pass": [2208, 152, 152], "score": "0.9978", "loss": "0.0088", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:56.394139", "n_pass": [2210, 153, 153], "score": "0.9988", "loss": "0.0054", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:51:59.166186", "n_pass": [2213, 154, 154], "score": "0.9859", "loss": "0.1271", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\" stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:52:01.903513", "n_pass": [2214, 155, 155], "score": "0.9998", "loss": "0.0003", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:52:04.656758", "n_pass": [2217, 156, 156], "score": "0.9992", "loss": "0.002", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:52:07.432170", "n_pass": [2225, 157, 157], "score": "0.9837", "loss": "0.0626", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:52:10.199548", "n_pass": [2228, 158, 158], "score": "0.9838", "loss": "0.0767", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 21:52:12.952932", "n_pass": [2230, 159, 159], "score": "0.9919", "loss": "0.0216", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap( stringAndCandidates); }"}
{"time": "2021-01-20 21:52:15.688355", "n_pass": [2231, 160, 160], "score": "0.9966", "loss": "0.0078", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:19.336547", "n_pass": [2241, 161, 161], "score": "0.9991", "loss": "0.0012", "code": "void main(String[]args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:22.111545", "n_pass": [2244, 162, 162], "score": "0.9997", "loss": "0.0004", "code": "void main(String[]args)throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:24.860929", "n_pass": [2248, 163, 163], "score": "0.96", "loss": "0.3244", "code": "void main(String[]args)throws Exception{ jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:27.611812", "n_pass": [2250, 164, 164], "score": "0.9767", "loss": "0.1015", "code": "void main(String[]args)throws Exception{jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:30.385220", "n_pass": [2252, 165, 165], "score": "0.9912", "loss": "0.037", "code": "void main(String[]args)throws Exception{jsap= SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:33.132285", "n_pass": [2254, 166, 166], "score": "0.9953", "loss": "0.018", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:35.895879", "n_pass": [2259, 167, 167], "score": "0.9846", "loss": "0.0922", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:38.645026", "n_pass": [2261, 168, 168], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:41.390049", "n_pass": [2264, 169, 169], "score": "0.998", "loss": "0.0076", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:44.144698", "n_pass": [2270, 170, 170], "score": "0.9995", "loss": "0.0007", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{ FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:46.909321", "n_pass": [2272, 171, 171], "score": "0.8887", "loss": "0.1568", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:49.673389", "n_pass": [2276, 172, 172], "score": "0.9998", "loss": "0.0003", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:52.430550", "n_pass": [2279, 173, 173], "score": "0.9974", "loss": "0.0121", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\", \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:55.171112", "n_pass": [2280, 174, 174], "score": "0.9999", "loss": "0.0002", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:52:57.914865", "n_pass": [2282, 175, 175], "score": "0.9991", "loss": "0.0014", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:00.682721", "n_pass": [2286, 176, 176], "score": "0.9943", "loss": "0.0237", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:03.448773", "n_pass": [2290, 177, 177], "score": "0.8724", "loss": "0.8129", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:06.200541", "n_pass": [2293, 178, 178], "score": "0.9986", "loss": "0.0021", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\", 'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:08.962100", "n_pass": [2294, 179, 179], "score": "0.8899", "loss": "0.1955", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:12.091097", "n_pass": [2299, 180, 180], "score": "0.965", "loss": "0.3687", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:14.856497", "n_pass": [2301, 181, 181], "score": "0.9991", "loss": "0.001", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:17.625057", "n_pass": [2304, 182, 182], "score": "0.9724", "loss": "0.2048", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")}); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:20.375731", "n_pass": [2308, 183, 183], "score": "0.9957", "loss": "0.0084", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:23.126165", "n_pass": [2310, 184, 184], "score": "0.9989", "loss": "0.0018", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult= jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:25.897856", "n_pass": [2312, 185, 185], "score": "0.9986", "loss": "0.0024", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:28.668518", "n_pass": [2315, 186, 186], "score": "0.9919", "loss": "0.0266", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:31.433667", "n_pass": [2318, 187, 187], "score": "0.9997", "loss": "0.0005", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:34.195664", "n_pass": [2324, 188, 188], "score": "0.9969", "loss": "0.0051", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:36.961721", "n_pass": [2330, 189, 189], "score": "0.8541", "loss": "1.1604", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:39.724301", "n_pass": [2335, 190, 190], "score": "0.9122", "loss": "0.3212", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:42.461921", "n_pass": [2336, 191, 191], "score": "0.9984", "loss": "0.002", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:45.231884", "n_pass": [2338, 192, 192], "score": "0.9978", "loss": "0.0024", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));((getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:47.992627", "n_pass": [2340, 193, 193], "score": "0.9903", "loss": "0.0212", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:50.756842", "n_pass": [2343, 194, 194], "score": "0.9955", "loss": "0.0072", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:53.508341", "n_pass": [2349, 195, 195], "score": "0.9963", "loss": "0.0055", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:56.243316", "n_pass": [2351, 196, 196], "score": "0.9958", "loss": "0.0097", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:53:58.992674", "n_pass": [2358, 197, 197], "score": "0.9979", "loss": "0.0023", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!= null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:02.184063", "n_pass": [2361, 198, 198], "score": "0.9979", "loss": "0.0026", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:04.930996", "n_pass": [2364, 199, 199], "score": "0.9712", "loss": "0.1565", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:07.685762", "n_pass": [2373, 200, 200], "score": "0.9988", "loss": "0.0018", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:10.430598", "n_pass": [2375, 201, 201], "score": "0.9844", "loss": "0.0659", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:13.176920", "n_pass": [2378, 202, 202], "score": "0.9997", "loss": "0.0003", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x> maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:15.933147", "n_pass": [2380, 203, 203], "score": "0.9878", "loss": "0.0235", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:18.690544", "n_pass": [2383, 204, 204], "score": "0.9992", "loss": "0.0011", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex)x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:21.450236", "n_pass": [2384, 205, 205], "score": "0.9916", "loss": "0.029", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex); } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:24.199167", "n_pass": [2386, 206, 206], "score": "0.9974", "loss": "0.0055", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);} surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:26.943082", "n_pass": [2388, 207, 207], "score": "0.9992", "loss": "0.001", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:29.715897", "n_pass": [2390, 208, 208], "score": "0.9984", "loss": "0.002", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms= new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:32.455352", "n_pass": [2392, 209, 209], "score": "0.9855", "loss": "0.046", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:35.225025", "n_pass": [2397, 210, 210], "score": "0.9364", "loss": "0.1197", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:37.978287", "n_pass": [2401, 211, 211], "score": "0.9787", "loss": "0.1258", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){ <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:40.723716", "n_pass": [2403, 212, 212], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:43.481271", "n_pass": [2407, 213, 213], "score": "0.9964", "loss": "0.006", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:46.230735", "n_pass": [2411, 214, 214], "score": "0.9976", "loss": "0.0026", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){ new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:48.995805", "n_pass": [2413, 215, 215], "score": "0.9885", "loss": "0.0378", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:51.748036", "n_pass": [2418, 216, 216], "score": "0.8632", "loss": "1.6014", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:54.535692", "n_pass": [2422, 217, 217], "score": "0.9996", "loss": "0.0007", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){ Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:54:57.321546", "n_pass": [2424, 218, 218], "score": "0.9994", "loss": "0.0008", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:00.136050", "n_pass": [2429, 219, 219], "score": "0.9972", "loss": "0.0066", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:02.910314", "n_pass": [2431, 220, 220], "score": "0.9976", "loss": "0.0039", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i= iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:05.651254", "n_pass": [2433, 221, 221], "score": "0.9896", "loss": "0.0201", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:08.472479", "n_pass": [2449, 222, 222], "score": "0.9988", "loss": "0.0012", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:11.243986", "n_pass": [2451, 223, 223], "score": "0.9925", "loss": "0.013", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:14.076020", "n_pass": [2469, 224, 224], "score": "0.9992", "loss": "0.0008", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:16.818730", "n_pass": [2470, 225, 225], "score": "0.9982", "loss": "0.0019", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:19.892861", "n_pass": [2508, 226, 226], "score": "0.9998", "loss": "0.0003", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lItrue);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:22.643475", "n_pass": [2509, 227, 227], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:26.355076", "n_pass": [2543, 228, 228], "score": "0.9755", "loss": "0.1353", "code": "void main(String[]args)throws Exception{jsapSimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:29.116564", "n_pass": [2544, 229, 229], "score": "0.9956", "loss": "0.0056", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:32.298764", "n_pass": [2582, 230, 230], "score": "0.991", "loss": "0.0502", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResultjsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:35.055347", "n_pass": [2583, 231, 231], "score": "0.9998", "loss": "0.0003", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:38.313194", "n_pass": [2629, 232, 232], "score": "1.0", "loss": "0.0", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:41.087290", "n_pass": [2632, 233, 233], "score": "0.9995", "loss": "0.001", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(xmaxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:43.870427", "n_pass": [2633, 234, 234], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:46.694302", "n_pass": [2667, 235, 235], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>iiterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:49.437341", "n_pass": [2668, 236, 236], "score": "1.0", "loss": "0.0", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:52.227047", "n_pass": [2700, 237, 237], "score": "0.9995", "loss": "0.0006", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:55:55.047240", "n_pass": [2735, 238, 238], "score": "1.0", "loss": "0.0", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:56:03.488551", "n_pass": [2984, 239, 239], "score": "0.9996", "loss": "0.0008", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"stats\");(quasiSuccinctEntityHash);(getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:56:06.248245", "n_pass": [2990, 240, 240], "score": "1.0", "loss": "0.0", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"stats\");(quasiSuccinctEntityHash);(getString());(\"\"); checkMap(); }"}
{"time": "2021-01-20 21:56:08.991288", "n_pass": [2996, 241, 241], "score": "0.9998", "loss": "0.0003", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"stats\");(quasiSuccinctEntityHash);(getString());(\"\");checkMap(); }"}
{"time": "2021-01-20 21:56:11.725642", "n_pass": [3001, 242, 242], "score": "1.0", "loss": "0.0", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"stats\");(quasiSuccinctEntityHash);(getString());(\"\");checkMap();}"}
{"time": "2021-01-20 21:56:16.565904", "n_pass": [3206, 243, 243], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"\");(quasiSuccinctEntityHash);(getString());(\"\");checkMap();}"}

Minimal simplified code:
void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,"",new Parameter[]{FlaggedOption("",""),FlaggedOption("",'q',"")});jsapResult((""),(""),(""));((("")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}("");(quasiSuccinctEntityHash);(getString());("");checkMap();}

