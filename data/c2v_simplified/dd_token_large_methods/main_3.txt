
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/yahoo__FEL/src/main/java/it/cnr/isti/hpc/Word2VecCompress_main.java
method_name = main
method_body = public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), "Creates a compressed representation of quantized word2vec vectors", new Parameter[] { new UnflaggedOption("input", JSAP.STRING_PARSER, true, "Input file"), new UnflaggedOption("output", JSAP.STRING_PARSER, false, "Compressed version"), new Switch("check", JSAP.NO_SHORTFLAG, "check", "Check correctness of output") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_filename = jsapResult.getString("input"); String output_filename = jsapResult.getString("output", null); int numWords, vectorSize; float quantizationFactor; List<String> indexToWord; int[] entries; long[] columnAbsSum; ProgressLogger pl = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split("\t"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start("Reading the dictionary"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); indexToWord.add(lines.readLine().trim()); } pl.done(); entries = new int[numWords * vectorSize]; columnAbsSum = new long[vectorSize]; pl.expectedUpdates = numWords; pl.start("Reading the vectors"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(" "); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start("Compressing the vectors"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info("Overall vector bit streams: {} bytes, {} bps", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean("check")) { pl.expectedUpdates = numWords; pl.start("Checking the output"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error("Row {}, Column {}: Expected {}, got {}", i, col, expected, got); System.exit(1); } } } pl.done(); } }
predict, score, loss = main, 0.9999698400497437, 0.0005189026123844087

Trace of simplified code(s):
{"time": "2021-01-20 21:17:57.467548", "n_pass": [1, 1, 1], "score": "0.965", "loss": "0.1105", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_filename = jsapResult.getString(\"input\"); String output_filename = jsapResult.getString(\"output\", null); int numWords, vectorSize; float quantizationFactor; List<String> indexToWord; int[] entries; long[] columnAbsSum; ProgressLogger pl = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); indexToWord.add(lines.readLine().trim()); } pl.done(); entries = new int[numWords * vectorSize]; columnAbsSum = new long[vectorSize]; pl.expectedUpdates = numWords; pl.start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:03.872807", "n_pass": [96, 3, 2], "score": "0.9991", "loss": "0.0097", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_filename = indexToWord; int[] entries; long[] columnAbsSum; ProgressLogger pl = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); indexToWord.add(lines.readLine().trim()); } pl.done(); entries = new int[numWords * vectorSize]; columnAbsSum = new long[vectorSize]; pl.expectedUpdates = numWords; pl.start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:07.205135", "n_pass": [189, 4, 3], "score": "0.9994", "loss": "0.0019", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_ = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); indexToWord.add(lines.readLine().trim()); } pl.done(); entries = new int[numWords * vectorSize]; columnAbsSum = new long[vectorSize]; pl.expectedUpdates = numWords; pl.start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:10.392959", "n_pass": [197, 5, 4], "score": "0.9996", "loss": "0.0007", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_ = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize]; columnAbsSum = new long[vectorSize]; pl.expectedUpdates = numWords; pl.start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:13.455711", "n_pass": [199, 6, 5], "score": "0.9999", "loss": "0.0009", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_ = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:16.531076", "n_pass": [204, 7, 6], "score": "0.9939", "loss": "0.0217", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_ = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:19.779416", "n_pass": [230, 8, 7], "score": "0.9992", "loss": "0.0021", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_ = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:23.040297", "n_pass": [250, 9, 8], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:26.734551", "n_pass": [423, 10, 9], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:29.760216", "n_pass": [425, 11, 10], "score": "0.9963", "loss": "0.0139", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseIntFloat.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:32.769548", "n_pass": [426, 12, 11], "score": "0.9999", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:35.797408", "n_pass": [433, 13, 12], "score": "0.9992", "loss": "0.0049", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:39.598120", "n_pass": [459, 14, 13], "score": "0.9999", "loss": "0.0016", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:42.626231", "n_pass": [466, 15, 14], "score": "0.9977", "loss": "0.0098", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:45.857413", "n_pass": [489, 16, 15], "score": "0.9999", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:48.934389", "n_pass": [500, 17, 16], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:52.120432", "n_pass": [520, 18, 17], "score": "0.9997", "loss": "0.0043", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:55.261782", "n_pass": [527, 19, 18], "score": "0.9999", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:18:59.884052", "n_pass": [837, 20, 19], "score": "0.9844", "loss": "0.0253", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:02.838714", "n_pass": [838, 21, 20], "score": "0.9972", "loss": "0.0091", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:05.881808", "n_pass": [846, 22, 21], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:08.856838", "n_pass": [849, 23, 22], "score": "0.9995", "loss": "0.003", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:11.824960", "n_pass": [850, 24, 23], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:14.932084", "n_pass": [871, 25, 24], "score": "0.9998", "loss": "0.0006", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:17.943149", "n_pass": [875, 26, 25], "score": "0.9998", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:21.237873", "n_pass": [892, 27, 26], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:27.727481", "n_pass": [905, 29, 27], "score": "0.981", "loss": "0.2727", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:30.743136", "n_pass": [909, 30, 28], "score": "0.9971", "loss": "0.0052", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:33.720238", "n_pass": [911, 31, 29], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:36.811429", "n_pass": [920, 32, 30], "score": "0.9988", "loss": "0.0105", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get; permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:42.798132", "n_pass": [924, 34, 31], "score": "0.9999", "loss": "0.0003", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:45.860163", "n_pass": [934, 35, 32], "score": "0.9986", "loss": "0.0018", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:48.904761", "n_pass": [942, 36, 33], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:52.420354", "n_pass": [952, 37, 34], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:55.442202", "n_pass": [959, 38, 35], "score": "0.9992", "loss": "0.0052", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } }  obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:19:58.434138", "n_pass": [960, 39, 36], "score": "0.9999", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:01.434969", "n_pass": [963, 40, 37], "score": "0.9997", "loss": "0.0003", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:04.460535", "n_pass": [967, 41, 38], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:07.912897", "n_pass": [971, 42, 39], "score": "0.9307", "loss": "0.1751", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:10.922033", "n_pass": [972, 43, 40], "score": "0.9963", "loss": "0.0055", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:13.933706", "n_pass": [977, 44, 41], "score": "0.9977", "loss": "0.0109", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:19.861984", "n_pass": [980, 46, 42], "score": "0.8142", "loss": "0.7002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:22.878944", "n_pass": [985, 47, 43], "score": "0.9995", "loss": "0.0027", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:25.958538", "n_pass": [994, 48, 44], "score": "0.9999", "loss": "0.0004", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:28.921493", "n_pass": [995, 49, 45], "score": "0.9993", "loss": "0.0087", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:32.058868", "n_pass": [1010, 50, 46], "score": "0.9989", "loss": "0.0096", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {},  {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:35.101188", "n_pass": [1011, 51, 47], "score": "0.9973", "loss": "0.0659", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:38.085561", "n_pass": [1013, 52, 48], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:41.904861", "n_pass": [1034, 53, 49], "score": "1.0", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAPfalse, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:45.216654", "n_pass": [1090, 54, 50], "score": "1.0", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAPfalse, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:48.828688", "n_pass": [1115, 55, 51], "score": "0.9921", "loss": "0.1822", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAPfalse, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa.length() %0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:52.578886", "n_pass": [1148, 56, 52], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAPfalse, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords, vectorSize, quantizationFactor,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:20:56.085347", "n_pass": [1160, 57, 53], "score": "0.9999", "loss": "0.0011", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAPfalse, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:00.125752", "n_pass": [1207, 58, 54], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:06.748206", "n_pass": [1712, 59, 55], "score": "1.0", "loss": "0.0007", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:09.750747", "n_pass": [1718, 60, 56], "score": "0.9996", "loss": "0.0025", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \" of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:12.720655", "n_pass": [1719, 61, 57], "score": "0.9999", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:15.696356", "n_pass": [1723, 62, 58], "score": "0.9979", "loss": "0.006", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:18.670740", "n_pass": [1728, 63, 59], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:21.669170", "n_pass": [1731, 64, 60], "score": "0.9956", "loss": "0.0383", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:24.671951", "n_pass": [1734, 65, 61], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:27.692354", "n_pass": [1737, 66, 62], "score": "0.9993", "loss": "0.0044", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:33.695650", "n_pass": [1741, 68, 63], "score": "0.9998", "loss": "0.0008", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:36.928915", "n_pass": [1744, 69, 64], "score": "1.0", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:39.947692", "n_pass": [1753, 70, 65], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; i < numWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:42.937521", "n_pass": [1755, 71, 66], "score": "0.9999", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ++i) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:45.945224", "n_pass": [1757, 72, 67], "score": "0.9972", "loss": "0.008", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:51.900632", "n_pass": [1764, 74, 68], "score": "0.9883", "loss": "0.1116", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:54.893858", "n_pass": [1769, 75, 69], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:21:57.856605", "n_pass": [1771, 76, 70], "score": "0.9595", "loss": "0.5226", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:00.834354", "n_pass": [1773, 77, 71], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate(); String[] lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:03.843246", "n_pass": [1778, 78, 72], "score": "0.9997", "loss": "0.0006", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries = lines(\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:06.832888", "n_pass": [1780, 79, 73], "score": "0.9982", "loss": "0.0028", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:09.878061", "n_pass": [1792, 80, 74], "score": "0.9799", "loss": "0.2454", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:12.868361", "n_pass": [1799, 81, 75], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:15.854007", "n_pass": [1805, 82, 76], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:18.876116", "n_pass": [1815, 83, 77], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:21.819480", "n_pass": [1819, 84, 78], "score": "0.9998", "loss": "0.0007", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:24.819290", "n_pass": [1833, 85, 79], "score": "0.9999", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:27.787511", "n_pass": [1836, 86, 80], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2- f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:30.727156", "n_pass": [1837, 87, 81], "score": "0.9997", "loss": "0.0027", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:33.745638", "n_pass": [1845, 88, 82], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:36.717613", "n_pass": [1847, 89, 83], "score": "0.8774", "loss": "0.6242", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:39.669307", "n_pass": [1849, 90, 84], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:42.696186", "n_pass": [1856, 91, 85], "score": "0.9902", "loss": "0.1098", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:45.706365", "n_pass": [1869, 92, 86], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:48.697980", "n_pass": [1872, 93, 87], "score": "0.9759", "loss": "0.0415", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:51.724076", "n_pass": [1882, 94, 88], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints = new LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:54.659481", "n_pass": [1884, 95, 89], "score": "0.9999", "loss": "0.0004", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList(); pl; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:22:57.596043", "n_pass": [1886, 96, 90], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList(); pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:00.546487", "n_pass": [1887, 97, 91], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:03.493611", "n_pass": [1890, 98, 92], "score": "0.9914", "loss": "0.0301", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i < numWords; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:06.504092", "n_pass": [1897, 99, 93], "score": "0.9998", "loss": "0.0003", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) {  endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:09.460947", "n_pass": [1901, 100, 94], "score": "1.0", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:12.432864", "n_pass": [1905, 101, 95], "score": "0.997", "loss": "0.0252", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:15.873798", "n_pass": [1909, 102, 96], "score": "0.9999", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col = 0; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:18.829689", "n_pass": [1913, 103, 97], "score": "0.9972", "loss": "0.051", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; col < vectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:21.772143", "n_pass": [1915, 104, 98], "score": "0.9999", "loss": "0.0004", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ++col) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:24.737170", "n_pass": [1917, 105, 99], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:27.693476", "n_pass": [1920, 106, 100], "score": "0.9795", "loss": "0.0512", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:30.655607", "n_pass": [1922, 107, 101], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } oa.trimbps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:33.702513", "n_pass": [1938, 108, 102], "score": "1.0", "loss": "0.0003", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps = 8.0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:37.091120", "n_pass": [1940, 109, 103], "score": "0.9959", "loss": "0.0259", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =0 * oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:40.032578", "n_pass": [1941, 110, 104], "score": "0.9996", "loss": "0.0027", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps = oa.array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:42.951538", "n_pass": [1942, 111, 105], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"Overall vector{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:45.895673", "n_pass": [1944, 112, 106], "score": "0.997", "loss": "0.0148", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"{} bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:48.832899", "n_pass": [1945, 113, 107], "score": "0.9999", "loss": "0.0002", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\", oa.array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:51.772074", "n_pass": [1947, 114, 108], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length, bps); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:54.702755", "n_pass": [1949, 115, 109], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); System.outword2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:23:57.618988", "n_pass": [1951, 116, 110], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress(numWords,  dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:00.564007", "n_pass": [1954, 117, 111], "score": "0.9992", "loss": "0.0015", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:03.503330", "n_pass": [1955, 118, 112], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (output_filename != null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:06.453170", "n_pass": [1959, 119, 113], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (output!= null) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:09.392665", "n_pass": [1960, 120, 114], "score": "0.9994", "loss": "0.0021", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:12.368565", "n_pass": [1967, 121, 115], "score": "0.9999", "loss": "0.0009", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:15.292599", "n_pass": [1972, 122, 116], "score": "0.9997", "loss": "0.0009", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:18.242543", "n_pass": [1979, 123, 117], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:21.185388", "n_pass": [1983, 124, 118], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:24.117296", "n_pass": [1984, 125, 119], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:27.087995", "n_pass": [1991, 126, 120], "score": "0.9999", "loss": "0.0004", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:30.053383", "n_pass": [1997, 127, 121], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:33.025455", "n_pass": [2003, 128, 122], "score": "1.0", "loss": "0.0", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:35.943229", "n_pass": [2007, 129, 123], "score": "1.0", "loss": "0.0001", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:38.908435", "n_pass": [2017, 130, 124], "score": "1.0", "loss": "0.0", "code": " void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:42.601609", "n_pass": [2022, 131, 125], "score": "0.9982", "loss": "0.0034", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:45.536075", "n_pass": [2028, 132, 126], "score": "0.9988", "loss": "0.0025", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:48.448626", "n_pass": [2032, 133, 127], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:51.387198", "n_pass": [2039, 134, 128], "score": "0.9973", "loss": "0.0719", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:54.297178", "n_pass": [2041, 135, 129], "score": "0.9999", "loss": "0.0004", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:24:57.232325", "n_pass": [2055, 136, 130], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:00.170703", "n_pass": [2065, 137, 131], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]); vectorSize.start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:03.117124", "n_pass": [2068, 138, 132], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:06.116855", "n_pass": [2085, 139, 133], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (int i0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:09.068495", "n_pass": [2090, 140, 134], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate();  lineEntries (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:12.025576", "n_pass": [2097, 141, 135], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:15.148267", "n_pass": [2128, 142, 136], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPosi; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:18.308270", "n_pass": [2173, 143, 137], "score": "1.0", "loss": "0.0006", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { i; } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:21.210024", "n_pass": [2174, 144, 138], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalendpoints =LongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:24.204951", "n_pass": [2185, 145, 139], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0; i ; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:27.188743", "n_pass": [2194, 146, 140], "score": "1.0", "loss": "0.0002", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits());rowStart = permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:30.146994", "n_pass": [2201, 147, 141], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } bps =array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:33.200943", "n_pass": [2227, 148, 142], "score": "0.3623", "loss": "2.3712", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:36.203272", "n_pass": [2246, 149, 143], "score": "0.9988", "loss": "0.0294", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) { numWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:39.086126", "n_pass": [2247, 150, 144], "score": "0.9999", "loss": "0.0014", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:41.994224", "n_pass": [2252, 151, 145], "score": "0.9999", "loss": "0.0003", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:25:45.761177", "n_pass": [2324, 152, 146], "score": "0.9998", "loss": "0.0013", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:26:28.289840", "n_pass": [3057, 153, 147], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"),  Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:26:31.194044", "n_pass": [3058, 154, 148], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:26:34.095284", "n_pass": [3062, 155, 149], "score": "0.9999", "loss": "0.0013", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:26:36.995443", "n_pass": [3065, 156, 150], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:26:39.931575", "n_pass": [3067, 157, 151], "score": "0.9995", "loss": "0.0012", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:26:42.874671", "n_pass": [3070, 158, 152], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")}); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:26:45.805194", "n_pass": [3074, 159, 153], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:26:48.714924", "n_pass": [3076, 160, 154], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:26:51.643368", "n_pass": [3078, 161, 155], "score": "0.983", "loss": "0.1232", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try( BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:26:54.536428", "n_pass": [3079, 162, 156], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:26:57.473296", "n_pass": [3083, 163, 157], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:00.409391", "n_pass": [3085, 164, 158], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:03.317896", "n_pass": [3087, 165, 159], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=( FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:06.239182", "n_pass": [3088, 166, 160], "score": "0.998", "loss": "0.0233", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:09.175305", "n_pass": [3094, 167, 161], "score": "1.0", "loss": "0.0002", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){ (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:12.109839", "n_pass": [3096, 168, 162], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:15.044291", "n_pass": [3107, 169, 163], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\" \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:17.972488", "n_pass": [3108, 170, 164], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:20.915327", "n_pass": [3112, 171, 165], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:23.851381", "n_pass": [3114, 172, 166], "score": "1.0", "loss": "0.0006", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord= new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:26.754742", "n_pass": [3116, 173, 167], "score": "0.9987", "loss": "0.0032", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:29.706595", "n_pass": [3125, 174, 168], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for (int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:32.611458", "n_pass": [3127, 175, 169], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(int i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:35.500885", "n_pass": [3129, 176, 170], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for( i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:38.431266", "n_pass": [3130, 177, 171], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(i ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:41.346353", "n_pass": [3131, 178, 172], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for( ; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:44.247526", "n_pass": [3132, 179, 173], "score": "0.9995", "loss": "0.0018", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(; inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:47.180425", "n_pass": [3134, 180, 174], "score": "1.0", "loss": "0.0002", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;inumWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:50.074199", "n_pass": [3135, 181, 175], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;numWords; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:52.966052", "n_pass": [3136, 182, 176], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;; ) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:55.890627", "n_pass": [3138, 183, 177], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;) {} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:27:58.809103", "n_pass": [3140, 184, 178], "score": "0.8938", "loss": "0.8079", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){} pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:01.770238", "n_pass": [3143, 185, 179], "score": "0.9997", "loss": "0.0052", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl.done(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:04.693039", "n_pass": [3145, 186, 180], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pldone(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:07.655776", "n_pass": [3146, 187, 181], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl(); start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:10.571661", "n_pass": [3150, 188, 182], "score": "0.9985", "loss": "0.0213", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();start(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:13.471789", "n_pass": [3151, 189, 183], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\" vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:16.346481", "n_pass": [3154, 190, 184], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"vectors\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:19.213467", "n_pass": [3155, 191, 185], "score": "0.9992", "loss": "0.0052", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\"); for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:22.087134", "n_pass": [3159, 192, 186], "score": "0.9979", "loss": "0.0294", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for (0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:24.956146", "n_pass": [3161, 193, 187], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(0;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:27.835060", "n_pass": [3163, 194, 188], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;  numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:30.724289", "n_pass": [3165, 195, 189], "score": "0.9999", "loss": "0.0004", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(; numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:33.589695", "n_pass": [3166, 196, 190], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;numWords;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:36.475476", "n_pass": [3167, 197, 191], "score": "0.9999", "loss": "0.0014", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;i) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:39.374250", "n_pass": [3169, 198, 192], "score": "0.9727", "loss": "0.1793", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;) { pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:42.239358", "n_pass": [3171, 199, 193], "score": "0.9951", "loss": "0.0832", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){ pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:45.096476", "n_pass": [3173, 200, 194], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl.lightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:47.968179", "n_pass": [3175, 201, 195], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pllightUpdate(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:50.828254", "n_pass": [3176, 202, 196], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl(); (\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:53.704853", "n_pass": [3180, 203, 197], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\" \"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:56.562617", "n_pass": [3183, 204, 198], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\"); for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:28:59.447778", "n_pass": [3187, 205, 199], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for (int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:02.336026", "n_pass": [3189, 206, 200], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(int col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:05.193155", "n_pass": [3191, 207, 201], "score": "1.0", "loss": "0.0002", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for( col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:08.040906", "n_pass": [3192, 208, 202], "score": "0.9891", "loss": "0.048", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;; ++col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:10.951776", "n_pass": [3197, 209, 203], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;+col) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:13.812377", "n_pass": [3198, 210, 204], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { int entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:16.666234", "n_pass": [3201, 211, 205], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:19.572417", "n_pass": [3209, 212, 206], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:22.425360", "n_pass": [3210, 213, 207], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:25.305064", "n_pass": [3216, 214, 208], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:28.176114", "n_pass": [3220, 215, 209], "score": "0.9924", "loss": "0.0575", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:31.094809", "n_pass": [3233, 216, 210], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;+col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:33.953704", "n_pass": [3234, 217, 211], "score": "0.9986", "loss": "0.0058", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:36.840351", "n_pass": [3241, 218, 212], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:40.250964", "n_pass": [3257, 219, 213], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:43.121297", "n_pass": [3260, 220, 214], "score": "0.9978", "loss": "0.0138", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:45.977710", "n_pass": [3262, 221, 215], "score": "0.998", "loss": "0.0118", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:48.897770", "n_pass": [3273, 222, 216], "score": "0.9704", "loss": "0.14", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:51.773851", "n_pass": [3275, 223, 217], "score": "0.9999", "loss": "0.0006", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:54.635588", "n_pass": [3276, 224, 218], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:29:57.500398", "n_pass": [3277, 225, 219], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:00.406739", "n_pass": [3290, 226, 220], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; ++i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:03.283376", "n_pass": [3295, 227, 221], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:06.156528", "n_pass": [3301, 228, 222], "score": "0.9887", "loss": "0.1071", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:09.014489", "n_pass": [3304, 229, 223], "score": "0.9998", "loss": "0.0012", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = new OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:11.890744", "n_pass": [3307, 230, 224], "score": "1.0", "loss": "0.0009", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa, 0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:14.749479", "n_pass": [3310, 231, 225], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList().start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:17.617631", "n_pass": [3314, 232, 226], "score": "0.9845", "loss": "0.1121", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList.start(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:20.463022", "n_pass": [3315, 233, 227], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"Compressing \"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:23.315073", "n_pass": [3317, 234, 228], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;; ++i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:26.208673", "n_pass": [3326, 235, 229], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;+i) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:29.051422", "n_pass": [3327, 236, 230], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(obs.writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:31.912479", "n_pass": [3331, 237, 231], "score": "1.0", "loss": "0.0005", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (int col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:35.224087", "n_pass": [3340, 238, 232], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (col ; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:38.075228", "n_pass": [3341, 239, 233], "score": "0.9849", "loss": "0.1581", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; colvectorSize; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:40.914193", "n_pass": [3343, 240, 234], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:43.802713", "n_pass": [3351, 241, 235], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(int2nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:46.638718", "n_pass": [3352, 242, 236], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } ; while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:49.529981", "n_pass": [3361, 243, 237], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { oa.write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:52.381444", "n_pass": [3367, 244, 238], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",array.length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:55.296529", "n_pass": [3375, 245, 239], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); word2vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:30:58.155528", "n_pass": [3378, 246, 240], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); vec2VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:00.977039", "n_pass": [3379, 247, 241], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress( golombModuli); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:03.818703", "n_pass": [3381, 248, 242], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { BinIO.storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:06.682325", "n_pass": [3388, 249, 243], "score": "1.0", "loss": "0.0003", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:09.592605", "n_pass": [3401, 250, 244], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:12.449196", "n_pass": [3406, 251, 245], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (indexToWord.get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:15.295003", "n_pass": [3410, 252, 246], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (int col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:18.160206", "n_pass": [3416, 253, 247], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0; col; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:21.019204", "n_pass": [3420, 254, 248], "score": "1.0", "loss": "0.0004", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:23.875134", "n_pass": [3422, 255, 249], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:26.709727", "n_pass": [3425, 256, 250], "score": "0.9918", "loss": "0.0593", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:29.603358", "n_pass": [3433, 257, 251], "score": "1.0", "loss": "0.0", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:32.510138", "n_pass": [3444, 258, 252], "score": "0.8551", "loss": "1.0339", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:35.342512", "n_pass": [3447, 259, 253], "score": "0.9978", "loss": "0.0418", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:38.202002", "n_pass": [3450, 260, 254], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:41.054541", "n_pass": [3453, 261, 255], "score": "1.0", "loss": "0.0002", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 21:31:43.925849", "n_pass": [3460, 262, 256], "score": "1.0", "loss": "0.0001", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:31:46.769493", "n_pass": [3465, 263, 257], "score": "1.0", "loss": "0.0001", "code": "void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:31:50.535180", "n_pass": [3473, 264, 258], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:31:53.356060", "n_pass": [3476, 265, 259], "score": "0.9391", "loss": "0.3874", "code": "void main(String[]args) { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:31:56.168216", "n_pass": [3477, 266, 260], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){ SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:31:58.986542", "n_pass": [3479, 267, 261], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:01.798209", "n_pass": [3480, 268, 262], "score": "0.9999", "loss": "0.0006", "code": "void main(String[]args){ jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:04.608338", "n_pass": [3481, 269, 263], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:07.421471", "n_pass": [3483, 270, 264], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap= new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:10.238794", "n_pass": [3485, 271, 265], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap=new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:13.087740", "n_pass": [3486, 272, 266], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap= SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:15.892615", "n_pass": [3487, 273, 267], "score": "0.9999", "loss": "0.001", "code": "void main(String[]args){jsap=SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:18.710455", "n_pass": [3491, 274, 268], "score": "0.9883", "loss": "0.109", "code": "void main(String[]args){jsap=SimpleJSAP(Word.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:21.518195", "n_pass": [3492, 275, 269], "score": "0.9988", "loss": "0.0234", "code": "void main(String[]args){jsap=SimpleJSAP(WordgetName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:24.320298", "n_pass": [3493, 276, 270], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){jsap=SimpleJSAP(Word(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:27.134162", "n_pass": [3497, 277, 271], "score": "0.97", "loss": "0.2197", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:29.959772", "n_pass": [3499, 278, 272], "score": "0.9631", "loss": "0.2506", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\" \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:32.764310", "n_pass": [3500, 279, 273], "score": "0.9993", "loss": "0.0162", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:35.571510", "n_pass": [3503, 280, 274], "score": "0.9999", "loss": "0.0003", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:38.396051", "n_pass": [3509, 281, 275], "score": "0.9997", "loss": "0.0092", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{ new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:41.204292", "n_pass": [3511, 282, 276], "score": "0.9996", "loss": "0.0007", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:44.019561", "n_pass": [3512, 283, 277], "score": "0.6739", "loss": "1.443", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{ UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:46.854510", "n_pass": [3513, 284, 278], "score": "0.7684", "loss": "1.1825", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:49.680845", "n_pass": [3517, 285, 279], "score": "0.9992", "loss": "0.0168", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:52.518414", "n_pass": [3520, 286, 280], "score": "1.0", "loss": "0.0003", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:55.347796", "n_pass": [3522, 287, 281], "score": "0.978", "loss": "0.1324", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:32:58.185970", "n_pass": [3524, 288, 282], "score": "0.9996", "loss": "0.0032", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:01.004266", "n_pass": [3526, 289, 283], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\" file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:03.813376", "n_pass": [3527, 290, 284], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:06.628035", "n_pass": [3528, 291, 285], "score": "0.9997", "loss": "0.0077", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:09.491557", "n_pass": [3532, 292, 286], "score": "0.8111", "loss": "0.995", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:12.316645", "n_pass": [3533, 293, 287], "score": "0.9994", "loss": "0.0014", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"), UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:15.131166", "n_pass": [3534, 294, 288], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:17.935565", "n_pass": [3535, 295, 289], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:20.776125", "n_pass": [3538, 296, 290], "score": "0.9643", "loss": "0.2242", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\" version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:23.578816", "n_pass": [3539, 297, 291], "score": "0.9934", "loss": "0.021", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:26.388162", "n_pass": [3540, 298, 292], "score": "0.9997", "loss": "0.0022", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:29.230479", "n_pass": [3544, 299, 293], "score": "0.9997", "loss": "0.0005", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] += Fast(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:32.348149", "n_pass": [3637, 300, 294], "score": "0.9964", "loss": "0.0109", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStream= FastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:35.986775", "n_pass": [3713, 301, 295], "score": "0.9998", "loss": "0.0011", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStreamFastByteArrayOutputStream(); obs = OutputBitStream(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:38.821639", "n_pass": [3718, 302, 296], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStreamFastByteArrayOutputStream(); obs =(oa0); finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:41.670967", "n_pass": [3721, 303, 297], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStreamFastByteArrayOutputStream(); obs =(oa0)finalLongArrayList(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:44.468998", "n_pass": [3722, 304, 298], "score": "0.9997", "loss": "0.0043", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStreamFastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:48.950449", "n_pass": [3854, 305, 299], "score": "0.8291", "loss": "0.8665", "code": "void main(String[]args){jsapSimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStreamFastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:51.764717", "n_pass": [3855, 306, 300], "score": "0.9988", "loss": "0.0107", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { } FastByteArrayOutputStreamFastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:33:55.791830", "n_pass": [4052, 307, 301], "score": "0.9998", "loss": "0.002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i] ; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:06.210209", "n_pass": [4808, 308, 302], "score": "0.9999", "loss": "0.0016", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i]; for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:09.038404", "n_pass": [4809, 309, 303], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for (; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:11.876510", "n_pass": [4811, 310, 304], "score": "0.9979", "loss": "0.0797", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(; ; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:14.727351", "n_pass": [4814, 311, 305], "score": "0.9493", "loss": "0.2852", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;; ) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:17.557644", "n_pass": [4816, 312, 306], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;) { entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:20.408852", "n_pass": [4818, 313, 307], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){ entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:23.256469", "n_pass": [4820, 314, 308], "score": "0.9999", "loss": "0.0008", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[ col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:26.111553", "n_pass": [4823, 315, 309], "score": "0.996", "loss": "0.0177", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb(nat(entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:28.995816", "n_pass": [4829, 316, 310], "score": "0.6785", "loss": "1.0541", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry), golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:31.838878", "n_pass": [4833, 317, 311], "score": "1.0", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry) golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:34.664083", "n_pass": [4834, 318, 312], "score": "0.9999", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)golombModuli[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:37.503540", "n_pass": [4835, 319, 313], "score": "0.9996", "loss": "0.0009", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]); } } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:40.355181", "n_pass": [4841, 320, 314], "score": "0.997", "loss": "0.0082", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);} } while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:43.190981", "n_pass": [4843, 321, 315], "score": "0.9985", "loss": "0.023", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}} while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:46.039665", "n_pass": [4845, 322, 316], "score": "0.9976", "loss": "0.1297", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while (oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:48.874385", "n_pass": [4847, 323, 317], "score": "0.9949", "loss": "0.0305", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(oa0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:51.719882", "n_pass": [4849, 324, 318], "score": "0.9976", "loss": "0.1306", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0) { write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:54.558673", "n_pass": [4852, 325, 319], "score": "0.9999", "loss": "0.0011", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){ write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:35:57.395873", "n_pass": [4854, 326, 320], "score": "0.7231", "loss": "1.2725", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){write(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:00.220686", "n_pass": [4855, 327, 321], "score": "0.3313", "loss": "2.9337", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0); } array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:03.071010", "n_pass": [4860, 328, 322], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);} array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:05.920327", "n_pass": [4862, 329, 323], "score": "0.9811", "loss": "0.4338", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"bps\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:08.758387", "n_pass": [4866, 330, 324], "score": "0.9994", "loss": "0.019", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length); VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:11.610632", "n_pass": [4872, 331, 325], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress(); if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:14.478754", "n_pass": [4877, 332, 326], "score": "0.9999", "loss": "0.0011", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if (outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:17.324892", "n_pass": [4879, 333, 327], "score": "0.9998", "loss": "0.0008", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(outputnull) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:20.140624", "n_pass": [4881, 334, 328], "score": "0.9998", "loss": "0.0006", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null) { storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:22.972969", "n_pass": [4884, 335, 329], "score": "0.9998", "loss": "0.0011", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){ storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:25.798546", "n_pass": [4886, 336, 330], "score": "0.9995", "loss": "0.0083", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){storeObject(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:28.641186", "n_pass": [4887, 337, 331], "score": "0.9999", "loss": "0.0021", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:31.505309", "n_pass": [4892, 338, 332], "score": "0.9993", "loss": "0.0033", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);} if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:34.323000", "n_pass": [4894, 339, 333], "score": "0.9972", "loss": "0.0068", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:37.152068", "n_pass": [4896, 340, 334], "score": "0.9982", "loss": "0.0044", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:39.974960", "n_pass": [4900, 341, 335], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:42.798737", "n_pass": [4904, 342, 336], "score": "0.9996", "loss": "0.0006", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:45.655744", "n_pass": [4906, 343, 337], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){ for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:48.466650", "n_pass": [4907, 344, 338], "score": "0.9997", "loss": "0.0042", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:51.280222", "n_pass": [4909, 345, 339], "score": "0.9999", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:54.128652", "n_pass": [4912, 346, 340], "score": "0.9934", "loss": "0.0374", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i= 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:56.937355", "n_pass": [4914, 347, 341], "score": "0.9999", "loss": "0.0006", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:36:59.768200", "n_pass": [4918, 348, 342], "score": "0.9999", "loss": "0.0006", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:02.576380", "n_pass": [4919, 349, 343], "score": "1.0", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:05.404527", "n_pass": [4921, 350, 344], "score": "0.9996", "loss": "0.0017", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){ (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:08.222680", "n_pass": [4923, 351, 345], "score": "1.0", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){(get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:11.058392", "n_pass": [4925, 352, 346], "score": "1.0", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:13.896276", "n_pass": [4931, 353, 347], "score": "0.992", "loss": "0.3291", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:16.707162", "n_pass": [4933, 354, 348], "score": "0.9998", "loss": "0.0035", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:19.550298", "n_pass": [4936, 355, 349], "score": "0.9984", "loss": "0.008", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col= 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:22.375483", "n_pass": [4938, 356, 350], "score": "0.9943", "loss": "0.0453", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:25.207374", "n_pass": [4942, 357, 351], "score": "0.9999", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:28.005537", "n_pass": [4943, 358, 352], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:30.813366", "n_pass": [4945, 359, 353], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){ expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:33.627462", "n_pass": [4947, 360, 354], "score": "0.9971", "loss": "0.0123", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:36.439574", "n_pass": [4949, 361, 355], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected= entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:39.282279", "n_pass": [4951, 362, 356], "score": "0.9998", "loss": "0.0004", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:42.107915", "n_pass": [4955, 363, 357], "score": "0.9998", "loss": "0.0005", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i* col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:44.912641", "n_pass": [4957, 364, 358], "score": "0.9999", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:47.753676", "n_pass": [4961, 365, 359], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:50.568194", "n_pass": [4963, 366, 360], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got= vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:53.373293", "n_pass": [4965, 367, 361], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:56.239575", "n_pass": [4971, 368, 362], "score": "0.9999", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:37:59.076652", "n_pass": [4973, 369, 363], "score": "0.9969", "loss": "0.0392", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:38:01.891675", "n_pass": [4975, 370, 364], "score": "0.9998", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:38:04.728340", "n_pass": [4978, 371, 365], "score": "0.9999", "loss": "0.0004", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){ error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:38:07.544725", "n_pass": [4980, 372, 366], "score": "0.9998", "loss": "0.0017", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:38:10.380554", "n_pass": [4984, 373, 367], "score": "1.0", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:38:13.191624", "n_pass": [4985, 374, 368], "score": "0.9992", "loss": "0.0124", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:38:16.001130", "n_pass": [4988, 375, 369], "score": "0.9998", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:38:18.822092", "n_pass": [4992, 376, 370], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);exit(1); } } } done(); } }"}
{"time": "2021-01-20 21:38:21.631461", "n_pass": [4993, 377, 371], "score": "0.9988", "loss": "0.0091", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1); } } } done(); } }"}
{"time": "2021-01-20 21:38:24.482548", "n_pass": [4998, 378, 372], "score": "0.9999", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);} } } done(); } }"}
{"time": "2021-01-20 21:38:27.293090", "n_pass": [5000, 379, 373], "score": "0.9995", "loss": "0.002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}} } done(); } }"}
{"time": "2021-01-20 21:38:30.100622", "n_pass": [5002, 380, 374], "score": "0.9958", "loss": "0.0174", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}} done(); } }"}
{"time": "2021-01-20 21:38:32.910907", "n_pass": [5004, 381, 375], "score": "0.9994", "loss": "0.0021", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done(); } }"}
{"time": "2021-01-20 21:38:35.743593", "n_pass": [5009, 382, 376], "score": "0.9999", "loss": "0.0007", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();} }"}
{"time": "2021-01-20 21:38:38.553503", "n_pass": [5011, 383, 377], "score": "0.9998", "loss": "0.0004", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col = 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:38:42.597874", "n_pass": [5135, 384, 378], "score": "0.9993", "loss": "0.0095", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col= 0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:38:45.439608", "n_pass": [5137, 385, 379], "score": "0.9999", "loss": "0.0015", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;) { entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:38:48.259083", "n_pass": [5142, 386, 380], "score": "0.9935", "loss": "0.0169", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){ entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:38:51.070229", "n_pass": [5144, 387, 381], "score": "0.9965", "loss": "0.0046", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry =  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:38:53.898908", "n_pass": [5146, 388, 382], "score": "0.9999", "loss": "0.001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=  columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:38:56.689991", "n_pass": [5148, 389, 383], "score": "0.9991", "loss": "0.0055", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry= columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:38:59.495743", "n_pass": [5149, 390, 384], "score": "0.9999", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col] +=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:02.347962", "n_pass": [5154, 391, 385], "score": "0.9998", "loss": "0.0004", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]+=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:05.156030", "n_pass": [5155, 392, 386], "score": "0.9995", "loss": "0.0016", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry) ; } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:07.978962", "n_pass": [5160, 393, 387], "score": "0.9998", "loss": "0.001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry); } } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:10.810286", "n_pass": [5162, 394, 388], "score": "0.9993", "loss": "0.0019", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);} } done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:13.621148", "n_pass": [5164, 395, 389], "score": "0.9997", "loss": "0.0039", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}} done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:16.430244", "n_pass": [5166, 396, 390], "score": "0.9971", "loss": "0.0104", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done(); }golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:19.250683", "n_pass": [5171, 397, 391], "score": "0.9336", "loss": "0.1952", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli = new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:22.073574", "n_pass": [5174, 398, 392], "score": "0.9996", "loss": "0.0007", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli= new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:24.884555", "n_pass": [5176, 399, 393], "score": "0.987", "loss": "0.1294", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=new int[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:27.697292", "n_pass": [5178, 400, 394], "score": "0.9921", "loss": "0.0241", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize]; for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:30.558013", "n_pass": [5184, 401, 395], "score": "0.979", "loss": "0.1639", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for (int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:33.370735", "n_pass": [5186, 402, 396], "score": "0.9995", "loss": "0.0013", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(int col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:36.182531", "n_pass": [5188, 403, 397], "score": "0.9999", "loss": "0.0008", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for( col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:38.983675", "n_pass": [5189, 404, 398], "score": "0.9912", "loss": "0.0319", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col = 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:41.786789", "n_pass": [5191, 405, 399], "score": "0.9984", "loss": "0.0023", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col= 0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:44.589352", "n_pass": [5193, 406, 400], "score": "0.9999", "loss": "0.0004", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:47.408616", "n_pass": [5198, 407, 401], "score": "0.9992", "loss": "0.0024", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){ if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:50.233953", "n_pass": [5200, 408, 402], "score": "0.9871", "loss": "0.1748", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:53.030264", "n_pass": [5202, 409, 403], "score": "0.9997", "loss": "0.0045", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:55.845167", "n_pass": [5204, 410, 404], "score": "0.9997", "loss": "0.004", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:39:58.646524", "n_pass": [5207, 411, 405], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){ f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:01.477765", "n_pass": [5209, 412, 406], "score": "0.9999", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f = ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:04.286205", "n_pass": [5211, 413, 407], "score": "0.999", "loss": "0.0032", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f= ((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:07.574178", "n_pass": [5213, 414, 408], "score": "0.9999", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double) numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:10.389851", "n_pass": [5218, 415, 409], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords) / columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:13.191187", "n_pass": [5221, 416, 410], "score": "0.9972", "loss": "0.0963", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/ columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:16.024028", "n_pass": [5223, 417, 411], "score": "0.9993", "loss": "0.0051", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col]; m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:18.859101", "n_pass": [5229, 418, 412], "score": "0.9997", "loss": "0.0009", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m = (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:21.663192", "n_pass": [5231, 419, 413], "score": "0.9999", "loss": "0.0016", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m= (int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:24.467701", "n_pass": [5233, 420, 414], "score": "0.9993", "loss": "0.0093", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int) (log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:27.297881", "n_pass": [5237, 421, 415], "score": "0.9999", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)(log(2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:30.098804", "n_pass": [5239, 422, 416], "score": "0.9999", "loss": "0.0008", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2) -log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:32.943754", "n_pass": [5243, 423, 417], "score": "0.994", "loss": "0.1301", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:35.743912", "n_pass": [5245, 424, 418], "score": "0.9996", "loss": "0.0029", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:38.581225", "n_pass": [5251, 425, 419], "score": "0.9993", "loss": "0.0033", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));} golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:41.419101", "n_pass": [5253, 426, 420], "score": "0.9942", "loss": "0.0652", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:44.233236", "n_pass": [5258, 427, 421], "score": "0.9999", "loss": "0.0017", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col]; }ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:47.036353", "n_pass": [5260, 428, 422], "score": "0.9998", "loss": "0.0006", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}ShiftAddXorSignedStringMap(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:49.857064", "n_pass": [5262, 429, 423], "score": "0.9997", "loss": "0.0013", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}(indexToWord(TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:52.669017", "n_pass": [5264, 430, 424], "score": "0.9999", "loss": "0.0005", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies).build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:55.488961", "n_pass": [5268, 431, 425], "score": "0.9716", "loss": "0.7693", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());  permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:40:58.316805", "n_pass": [5274, 432, 426], "score": "0.9999", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build()); permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:01.142478", "n_pass": [5275, 433, 427], "score": "0.9995", "loss": "0.003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation = new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:03.970304", "n_pass": [5277, 434, 428], "score": "1.0", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation= new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:06.801322", "n_pass": [5279, 435, 429], "score": "0.9978", "loss": "0.0074", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=new int[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:09.644668", "n_pass": [5281, 436, 430], "score": "0.9986", "loss": "0.0116", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords]; for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:12.503899", "n_pass": [5287, 437, 431], "score": "0.9955", "loss": "0.0169", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for (i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:15.306402", "n_pass": [5289, 438, 432], "score": "0.9654", "loss": "0.5385", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i = 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:18.146921", "n_pass": [5292, 439, 433], "score": "0.9997", "loss": "0.0006", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i= 0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:20.958238", "n_pass": [5294, 440, 434], "score": "0.998", "loss": "0.0409", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;; i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:23.795381", "n_pass": [5298, 441, 435], "score": "0.9957", "loss": "0.1611", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;i) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:26.580823", "n_pass": [5299, 442, 436], "score": "0.8659", "loss": "1.3668", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;) { }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:29.415025", "n_pass": [5301, 443, 437], "score": "0.9944", "loss": "0.1401", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){ }FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:32.212874", "n_pass": [5303, 444, 438], "score": "0.9997", "loss": "0.0018", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream(); obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:35.033451", "n_pass": [5309, 445, 439], "score": "0.9999", "loss": "0.0006", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs =(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:37.840239", "n_pass": [5311, 446, 440], "score": "0.9997", "loss": "0.0057", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa0)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:40.655888", "n_pass": [5315, 447, 441], "score": "0.9998", "loss": "0.0024", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\"); for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:43.471473", "n_pass": [5322, 448, 442], "score": "1.0", "loss": "0.0004", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for (int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:46.273858", "n_pass": [5324, 449, 443], "score": "0.9999", "loss": "0.0012", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(int i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:49.072396", "n_pass": [5326, 450, 444], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for( i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:51.862126", "n_pass": [5327, 451, 445], "score": "0.9908", "loss": "0.0513", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i = 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:54.684012", "n_pass": [5329, 452, 446], "score": "0.9998", "loss": "0.0009", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i= 0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:41:57.485761", "n_pass": [5331, 453, 447], "score": "0.9809", "loss": "0.5013", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;) { add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:00.326608", "n_pass": [5336, 454, 448], "score": "0.9999", "loss": "0.0005", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){ add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:03.125232", "n_pass": [5338, 455, 449], "score": "0.9989", "loss": "0.0077", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){add(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:05.934252", "n_pass": [5339, 456, 450], "score": "0.9275", "loss": "0.7959", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits()); permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:08.771004", "n_pass": [5346, 457, 451], "score": "0.9992", "loss": "0.0094", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:11.943578", "n_pass": [5418, 458, 452], "score": "0.9999", "loss": "0.0012", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:14.735733", "n_pass": [5419, 459, 453], "score": "0.9975", "loss": "0.0164", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:17.597136", "n_pass": [5433, 460, 454], "score": "0.9999", "loss": "0.0004", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:20.389108", "n_pass": [5434, 461, 455], "score": "0.9996", "loss": "0.0009", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:23.220070", "n_pass": [5440, 462, 456], "score": "0.9999", "loss": "0.0012", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expectedentries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:26.010469", "n_pass": [5441, 463, 457], "score": "0.9999", "loss": "0.0005", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:28.849977", "n_pass": [5444, 464, 458], "score": "0.9939", "loss": "0.0491", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[icol];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:31.665924", "n_pass": [5445, 465, 459], "score": "0.9999", "loss": "0.001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:34.471590", "n_pass": [5449, 466, 460], "score": "0.9995", "loss": "0.0031", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];gotvec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:37.288104", "n_pass": [5450, 467, 461], "score": "0.9916", "loss": "0.0575", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col=0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:41.469565", "n_pass": [5603, 468, 462], "score": "0.9996", "loss": "0.0007", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col0;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:44.264313", "n_pass": [5604, 469, 463], "score": "0.9996", "loss": "0.0007", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry=columnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:47.088674", "n_pass": [5610, 470, 464], "score": "0.9993", "loss": "0.0089", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entrycolumnAbsSum[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:49.882598", "n_pass": [5611, 471, 465], "score": "0.9996", "loss": "0.001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:52.776307", "n_pass": [5628, 472, 466], "score": "0.8307", "loss": "1.4988", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModulinewint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:55.562760", "n_pass": [5629, 473, 467], "score": "0.9997", "loss": "0.0006", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuliint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:42:58.340383", "n_pass": [5630, 474, 468], "score": "0.9999", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:01.154038", "n_pass": [5638, 475, 469], "score": "1.0", "loss": "0.0", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:03.950130", "n_pass": [5639, 476, 470], "score": "0.9996", "loss": "0.0048", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation=newint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:07.420042", "n_pass": [5695, 477, 471], "score": "0.9973", "loss": "0.0301", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutationnewint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:10.214886", "n_pass": [5696, 478, 472], "score": "0.9999", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutationint[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:13.023889", "n_pass": [5697, 479, 473], "score": "0.9999", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(i=0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:15.841773", "n_pass": [5705, 480, 474], "score": "0.9999", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(i0;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:18.622411", "n_pass": [5706, 481, 475], "score": "0.9999", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(i;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i=0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:21.505593", "n_pass": [5729, 482, 476], "score": "0.9951", "loss": "0.0296", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(i;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i0;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:24.296590", "n_pass": [5730, 483, 477], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(i;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:27.487025", "n_pass": [5811, 484, 478], "score": "0.9976", "loss": "0.0178", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(i;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:30.359188", "n_pass": [5824, 485, 479], "score": "0.9984", "loss": "0.0307", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(col;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(i;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(;;){((i));for(;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:34.559058", "n_pass": [5986, 486, 480], "score": "0.9997", "loss": "0.0017", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(i;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(;;){((i));for(;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:37.451118", "n_pass": [6014, 487, 481], "score": "1.0", "loss": "0.0001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(i;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(;;){((i));for(;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:41.533510", "n_pass": [6076, 488, 482], "score": "1.0", "loss": "0.0002", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(i;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(;;){((i));for(;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 21:43:44.415211", "n_pass": [6098, 489, 483], "score": "0.9999", "loss": "0.0003", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){pl();(\"\");for(;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(;;){}FastByteArrayOutputStream();obs=(oa)(\"\");for(;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array(\"\",length);VecCompress();if(null){(word);}if((\"\")){for(;;){((i));for(;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}

Minimal simplified code:
void main(String[]args){jsap(Word(),"",new Parameter[]{UnflaggedOption(""._,""),(""),Switch("","")});try(BufferedReader lines=(FileReader())){(header[0]).start("");indexToWord=new ArrayList<>();for(;;){}pl();("");for(;;){pl();("");for(;;){entry[col]=(entry);}}done();}golombModuli[vectorSize];for(;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2)-(f));}golombModuli[col];}((TransformationStrategies)build());permutation[numWords];for(;;){}FastByteArrayOutputStream();obs=(oa)("");for(;;){(writtenBits());permutation[i];for(;;){entries[col].writeGolomb((entry)[col]);}}while(0){(0);}array("",length);VecCompress();if(null){(word);}if(("")){for(;;){((i));for(;;){expected[i];got[col];if(got){error("",got);(1);}}}done();}}

