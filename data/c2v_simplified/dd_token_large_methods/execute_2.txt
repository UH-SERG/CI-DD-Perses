
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/catalina/ant/AbstractCatalinaTask_execute.java
method_name = execute
method_body = public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod("PUT"); if (contentType != null) { hconn.setRequestProperty("Content-Type", contentType); } if (contentLength >= 0) { hconn.setRequestProperty("Content-Length", "" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod("GET"); } hconn.setRequestProperty("User-Agent", "Catalina-Ant-Task/1.0"); String input = username + ":" + password; String output = Base64.encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty("Authorization", "Basic " + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff = new StringBuilder(); String error = null; int msgPriority = Project.MSG_INFO; boolean first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\r') || (ch == '\n')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith("OK -")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (buff.length() > 0) { handleOutput(buff.toString(), msgPriority); } if (error != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }
predict, score, loss = execute, 0.5944083333015442, 1.4758834838867188

Trace of simplified code(s):
{"time": "2021-01-20 15:07:11.908320", "n_pass": [1, 1, 1], "score": "0.8634", "loss": "0.3279", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentType != null) { hconn.setRequestProperty(\"Content-Type\", contentType); } if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\"); String input = username + \":\" + password; String output = Base64.encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff = new StringBuilder(); String error = null; int msgPriority = Project.MSG_INFO; boolean first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r') || (ch == '\\n')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (buff.length() > 0) { handleOutput(buff.toString(), msgPriority); } if (error != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:07:15.565998", "n_pass": [97, 2, 2], "score": "0.8211", "loss": "0.6209", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\"); String input = username + \":\" + password; String output = Base64.encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff = new StringBuilder(); String error = null; int msgPriority = Project.MSG_INFO; boolean first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r') || (ch == '\\n')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (buff.length() > 0) { handleOutput(buff.toString(), msgPriority); } if (error != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:07:21.409578", "n_pass": [109, 4, 3], "score": "0.4172", "loss": "1.1706", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\"); String input = username + \":\" + password; String output = Base64.encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r') || (ch == '\\n')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (buff.length() > 0) { handleOutput(buff.toString(), msgPriority); } if (error != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:07:27.798062", "n_pass": [132, 6, 4], "score": "0.3944", "loss": "1.6986", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\").encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r') || (ch == '\\n')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (buff.length() > 0) { handleOutput(buff.toString(), msgPriority); } if (error != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:07:30.769393", "n_pass": [147, 7, 5], "score": "0.9905", "loss": "0.0292", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\").encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r') || (ch == '\\n')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:07:40.195182", "n_pass": [249, 10, 6], "score": "0.9966", "loss": "0.0151", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn = (new URL(url + command)).conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\").encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r') || (ch == '\\n')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:07:43.253201", "n_pass": [278, 11, 7], "score": "0.7927", "loss": "0.5581", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn = (new URL(url + command)).conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\").encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:07:46.223895", "n_pass": [292, 12, 8], "score": "0.6759", "loss": "0.7296", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn = (new URL(url + command)).conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\").encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:07:52.050855", "n_pass": [304, 14, 9], "score": "0.5664", "loss": "0.8446", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\").encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:07:58.153726", "n_pass": [463, 16, 10], "score": "0.443", "loss": "1.2441", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\").encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:01.059284", "n_pass": [468, 17, 11], "score": "0.387", "loss": "1.6212", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\").encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:03.952463", "n_pass": [474, 18, 12], "score": "0.3642", "loss": "1.6595", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\").encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:09.740171", "n_pass": [481, 20, 13], "score": "0.3359", "loss": "1.549", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina0\").encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:12.639464", "n_pass": [484, 21, 14], "score": "0.581", "loss": "1.8439", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:15.529343", "n_pass": [487, 22, 15], "score": "0.5646", "loss": "1.2422", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:18.424073", "n_pass": [493, 23, 16], "score": "0.9073", "loss": "0.1992", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:21.283837", "n_pass": [495, 24, 17], "score": "0.9039", "loss": "0.2882", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:24.164333", "n_pass": [499, 25, 18], "score": "0.9179", "loss": "0.1981", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:27.081393", "n_pass": [506, 26, 19], "score": "0.6209", "loss": "1.1006", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:29.972175", "n_pass": [507, 27, 20], "score": "0.6457", "loss": "0.923", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:32.894430", "n_pass": [514, 28, 21], "score": "0.5093", "loss": "0.9986", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:38.694882", "n_pass": [529, 30, 22], "score": "0.5499", "loss": "2.2296", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:41.837813", "n_pass": [581, 31, 23], "score": "0.8611", "loss": "0.4191", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:44.877589", "n_pass": [620, 32, 24], "score": "0.953", "loss": "0.1607", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:48.662816", "n_pass": [889, 33, 25], "score": "0.9686", "loss": "0.0908", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; } false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:51.522207", "n_pass": [890, 34, 26], "score": "0.9662", "loss": "0.1286", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:54.374756", "n_pass": [892, 35, 27], "score": "0.7104", "loss": "0.7182", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferror != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:08:57.280158", "n_pass": [901, 36, 28], "score": "0.3841", "loss": "1.1981", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:00.176170", "n_pass": [905, 37, 29], "score": "0.8318", "loss": "0.4833", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:03.021573", "n_pass": [906, 38, 30], "score": "0.5552", "loss": "0.7807", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:05.968391", "n_pass": [918, 39, 31], "score": "0.3596", "loss": "1.3114", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:11.710379", "n_pass": [929, 41, 32], "score": "0.5307", "loss": "0.8975", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:14.587498", "n_pass": [932, 42, 33], "score": "0.3669", "loss": "2.0208", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:18.012475", "n_pass": [953, 43, 34], "score": "0.3784", "loss": "2.16", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection= null; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:20.858639", "n_pass": [954, 44, 35], "score": "0.7137", "loss": "0.5498", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection; InputStreamReader reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:23.711704", "n_pass": [955, 45, 36], "score": "0.5615", "loss": "0.8858", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader = null; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:29.431788", "n_pass": [957, 47, 37], "score": "0.7466", "loss": "1.0516", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false); hconn.setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:35.163878", "n_pass": [964, 49, 38], "score": "0.8337", "loss": "0.4626", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn; if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:38.043787", "n_pass": [974, 50, 39], "score": "0.8313", "loss": "0.2924", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:40.911834", "n_pass": [983, 51, 40], "score": "0.6031", "loss": "0.9686", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", + contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:43.749365", "n_pass": [984, 52, 41], "score": "0.7303", "loss": "0.863", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty(\"Authorization\", output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:46.661584", "n_pass": [1001, 53, 42], "score": "0.6952", "loss": "0.6573", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:49.527498", "n_pass": [1006, 54, 43], "score": "0.8829", "loss": "0.3179", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:52.424152", "n_pass": [1020, 55, 44], "score": "0.3223", "loss": "1.9848", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:55.255556", "n_pass": [1022, 56, 45], "score": "0.6354", "loss": "0.8831", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer, 0, n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:09:58.104211", "n_pass": [1025, 57, 46], "score": "0.4889", "loss": "1.2184", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:00.974604", "n_pass": [1032, 58, 47], "score": "0.5863", "loss": "1.4816", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder buff =  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:03.843649", "n_pass": [1035, 59, 48], "score": "0.7028", "loss": "0.9398", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) { read(); if (ch < 0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:10.496881", "n_pass": [1042, 61, 49], "score": "0.4126", "loss": "1.4049", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) { read(); if (0) { break; } else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:13.298233", "n_pass": [1044, 62, 50], "score": "0.8648", "loss": "0.4745", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) { read(); if (0) {} else if ((ch == '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:16.103236", "n_pass": [1047, 63, 51], "score": "0.9085", "loss": "0.2858", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection reader ; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) { read(); if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:22.509045", "n_pass": [1122, 65, 52], "score": "0.7299", "loss": "0.6896", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection; try { conn conn; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) { read(); if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:25.313091", "n_pass": [1125, 66, 53], "score": "0.8944", "loss": "0.2124", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection; try { ; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) { read(); if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:28.350452", "n_pass": [1194, 67, 54], "score": "0.8312", "loss": "0.5667", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection; try { ; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader.close(); } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:31.388853", "n_pass": [1246, 68, 55], "score": "0.8749", "loss": "0.2736", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection; try { ; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { } null; } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:47.114595", "n_pass": [1696, 69, 56], "score": "0.7564", "loss": "0.5249", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection; try { ; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:49.941376", "n_pass": [1704, 70, 57], "score": "0.9796", "loss": "0.0832", "code": "public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection; try { ; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:52.794355", "n_pass": [1717, 71, 58], "score": "0.8587", "loss": "0.3589", "code": " void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection; try { ; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:10:55.586056", "n_pass": [1718, 72, 59], "score": "0.9397", "loss": "0.1197", "code": "void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection; try { ; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:07.653423", "n_pass": [1742, 76, 60], "score": "0.8493", "loss": "0.412", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException { URLConnection; try { ; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:10.473198", "n_pass": [1746, 77, 61], "score": "0.9518", "loss": "0.2615", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { ; hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:18.809413", "n_pass": [1753, 80, 62], "score": "0.4109", "loss": "1.2336", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn.setAllowUserInteraction(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:21.607181", "n_pass": [1755, 81, 63], "score": "0.6334", "loss": "0.8527", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);setDoInputsetUseCaches(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:24.416292", "n_pass": [1758, 82, 64], "score": "0.9122", "loss": "0.1709", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { hconn.setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:27.248585", "n_pass": [1768, 83, 65], "score": "0.8541", "loss": "0.3545", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:30.049815", "n_pass": [1774, 84, 66], "score": "0.9152", "loss": "0.266", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength= 0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:32.848148", "n_pass": [1775, 85, 67], "score": "0.8389", "loss": "0.4662", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Content-Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:38.425927", "n_pass": [1781, 87, 68], "score": "0.9758", "loss": "0.0809", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);  } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:43.999435", "n_pass": [1785, 89, 69], "score": "0.9084", "loss": "0.7933", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:46.796690", "n_pass": [1788, 90, 70], "score": "0.8003", "loss": "0.6786", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:11:55.141269", "n_pass": [1800, 93, 71], "score": "0.8414", "loss": "0.7054", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input.getBytes(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:00.722329", "n_pass": [1808, 95, 72], "score": "0.423", "loss": "1.89", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); hconn.setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:06.300298", "n_pass": [1813, 97, 73], "score": "0.9585", "loss": "0.0902", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty( output); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:09.106267", "n_pass": [1815, 98, 74], "score": "0.8116", "loss": "0.6962", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn.connect(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:11.911425", "n_pass": [1818, 99, 75], "score": "0.8446", "loss": "0.8092", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn(); if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:14.685056", "n_pass": [1819, 100, 76], "score": "0.9727", "loss": "0.1556", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { BufferedOutputStream ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:17.477875", "n_pass": [1825, 101, 77], "score": "0.9865", "loss": "0.0586", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream = new BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:20.268718", "n_pass": [1828, 102, 78], "score": "0.923", "loss": "0.3807", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream = BufferedOutputStream(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:23.051065", "n_pass": [1829, 103, 79], "score": "0.9814", "loss": "0.1004", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(1024);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:25.839461", "n_pass": [1831, 104, 80], "score": "0.9593", "loss": "0.1685", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[1024]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:28.659747", "n_pass": [1837, 105, 81], "score": "0.9758", "loss": "0.1865", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { intread(buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:31.464202", "n_pass": [1844, 106, 82], "score": "0.8643", "loss": "0.7816", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} ostream.write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:34.267224", "n_pass": [1852, 107, 83], "score": "0.9664", "loss": "0.1127", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(buffer,n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:37.055147", "n_pass": [1854, 108, 84], "score": "0.8949", "loss": "0.2955", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } ostream.flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:39.862284", "n_pass": [1858, 109, 85], "score": "0.9894", "loss": "0.0361", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = new InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:42.672873", "n_pass": [1864, 110, 86], "score": "0.8733", "loss": "0.5849", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconn, CHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:45.472906", "n_pass": [1867, 111, 87], "score": "0.8793", "loss": "0.2294", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET); StringBuilder  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:48.263839", "n_pass": [1870, 112, 88], "score": "0.7208", "loss": "0.7149", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} else if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:51.128416", "n_pass": [1884, 113, 89], "score": "0.9307", "loss": "0.2474", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:54.336802", "n_pass": [1894, 114, 90], "score": "0.9592", "loss": "0.2008", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:57.131428", "n_pass": [1895, 115, 91], "score": "0.684", "loss": "1.1839", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:12:59.910277", "n_pass": [1900, 116, 92], "score": "0.9139", "loss": "0.3097", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:02.675222", "n_pass": [1903, 117, 93], "score": "0.9643", "loss": "0.0962", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:05.464415", "n_pass": [1907, 118, 94], "score": "0.9571", "loss": "0.251", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line.startsWith(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:08.481293", "n_pass": [1917, 119, 95], "score": "0.9111", "loss": "0.2518", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"OK -\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:11.238121", "n_pass": [1919, 120, 96], "score": "0.9037", "loss": "0.5025", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) {ERR; }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:14.002271", "n_pass": [1923, 121, 97], "score": "0.9811", "loss": "0.0624", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } else { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:16.783420", "n_pass": [1930, 122, 98], "score": "0.9342", "loss": "0.2164", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff.append((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:19.563856", "n_pass": [1933, 123, 99], "score": "0.8156", "loss": "0.5071", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (bufferrornull && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:22.367197", "n_pass": [1942, 124, 100], "score": "0.9282", "loss": "0.3393", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError()) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:25.163248", "n_pass": [1946, 125, 101], "score": "0.8932", "loss": "0.6044", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { ; } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:27.923476", "n_pass": [1949, 126, 102], "score": "0.9739", "loss": "0.2089", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:33.502980", "n_pass": [1962, 128, 103], "score": "0.9819", "loss": "0.0874", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { new BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:36.289885", "n_pass": [1963, 129, 104], "score": "0.9111", "loss": "0.314", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } finally {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:39.068101", "n_pass": [1969, 130, 105], "score": "0.992", "loss": "0.056", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {; if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:41.858823", "n_pass": [1971, 131, 106], "score": "0.9416", "loss": "0.2622", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (reader != null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:44.640661", "n_pass": [1974, 132, 107], "score": "0.2619", "loss": "2.0091", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (reader= null) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:47.381476", "n_pass": [1975, 133, 108], "score": "0.9909", "loss": "0.0279", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try { reader; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:50.156201", "n_pass": [1980, 134, 109], "score": "0.4709", "loss": "2.3363", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {; } catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:52.907989", "n_pass": [1981, 135, 110], "score": "0.7951", "loss": "0.5432", "code": "void execute(String command, InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:56.707944", "n_pass": [2017, 136, 111], "score": "0.849", "loss": "0.7835", "code": "void execute(String command,InputStream istream, String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:13:59.473304", "n_pass": [2022, 137, 112], "score": "0.9481", "loss": "0.1693", "code": "void execute(String command,InputStream istream,String contentType, int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:02.268944", "n_pass": [2027, 138, 113], "score": "0.4594", "loss": "1.5419", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:05.034793", "n_pass": [2036, 139, 114], "score": "0.9222", "loss": "0.2601", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{URLConnection; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:07.781621", "n_pass": [2037, 140, 115], "score": "0.8742", "loss": "1.2564", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{; try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:10.530571", "n_pass": [2038, 141, 116], "score": "0.9629", "loss": "0.1707", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try { hconn(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:13.287672", "n_pass": [2041, 142, 117], "score": "0.976", "loss": "0.2422", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn.setRequestProperty(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:16.067156", "n_pass": [2061, 143, 118], "score": "0.8121", "loss": "0.9123", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\",contentLength);} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:18.818583", "n_pass": [2064, 144, 119], "score": "0.8537", "loss": "0.3872", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:21.575853", "n_pass": [2069, 145, 120], "score": "0.9812", "loss": "0.0472", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { setDoOutput(false); hconn.setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:24.327690", "n_pass": [2073, 146, 121], "score": "0.9559", "loss": "0.1796", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase64String(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:27.125369", "n_pass": [2084, 147, 122], "score": "0.907", "loss": "0.2614", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets_1)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:29.888736", "n_pass": [2087, 148, 123], "score": "0.9583", "loss": "0.1602", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty(); hconn; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:32.638569", "n_pass": [2092, 149, 124], "score": "0.9714", "loss": "0.0968", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();; if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:35.389285", "n_pass": [2093, 150, 125], "score": "0.9508", "loss": "0.4354", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) { ostream =(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:38.145834", "n_pass": [2099, 151, 126], "score": "0.9474", "loss": "0.2453", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) { ostream(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader = InputStreamReader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:41.004248", "n_pass": [2128, 152, 127], "score": "0.9956", "loss": "0.0188", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) { ostream(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader =(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString(); buff(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:44.692103", "n_pass": [2162, 153, 128], "score": "0.9371", "loss": "0.2998", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) { ostream(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader =(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if (!line(\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:47.481590", "n_pass": [2171, 154, 129], "score": "0.9234", "loss": "0.1716", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) { ostream(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader =(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } { buff((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:50.273625", "n_pass": [2183, 155, 130], "score": "0.9132", "loss": "0.2167", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) { hconn(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) { ostream(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader =(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:56.991662", "n_pass": [2292, 157, 131], "score": "0.924", "loss": "0.2488", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) { ostream(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader =(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:14:59.798372", "n_pass": [2322, 158, 132], "score": "0.9719", "loss": "0.0653", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader =(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:15:02.627457", "n_pass": [2350, 159, 133], "score": "0.9598", "loss": "0.0837", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); } reader(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:15:10.328439", "n_pass": [2566, 161, 134], "score": "0.9334", "loss": "0.3273", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError()) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:15:14.192456", "n_pass": [2641, 162, 135], "score": "0.9844", "loss": "0.1263", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { BuildException(e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:16:13.014914", "n_pass": [3236, 163, 136], "score": "0.5434", "loss": "0.9037", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e);; } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:16:15.764218", "n_pass": [3239, 164, 137], "score": "0.8845", "loss": "0.465", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } } {if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:16:24.016913", "n_pass": [3245, 167, 138], "score": "0.7539", "loss": "1.028", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try {} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:16:40.483573", "n_pass": [3257, 173, 139], "score": "0.4647", "loss": "1.8455", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe) { }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:16:48.781207", "n_pass": [3268, 176, 140], "score": "0.7217", "loss": "0.8251", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){ }  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:16:51.525882", "n_pass": [3270, 177, 141], "score": "0.9749", "loss": "0.1055", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){}  } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:16:57.016308", "n_pass": [3273, 179, 142], "score": "0.5908", "loss": "1.2413", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:17:19.017239", "n_pass": [3293, 187, 143], "score": "0.6545", "loss": "0.6619", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();} catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:17:21.776561", "n_pass": [3295, 188, 144], "score": "0.7267", "loss": "1.0059", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe) { } } } }"}
{"time": "2021-01-20 15:17:27.271883", "n_pass": [3303, 190, 145], "score": "0.7263", "loss": "0.5283", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){ } } } }"}
{"time": "2021-01-20 15:17:30.039503", "n_pass": [3305, 191, 146], "score": "0.6375", "loss": "0.8158", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){} } } }"}
{"time": "2021-01-20 15:17:32.780055", "n_pass": [3307, 192, 147], "score": "0.2869", "loss": "2.1702", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} } }"}
{"time": "2021-01-20 15:17:38.265153", "n_pass": [3311, 194, 148], "score": "0.7633", "loss": "0.7438", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try {(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:17:44.653611", "n_pass": [3339, 196, 149], "score": "0.6763", "loss": "0.8654", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream != null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:17:55.645497", "n_pass": [3355, 200, 150], "score": "0.7703", "loss": "1.4697", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream = null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:17:58.397809", "n_pass": [3357, 201, 151], "score": "0.6013", "loss": "0.9843", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(true); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:18:09.388717", "n_pass": [3365, 205, 152], "score": "0.8492", "loss": "1.0016", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if (contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:18:14.862772", "n_pass": [3370, 207, 153], "score": "0.7146", "loss": "0.6313", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength0) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:18:20.331013", "n_pass": [3373, 209, 154], "score": "0.9064", "loss": "0.6111", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"Length\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:18:25.790760", "n_pass": [3379, 211, 155], "score": "0.5031", "loss": "0.9544", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} } { setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:18:31.255797", "n_pass": [3386, 213, 156], "score": "0.7991", "loss": "0.8344", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ setDoOutput(false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:18:36.718567", "n_pass": [3389, 215, 157], "score": "0.2346", "loss": "2.0974", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); setRequestMethod(\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:18:42.219695", "n_pass": [3395, 217, 158], "score": "0.8332", "loss": "0.3243", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"GET\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:18:44.956301", "n_pass": [3398, 218, 159], "score": "0.4767", "loss": "1.139", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\"); } setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:18:47.694271", "n_pass": [3402, 219, 160], "score": "0.9894", "loss": "0.0329", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} setRequestProperty(\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:18:53.186888", "n_pass": [3405, 221, 161], "score": "0.6136", "loss": "0.6103", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User0\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:18:58.658139", "n_pass": [3409, 223, 162], "score": "0.4411", "loss": "1.4096", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase6(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:19:01.422615", "n_pass": [3414, 224, 163], "score": "0.5786", "loss": "0.7802", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while (true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:19:45.214242", "n_pass": [3452, 240, 164], "score": "0.5396", "loss": "0.6594", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) { (buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:19:50.713359", "n_pass": [3458, 242, 165], "score": "0.7844", "loss": "0.4141", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if (0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:19:56.212458", "n_pass": [3465, 244, 166], "score": "0.9754", "loss": "0.159", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} write(n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:20:04.414511", "n_pass": [3473, 247, 167], "score": "0.393", "loss": "1.5686", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); } flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:20:09.896858", "n_pass": [3480, 249, 168], "score": "0.926", "loss": "0.1392", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(hconnCHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:20:15.387223", "n_pass": [3488, 251, 169], "score": "0.2898", "loss": "2.58", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first = true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:20:24.344320", "n_pass": [3495, 254, 170], "score": "0.9529", "loss": "0.1527", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first= true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:20:27.080270", "n_pass": [3497, 255, 171], "score": "0.9324", "loss": "0.0958", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true) {  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:20:35.281288", "n_pass": [3506, 258, 172], "score": "0.5743", "loss": "0.613", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0) {} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:20:46.232507", "n_pass": [3515, 262, 173], "score": "0.9565", "loss": "0.1439", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if (( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:20:51.723975", "n_pass": [3520, 264, 174], "score": "0.7559", "loss": "0.4232", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(( '\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:20:54.459066", "n_pass": [3523, 265, 175], "score": "0.978", "loss": "0.0785", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('\\r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:20:57.205055", "n_pass": [3525, 266, 176], "score": "0.5632", "loss": "0.8913", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if (buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:21:05.788336", "n_pass": [3534, 269, 177], "score": "0.9121", "loss": "0.2074", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0); if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:21:24.976026", "n_pass": [3557, 276, 178], "score": "0.8562", "loss": "0.2884", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first) { if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:21:30.451115", "n_pass": [3563, 278, 179], "score": "0.8675", "loss": "0.2495", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){ if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:21:33.188835", "n_pass": [3565, 279, 180], "score": "0.6687", "loss": "0.7941", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput(); } } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:21:49.601974", "n_pass": [3585, 285, 181], "score": "0.7527", "loss": "1.6651", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} } {((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:21:55.051043", "n_pass": [3589, 287, 182], "score": "0.4753", "loss": "1.5687", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char) ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:21:57.793409", "n_pass": [3595, 288, 183], "score": "0.8196", "loss": "0.8612", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null && isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:22:16.973966", "n_pass": [3610, 295, 184], "score": "0.8541", "loss": "0.316", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null & isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:22:19.703501", "n_pass": [3611, 296, 185], "score": "0.7415", "loss": "0.3555", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError) { } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:22:22.444746", "n_pass": [3614, 297, 186], "score": "0.5374", "loss": "0.6904", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch (Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:22:33.342884", "n_pass": [3622, 301, 187], "score": "0.7706", "loss": "0.3142", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if (isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:22:41.571012", "n_pass": [3632, 304, 188], "score": "0.6892", "loss": "0.5175", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError) { (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:22:44.335871", "n_pass": [3636, 305, 189], "score": "0.6822", "loss": "0.6358", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); } }{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:22:52.534952", "n_pass": [3645, 308, 190], "score": "0.5288", "loss": "0.8716", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (readernull) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:22:58.038423", "n_pass": [3651, 310, 191], "score": "0.8146", "loss": "0.4274", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) { try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:23:03.538246", "n_pass": [3656, 312, 192], "score": "0.9241", "loss": "0.1348", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{} catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:23:06.285703", "n_pass": [3660, 313, 193], "score": "0.727", "loss": "0.3477", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch (IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:23:09.041593", "n_pass": [3662, 314, 194], "score": "0.9483", "loss": "0.0871", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){} } if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:23:11.803837", "n_pass": [3670, 315, 195], "score": "0.9436", "loss": "0.1137", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}} if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:23:14.548472", "n_pass": [3672, 316, 196], "score": "0.9854", "loss": "0.0528", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if ( null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:23:20.053192", "n_pass": [3676, 318, 197], "score": "0.7317", "loss": "0.6418", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) { try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:23:25.584138", "n_pass": [3681, 320, 198], "score": "0.6792", "loss": "0.6852", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try { close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:23:28.321596", "n_pass": [3683, 321, 199], "score": "0.8596", "loss": "0.3079", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch (IOException ioe){}} }}"}
{"time": "2021-01-20 15:23:33.789215", "n_pass": [3692, 323, 200], "score": "0.4657", "loss": "1.3788", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}} }}"}
{"time": "2021-01-20 15:23:36.560428", "n_pass": [3701, 324, 201], "score": "0.3542", "loss": "2.1866", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false); if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:23:42.959077", "n_pass": [3739, 326, 202], "score": "0.9172", "loss": "0.266", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if (istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:23:45.710871", "n_pass": [3741, 327, 203], "score": "0.929", "loss": "0.326", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) { setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:23:53.905123", "n_pass": [3750, 330, 204], "score": "0.8811", "loss": "0.1617", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");} (\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:24:10.301528", "n_pass": [3783, 336, 205], "score": "0.9434", "loss": "0.1314", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"User\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:24:13.042829", "n_pass": [3786, 337, 206], "score": "0.8355", "loss": "0.4422", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase(input(StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:24:15.796656", "n_pass": [3792, 338, 207], "score": "0.9084", "loss": "0.3033", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if (istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:24:21.292752", "n_pass": [3804, 340, 208], "score": "0.7824", "loss": "0.2902", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull) {(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:24:29.487444", "n_pass": [3809, 343, 209], "score": "0.5792", "loss": "1.729", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(14);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:24:32.226437", "n_pass": [3812, 344, 210], "score": "0.341", "loss": "2.6006", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  new byte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:24:40.443379", "n_pass": [3819, 347, 211], "score": "0.5118", "loss": "1.9059", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[14]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:24:43.176698", "n_pass": [3822, 348, 212], "score": "0.8959", "loss": "0.4243", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true) {(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:24:48.672425", "n_pass": [3831, 350, 213], "score": "0.7361", "loss": "0.5287", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0) {} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:24:54.141210", "n_pass": [3842, 352, 214], "score": "0.4651", "loss": "0.9323", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true; while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:25:13.665899", "n_pass": [3868, 359, 215], "score": "0.7911", "loss": "0.9077", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){  if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:25:19.148271", "n_pass": [3875, 361, 216], "score": "0.9914", "loss": "0.0183", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){ if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:25:21.874394", "n_pass": [3876, 362, 217], "score": "0.9179", "loss": "0.259", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if (0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:25:24.610488", "n_pass": [3878, 363, 218], "score": "0.9811", "loss": "0.0613", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){} if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:25:27.379163", "n_pass": [3884, 364, 219], "score": "0.8978", "loss": "0.2288", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')) { if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:25:30.498964", "n_pass": [3893, 365, 220], "score": "0.9647", "loss": "0.1184", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff > 0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:25:38.658644", "n_pass": [3901, 368, 221], "score": "0.5741", "loss": "0.609", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) { line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:25:44.137739", "n_pass": [3906, 370, 222], "score": "0.9654", "loss": "0.0961", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line = toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:25:49.590537", "n_pass": [3910, 372, 223], "score": "0.9749", "loss": "0.0653", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"-\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:25:57.840081", "n_pass": [3930, 375, 224], "score": "0.9463", "loss": "0.196", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")) { }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:26:00.581627", "n_pass": [3934, 376, 225], "score": "0.5056", "loss": "1.6295", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); } } if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:26:14.303437", "n_pass": [3957, 381, 226], "score": "0.6612", "loss": "1.8971", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null &isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:26:22.512553", "n_pass": [3964, 384, 227], "score": "0.7537", "loss": "1.6289", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){ } } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:26:27.979538", "n_pass": [3969, 386, 228], "score": "0.9631", "loss": "0.1573", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} } catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:26:33.429203", "n_pass": [3973, 388, 229], "score": "0.6498", "loss": "0.8957", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e) { if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:26:36.174555", "n_pass": [3980, 389, 230], "score": "0.6163", "loss": "0.7703", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if (null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:26:52.613861", "n_pass": [4017, 395, 231], "score": "0.8032", "loss": "0.342", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null) {try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:26:55.349046", "n_pass": [4021, 396, 232], "score": "0.913", "loss": "0.2704", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{ close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:26:58.107976", "n_pass": [4025, 397, 233], "score": "0.9779", "loss": "0.1232", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{ try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:27:01.821580", "n_pass": [4066, 398, 234], "score": "0.9674", "loss": "0.0908", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null) {setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:27:07.307143", "n_pass": [4084, 400, 235], "score": "0.3869", "loss": "2.3958", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput(); if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:27:10.045042", "n_pass": [4090, 401, 236], "score": "0.5295", "loss": "1.8122", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength) {(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:27:12.794157", "n_pass": [4095, 402, 237], "score": "0.699", "loss": "0.5675", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets)); setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:27:23.748600", "n_pass": [4130, 406, 238], "score": "0.9823", "loss": "0.0347", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4]; while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:27:37.422898", "n_pass": [4153, 411, 239], "score": "0.5727", "loss": "2.9813", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){} (n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:27:42.898414", "n_pass": [4170, 413, 240], "score": "0.6098", "loss": "2.8683", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET);  first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:27:51.580107", "n_pass": [4187, 416, 241], "score": "0.4653", "loss": "2.0126", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first=true;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:27:57.039010", "n_pass": [4190, 418, 242], "score": "0.9831", "loss": "0.0615", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); firsttrue;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:27:59.767376", "n_pass": [4191, 419, 243], "score": "0.9431", "loss": "0.1736", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){ if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:05.650533", "n_pass": [4214, 421, 244], "score": "0.6754", "loss": "0.6908", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0) {line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:11.138471", "n_pass": [4222, 423, 245], "score": "0.608", "loss": "2.0745", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if (first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:16.618911", "n_pass": [4236, 425, 246], "score": "0.8907", "loss": "0.2983", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if ((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:19.367106", "n_pass": [4242, 426, 247], "score": "0.9712", "loss": "0.1043", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){ }} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:22.137202", "n_pass": [4250, 427, 248], "score": "0.913", "loss": "0.3467", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}} handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:24.884660", "n_pass": [4253, 428, 249], "score": "0.8937", "loss": "0.4331", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();} }{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:27.628309", "n_pass": [4259, 429, 250], "score": "0.5076", "loss": "1.7022", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch); }} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:30.383391", "n_pass": [4269, 430, 251], "score": "0.534", "loss": "3.6196", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if (null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:35.837422", "n_pass": [4274, 432, 252], "score": "0.9496", "loss": "0.1912", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null&isFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:38.568219", "n_pass": [4277, 433, 253], "score": "0.412", "loss": "2.1513", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(nullisFailOnError){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:41.291272", "n_pass": [4278, 434, 254], "score": "0.9475", "loss": "0.1136", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){} }catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:44.046982", "n_pass": [4282, 435, 255], "score": "0.967", "loss": "0.0894", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){ (e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:49.569214", "n_pass": [4297, 437, 256], "score": "0.8893", "loss": "0.4374", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e); }}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:52.319192", "n_pass": [4302, 438, 257], "score": "0.8129", "loss": "0.4905", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if (null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:55.055080", "n_pass": [4307, 439, 258], "score": "0.9759", "loss": "0.111", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null) {try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:28:57.808731", "n_pass": [4311, 440, 259], "score": "0.9449", "loss": "0.2003", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream =null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:01.613137", "n_pass": [4385, 441, 260], "score": "0.9667", "loss": "0.124", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream=null){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:04.337595", "n_pass": [4386, 442, 261], "score": "0.9783", "loss": "0.0896", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istreamnull){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:07.081333", "n_pass": [4387, 443, 262], "score": "0.3198", "loss": "2.2846", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");} }{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:09.838457", "n_pass": [4405, 444, 263], "score": "0.9843", "loss": "0.032", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{ (false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:12.567807", "n_pass": [4408, 445, 264], "score": "0.9786", "loss": "0.0963", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(istreamnull){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:18.115763", "n_pass": [4438, 447, 265], "score": "0.9956", "loss": "0.0105", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);  newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:21.184276", "n_pass": [4446, 448, 266], "score": "0.9739", "loss": "0.0666", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4); newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:23.908822", "n_pass": [4447, 449, 267], "score": "0.6046", "loss": "1.0395", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer); if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:26.703827", "n_pass": [4463, 450, 268], "score": "0.2812", "loss": "1.9115", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n); }flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:29.456039", "n_pass": [4474, 451, 269], "score": "0.991", "loss": "0.0192", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush(); }(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:32.219159", "n_pass": [4480, 452, 270], "score": "0.9511", "loss": "0.0796", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET); first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:35.405074", "n_pass": [4486, 453, 271], "score": "0.873", "loss": "0.3749", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);first;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:38.123188", "n_pass": [4487, 454, 272], "score": "0.9889", "loss": "0.037", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);;while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:40.850101", "n_pass": [4488, 455, 273], "score": "0.5595", "loss": "1.0376", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while (true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:43.601266", "n_pass": [4490, 456, 274], "score": "0.9403", "loss": "0.1387", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while(true){if(0){}if(('r')){if(buff >0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:46.775757", "n_pass": [4513, 457, 275], "score": "0.9938", "loss": "0.0151", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while(true){if(0){}if(('r')){if(buff>0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:49.498783", "n_pass": [4514, 458, 276], "score": "0.9663", "loss": "0.1448", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while(true){if(0){}if(('r')){if(buff0){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:52.215307", "n_pass": [4515, 459, 277], "score": "0.9722", "loss": "0.1085", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while(true){if(0){}if(('r')){if(buff){line =toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:54.959631", "n_pass": [4519, 460, 278], "score": "0.8696", "loss": "0.295", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while(true){if(0){}if(('r')){if(buff){line=toString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:29:57.678576", "n_pass": [4520, 461, 279], "score": "0.9715", "loss": "0.1317", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while(true){if(0){}if(('r')){if(buff){linetoString();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:30:00.426552", "n_pass": [4521, 462, 280], "score": "0.9814", "loss": "0.0513", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while(true){if(0){}if(('r')){if(buff){line();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}} if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:30:03.264298", "n_pass": [4560, 463, 281], "score": "0.9824", "loss": "0.0616", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while(true){if(0){}if(('r')){if(buff){line();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}}if(null){}}catch(Exception e){ if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:30:06.034658", "n_pass": [4575, 464, 282], "score": "0.9686", "loss": "0.115", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false); (\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while(true){if(0){}if(('r')){if(buff){line();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}}if(null){}}catch(Exception e){if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}
{"time": "2021-01-20 15:30:09.915129", "n_pass": [4688, 465, 283], "score": "0.9952", "loss": "0.0094", "code": "void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){(\"\");}}{(false);(\"\");}(\"\").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while(true){if(0){}if(('r')){if(buff){line();(0);if(first){if((\"\")){}}handleOutput();}}{((char)ch);}}if(null){}}catch(Exception e){if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}"}

Minimal simplified code:
void execute(String command,InputStream istream,String contentType,int contentLength)throws BuildException{try{(false);(false);if(istream){setDoOutput();if(contentLength){("");}}{(false);("");}("").encodeBase((StandardCharsets));setRequestProperty();if(null){(4);newbyte[4];while(true){(buffer);if(0){}(n);}flush();}(CHARSET);while(true){if(0){}if(('r')){if(buff){line();(0);if(first){if(("")){}}handleOutput();}}{((char)ch);}}if(null){}}catch(Exception e){if(isFailOnError){(e);}}{if(null){try{}catch(IOException ioe){}}if(null){try{close();}catch(IOException ioe){}}}}

