
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/chunker/src/main/java/edu/illinois/cs/cogcomp/chunker/realign/TranslatePOSTagging_main.java
method_name = main
method_body = public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println("Pass in the directory containing both the chunker data and the pos data."); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir = new File(directory, "chunker"); File posTrainDir = new File(directory, "pos"); File outputTrainDir = new File(directory, "revised"); if (chunkerTrainDir.exists() == false) { System.err.println("There is not directory named \"" + chunkerTrainDir.toString() + "\"."); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println("There is no directory named \"" + posTrainDir.toString() + "\"."); System.exit(1); } if (outputTrainDir.exists() == true) { System.out.println("Output directory already exists \"" + outputTrainDir.toString() + "\", destroying"); final File[] files = outputTrainDir.listFiles(); for (File f : files) f.delete(); outputTrainDir.delete(); } outputTrainDir.mkdir(); System.out.println("Created " + outputTrainDir.toString()); String resultspath = outputTrainDir.toString() + File.separator; File[] chunkerfiles = chunkerTrainDir.listFiles(); File[] posFiles = posTrainDir.listFiles(); for (int i = 0; i < chunkerfiles.length; i++) { File chunkfile = chunkerfiles[i]; File posfile = posFiles[i]; if (!chunkfile.getName().equals(posfile.getName())) { System.err.println("Files names were not equal!"); System.exit(1); } try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int line = 0; int diff = 0; StringBuffer result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println("Hell fire."); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException("Sentences differed : \n" + before + "\n" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\n'); } line++; } System.out.println("Of " + line + ", " + diff + " changed."); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }
predict, score, loss = main, 0.9997010827064514, 0.0007297713309526443

Trace of simplified code(s):
{"time": "2021-01-21 05:46:59.398660", "n_pass": [1, 1, 1], "score": "0.9657", "loss": "0.0362", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir = new File(directory, \"chunker\"); File posTrainDir = new File(directory, \"pos\"); File outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1); } if (outputTrainDir.exists() == true) { System.out.println(\"Output directory already exists \\\"\" + outputTrainDir.toString() + \"\\\", destroying\"); final File[] files = outputTrainDir.listFiles(); for (File f : files) f.delete(); outputTrainDir.delete(); } outputTrainDir.mkdir(); System.out.println(\"Created \" + outputTrainDir.toString()); String resultspath = outputTrainDir.toString() + File.separator; File[] chunkerfiles = chunkerTrainDir.listFiles(); File[] posFiles = posTrainDir.listFiles(); for (int i = 0; i < chunkerfiles.length; i++) { File chunkfile = chunkerfiles[i]; File posfile = posFiles[i]; if (!chunkfile.getName().equals(posfile.getName())) { System.err.println(\"Files names were not equal!\"); System.exit(1); } try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int line = 0; int diff = 0; StringBuffer result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:02.312725", "n_pass": [9, 2, 2], "score": "0.8957", "loss": "0.1128", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir = new File(directory, \"chunker\"); File posTrainDir = new File(directory, \"pos\"); File outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int line = 0; int diff = 0; StringBuffer result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:05.426268", "n_pass": [91, 3, 3], "score": "0.9741", "loss": "0.0423", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int line = 0; int diff = 0; StringBuffer result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:11.417139", "n_pass": [181, 5, 4], "score": "0.6909", "loss": "0.4778", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:17.237361", "n_pass": [198, 7, 5], "score": "0.9863", "loss": "0.0527", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:20.196837", "n_pass": [203, 8, 6], "score": "0.9964", "loss": "0.0087", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:23.032026", "n_pass": [205, 9, 7], "score": "0.9991", "loss": "0.0038", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File  =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:25.948661", "n_pass": [224, 10, 8], "score": "0.672", "loss": "0.7841", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File  =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:28.831965", "n_pass": [230, 11, 9], "score": "0.9632", "loss": "0.0554", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File  =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:34.905188", "n_pass": [354, 13, 10], "score": "0.9332", "loss": "0.3307", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File  =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:37.739548", "n_pass": [357, 14, 11], "score": "0.996", "loss": "0.0048", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File  =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:40.651289", "n_pass": [362, 15, 12], "score": "0.7215", "loss": "0.7323", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File  =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:43.461857", "n_pass": [363, 16, 13], "score": "0.7672", "loss": "0.5202", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File  =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:46.304740", "n_pass": [365, 17, 14], "score": "0.9948", "loss": "0.0068", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File  =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:49.152867", "n_pass": [372, 18, 15], "score": "0.9466", "loss": "0.0849", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File  =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:51.958219", "n_pass": [375, 19, 16], "score": "0.9133", "loss": "0.3004", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File  =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:54.801933", "n_pass": [385, 20, 17], "score": "0.9966", "loss": "0.0072", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:47:57.687539", "n_pass": [412, 21, 18], "score": "0.5616", "loss": "0.8284", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:00.654059", "n_pass": [431, 22, 19], "score": "0.974", "loss": "0.0646", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:06.745330", "n_pass": [645, 24, 20], "score": "0.9469", "loss": "0.0623", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:09.561302", "n_pass": [650, 25, 21], "score": "0.4998", "loss": "0.764", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:12.444127", "n_pass": [652, 26, 22], "score": "0.9244", "loss": "0.9765", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:15.291251", "n_pass": [660, 27, 23], "score": "0.9602", "loss": "0.0471", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:26.553055", "n_pass": [678, 31, 24], "score": "0.9693", "loss": "0.0426", "code": "void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:29.393276", "n_pass": [685, 32, 25], "score": "0.8079", "loss": "0.8014", "code": "void main(String[] args) throws IOException { if (args.length ) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:32.195541", "n_pass": [687, 33, 26], "score": "0.99", "loss": "0.0113", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:34.993228", "n_pass": [689, 34, 27], "score": "0.9806", "loss": "0.1329", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:37.785882", "n_pass": [690, 35, 28], "score": "0.9989", "loss": "0.0341", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:40.649731", "n_pass": [699, 36, 29], "score": "0.9885", "loss": "0.0321", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:43.469932", "n_pass": [702, 37, 30], "score": "0.9864", "loss": "0.018", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:46.305549", "n_pass": [704, 38, 31], "score": "0.9933", "loss": "0.0092", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:49.145490", "n_pass": [705, 39, 32], "score": "0.845", "loss": "0.4789", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:52.012226", "n_pass": [715, 40, 33], "score": "0.9992", "loss": "0.0062", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:54.791013", "n_pass": [716, 41, 34], "score": "0.7573", "loss": "0.3951", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:48:57.605845", "n_pass": [720, 42, 35], "score": "0.9093", "loss": "0.2358", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:49:03.177420", "n_pass": [722, 44, 36], "score": "0.9696", "loss": "0.0369", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory \" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:49:06.196053", "n_pass": [750, 45, 37], "score": "0.938", "loss": "0.1027", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory \" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:49:08.996630", "n_pass": [756, 46, 38], "score": "0.9605", "loss": "0.8965", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory \" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); Stringct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:49:17.404701", "n_pass": [771, 49, 39], "score": "0.9336", "loss": "0.1616", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory \" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); Stringct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:49:20.303636", "n_pass": [798, 50, 40], "score": "0.9565", "loss": "0.1043", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory \" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); Stringct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:49:23.111926", "n_pass": [806, 51, 41], "score": "0.4845", "loss": "0.7722", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory \" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); Stringct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-21 05:49:25.963808", "n_pass": [812, 52, 42], "score": "0.9679", "loss": "0.7795", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory \" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); Stringct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-21 05:49:31.726630", "n_pass": [878, 54, 43], "score": "0.6601", "loss": "0.4468", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory \" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-21 05:49:34.540573", "n_pass": [889, 55, 44], "score": "0.8077", "loss": "0.5949", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory \" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-21 05:49:37.483298", "n_pass": [929, 56, 45], "score": "0.8656", "loss": "0.2028", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory \" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:49:43.487624", "n_pass": [1004, 58, 46], "score": "0.984", "loss": "0.1", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory \" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:49:46.510160", "n_pass": [1076, 59, 47], "score": "0.9619", "loss": "0.0517", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:49:53.078662", "n_pass": [1415, 60, 48], "score": "0.6331", "loss": "0.5679", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:49:55.868600", "n_pass": [1418, 61, 49], "score": "0.9981", "loss": "0.0025", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:01.458305", "n_pass": [1430, 63, 50], "score": "0.9829", "loss": "0.1495", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:04.247357", "n_pass": [1432, 64, 51], "score": "0.8187", "loss": "0.5119", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:07.208028", "n_pass": [1442, 65, 52], "score": "0.8099", "loss": "0.2992", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:12.798585", "n_pass": [1449, 67, 53], "score": "0.4952", "loss": "1.0388", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:15.600189", "n_pass": [1458, 68, 54], "score": "0.985", "loss": "0.0313", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:18.393465", "n_pass": [1461, 69, 55], "score": "0.6775", "loss": "0.9437", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:21.230963", "n_pass": [1468, 70, 56], "score": "0.5448", "loss": "1.4101", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:29.558653", "n_pass": [1481, 73, 57], "score": "0.9414", "loss": "0.4962", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:43.455083", "n_pass": [1506, 78, 58], "score": "0.5015", "loss": "0.9651", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:46.272135", "n_pass": [1516, 79, 59], "score": "0.9247", "loss": "0.0899", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:49.072462", "n_pass": [1520, 80, 60], "score": "0.9525", "loss": "0.0909", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:51.878963", "n_pass": [1528, 81, 61], "score": "0.9613", "loss": "0.1168", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:50:54.659545", "n_pass": [1529, 82, 62], "score": "0.945", "loss": "0.0921", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:00.234170", "n_pass": [1533, 84, 63], "score": "0.6748", "loss": "1.083", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:05.778331", "n_pass": [1542, 86, 64], "score": "0.9733", "loss": "0.0363", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:11.437504", "n_pass": [1555, 88, 65], "score": "0.9971", "loss": "0.004", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:14.228434", "n_pass": [1559, 89, 66], "score": "0.9987", "loss": "0.0017", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:17.012338", "n_pass": [1568, 90, 67], "score": "0.7862", "loss": "0.4087", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" +diff + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:19.768945", "n_pass": [1569, 91, 68], "score": "0.9037", "loss": "0.1934", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:25.734874", "n_pass": [1592, 93, 69], "score": "0.9796", "loss": "0.028", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:28.514591", "n_pass": [1605, 94, 70], "score": "0.8886", "loss": "0.4031", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDir= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:31.261885", "n_pass": [1606, 95, 71], "score": "0.3932", "loss": "1.9955", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:34.020387", "n_pass": [1609, 96, 72], "score": "0.4719", "loss": "0.9175", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:36.770125", "n_pass": [1611, 97, 73], "score": "0.6432", "loss": "0.9683", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:39.524284", "n_pass": [1612, 98, 74], "score": "0.4564", "loss": "1.0743", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:42.306488", "n_pass": [1615, 99, 75], "score": "0.9468", "loss": "0.1114", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:45.060371", "n_pass": [1619, 100, 76], "score": "0.9951", "loss": "0.0111", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:47.832838", "n_pass": [1623, 101, 77], "score": "0.901", "loss": "0.428", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:50.613217", "n_pass": [1633, 102, 78], "score": "0.5661", "loss": "0.7415", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System.println(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:53.382546", "n_pass": [1634, 103, 79], "score": "0.6059", "loss": "0.7168", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:51:56.156427", "n_pass": [1644, 104, 80], "score": "0.7566", "loss": "0.4436", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = new ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:52:01.822660", "n_pass": [1688, 106, 81], "score": "0.9679", "loss": "0.0374", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = ChunkTree(cl); String; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:52:07.341296", "n_pass": [1692, 108, 82], "score": "0.5593", "loss": "1.9197", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = ChunkTree(cl);; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:52:12.871599", "n_pass": [1700, 110, 83], "score": "0.7522", "loss": "0.4278", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = ChunkTree(cl);; if (!containsKey(ctsent)) { put(ctsent, ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:52:15.644963", "n_pass": [1702, 111, 84], "score": "0.9386", "loss": "0.1117", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = ChunkTree(cl);; if (!containsKey(ctsent)) { put( ct); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:52:18.388377", "n_pass": [1703, 112, 85], "score": "0.9337", "loss": "0.5288", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = ChunkTree(cl);; if (!containsKey(ctsent)) { put(); } if (pl != null) { ChunkTree pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:52:21.163769", "n_pass": [1713, 113, 86], "score": "0.4018", "loss": "1.8607", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = ChunkTree(cl);; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt; } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:52:23.918479", "n_pass": [1714, 114, 87], "score": "0.9111", "loss": "0.2242", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = ChunkTree(cl);; if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }  StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:52:26.680435", "n_pass": [1719, 115, 88], "score": "0.649", "loss": "0.6651", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = ChunkTree(cl);; if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell fire.\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:52:32.241132", "n_pass": [1740, 117, 89], "score": "0.866", "loss": "0.3819", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct = ChunkTree(cl);; if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:52:49.685144", "n_pass": [1879, 123, 90], "score": "0.7202", "loss": "0.5988", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct =(cl);; if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) { chunktree = chunkedSentences(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:52:55.316589", "n_pass": [1914, 125, 91], "score": "0.7399", "loss": "0.3506", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct =(cl);; if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) { chunktree =(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:53:04.125801", "n_pass": [1969, 128, 92], "score": "0.7122", "loss": "1.0206", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct =(cl);; if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) { chunktree =(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:53:06.942629", "n_pass": [2008, 129, 93], "score": "0.9834", "loss": "0.0263", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct =(cl);; if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) { chunktree =(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:53:15.262986", "n_pass": [2063, 132, 94], "score": "0.7948", "loss": "0.4027", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct =(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) { chunktree =(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:53:18.106900", "n_pass": [2094, 133, 95], "score": "0.5424", "loss": "0.9311", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct =(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) { chunktree(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (!beforet.equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:53:23.628773", "n_pass": [2116, 135, 96], "score": "0.8666", "loss": "0.2515", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct =(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) { chunktree(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:53:30.056669", "n_pass": [2238, 137, 97], "score": "0.4161", "loss": "1.1485", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) { chunktree(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:53:32.904249", "n_pass": [2270, 138, 98], "score": "0.4263", "loss": "1.0284", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:53:39.110344", "n_pass": [2389, 140, 99], "score": "0.8242", "loss": "0.2589", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:54:30.502467", "n_pass": [2908, 144, 100], "score": "0.4941", "loss": "1.434", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())) { pl = null; while (true) { cl = readLine(); if ( null)  pl = ct(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:54:33.265339", "n_pass": [2911, 145, 101], "score": "0.5355", "loss": "1.4766", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while (true) { cl = readLine(); if ( null)  pl = ct(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:54:46.966535", "n_pass": [2922, 150, 102], "score": "0.5955", "loss": "0.7444", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true) { cl = readLine(); if ( null)  pl = ct(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:54:49.701200", "n_pass": [2926, 151, 103], "score": "0.7411", "loss": "0.4565", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl = readLine(); if ( null)  pl = ct(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:54:55.145468", "n_pass": [2930, 153, 104], "score": "0.5093", "loss": "0.8635", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl = ct(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:55:14.202260", "n_pass": [2947, 160, 105], "score": "0.5857", "loss": "0.7276", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= ct(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:55:19.682676", "n_pass": [2950, 162, 106], "score": "0.5728", "loss": "0.6573", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if (!containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:55:25.161991", "n_pass": [2958, 164, 107], "score": "0.6868", "loss": "0.5177", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if (containsKey(ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:55:27.890665", "n_pass": [2959, 165, 108], "score": "0.683", "loss": "1.1227", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl != null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:55:47.026908", "n_pass": [2979, 172, 109], "score": "0.7527", "loss": "0.4326", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl = null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:55:49.763329", "n_pass": [2981, 173, 110], "score": "0.6729", "loss": "0.469", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) {  } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:55:57.966876", "n_pass": [2987, 176, 111], "score": "0.3779", "loss": "1.7418", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer(); for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:56:08.893686", "n_pass": [2999, 180, 112], "score": "0.931", "loss": "0.0887", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree : posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:56:14.364352", "n_pass": [3006, 182, 113], "score": "0.3949", "loss": "1.1511", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if (chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:56:28.106427", "n_pass": [3023, 187, 114], "score": "0.266", "loss": "1.7814", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null) {(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:56:41.832113", "n_pass": [3032, 192, 115], "score": "0.3735", "loss": "2.1948", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");merge(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:56:47.318279", "n_pass": [3040, 194, 116], "score": "0.5276", "loss": "0.768", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\\n\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:57:06.508913", "n_pass": [3058, 201, 117], "score": "0.9408", "loss": "0.2715", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence()); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:57:09.245819", "n_pass": [3061, 202, 118], "score": "0.8526", "loss": "0.1719", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:57:14.767785", "n_pass": [3077, 204, 119], "score": "0.6079", "loss": "0.6436", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:57:35.123364", "n_pass": [3120, 211, 120], "score": "0.8965", "loss": "0.1776", "code": "void main(String[] args) throws IOException { if (length) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:57:43.299758", "n_pass": [3125, 214, 121], "score": "0.9504", "loss": "0.0557", "code": "void main(String[] args) throws IOException { if (length) { (\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:57:46.040397", "n_pass": [3128, 215, 122], "score": "0.9899", "loss": "0.0127", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:57:56.914304", "n_pass": [3138, 219, 123], "score": "0.4799", "loss": "1.5887", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:58:05.341253", "n_pass": [3146, 222, 124], "score": "0.7636", "loss": "0.3213", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:58:10.811365", "n_pass": [3152, 224, 125], "score": "0.7288", "loss": "0.3969", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:58:16.283350", "n_pass": [3156, 226, 126], "score": "0.9219", "loss": "0.092", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:58:43.556426", "n_pass": [3184, 236, 127], "score": "0.6758", "loss": "0.4564", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);} if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:58:46.303723", "n_pass": [3186, 237, 128], "score": "0.6326", "loss": "0.6453", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:58:49.034942", "n_pass": [3188, 238, 129], "score": "0.7599", "loss": "0.9271", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:58:54.482113", "n_pass": [3191, 240, 130], "score": "0.8834", "loss": "0.1304", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:58:59.952593", "n_pass": [3198, 242, 131], "score": "0.9563", "loss": "0.1085", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 05:59:49.108651", "n_pass": [3246, 260, 132], "score": "0.9505", "loss": "0.0625", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)) { put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 06:00:32.817099", "n_pass": [3299, 276, 133], "score": "0.8238", "loss": "0.2588", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){ put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 06:00:35.556951", "n_pass": [3301, 277, 134], "score": "0.4835", "loss": "0.9397", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put(); } if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 06:00:38.321924", "n_pass": [3306, 278, 135], "score": "0.5603", "loss": "0.7742", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();} if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 06:00:41.085444", "n_pass": [3308, 279, 136], "score": "0.5454", "loss": "0.7792", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } } } }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 06:00:57.489617", "n_pass": [3323, 285, 137], "score": "0.4101", "loss": "0.9878", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence()); if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 06:01:13.937007", "n_pass": [3351, 291, 138], "score": "0.9744", "loss": "0.0387", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree == null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 06:01:16.675389", "n_pass": [3355, 292, 139], "score": "0.6892", "loss": "0.4824", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"Hell\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 06:01:27.578866", "n_pass": [3364, 296, 140], "score": "0.567", "loss": "0.7377", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if (!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 06:01:33.057367", "n_pass": [3374, 298, 141], "score": "0.9912", "loss": "0.0127", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(!chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 06:01:35.787665", "n_pass": [3376, 299, 142], "score": "0.4148", "loss": "1.4423", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-21 06:01:52.678768", "n_pass": [3418, 305, 143], "score": "0.4876", "loss": "0.8966", "code": "void main(String[] args) throws IOException { if (length) { (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:02:09.954107", "n_pass": [3445, 311, 144], "score": "0.8041", "loss": "0.2792", "code": "void main(String[] args) throws IOException { if (length){ (\"\"); exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:02:15.400690", "n_pass": [3453, 313, 145], "score": "0.7921", "loss": "0.2737", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir) {(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:02:59.010238", "n_pass": [3506, 329, 146], "score": "0.4787", "loss": "1.9207", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:03:01.770110", "n_pass": [3512, 330, 147], "score": "0.7208", "loss": "0.4788", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:03:15.436669", "n_pass": [3525, 335, 148], "score": "0.6702", "loss": "0.4678", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:03:23.659785", "n_pass": [3538, 338, 149], "score": "0.8848", "loss": "0.1692", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){ pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:03:48.224484", "n_pass": [3566, 347, 150], "score": "0.5956", "loss": "0.657", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null; while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:03:56.408421", "n_pass": [3573, 350, 151], "score": "0.9067", "loss": "0.1019", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){ cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:03:59.143636", "n_pass": [3579, 351, 152], "score": "0.7851", "loss": "0.2761", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){cl= readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:04:01.878263", "n_pass": [3582, 352, 153], "score": "0.9375", "loss": "0.0707", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){cl=readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl =null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:04:29.168036", "n_pass": [3620, 362, 154], "score": "0.8285", "loss": "0.2536", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){cl=readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl=null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) { (\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:05:10.206030", "n_pass": [3682, 377, 155], "score": "0.3073", "loss": "1.4504", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){cl=readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl=null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences differed\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:05:12.928268", "n_pass": [3685, 378, 156], "score": "0.4108", "loss": "1.1264", "code": "void main(String[] args) throws IOException { if (length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){cl=readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl=null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:05:33.310718", "n_pass": [3741, 385, 157], "score": "0.8187", "loss": "0.271", "code": "void main(String[] args) throws IOException { if(length){ (\"\");exit(1);} File (directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){cl=readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl=null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:05:46.986419", "n_pass": [3760, 390, 158], "score": "0.3596", "loss": "1.3019", "code": "void main(String[] args) throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\" + toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){cl=readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl=null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:05:57.968509", "n_pass": [3779, 394, 159], "score": "0.7357", "loss": "0.3875", "code": "void main(String[] args) throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+ toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){cl=readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl=null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:06:00.691872", "n_pass": [3781, 395, 160], "score": "0.521", "loss": "0.8282", "code": "void main(String[] args) throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){cl=readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl=null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:06:36.402519", "n_pass": [3833, 408, 161], "score": "0.2873", "loss": "2.5896", "code": "void main(String[] args) throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){cl=readLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl=null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:07:03.703578", "n_pass": [3872, 418, 162], "score": "0.9525", "loss": "0.0671", "code": "void main(String[] args) throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){clreadLine(); if ( null)  pl= (cl);if ((ctsent)){put();}if (pl=null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:07:17.330485", "n_pass": [3884, 423, 163], "score": "0.2548", "loss": "1.647", "code": "void main(String[] args) throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){clreadLine(); if ( null) pl= (cl);if ((ctsent)){put();}if (pl=null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:07:20.076891", "n_pass": [3885, 424, 164], "score": "0.9455", "loss": "0.0929", "code": "void main(String[] args) throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){clreadLine(); if ( null)pl= (cl);if ((ctsent)){put();}if (pl=null) { } }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:07:39.200377", "n_pass": [3915, 431, 165], "score": "0.845", "loss": "0.2004", "code": "void main(String[] args) throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){clreadLine(); if ( null)pl= (cl);if ((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree: posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:07:50.132377", "n_pass": [3933, 435, 166], "score": "0.7426", "loss": "0.365", "code": "void main(String[] args) throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){clreadLine(); if ( null)pl= (cl);if ((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree== null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:07:58.385882", "n_pass": [3949, 438, 167], "score": "0.7342", "loss": "0.3929", "code": "void main(String[] args) throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){clreadLine(); if ( null)pl= (cl);if ((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:08:18.799708", "n_pass": [4020, 445, 168], "score": "0.5708", "loss": "0.7353", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \".\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){clreadLine(); if ( null)pl= (cl);if ((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:08:51.561093", "n_pass": [4072, 457, 169], "score": "0.6882", "loss": "0.5057", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \"\"); exit(1);}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){clreadLine(); if ( null)pl= (cl);if ((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:08:59.720356", "n_pass": [4079, 460, 170], "score": "0.2859", "loss": "2.2501", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader(chunkfile))) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){clreadLine(); if ( null)pl= (cl);if ((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:09:21.521367", "n_pass": [4119, 468, 171], "score": "0.4179", "loss": "1.1162", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader())) { try (BufferedReader posreader =BufferedReader(FileReader())){pl = null;while(true){clreadLine(); if ( null)pl= (cl);if ((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:09:40.634599", "n_pass": [4145, 475, 172], "score": "0.3844", "loss": "1.215", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader())) { try (BufferedReader posreader =BufferedReader(FileReader())){pl =null;while(true){clreadLine(); if ( null)pl= (cl);if ((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:09:43.393952", "n_pass": [4153, 476, 173], "score": "0.3691", "loss": "1.1767", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader())) { try (BufferedReader posreader =BufferedReader(FileReader())){pl =null;while(true){readLine(); if ( null)pl= (cl);if ((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:09:51.590325", "n_pass": [4162, 479, 174], "score": "0.6017", "loss": "0.6235", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader())) { try (BufferedReader posreader =BufferedReader(FileReader())){pl =null;while(true){readLine(); if (null)pl= (cl);if ((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:09:54.337325", "n_pass": [4166, 480, 175], "score": "0.7054", "loss": "0.4909", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader())) { try (BufferedReader posreader =BufferedReader(FileReader())){pl =null;while(true){readLine(); if (null)pl (cl);if ((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:10:02.501627", "n_pass": [4173, 483, 176], "score": "0.4628", "loss": "1.0083", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader())) { try (BufferedReader posreader =BufferedReader(FileReader())){pl =null;while(true){readLine(); if (null)pl (cl);if((ctsent)){put();}if (pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:10:05.276319", "n_pass": [4186, 484, 177], "score": "0.6628", "loss": "0.5311", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader())) { try (BufferedReader posreader =BufferedReader(FileReader())){pl =null;while(true){readLine(); if (null)pl (cl);if((ctsent)){put();}if(pl=null) {} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:10:10.814255", "n_pass": [4192, 486, 178], "score": "0.723", "loss": "0.76", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if (false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader())) { try (BufferedReader posreader =BufferedReader(FileReader())){pl =null;while(true){readLine(); if (null)pl (cl);if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:11:04.034188", "n_pass": [4330, 505, 179], "score": "0.3748", "loss": "1.0687", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader =(FileReader())) { try (BufferedReader posreader =BufferedReader(FileReader())){pl =null;while(true){readLine(); if (null)pl (cl);if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:11:31.284107", "n_pass": [4387, 515, 180], "score": "0.7605", "loss": "0.3465", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader=(FileReader())) { try (BufferedReader posreader =BufferedReader(FileReader())){pl =null;while(true){readLine(); if (null)pl (cl);if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:11:42.242013", "n_pass": [4404, 519, 181], "score": "0.6956", "loss": "1.2389", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader=(FileReader())) { try (BufferedReader posreader=BufferedReader(FileReader())){pl =null;while(true){readLine(); if (null)pl (cl);if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:11:47.714969", "n_pass": [4415, 521, 182], "score": "0.3653", "loss": "1.3503", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader=(FileReader())) { try (BufferedReader posreader=BufferedReader(FileReader())){pl=null;while(true){readLine(); if (null)pl (cl);if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:12:01.352385", "n_pass": [4435, 526, 183], "score": "0.9566", "loss": "0.058", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader=(FileReader())) { try (BufferedReader posreader=BufferedReader(FileReader())){pl=null;while(true){readLine(); if (null)pl(cl);if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:12:04.085064", "n_pass": [4437, 527, 184], "score": "0.5229", "loss": "0.8093", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader=(FileReader())) { try (BufferedReader posreader=BufferedReader(FileReader())){pl=null;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" .sentence); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:12:31.508822", "n_pass": [4515, 537, 185], "score": "0.5155", "loss": "0.7491", "code": "void main(String[] args)throws IOException { if(length){ (\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader=(FileReader())) { try (BufferedReader posreader=BufferedReader(FileReader())){pl=null;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:12:46.423941", "n_pass": [4572, 542, 186], "score": "0.9168", "loss": "0.1108", "code": "void main(String[] args)throws IOException { if(length){(\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try (BufferedReader chunkreader=(FileReader())) { try (BufferedReader posreader=BufferedReader(FileReader())){pl=null;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:13:21.849367", "n_pass": [4646, 555, 187], "score": "0.8426", "loss": "0.2208", "code": "void main(String[] args)throws IOException { if(length){(\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) { try (BufferedReader posreader=BufferedReader(FileReader())){pl=null;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:13:27.333267", "n_pass": [4660, 557, 188], "score": "0.8514", "loss": "0.2589", "code": "void main(String[] args)throws IOException { if(length){(\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=BufferedReader(FileReader())){pl=null;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:13:35.527864", "n_pass": [4677, 560, 189], "score": "0.8333", "loss": "0.2476", "code": "void main(String[] args)throws IOException { if(length){(\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=BufferedReader(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:14:20.913469", "n_pass": [4824, 576, 190], "score": "0.2343", "loss": "1.793", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit(1);} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=BufferedReader(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:14:26.356873", "n_pass": [4837, 578, 191], "score": "0.9224", "loss": "0.1147", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=BufferedReader(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:15:01.837419", "n_pass": [4923, 591, 192], "score": "0.5023", "loss": "0.8228", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }} }StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:15:20.994631", "n_pass": [4976, 598, 193], "score": "0.343", "loss": "1.3595", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences) {(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:15:26.467240", "n_pass": [4991, 600, 194], "score": "0.588", "loss": "0.669", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree); if(chunktree) {(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:15:34.691514", "n_pass": [5018, 603, 195], "score": "0.5854", "loss": "0.6065", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree) {(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:15:37.421970", "n_pass": [5023, 604, 196], "score": "0.7433", "loss": "0.3873", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"revised\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:15:52.399283", "n_pass": [5099, 609, 197], "score": "0.3582", "loss": "1.671", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false) {(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:15:55.148547", "n_pass": [5107, 610, 198], "score": "0.8879", "loss": "0.2169", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString() + \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:15:57.899228", "n_pass": [5116, 611, 199], "score": "0.5989", "loss": "0.7667", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())) {try (BufferedReader posreader=(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:16:17.060625", "n_pass": [5166, 618, 200], "score": "0.7295", "loss": "0.4024", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())){try (BufferedReader posreader=(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:16:19.783790", "n_pass": [5169, 619, 201], "score": "0.2594", "loss": "2.361", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){plnull;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:16:25.249060", "n_pass": [5183, 621, 202], "score": "0.9373", "loss": "0.3362", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){pl;while(true){readLine(); if (null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:16:27.995405", "n_pass": [5194, 622, 203], "score": "0.5392", "loss": "0.9929", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){pl;while(true){readLine();if (null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:16:30.723734", "n_pass": [5196, 623, 204], "score": "0.2061", "loss": "2.3945", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){pl;while(true){readLine();if(null)pl();if((ctsent)){put();}if(pl=null){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:16:33.520837", "n_pass": [5219, 624, 205], "score": "0.7659", "loss": "0.5949", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){pl;while(true){readLine();if(null)pl();if((ctsent)){put();}if(plnull){} }}}StringBuffer();for (ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:16:41.757366", "n_pass": [5233, 627, 206], "score": "0.8634", "loss": "0.2106", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){pl;while(true){readLine();if(null)pl();if((ctsent)){put();}if(plnull){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postree.sentence());if(chunktree= null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:16:47.274631", "n_pass": [5254, 629, 207], "score": "0.6681", "loss": "0.7554", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){pl;while(true){readLine();if(null)pl();if((ctsent)){put();}if(plnull){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postree.sentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(chunktree.toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:16:50.101186", "n_pass": [5280, 630, 208], "score": "0.5621", "loss": "0.8612", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\"); exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){pl;while(true){readLine();if(null)pl();if((ctsent)){put();}if(plnull){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postree.sentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:05.073755", "n_pass": [5367, 635, 209], "score": "0.879", "loss": "0.3378", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString() + \".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){pl;while(true){readLine();if(null)pl();if((ctsent)){put();}if(plnull){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postree.sentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:07.829378", "n_pass": [5385, 636, 210], "score": "0.7528", "loss": "0.3791", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+ \".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){pl;while(true){readLine();if(null)pl();if((ctsent)){put();}if(plnull){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postree.sentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:10.556788", "n_pass": [5387, 637, 211], "score": "0.5581", "loss": "0.8569", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){pl;while(true){readLine();if(null)pl();if((ctsent)){put();}if(plnull){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postree.sentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:18.781646", "n_pass": [5424, 640, 212], "score": "0.6364", "loss": "0.8766", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){;while(true){readLine();if(null)pl();if((ctsent)){put();}if(plnull){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postree.sentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:21.521482", "n_pass": [5425, 641, 213], "score": "0.5573", "loss": "1.0946", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(plnull){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postree.sentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:24.323170", "n_pass": [5457, 642, 214], "score": "0.8736", "loss": "0.2371", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postree.sentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:29.817618", "n_pass": [5481, 644, 215], "score": "0.792", "loss": "0.6509", "code": "void main(String[] args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postreesentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:39.417698", "n_pass": [5552, 647, 216], "score": "0.8469", "loss": "0.3215", "code": "void main(String[]args)throws IOException {if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postreesentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:42.168130", "n_pass": [5558, 648, 217], "score": "0.8779", "loss": "0.2451", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\".\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postreesentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:50.446167", "n_pass": [5621, 651, 218], "score": "0.571", "loss": "0.8237", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\"); (1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postreesentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:53.158802", "n_pass": [5625, 652, 219], "score": "0.6998", "loss": "0.6514", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){} }}}StringBuffer();for(ChunkTree postree:posSentences){(postreesentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:56.052774", "n_pass": [5691, 653, 220], "score": "0.8728", "loss": "0.245", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(postreesentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:17:58.816364", "n_pass": [5709, 654, 221], "score": "0.4053", "loss": "1.4909", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree=null){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:18:01.592714", "n_pass": [5718, 655, 222], "score": "0.8653", "loss": "0.3437", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();} File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktreenull){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:18:08.435543", "n_pass": [5801, 657, 223], "score": "0.4886", "loss": "1.7002", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktreenull){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:18:16.966742", "n_pass": [5940, 660, 224], "score": "0.8", "loss": "0.5014", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if (equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:18:33.612468", "n_pass": [6232, 662, 225], "score": "0.5268", "loss": "0.9577", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if(equals(toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:18:36.331286", "n_pass": [6233, 663, 226], "score": "0.4099", "loss": "1.421", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())) { System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:18:39.073960", "n_pass": [6240, 664, 227], "score": "0.8606", "loss": "0.3891", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(chunktree);; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:18:47.221183", "n_pass": [6245, 667, 228], "score": "0.8779", "loss": "0.2154", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System();; } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:18:49.942448", "n_pass": [6247, 668, 229], "score": "0.8767", "loss": "0.2244", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(); } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:18:55.392923", "n_pass": [6251, 670, 230], "score": "0.67", "loss": "0.7285", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(); }(toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:18:58.147919", "n_pass": [6258, 671, 231], "score": "0.8571", "loss": "0.3217", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(); }(toString());('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:19:00.873491", "n_pass": [6261, 672, 232], "score": "0.4075", "loss": "1.189", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(); }(toString());('n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:19:03.993061", "n_pass": [6266, 673, 233], "score": "0.8049", "loss": "0.3464", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(); }(toString());('n');} line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:19:09.481210", "n_pass": [6273, 675, 234], "score": "0.5225", "loss": "1.0962", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(); }(toString());('n');} line++;} (\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:19:12.219109", "n_pass": [6275, 676, 235], "score": "0.501", "loss": "0.9566", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(); }(toString());('n');} line++;}(\"Of \" + \".\"); } }"}
{"time": "2021-01-21 06:19:17.641305", "n_pass": [6279, 678, 236], "score": "0.6919", "loss": "0.9203", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(); }(toString());('n');} line++;}(\"Of\" + \".\"); } }"}
{"time": "2021-01-21 06:19:20.376379", "n_pass": [6281, 679, 237], "score": "0.3392", "loss": "1.5275", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(); }(toString());('n');} line++;}(\"Of\"+ \".\"); } }"}
{"time": "2021-01-21 06:19:31.290801", "n_pass": [6291, 683, 238], "score": "0.7341", "loss": "0.7232", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+ \"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(); }(toString());('n');} line++;}(\"Of\"+ \".\"); }}"}
{"time": "2021-01-21 06:19:35.317030", "n_pass": [6342, 684, 239], "score": "0.6536", "loss": "0.8609", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\" ); } if((toString())){ System(); }(toString());('n');} line++;}(\"Of\"+ \".\"); }}"}
{"time": "2021-01-21 06:19:41.097990", "n_pass": [6479, 686, 240], "score": "0.6744", "loss": "0.8238", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\"); } if((toString())){ System(); }(toString());('n');} line++;}(\"Of\"+ \".\"); }}"}
{"time": "2021-01-21 06:19:43.839104", "n_pass": [6482, 687, 241], "score": "0.5423", "loss": "0.9239", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\");} if((toString())){ System(); }(toString());('n');} line++;}(\"Of\"+ \".\"); }}"}
{"time": "2021-01-21 06:19:52.031833", "n_pass": [6499, 690, 242], "score": "0.9199", "loss": "0.1878", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\");} if((toString())){ System();}(toString());('n');} line++;}(\"Of\"+ \".\"); }}"}
{"time": "2021-01-21 06:19:57.906354", "n_pass": [6522, 692, 243], "score": "0.748", "loss": "0.4578", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\");} if((toString())){ System();}(toString());('n');} line++;}(\"\"+ \".\"); }}"}
{"time": "2021-01-21 06:20:00.626845", "n_pass": [6525, 693, 244], "score": "0.921", "loss": "0.3686", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\");} if((toString())){ System();}(toString());('n');} line++;}(\"\"+\".\"); }}"}
{"time": "2021-01-21 06:20:03.343728", "n_pass": [6527, 694, 245], "score": "0.5036", "loss": "0.8717", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\");} if((toString())){ System();}(toString());('n');} line++;}(\"\"+\"\"); }}"}
{"time": "2021-01-21 06:20:06.072331", "n_pass": [6531, 695, 246], "score": "0.6554", "loss": "0.8722", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\");} if((toString())){ System();}(toString());('n');} line++;}(\"\"+\"\");}}"}
{"time": "2021-01-21 06:20:12.790740", "n_pass": [6722, 697, 247], "score": "0.851", "loss": "0.3006", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"Sentences\");}if((toString())){ System();}(toString());('n');} line++;}(\"\"+\"\");}}"}
{"time": "2021-01-21 06:20:22.671364", "n_pass": [6950, 700, 248], "score": "0.7738", "loss": "0.5339", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"\");}if((toString())){ System();}(toString());('n');} line++;}(\"\"+\"\");}}"}
{"time": "2021-01-21 06:20:25.441248", "n_pass": [6964, 701, 249], "score": "0.8145", "loss": "0.5258", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"\");}if((toString())){System();}(toString());('n');} line++;}(\"\"+\"\");}}"}
{"time": "2021-01-21 06:20:28.580547", "n_pass": [6983, 702, 250], "score": "0.9915", "loss": "0.0197", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit();}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit();}if(posTrainDir){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){(\"\");(postree);if(chunktree){(\"\");}if((toString())){System();}(toString());('n');}line++;}(\"\"+\"\");}}"}

Minimal simplified code:
void main(String[]args)throws IOException{if(length){("");exit();}File(directory,"");if(false){(""+toString()+"");exit();}if(posTrainDir){(""+toString()+"");(1);try(BufferedReader chunkreader=(FileReader())){try(BufferedReader posreader=(FileReader())){while(true){readLine();if(null)pl();if((ctsent)){put();}if(null){}}}}StringBuffer();for(ChunkTree postree:posSentences){(sentence());if(chunktree){("");(postree);if(chunktree){("");}if((toString())){System();}(toString());('n');}line++;}(""+"");}}

