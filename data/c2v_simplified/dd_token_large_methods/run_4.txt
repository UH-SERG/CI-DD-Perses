
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/SummerRC__BiLiBiLi/OneXListviewLibrary/src/com/huewu/pla/lib/internal/PLA_AbsListView_run.java
method_name = run
method_body = public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos = lastPos; if (lastPos < mTargetPos) { post(this); } break; } case MOVE_DOWN_BOUND: { final int nextViewIndex = 1; final int childCount = getChildCount(); if (firstPos == mBoundPos || childCount <= nextViewIndex || firstPos + childCount >= mItemCount) { return; } final int nextPos = firstPos + nextViewIndex; if (nextPos == mLastSeenPos) { post(this); return; } final View nextView = getChildAt(nextViewIndex); final int nextViewHeight = nextView.getHeight(); final int nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); mLastSeenPos = nextPos; post(this); } else { if (nextViewTop > extraScroll) { smoothScrollBy(nextViewTop - extraScroll, mScrollDuration); } } break; } case MOVE_UP_POS: { if (firstPos == mLastSeenPos) { post(this); return; } final View firstView = getChildAt(0); if (firstView == null) { return; } final int firstViewTop = firstView.getTop(); final int extraScroll = firstPos > 0 ? mExtraScroll : mListPadding.top; smoothScrollBy(firstViewTop - extraScroll, mScrollDuration); mLastSeenPos = firstPos; if (firstPos > mTargetPos) { post(this); } break; } case MOVE_UP_BOUND: { final int lastViewIndex = getChildCount() - 2; if (lastViewIndex < 0) { return; } final int lastPos = firstPos + lastViewIndex; if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; mLastSeenPos = lastPos; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }
predict, score, loss = run, 1.0, 0.0

Trace of simplified code(s):
{"time": "2021-01-20 21:56:25.147879", "n_pass": [1, 1, 1], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos = lastPos; if (lastPos < mTargetPos) { post(this); } break; } case MOVE_DOWN_BOUND: { final int nextViewIndex = 1; final int childCount = getChildCount(); if (firstPos == mBoundPos || childCount <= nextViewIndex || firstPos + childCount >= mItemCount) { return; } final int nextPos = firstPos + nextViewIndex; if (nextPos == mLastSeenPos) { post(this); return; } final View nextView = getChildAt(nextViewIndex); final int nextViewHeight = nextView.getHeight(); final int nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); mLastSeenPos = nextPos; post(this); } else { if (nextViewTop > extraScroll) { smoothScrollBy(nextViewTop - extraScroll, mScrollDuration); } } break; } case MOVE_UP_POS: { if (firstPos == mLastSeenPos) { post(this); return; } final View firstView = getChildAt(0); if (firstView == null) { return; } final int firstViewTop = firstView.getTop(); final int extraScroll = firstPos > 0 ? mExtraScroll : mListPadding.top; smoothScrollBy(firstViewTop - extraScroll, mScrollDuration); mLastSeenPos = firstPos; if (firstPos > mTargetPos) { post(this); } break; } case MOVE_UP_BOUND: { final int lastViewIndex = getChildCount() - 2; if (lastViewIndex < 0) { return; } final int lastPos = firstPos + lastViewIndex; if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; mLastSeenPos = lastPos; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:56:28.092807", "n_pass": [22, 2, 2], "score": "0.9998", "loss": "0.0002", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos = nextViewIndex; if (nextPos == mLastSeenPos) { post(this); return; } final View nextView = getChildAt(nextViewIndex); final int nextViewHeight = nextView.getHeight(); final int nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); mLastSeenPos = nextPos; post(this); } else { if (nextViewTop > extraScroll) { smoothScrollBy(nextViewTop - extraScroll, mScrollDuration); } } break; } case MOVE_UP_POS: { if (firstPos == mLastSeenPos) { post(this); return; } final View firstView = getChildAt(0); if (firstView == null) { return; } final int firstViewTop = firstView.getTop(); final int extraScroll = firstPos > 0 ? mExtraScroll : mListPadding.top; smoothScrollBy(firstViewTop - extraScroll, mScrollDuration); mLastSeenPos = firstPos; if (firstPos > mTargetPos) { post(this); } break; } case MOVE_UP_BOUND: { final int lastViewIndex = getChildCount() - 2; if (lastViewIndex < 0) { return; } final int lastPos = firstPos + lastViewIndex; if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; mLastSeenPos = lastPos; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:56:30.955753", "n_pass": [24, 3, 3], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos = nextViewIndex; if (nextPos == mLastSeenPos) { post(this); return; } final View nextView = getChildAt(nextViewIndex); final int nextViewHeight = nextView.getHeight(); final int nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll = firstPos > 0 ? mExtraScroll : mListPadding.top; smoothScrollBy(firstViewTop - extraScroll, mScrollDuration); mLastSeenPos = firstPos; if (firstPos > mTargetPos) { post(this); } break; } case MOVE_UP_BOUND: { final int lastViewIndex = getChildCount() - 2; if (lastViewIndex < 0) { return; } final int lastPos = firstPos + lastViewIndex; if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; mLastSeenPos = lastPos; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:56:33.861246", "n_pass": [46, 4, 4], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos = nextViewIndex; if (nextPos == mLastSeenPos) { post(this); return; } final View nextView = getChildAt(nextViewIndex); final int nextViewHeight = nextView.getHeight(); final int nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll = firstPos > 0 ? mExtraScroll : mListPadding.top; smoothScrollBy(firstViewTop - extraScroll, mScrollDuration); mLastSeenPos = firstPos; if (firstPos > mTargetPos) { post(this); } break; } case MOVE_UP_BOUND: { final int lastViewIndex = getChildCount() - 2; if (lastViewIndex < 0) { return; } final int lastPos = firstPos + lastViewIndex; if (lastPos == mLastSeenPos) { post(this); return; } final View lastView; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:56:36.727605", "n_pass": [53, 5, 5], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll = firstPos > 0 ? mExtraScroll : mListPadding.top; smoothScrollBy(firstViewTop - extraScroll, mScrollDuration); mLastSeenPos = firstPos; if (firstPos > mTargetPos) { post(this); } break; } case MOVE_UP_BOUND: { final int lastViewIndex = getChildCount() - 2; if (lastViewIndex < 0) { return; } final int lastPos = firstPos + lastViewIndex; if (lastPos == mLastSeenPos) { post(this); return; } final View lastView; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:56:39.589202", "n_pass": [87, 6, 6], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  mLastSeenPos = firstPos; if (firstPos > mTargetPos) { post(this); } break; } case MOVE_UP_BOUND: { final int lastViewIndex = getChildCount() - 2; if (lastViewIndex < 0) { return; } final int lastPos = firstPos + lastViewIndex; if (lastPos == mLastSeenPos) { post(this); return; } final View lastView; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:56:42.422216", "n_pass": [89, 7, 7], "score": "0.9999", "loss": "0.0001", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  mLastSeenPos = firstPos; if (firstPos > mTargetPos) { post(this); } break; if (lastViewIndex < 0) { return; } final int lastPos = firstPos + lastViewIndex; if (lastPos == mLastSeenPos) { post(this); return; } final View lastView; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:56:45.232065", "n_pass": [90, 8, 8], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  mLastSeenPos = firstPos; if (firstPos > mTargetPos) { post(this); } break;lastViewIndex; if (lastPos == mLastSeenPos) { post(this); return; } final View lastView; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:56:48.039468", "n_pass": [91, 9, 9], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight = lastView.getHeight(); final int lastViewTop = lastView.getTop(); final int lastViewPixelsShowing = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  mLastSeenPos = firstPos; if (firstPos > mTargetPos) { post(this); } break; lastView; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:56:50.864899", "n_pass": [101, 10, 10], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  mLastSeenPos = firstPos; if (firstPos > mTargetPos) { post(this); } break; lastView; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:56:53.637109", "n_pass": [107, 11, 11], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  lastView; if (lastPos > mBoundPos) { smoothScrollBy(-(lastViewPixelsShowing - mExtraScroll), mScrollDuration); post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:56:57.262562", "n_pass": [151, 12, 12], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  lastView; if (lastPos > mBoundPos) {; post(this); } else { final int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:00.023115", "n_pass": [152, 13, 13], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  lastView; if (lastPos > mBoundPos) { int bottom = listHeight - mExtraScroll; final int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:02.800290", "n_pass": [153, 14, 14], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final View lastView = getChildAt(lastViewIndex); final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  lastView; if (lastPos > mBoundPos) { int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:05.636491", "n_pass": [167, 15, 15], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy(lastViewHeight - lastViewPixelsShowing + extraScroll, mScrollDuration); mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  lastView; if (lastPos > mBoundPos) { int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:08.844781", "n_pass": [171, 16, 16], "score": "0.9869", "loss": "0.0149", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy mLastSeenPos =  nextViewTop = nextView.getTop(); final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  lastView; if (lastPos > mBoundPos) { int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:11.573231", "n_pass": [172, 17, 17], "score": "1.0", "loss": "0.0001", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop = firstView.getTop(); final int extraScroll =  lastView; if (lastPos > mBoundPos) { int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:14.345662", "n_pass": [177, 18, 18], "score": "0.9928", "loss": "0.0077", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop =  lastView; if (lastPos > mBoundPos) { int lastViewBottom = lastViewTop + lastViewHeight; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:17.601184", "n_pass": [244, 19, 19], "score": "0.9999", "loss": "0.0003", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0, nextViewHeight + nextViewTop - extraScroll), mScrollDuration); } final int firstViewTop =  lastView; if (lastPos > mBoundPos) { int lastViewBottom; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:21.738284", "n_pass": [280, 20, 20], "score": "0.9672", "loss": "0.0352", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0 - extraScroll), mScrollDuration); } final int firstViewTop =  lastView; if (lastPos > mBoundPos) { int lastViewBottom; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:25.959887", "n_pass": [401, 21, 21], "score": "0.9832", "loss": "0.0173", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } final int firstViewTop =  lastView; if (lastPos > mBoundPos) { int lastViewBottom; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:28.713928", "n_pass": [403, 22, 22], "score": "0.9995", "loss": "0.0007", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } firstViewTop =  lastView; if (lastPos > mBoundPos) { int lastViewBottom; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:31.440066", "n_pass": [404, 23, 23], "score": "0.9778", "loss": "0.0229", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); }  lastView; if (lastPos > mBoundPos) { int lastViewBottom; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:34.193050", "n_pass": [405, 24, 24], "score": "0.9975", "loss": "0.0026", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (lastPos > mBoundPos) { int lastViewBottom; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:36.959958", "n_pass": [407, 25, 25], "score": "1.0", "loss": "0.0", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) { int lastViewBottom; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:39.701822", "n_pass": [409, 26, 26], "score": "0.9676", "loss": "0.034", "code": "public void run() { final int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:42.886361", "n_pass": [425, 27, 27], "score": "0.9553", "loss": "0.0459", "code": "public void run() {int listHeight = getHeight(); final int firstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:45.613680", "n_pass": [430, 28, 28], "score": "0.9995", "loss": "0.0005", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_DOWN_POS: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:48.395448", "n_pass": [437, 29, 29], "score": "0.9956", "loss": "0.0233", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: { final int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:51.141169", "n_pass": [439, 30, 30], "score": "0.9997", "loss": "0.0027", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = getChildCount() - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:53.882930", "n_pass": [442, 31, 31], "score": "0.9977", "loss": "0.0402", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex =  - 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:56.606050", "n_pass": [443, 32, 32], "score": "0.9997", "loss": "0.0036", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1; final int lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:57:59.327837", "n_pass": [445, 33, 33], "score": "0.9955", "loss": "0.01", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1;  lastPos = firstPos + lastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:02.486877", "n_pass": [448, 34, 34], "score": "0.9952", "loss": "0.0333", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1;  lastPos = firstPoslastViewIndex; if (lastViewIndex < 0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:05.276034", "n_pass": [451, 35, 35], "score": "0.9988", "loss": "0.0093", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1;  lastPos = firstPoslastViewIndex; if (0) { return; } if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:08.023360", "n_pass": [453, 36, 36], "score": "0.9969", "loss": "0.028", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1;  lastPos = firstPoslastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this); return; } final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:10.780030", "n_pass": [459, 37, 37], "score": "0.9857", "loss": "0.104", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1;  lastPos = firstPoslastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight  = listHeight - lastViewTop; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:13.503166", "n_pass": [463, 38, 38], "score": "0.9896", "loss": "0.0398", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1;  lastPos = firstPoslastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight  = listHeight; final int extraScroll = lastPos < mItemCount - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:16.274596", "n_pass": [467, 39, 39], "score": "0.9961", "loss": "0.0297", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1;  lastPos = firstPoslastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight  = listHeight; final int extraScroll = lastPos - 1 ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:19.039806", "n_pass": [468, 40, 40], "score": "0.9995", "loss": "0.0019", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1;  lastPos = firstPoslastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight  = listHeight; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy; final int extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:21.788439", "n_pass": [472, 41, 41], "score": "0.9993", "loss": "0.0034", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1;  lastPos = firstPoslastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight  = listHeight; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollByint extraScroll = mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:24.578772", "n_pass": [473, 42, 42], "score": "1.0", "loss": "0.0", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1;  lastPos = firstPoslastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight  = listHeight; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (nextPos < mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:27.344586", "n_pass": [476, 43, 43], "score": "0.9998", "loss": "0.001", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex = 1;  lastPos = firstPoslastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight  = listHeight; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:30.589110", "n_pass": [511, 44, 44], "score": "0.9881", "loss": "0.1563", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex1;  lastPos = firstPoslastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight  = listHeight; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:33.336175", "n_pass": [514, 45, 45], "score": "0.9998", "loss": "0.0011", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex1;  lastPos lastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight  = listHeight; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:36.070607", "n_pass": [525, 46, 46], "score": "1.0", "loss": "0.0001", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {int lastViewIndex1;  lastPos lastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight ; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:39.300294", "n_pass": [567, 47, 47], "score": "0.9962", "loss": "0.0259", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {1;  lastPos lastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight ; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:42.053773", "n_pass": [568, 48, 48], "score": "0.9977", "loss": "0.0142", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: { lastPos lastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight ; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:44.816251", "n_pass": [569, 49, 49], "score": "1.0", "loss": "0.0001", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {lastViewIndex; if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight ; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:47.530989", "n_pass": [570, 50, 50], "score": "1.0", "loss": "0.0002", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPos == mLastSeenPos) { post(this);} final int lastViewHeight ; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:54.458294", "n_pass": [728, 51, 51], "score": "1.0", "loss": "0.0002", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPos= mLastSeenPos) { post(this);} final int lastViewHeight ; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:57.205625", "n_pass": [729, 52, 52], "score": "1.0", "loss": "0.0002", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) { post(this);} final int lastViewHeight ; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:58:59.973370", "n_pass": [732, 53, 53], "score": "1.0", "loss": "0.0004", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} final int lastViewHeight ; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:02.718777", "n_pass": [736, 54, 54], "score": "0.9999", "loss": "0.0004", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} int lastViewHeight ; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:05.449142", "n_pass": [737, 55, 55], "score": "1.0", "loss": "0.0004", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} lastViewHeight ; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:08.202837", "n_pass": [738, 56, 56], "score": "1.0", "loss": "0.0005", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} ; final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:10.962691", "n_pass": [739, 57, 57], "score": "1.0", "loss": "0.0005", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} final int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:13.720742", "n_pass": [740, 58, 58], "score": "1.0", "loss": "0.0005", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} int extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:16.444831", "n_pass": [741, 59, 59], "score": "1.0", "loss": "0.0", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mListPadding.bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:19.224577", "n_pass": [748, 60, 60], "score": "1.0", "loss": "0.0", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBy= mExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:22.437873", "n_pass": [751, 61, 61], "score": "0.999", "loss": "0.0042", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math.max(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:25.211459", "n_pass": [759, 62, 62], "score": "0.9992", "loss": "0.0035", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {; if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:28.003974", "n_pass": [769, 63, 63], "score": "0.9992", "loss": "0.0035", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(bottom - lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:30.784645", "n_pass": [778, 64, 64], "score": "0.9992", "loss": "0.0034", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(- lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:33.536022", "n_pass": [779, 65, 65], "score": "0.9992", "loss": "0.0034", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom), mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:36.291954", "n_pass": [781, 66, 66], "score": "0.9988", "loss": "0.0046", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } } break; } default: break; } }"}
{"time": "2021-01-20 21:59:39.061542", "n_pass": [786, 67, 67], "score": "0.9988", "loss": "0.0046", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } default: break; } }"}
{"time": "2021-01-20 21:59:41.834906", "n_pass": [789, 68, 68], "score": "0.9988", "loss": "0.005", "code": "public void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 21:59:44.600658", "n_pass": [793, 69, 69], "score": "0.9988", "loss": "0.005", "code": " void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 21:59:47.389252", "n_pass": [794, 70, 70], "score": "0.9988", "loss": "0.005", "code": "void run() {int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 21:59:50.988618", "n_pass": [800, 71, 71], "score": "0.9988", "loss": "0.005", "code": "void run(){int listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 21:59:53.767550", "n_pass": [802, 72, 72], "score": "0.9981", "loss": "0.0085", "code": "void run(){ listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 21:59:56.491978", "n_pass": [803, 73, 73], "score": "0.9981", "loss": "0.0085", "code": "void run(){listHeight = getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 21:59:59.241470", "n_pass": [805, 74, 74], "score": "0.9981", "loss": "0.0085", "code": "void run(){listHeight= getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 22:00:02.030719", "n_pass": [807, 75, 75], "score": "0.9981", "loss": "0.0085", "code": "void run(){listHeight=getHeight(); finalfirstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 22:00:04.759182", "n_pass": [810, 76, 76], "score": "0.9943", "loss": "0.0295", "code": "void run(){listHeight=getHeight();firstPos = mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 22:00:07.486841", "n_pass": [812, 77, 77], "score": "0.9999", "loss": "0.0004", "code": "void run(){listHeight=getHeight();firstPos mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : bottom; smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 22:00:10.283904", "n_pass": [839, 78, 78], "score": "1.0", "loss": "0.0001", "code": "void run(){listHeight=getHeight();firstPos mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll :  smoothScrollBymExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 22:00:13.133082", "n_pass": [840, 79, 79], "score": "1.0", "loss": "0.0", "code": "void run(){listHeight=getHeight();firstPos mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } defaultbreak; } }"}
{"time": "2021-01-20 22:00:15.938185", "n_pass": [871, 80, 80], "score": "1.0", "loss": "0.0", "code": "void run(){listHeight=getHeight();firstPos mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  }break; } }"}
{"time": "2021-01-20 22:00:18.706358", "n_pass": [872, 81, 81], "score": "1.0", "loss": "0.0", "code": "void run(){listHeight=getHeight();firstPos mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:00:22.337747", "n_pass": [882, 82, 82], "score": "1.0", "loss": "0.0", "code": "void run(){listHeightgetHeight();firstPos mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:00:25.091495", "n_pass": [885, 83, 83], "score": "1.0", "loss": "0.0", "code": "void run(){listHeightgetHeight();mFirstPosition; switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:00:27.831638", "n_pass": [886, 84, 84], "score": "1.0", "loss": "0.0", "code": "void run(){listHeightgetHeight(); switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:00:31.515932", "n_pass": [950, 85, 85], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode) { case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:00:52.037683", "n_pass": [1138, 86, 86], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){ case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:00:54.777001", "n_pass": [1140, 87, 87], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case MOVE_: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:00:57.551952", "n_pass": [1143, 88, 88], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _: {if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:00.304086", "n_pass": [1146, 89, 89], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if (0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:03.041996", "n_pass": [1149, 90, 90], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0) {} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:05.802840", "n_pass": [1153, 91, 91], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){} if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:08.562814", "n_pass": [1156, 92, 92], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if (lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:11.334618", "n_pass": [1158, 93, 93], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(lastPosmLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:14.100804", "n_pass": [1160, 94, 94], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos) {(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:16.830452", "n_pass": [1163, 95, 95], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);} extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:19.607559", "n_pass": [1170, 96, 96], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll = lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:22.356309", "n_pass": [1172, 97, 97], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll= lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:25.092022", "n_pass": [1174, 98, 98], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos ? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:27.868650", "n_pass": [1176, 99, 99], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos? mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:30.597270", "n_pass": [1178, 100, 100], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll : mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:33.377618", "n_pass": [1180, 101, 101], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll: mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:36.155348", "n_pass": [1182, 102, 102], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll; if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:38.928850", "n_pass": [1185, 103, 103], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if (mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:41.684187", "n_pass": [1187, 104, 104], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos) { smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:44.450200", "n_pass": [1191, 105, 105], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){ smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:47.191954", "n_pass": [1193, 106, 106], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy(Math(0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:49.969297", "n_pass": [1196, 107, 107], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0), mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:52.745640", "n_pass": [1201, 108, 108], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration); } if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:55.534779", "n_pass": [1205, 109, 109], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);} if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:01:58.291093", "n_pass": [1207, 110, 110], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if (mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:02:01.120219", "n_pass": [1209, 111, 111], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos) {if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:02:03.863477", "n_pass": [1213, 112, 112], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if (bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:02:06.634771", "n_pass": [1216, 113, 113], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom > lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:02:09.380053", "n_pass": [1219, 114, 114], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom> lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:02:12.152385", "n_pass": [1221, 115, 115], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom) { smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:02:14.970825", "n_pass": [1224, 116, 116], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){ smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:02:17.785796", "n_pass": [1226, 117, 117], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){smoothScrollBy(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:02:20.549218", "n_pass": [1227, 118, 118], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){(-(lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:02:23.310043", "n_pass": [1229, 119, 119], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){((lastViewBottom)mScrollDuration); } }  } } }"}
{"time": "2021-01-20 22:02:26.094161", "n_pass": [1233, 120, 120], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){((lastViewBottom)); } }  } } }"}
{"time": "2021-01-20 22:02:28.878158", "n_pass": [1236, 121, 121], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){((lastViewBottom));} }  } } }"}
{"time": "2021-01-20 22:02:31.607319", "n_pass": [1238, 122, 122], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){((lastViewBottom));}}  } } }"}
{"time": "2021-01-20 22:02:34.384237", "n_pass": [1240, 123, 123], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){((lastViewBottom));}} } } }"}
{"time": "2021-01-20 22:02:37.151632", "n_pass": [1241, 124, 124], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){((lastViewBottom));}}} } }"}
{"time": "2021-01-20 22:02:39.940419", "n_pass": [1243, 125, 125], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){((lastViewBottom));}}}} }"}
{"time": "2021-01-20 22:02:42.687565", "n_pass": [1245, 126, 126], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight(); switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){((lastViewBottom));}}}}}"}
{"time": "2021-01-20 22:02:46.268292", "n_pass": [1257, 127, 127], "score": "1.0", "loss": "0.0", "code": "void run(){getHeight();switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom>lastViewBottom){((lastViewBottom));}}}}}"}
{"time": "2021-01-20 22:02:49.489316", "n_pass": [1315, 128, 128], "score": "0.9999", "loss": "0.0001", "code": "void run(){getHeight();switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottomlastViewBottom){((lastViewBottom));}}}}}"}
{"time": "2021-01-20 22:02:52.261868", "n_pass": [1316, 129, 129], "score": "0.9999", "loss": "0.0001", "code": "void run(){getHeight();switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom){((lastViewBottom));}}}}}"}

Minimal simplified code:
void run(){getHeight();switch(mMode){case _:{if(0){}if(mLastSeenPos){(this);}extraScroll=lastPos?mExtraScroll:mExtraScroll;if(mBoundPos){smoothScrollBy((0),mScrollDuration);}if(mBoundPos){if(bottom){((lastViewBottom));}}}}}

