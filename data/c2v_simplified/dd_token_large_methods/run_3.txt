
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/modules/tomcat-lite/java/org/apache/tomcat/lite/io/jsse/SslChannel_run.java
method_name = run
method_body = public void run() { try { boolean initial = true; SSLEngineResult wrap = null; HandshakeStatus hstatus = sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System.currentTimeMillis() - t0 > handshakeTimeout) { throw new TimeoutException(); } if (wrap != null && wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info("-->doHandshake() loop: status = " + hstatus + " " + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, "Wrap error", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info("UNWRAP: rem=" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe("Unexpected data after unwrap"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info("Read: " + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info("Wait: " + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info("Read after wait: " + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info("Unwrap chunk done " + hstatus + " " + wrap + " " + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info("Tasks done in " + (t1task - t0task) + " new status " + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, "Error handshaking", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, "Error closing", ex); } } }
predict, score, loss = run, 0.7561922669410706, 0.7848889231681824

Trace of simplified code(s):
{"time": "2021-01-20 16:33:24.126230", "n_pass": [1, 1, 1], "score": "0.7974", "loss": "0.5807", "code": "public void run() { try { boolean initial = true; SSLEngineResult wrap = null; HandshakeStatus hstatus = sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System.currentTimeMillis() - t0 > handshakeTimeout) { throw new TimeoutException(); } if (wrap != null && wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:33:27.407249", "n_pass": [96, 2, 2], "score": "0.9782", "loss": "0.0472", "code": "public void run() { try { boolean initial = true; SSLEngineResult wrap = null; HandshakeStatus hstatus = sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System& wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:33:33.263819", "n_pass": [101, 4, 3], "score": "0.9283", "loss": "0.2031", "code": "public void run() { try { boolean initial = true; SSLEngineResult wrap = null; HandshakeStatus hstatus = sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System& wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:33:36.827733", "n_pass": [235, 5, 4], "score": "0.9199", "loss": "0.0993", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System& wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:33:39.789238", "n_pass": [242, 6, 5], "score": "0.9869", "loss": "0.0145", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:33:42.742835", "n_pass": [251, 7, 6], "score": "0.9884", "loss": "0.0151", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:33:46.863481", "n_pass": [435, 8, 7], "score": "0.9788", "loss": "0.0292", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:33:49.905964", "n_pass": [454, 9, 8], "score": "0.9596", "loss": "0.0589", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:33:52.972460", "n_pass": [474, 10, 9], "score": "0.9597", "loss": "0.1546", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:33:55.871791", "n_pass": [475, 11, 10], "score": "0.9136", "loss": "0.2651", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:33:58.840634", "n_pass": [485, 12, 11], "score": "0.9172", "loss": "0.1762", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:01.780247", "n_pass": [492, 13, 12], "score": "0.9817", "loss": "0.0256", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:04.854431", "n_pass": [511, 14, 13], "score": "0.9898", "loss": "0.0185", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:07.754023", "n_pass": [514, 15, 14], "score": "0.9526", "loss": "0.0583", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:13.712288", "n_pass": [519, 17, 15], "score": "0.832", "loss": "0.2522", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus& !net.getIn().isAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:16.605214", "n_pass": [520, 18, 16], "score": "0.644", "loss": "1.0259", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:19.517356", "n_pass": [525, 19, 17], "score": "0.7126", "loss": "0.5023", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:22.409923", "n_pass": [527, 20, 18], "score": "0.9617", "loss": "0.058", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:26.186088", "n_pass": [624, 21, 19], "score": "0.9919", "loss": "0.0109", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:30.899283", "n_pass": [942, 22, 20], "score": "0.9736", "loss": "0.0487", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:33.815855", "n_pass": [944, 23, 21], "score": "0.9765", "loss": "0.0392", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:45.511129", "n_pass": [967, 27, 22], "score": "0.9814", "loss": "0.0232", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:48.436543", "n_pass": [971, 28, 23], "score": "0.9722", "loss": "0.0418", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:51.390327", "n_pass": [980, 29, 24], "score": "0.8752", "loss": "0.231", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:34:54.387310", "n_pass": [993, 30, 25], "score": "0.9414", "loss": "0.1267", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:35:00.215870", "n_pass": [1002, 32, 26], "score": "0.9141", "loss": "0.0985", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:35:17.708796", "n_pass": [1026, 38, 27], "score": "0.9344", "loss": "0.1197", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:35:23.538263", "n_pass": [1034, 40, 28], "score": "0.9257", "loss": "0.2953", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:35:32.584753", "n_pass": [1059, 43, 29], "score": "0.5846", "loss": "0.6", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:35:35.569200", "n_pass": [1072, 44, 30], "score": "0.9664", "loss": "0.0398", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:35:41.473675", "n_pass": [1087, 46, 31], "score": "0.9096", "loss": "0.1813", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:35:44.479063", "n_pass": [1101, 47, 32], "score": "0.9974", "loss": "0.0032", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && (HANDSHAKING || initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:35:53.715128", "n_pass": [1121, 50, 33], "score": "0.8265", "loss": "0.2609", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine.beginHandshake(); ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:35:56.622395", "n_pass": [1124, 51, 34], "score": "0.7715", "loss": "0.3378", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:35:59.667450", "n_pass": [1153, 52, 35], "score": "0.2594", "loss": "1.609", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; close(); return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:02.589210", "n_pass": [1158, 53, 36], "score": "0.8889", "loss": "0.1705", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:08.519819", "n_pass": [1193, 55, 37], "score": "0.9946", "loss": "0.0065", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:11.479549", "n_pass": [1202, 56, 38], "score": "0.9643", "loss": "0.0561", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:17.317401", "n_pass": [1205, 58, 39], "score": "0.4833", "loss": "1.1111", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP && myNetInData== 0)) { myNetInData.compact(); int rd; try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:20.243472", "n_pass": [1209, 59, 40], "score": "0.2734", "loss": "2.4269", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP && myNetInData== 0)) { myNetInData.compact(); try { read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:23.154233", "n_pass": [1211, 60, 41], "score": "0.3468", "loss": "1.3339", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP && myNetInData== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:26.326160", "n_pass": [1222, 61, 42], "score": "0.8367", "loss": "0.2907", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP && myNetInData== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:32.194149", "n_pass": [1246, 63, 43], "score": "0.9916", "loss": "0.0124", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP && myNetInData== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:35.257650", "n_pass": [1273, 64, 44], "score": "0.7292", "loss": "0.3898", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP && myNetInData== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:38.267145", "n_pass": [1292, 65, 45], "score": "0.8606", "loss": "0.2005", "code": "public void run() { try { boolean initial =sslEngine.getHandshakeStatus(); if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP && myNetInData== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:41.688923", "n_pass": [1306, 66, 46], "score": "0.8577", "loss": "0.2391", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP && myNetInData== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:44.775044", "n_pass": [1349, 67, 47], "score": "0.2905", "loss": "1.371", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP && myNetInData== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:47.877678", "n_pass": [1387, 68, 48], "score": "0.5905", "loss": "1.2334", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:36:50.868987", "n_pass": [1408, 69, 49], "score": "0.8653", "loss": "0.2435", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" + handshakeTimeout); } net.getIn(); rd ().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:01.553441", "n_pass": [1942, 70, 50], "score": "0.9303", "loss": "0.089", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:04.477316", "n_pass": [1949, 71, 51], "score": "0.9396", "loss": "0.1322", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:07.414440", "n_pass": [1953, 72, 52], "score": "0.9141", "loss": "0.1293", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:10.325455", "n_pass": [1955, 73, 53], "score": "0.8452", "loss": "0.194", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:13.222854", "n_pass": [1956, 74, 54], "score": "0.858", "loss": "0.2256", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:19.006550", "n_pass": [1963, 76, 55], "score": "0.9972", "loss": "0.0031", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:21.906480", "n_pass": [1965, 77, 56], "score": "0.9675", "loss": "0.0555", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable(Level.FINEST)) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:24.805997", "n_pass": [1970, 78, 57], "score": "0.9951", "loss": "0.0059", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(\" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:27.723181", "n_pass": [1974, 79, 58], "score": "0.8595", "loss": "0.2156", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info( + sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:30.625572", "n_pass": [1975, 80, 59], "score": "0.947", "loss": "0.0699", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:42.251018", "n_pass": [2003, 84, 60], "score": "0.9944", "loss": "0.0089", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatussslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:45.114513", "n_pass": [2004, 85, 61], "score": "0.8976", "loss": "0.1472", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:48.037499", "n_pass": [2011, 86, 62], "score": "0.767", "loss": "0.4343", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"Tasks done in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:50.924460", "n_pass": [2013, 87, 63], "score": "0.8151", "loss": "0.2587", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t1tasktask) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:56.659177", "n_pass": [2017, 89, 64], "score": "0.9878", "loss": "0.0137", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:37:59.600707", "n_pass": [2026, 90, 65], "score": "0.8014", "loss": "0.2897", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:38:02.559186", "n_pass": [2038, 91, 66], "score": "0.9805", "loss": "0.0251", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\", t); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:38:05.465475", "n_pass": [2043, 92, 67], "score": "0.9812", "loss": "0.0219", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } }"}
{"time": "2021-01-20 16:38:11.284950", "n_pass": [2056, 94, 68], "score": "0.897", "loss": "0.1204", "code": "public void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:38:14.179491", "n_pass": [2061, 95, 69], "score": "0.7749", "loss": "0.2941", "code": "void run() { try { boolean initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:38:17.546358", "n_pass": [2068, 96, 70], "score": "0.8433", "loss": "0.2279", "code": "void run() { try { initial =sslEngine; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:38:20.415268", "n_pass": [2070, 97, 71], "score": "0.885", "loss": "0.1521", "code": "void run() { try { initial ; if (!closeHandshake && ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:38:23.312404", "n_pass": [2075, 98, 72], "score": "0.7964", "loss": "0.3253", "code": "void run() { try { initial ; if (!closeHandshake  ( initial)) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:38:26.195246", "n_pass": [2077, 99, 73], "score": "0.9086", "loss": "0.2037", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; ; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:38:31.926701", "n_pass": [2081, 101, 74], "score": "0.9094", "loss": "0.1181", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:38:37.682312", "n_pass": [2088, 103, 75], "score": "0.5413", "loss": "0.9227", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatus != HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:38:43.431194", "n_pass": [2093, 105, 76], "score": "0.8184", "loss": "0.2527", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatus= HandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:38:46.320352", "n_pass": [2094, 106, 77], "score": "0.7222", "loss": "0.4389", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:38:54.918008", "n_pass": [2100, 109, 78], "score": "0.9696", "loss": "0.0455", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {; } if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:38:57.767823", "n_pass": [2101, 110, 79], "score": "0.9788", "loss": "0.0227", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log.info(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:39:06.332880", "n_pass": [2111, 113, 80], "score": "0.9112", "loss": "0.0963", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status = \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:39:12.053161", "n_pass": [2114, 115, 81], "score": "0.4642", "loss": "0.8792", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus ==WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:39:20.916902", "n_pass": [2125, 118, 82], "score": "0.9051", "loss": "0.1165", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:39:29.478741", "n_pass": [2136, 121, 83], "score": "0.4801", "loss": "0.9862", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:39:35.181883", "n_pass": [2138, 123, 84], "score": "0.4498", "loss": "0.8977", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= NEED_WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:39:38.043813", "n_pass": [2139, 124, 85], "score": "0.9026", "loss": "0.1617", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData.compact(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:39:40.926361", "n_pass": [2143, 125, 86], "score": "0.4778", "loss": "1.0323", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData(); try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:39:43.774207", "n_pass": [2144, 126, 87], "score": "0.8626", "loss": "0.2217", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutData, myNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:39:46.641530", "n_pass": [2150, 127, 88], "score": "0.6095", "loss": "0.7982", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.NEED_UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:40:03.718527", "n_pass": [2177, 133, 89], "score": "0.6305", "loss": "0.5153", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:40:09.485252", "n_pass": [2195, 135, 90], "score": "0.9738", "loss": "0.0445", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:40:18.113607", "n_pass": [2209, 138, 91], "score": "0.7188", "loss": "0.5259", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:40:35.211521", "n_pass": [2226, 144, 92], "score": "0.8499", "loss": "0.4676", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { log.severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:40:38.096910", "n_pass": [2231, 145, 93], "score": "0.3154", "loss": "1.5493", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) { break; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:40:43.839865", "n_pass": [2244, 147, 94], "score": "0.9896", "loss": "0.0174", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {; } } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:40:46.675949", "n_pass": [2245, 148, 95], "score": "0.5178", "loss": "1.3783", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() == Status.BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:40:52.415627", "n_pass": [2253, 150, 96], "score": "0.9848", "loss": "0.0173", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) { myNetInData.compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:41:00.960360", "n_pass": [2261, 153, 97], "score": "0.7271", "loss": "0.4278", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:41:06.695194", "n_pass": [2268, 155, 98], "score": "0.8795", "loss": "0.1553", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:41:12.647814", "n_pass": [2319, 157, 99], "score": "0.4898", "loss": "0.8046", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\" in \" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:41:24.114615", "n_pass": [2344, 161, 100], "score": "0.7543", "loss": "0.3468", "code": "void run() { try { initial ; if (!closeHandshake  ()) { sslEngine; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:41:33.346071", "n_pass": [2400, 164, 101], "score": "0.2566", "loss": "1.5761", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System(); while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:41:41.847917", "n_pass": [2407, 167, 102], "score": "0.978", "loss": "0.0492", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed()) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:41:47.505545", "n_pass": [2412, 169, 103], "score": "0.9525", "loss": "0.1089", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log.isLoggable(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:41:50.395234", "n_pass": [2419, 170, 104], "score": "0.9448", "loss": "0.0805", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) { log(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:41:56.059595", "n_pass": [2424, 172, 105], "score": "0.9825", "loss": "0.0243", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\"-status \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:41:58.884198", "n_pass": [2426, 173, 106], "score": "0.4416", "loss": "1.3961", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatussslEngine.getHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:42:04.548500", "n_pass": [2430, 175, 107], "score": "0.9342", "loss": "0.0855", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus=WRAP) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:42:07.407060", "n_pass": [2437, 176, 108], "score": "0.9841", "loss": "0.0269", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) { myNetOutData; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:42:15.955918", "n_pass": [2450, 179, 109], "score": "0.7685", "loss": "0.2911", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } else if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:42:33.321074", "n_pass": [2478, 185, 110], "score": "0.9989", "loss": "0.0012", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (hstatus.UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:42:36.169175", "n_pass": [2481, 186, 111], "score": "0.6662", "loss": "0.5332", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:42:39.081781", "n_pass": [2492, 187, 112], "score": "0.5034", "loss": "1.0078", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData(); if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:42:41.965340", "n_pass": [2499, 188, 113], "score": "0.7751", "loss": "0.669", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { log.info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:42:44.811843", "n_pass": [2505, 189, 114], "score": "0.9339", "loss": "0.086", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:42:50.492741", "n_pass": [2518, 191, 115], "score": "0.7847", "loss": "0.3592", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:42:53.335415", "n_pass": [2522, 192, 116], "score": "0.9668", "loss": "0.0938", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData.remaining > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:42:58.977546", "n_pass": [2527, 194, 117], "score": "0.3531", "loss": "1.2181", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatus.NEED_UNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:43:10.397339", "n_pass": [2554, 198, 118], "score": "0.4108", "loss": "1.342", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" + rd); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:43:16.198917", "n_pass": [2592, 200, 119], "score": "0.9823", "loss": "0.0241", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:43:21.973562", "n_pass": [2618, 202, 120], "score": "0.3599", "loss": "1.2497", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:43:24.777943", "n_pass": [2619, 203, 121], "score": "0.9253", "loss": "0.2543", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:43:27.603092", "n_pass": [2622, 204, 122], "score": "0.5727", "loss": "1.0605", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try { net.close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:43:30.683795", "n_pass": [2665, 205, 123], "score": "0.3293", "loss": "1.3025", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {close(); } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:43:33.500657", "n_pass": [2666, 206, 124], "score": "0.955", "loss": "0.0942", "code": "void run() { try { initial ; if (!closeHandshake  ()) {; } long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:43:39.699047", "n_pass": [2693, 208, 125], "score": "0.5068", "loss": "1.7912", "code": "void run() { try { initial ; if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" + hstatusgetHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:43:50.982578", "n_pass": [2716, 212, 126], "score": "0.633", "loss": "1.0523", "code": "void run() { try { initial ; if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatus= WRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:43:56.685167", "n_pass": [2732, 214, 127], "score": "0.7978", "loss": "0.5002", "code": "void run() { try { initial ; if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatusWRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {; return;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:44:05.199054", "n_pass": [2748, 217, 128], "score": "0.8926", "loss": "0.2471", "code": "void run() { try { initial ; if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatusWRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:44:37.563162", "n_pass": [2954, 228, 129], "score": "0.9427", "loss": "0.0774", "code": "void run() { try { ; if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { ; synchronized (myNetOutData) { while (hstatusWRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:44:52.146105", "n_pass": [2992, 233, 130], "score": "0.9091", "loss": "0.173", "code": "void run() { try { ; if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:45:00.705388", "n_pass": [3020, 236, 131], "score": "0.9828", "loss": "0.0448", "code": "void run() { try { ; if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData(); if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:45:12.160403", "n_pass": [3065, 240, 132], "score": "0.907", "loss": "0.2083", "code": "void run() { try { ; if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData; if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (wrap.getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:45:15.043474", "n_pass": [3080, 241, 133], "score": "0.2456", "loss": "2.834", "code": "void run() { try { ; if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData; if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW || (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:45:20.721143", "n_pass": [3093, 243, 134], "score": "0.944", "loss": "0.0966", "code": "void run() { try { ; if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData; if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0task = System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:45:26.647141", "n_pass": [3154, 245, 135], "score": "0.9602", "loss": "0.0534", "code": "void run() { try { ; if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData; if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0taskSystem.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:45:33.103744", "n_pass": [3219, 247, 136], "score": "0.8442", "loss": "0.214", "code": "void run() { try { if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { wrap (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData; if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0taskSystem.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:45:47.317234", "n_pass": [3267, 252, 137], "score": "0.9805", "loss": "0.0464", "code": "void run() { try { if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInData, myAppInData); hstatus = getHandshakeStatus(); myAppInData; if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0taskSystem.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:45:55.937368", "n_pass": [3319, 255, 138], "score": "0.8648", "loss": "0.1765", "code": "void run() { try { if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus(); myAppInData; if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0taskSystem.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:45:58.801523", "n_pass": [3326, 256, 139], "score": "0.6475", "loss": "1.0003", "code": "void run() { try { if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();; if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0taskSystem.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:46:01.615521", "n_pass": [3327, 257, 140], "score": "0.9779", "loss": "0.0335", "code": "void run() { try { if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap == wrap.getStatus() ==BUFFER_UNDERFLOW (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0taskSystem.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:46:04.532442", "n_pass": [3349, 258, 141], "score": "0.4867", "loss": "1.2066", "code": "void run() { try { if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() ==BUFFER_UNDERFLOW (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0taskSystem.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:46:07.349849", "n_pass": [3352, 259, 142], "score": "0.9889", "loss": "0.014", "code": "void run() { try { if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {t0taskSystem.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:46:13.297709", "n_pass": [3412, 261, 143], "score": "0.9937", "loss": "0.01", "code": "void run() { try { if (!closeHandshake  ()) {} long t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:46:16.925509", "n_pass": [3484, 262, 144], "score": "0.3221", "loss": "2.4164", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } ; } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:46:31.113128", "n_pass": [3543, 267, 145], "score": "0.9846", "loss": "0.0182", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } } if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:47:57.401506", "n_pass": [4290, 277, 146], "score": "0.931", "loss": "0.2306", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP) { while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:48:03.053409", "n_pass": [4295, 279, 147], "score": "0.9862", "loss": "0.0194", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){ while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:48:05.871148", "n_pass": [4297, 280, 148], "score": "0.9109", "loss": "0.3264", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while (hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:48:08.697697", "n_pass": [4299, 281, 149], "score": "0.6682", "loss": "0.5567", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus ==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:48:11.521003", "n_pass": [4302, 282, 150], "score": "0.9406", "loss": "0.0915", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) { if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:48:22.703072", "n_pass": [4309, 286, 151], "score": "0.8138", "loss": "0.363", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if (remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:48:25.510611", "n_pass": [4311, 287, 152], "score": "0.8512", "loss": "0.7014", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) { myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:48:36.702058", "n_pass": [4323, 291, 153], "score": "0.7761", "loss": "0.3566", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap) { info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:48:47.923324", "n_pass": [4332, 295, 154], "score": "0.9279", "loss": "0.1057", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){ info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:48:50.743095", "n_pass": [4334, 296, 155], "score": "0.702", "loss": "0.6343", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info(); } wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:48:53.576226", "n_pass": [4339, 297, 156], "score": "0.7423", "loss": "0.9531", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap = sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:48:59.205176", "n_pass": [4343, 299, 157], "score": "0.9966", "loss": "0.0037", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= sslEngine(myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:04.826266", "n_pass": [4346, 301, 158], "score": "0.9924", "loss": "0.0226", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInDatamyAppInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:10.422568", "n_pass": [4349, 303, 159], "score": "0.9945", "loss": "0.0084", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus = getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:16.528831", "n_pass": [4354, 305, 160], "score": "0.9901", "loss": "0.0132", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus= getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:19.344086", "n_pass": [4356, 306, 161], "score": "0.905", "loss": "0.1724", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData > 0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:27.785687", "n_pass": [4367, 309, 162], "score": "0.975", "loss": "0.0406", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) { severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:33.405143", "n_pass": [4372, 311, 163], "score": "0.6448", "loss": "0.7353", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {severe(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:36.212962", "n_pass": [4373, 312, 164], "score": "0.4598", "loss": "1.8419", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"Unexpectedunwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:39.036961", "n_pass": [4376, 313, 165], "score": "0.4008", "loss": "1.5077", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\"); } if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:44.701912", "n_pass": [4381, 315, 166], "score": "0.8785", "loss": "0.194", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if (getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:50.323988", "n_pass": [4385, 317, 167], "score": "0.6195", "loss": "1.5962", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED) {} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:53.167094", "n_pass": [4393, 318, 168], "score": "0.9736", "loss": "0.0801", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){} } if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:49:55.999667", "n_pass": [4396, 319, 169], "score": "0.8845", "loss": "0.2748", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if (wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:50:01.624870", "n_pass": [4400, 321, 170], "score": "0.3414", "loss": "1.337", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap ==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:50:04.432555", "n_pass": [4403, 322, 171], "score": "0.8129", "loss": "0.887", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap==getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:50:10.020124", "n_pass": [4405, 324, 172], "score": "0.9831", "loss": "0.0542", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus() == (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:50:12.872665", "n_pass": [4409, 325, 173], "score": "0.9536", "loss": "0.1562", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()== (HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:50:16.588199", "n_pass": [4412, 326, 174], "score": "0.2568", "loss": "3.334", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try {  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:50:39.020063", "n_pass": [4430, 334, 175], "score": "0.2498", "loss": "2.665", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{  if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:50:41.839391", "n_pass": [4432, 335, 176], "score": "0.9845", "loss": "0.0189", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) { (\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:50:53.002083", "n_pass": [4441, 339, 177], "score": "0.3064", "loss": "2.0796", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:51:04.193342", "n_pass": [4448, 343, 178], "score": "0.1531", "loss": "3.6562", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInData.flip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:51:23.853656", "n_pass": [4464, 350, 179], "score": "0.5993", "loss": "1.2483", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0) {  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:51:37.946070", "n_pass": [4477, 355, 180], "score": "0.9541", "loss": "0.0842", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){  { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:51:40.783730", "n_pass": [4479, 356, 181], "score": "0.9844", "loss": "0.0349", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){ { log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:51:43.597276", "n_pass": [4480, 357, 182], "score": "0.9631", "loss": "0.0444", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{ log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:51:46.442411", "n_pass": [4482, 358, 183], "score": "0.7452", "loss": "0.8282", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log.info(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:51:49.261832", "n_pass": [4484, 359, 184], "score": "0.944", "loss": "0.1226", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{loginfo(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:51:52.076712", "n_pass": [4485, 360, 185], "score": "0.8471", "loss": "0.2785", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait: \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:51:57.687259", "n_pass": [4489, 362, 186], "score": "0.9848", "loss": "0.0235", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net.getIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:52:11.701520", "n_pass": [4499, 367, 187], "score": "0.6495", "loss": "0.4966", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } netgetIn(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:52:14.538995", "n_pass": [4500, 368, 188], "score": "0.9818", "loss": "0.0261", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd ().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:52:20.175004", "n_pass": [4506, 370, 189], "score": "0.6229", "loss": "1.0106", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (log.isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:52:31.491110", "n_pass": [4534, 374, 190], "score": "0.9947", "loss": "0.0061", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log.info(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:52:34.325949", "n_pass": [4539, 375, 191], "score": "0.8873", "loss": "0.2038", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.NEED_TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:52:48.327629", "n_pass": [4551, 380, 192], "score": "0.6434", "loss": "1.0774", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {System.currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:52:51.148612", "n_pass": [4554, 381, 193], "score": "0.9946", "loss": "0.0065", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r .getDelegatedTask()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:52:54.006226", "n_pass": [4560, 382, 194], "score": "0.9926", "loss": "0.0093", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ()) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:52:56.810846", "n_pass": [4561, 383, 195], "score": "0.9898", "loss": "0.0118", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { r.run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:02.444408", "n_pass": [4567, 385, 196], "score": "0.9899", "loss": "0.0121", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus(); if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:05.267887", "n_pass": [4572, 386, 197], "score": "0.5549", "loss": "1.3205", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log.isLoggable(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:08.096143", "n_pass": [4576, 387, 198], "score": "0.5289", "loss": "1.6689", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info(\"\" + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:13.715591", "n_pass": [4582, 389, 199], "score": "0.9837", "loss": "0.0218", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( + (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:16.521593", "n_pass": [4583, 390, 200], "score": "0.5237", "loss": "1.0676", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {; } catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:33.494581", "n_pass": [4623, 396, 201], "score": "0.9613", "loss": "0.0429", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log.log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:36.336593", "n_pass": [4630, 397, 202], "score": "0.8168", "loss": "0.3357", "code": "void run() { try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:42.858664", "n_pass": [4646, 399, 203], "score": "0.7834", "loss": "0.3438", "code": "void run(){ try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:45.651772", "n_pass": [4648, 400, 204], "score": "0.9719", "loss": "0.0454", "code": "void run(){try { if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:48.451243", "n_pass": [4650, 401, 205], "score": "0.5682", "loss": "1.0068", "code": "void run(){try{ if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:51.256003", "n_pass": [4652, 402, 206], "score": "0.9092", "loss": "0.1401", "code": "void run(){try{if (!closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:53:56.826030", "n_pass": [4656, 404, 207], "score": "0.9951", "loss": "0.0147", "code": "void run(){try{if (closeHandshake  ()) {} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:05.180883", "n_pass": [4663, 407, 208], "score": "0.2218", "loss": "3.4681", "code": "void run(){try{if (closeHandshake  ()){} t0 = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:11.235831", "n_pass": [4668, 409, 209], "score": "0.8133", "loss": "0.9648", "code": "void run(){try{if (closeHandshake  ()){} t = System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:14.049622", "n_pass": [4669, 410, 210], "score": "0.6103", "loss": "1.8538", "code": "void run(){try{if (closeHandshake  ()){} t= System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:16.853582", "n_pass": [4670, 411, 211], "score": "0.7492", "loss": "0.3887", "code": "void run(){try{if (closeHandshake  ()){} t System; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:19.652776", "n_pass": [4671, 412, 212], "score": "0.9762", "loss": "0.0277", "code": "void run(){try{if (closeHandshake  ()){} tSystem; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:22.476928", "n_pass": [4672, 413, 213], "score": "0.9951", "loss": "0.0137", "code": "void run(){try{if (closeHandshake  ()){} t; while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:25.275932", "n_pass": [4674, 414, 214], "score": "0.9972", "loss": "0.0057", "code": "void run(){try{if (closeHandshake  ()){} t;while (hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:28.074697", "n_pass": [4676, 415, 215], "score": "0.9927", "loss": "0.0085", "code": "void run(){try{if (closeHandshake  ()){} t;while(hstatusHandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:30.901317", "n_pass": [4678, 416, 216], "score": "0.5165", "loss": "0.9237", "code": "void run(){try{if (closeHandshake  ()){} t;while(HandshakeStatusisAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:33.717523", "n_pass": [4679, 417, 217], "score": "0.9905", "loss": "0.0326", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed) {  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:36.523091", "n_pass": [4682, 418, 218], "score": "0.9233", "loss": "0.1556", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){  {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:39.321321", "n_pass": [4684, 419, 219], "score": "0.8646", "loss": "0.2021", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){ {} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:42.116996", "n_pass": [4685, 420, 220], "score": "0.9642", "loss": "0.0459", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{} if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:44.931825", "n_pass": [4688, 421, 221], "score": "0.3588", "loss": "1.8092", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if (log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:47.733965", "n_pass": [4690, 422, 222], "score": "0.84", "loss": "0.2926", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if(log(Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:50.547653", "n_pass": [4692, 423, 223], "score": "0.9868", "loss": "0.0389", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level.FINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:53.349919", "n_pass": [4695, 424, 224], "score": "0.9946", "loss": "0.0235", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((LevelFINEST)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:56.143101", "n_pass": [4696, 425, 225], "score": "0.988", "loss": "0.071", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)) {(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:54:58.943778", "n_pass": [4699, 426, 226], "score": "0.8086", "loss": "0.3129", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\" \" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:01.750432", "n_pass": [4703, 427, 227], "score": "0.995", "loss": "0.013", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\" +getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:04.550765", "n_pass": [4705, 428, 228], "score": "0.9786", "loss": "0.0281", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus()); } if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:07.402372", "n_pass": [4712, 429, 229], "score": "0.9965", "loss": "0.0116", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());} if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:10.237629", "n_pass": [4714, 430, 230], "score": "0.9965", "loss": "0.01", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if (hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:13.029900", "n_pass": [4716, 431, 231], "score": "0.8604", "loss": "0.1889", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus) { synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:15.829246", "n_pass": [4720, 432, 232], "score": "0.9282", "loss": "0.1198", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){ synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:18.623087", "n_pass": [4722, 433, 233], "score": "0.9437", "loss": "0.0788", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized (myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:21.426797", "n_pass": [4724, 434, 234], "score": "0.9503", "loss": "0.2017", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData) { while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:24.240231", "n_pass": [4728, 435, 235], "score": "0.9911", "loss": "0.0264", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){ while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:27.046039", "n_pass": [4730, 436, 236], "score": "0.8482", "loss": "0.2538", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while (hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:29.874570", "n_pass": [4732, 437, 237], "score": "0.9869", "loss": "0.0656", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(hstatusWRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:32.682850", "n_pass": [4734, 438, 238], "score": "0.9938", "loss": "0.0258", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP) {; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:35.489029", "n_pass": [4737, 439, 239], "score": "0.8414", "loss": "0.2944", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){; try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:38.290297", "n_pass": [4739, 440, 240], "score": "0.9521", "loss": "0.0724", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){ try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:41.094064", "n_pass": [4740, 441, 241], "score": "0.9781", "loss": "0.0333", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try { (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:43.900155", "n_pass": [4742, 442, 242], "score": "0.988", "loss": "0.0263", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{ (myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:46.704972", "n_pass": [4744, 443, 243], "score": "0.9977", "loss": "0.0046", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myAppOutDatamyNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:49.510498", "n_pass": [4746, 444, 244], "score": "0.9558", "loss": "0.0591", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData); } catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:52.322074", "n_pass": [4750, 445, 245], "score": "0.9922", "loss": "0.0324", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);} catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:55.116213", "n_pass": [4752, 446, 246], "score": "0.9858", "loss": "0.0204", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch (Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:55:57.947831", "n_pass": [4754, 447, 247], "score": "0.9919", "loss": "0.0215", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t) {;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:00.784158", "n_pass": [4760, 448, 248], "score": "0.9954", "loss": "0.0108", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){;;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:03.586467", "n_pass": [4762, 449, 249], "score": "0.9965", "loss": "0.0106", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){;(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:06.389867", "n_pass": [4763, 450, 250], "score": "0.8329", "loss": "0.3072", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData); } hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:09.199184", "n_pass": [4768, 451, 251], "score": "0.9641", "loss": "0.0465", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);} hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:12.001364", "n_pass": [4770, 452, 252], "score": "0.9753", "loss": "0.0311", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus = getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:14.816381", "n_pass": [4772, 453, 253], "score": "0.9779", "loss": "0.0643", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus= getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:17.614214", "n_pass": [4774, 454, 254], "score": "0.9781", "loss": "0.0354", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus(); } } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:20.418536", "n_pass": [4779, 455, 255], "score": "0.9919", "loss": "0.0099", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();} } }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:23.245813", "n_pass": [4781, 456, 256], "score": "0.898", "loss": "0.1355", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}} }if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:26.058869", "n_pass": [4783, 457, 257], "score": "0.99", "loss": "0.0317", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if (UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:28.853268", "n_pass": [4786, 458, 258], "score": "0.9628", "loss": "0.0474", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus==UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:31.685693", "n_pass": [4794, 459, 259], "score": "0.9984", "loss": "0.0027", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus=UNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:34.477966", "n_pass": [4795, 460, 260], "score": "0.9912", "loss": "0.0407", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatusUNWRAP) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:37.288725", "n_pass": [4796, 461, 261], "score": "0.9934", "loss": "0.0086", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus) {if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:40.077522", "n_pass": [4798, 462, 262], "score": "0.8559", "loss": "0.2377", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining() > 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:42.890286", "n_pass": [4805, 463, 263], "score": "0.9923", "loss": "0.0253", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()> 0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:45.699663", "n_pass": [4807, 464, 264], "score": "0.64", "loss": "0.842", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0) {myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:48.496817", "n_pass": [4810, 465, 265], "score": "0.9987", "loss": "0.0037", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){myAppInData; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:51.295714", "n_pass": [4812, 466, 266], "score": "0.9905", "loss": "0.0332", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){; if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:54.113230", "n_pass": [4813, 467, 267], "score": "0.7206", "loss": "0.564", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){ if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:56.918189", "n_pass": [4814, 468, 268], "score": "0.9572", "loss": "0.0632", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if (debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:56:59.730932", "n_pass": [4816, 469, 269], "score": "0.9814", "loss": "0.0243", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();} wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:02.554632", "n_pass": [4826, 470, 270], "score": "0.9758", "loss": "0.0327", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap= (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:05.397320", "n_pass": [4828, 471, 271], "score": "0.9888", "loss": "0.0148", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap (myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:08.196321", "n_pass": [4829, 472, 272], "score": "0.9553", "loss": "0.0672", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap(myNetInData); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:11.020548", "n_pass": [4831, 473, 273], "score": "0.9932", "loss": "0.0175", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap(); hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:13.818493", "n_pass": [4834, 474, 274], "score": "0.9953", "loss": "0.0058", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus=getHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:16.621219", "n_pass": [4836, 475, 275], "score": "0.9979", "loss": "0.0043", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatusgetHandshakeStatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:19.415984", "n_pass": [4837, 476, 276], "score": "0.9237", "loss": "0.1331", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if (myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:22.223285", "n_pass": [4842, 477, 277], "score": "0.9942", "loss": "0.0175", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData >0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:25.028658", "n_pass": [4845, 478, 278], "score": "0.9242", "loss": "0.147", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData>0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:27.829148", "n_pass": [4846, 479, 279], "score": "0.9801", "loss": "0.0294", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData0) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:30.618501", "n_pass": [4847, 480, 280], "score": "0.9868", "loss": "0.0161", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData) {(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:33.412522", "n_pass": [4849, 481, 281], "score": "0.9832", "loss": "0.1138", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"unwrap\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:36.212950", "n_pass": [4853, 482, 282], "score": "0.9911", "loss": "0.0107", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");} if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:39.029292", "n_pass": [4858, 483, 283], "score": "0.9983", "loss": "0.003", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}} if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:41.859773", "n_pass": [4870, 484, 284], "score": "0.9972", "loss": "0.0061", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap=getStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:44.672255", "n_pass": [4874, 485, 285], "score": "0.9963", "loss": "0.0039", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrapgetStatus()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:47.457351", "n_pass": [4875, 486, 286], "score": "0.9693", "loss": "0.0444", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(HandshakeStatusUNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:51.142884", "n_pass": [4881, 487, 287], "score": "0.8638", "loss": "0.1863", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP== 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:53.928567", "n_pass": [4883, 488, 288], "score": "0.981", "loss": "0.0245", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP= 0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:56.734509", "n_pass": [4885, 489, 289], "score": "0.9946", "loss": "0.0144", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)) {compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:57:59.520305", "n_pass": [4889, 490, 290], "score": "0.9804", "loss": "0.025", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact(); try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:02.337033", "n_pass": [4895, 491, 291], "score": "0.9964", "loss": "0.004", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{ if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:05.126950", "n_pass": [4898, 492, 292], "score": "0.9885", "loss": "0.0128", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if (debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:07.941129", "n_pass": [4900, 493, 293], "score": "0.9996", "loss": "0.0007", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap) {(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:10.737212", "n_pass": [4904, 494, 294], "score": "0.9971", "loss": "0.0069", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"Read: \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:13.563041", "n_pass": [4908, 495, 295], "score": "0.913", "loss": "0.1169", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\": \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:16.363043", "n_pass": [4909, 496, 296], "score": "0.9608", "loss": "0.0479", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\" \"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:19.157312", "n_pass": [4910, 497, 297], "score": "0.997", "loss": "0.0038", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+ rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:21.941209", "n_pass": [4913, 498, 298], "score": "0.9923", "loss": "0.0273", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd); } } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:24.737583", "n_pass": [4917, 499, 299], "score": "0.9998", "loss": "0.0002", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);} } finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:27.525119", "n_pass": [4919, 500, 300], "score": "0.9847", "loss": "0.0182", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}} finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:30.317856", "n_pass": [4921, 501, 301], "score": "0.9957", "loss": "0.0049", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally { myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:33.109656", "n_pass": [4923, 502, 302], "score": "0.9991", "loss": "0.0017", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{ myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:35.933940", "n_pass": [4925, 503, 303], "score": "0.9489", "loss": "0.0725", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{myNetInDataflip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:38.740168", "n_pass": [4926, 504, 304], "score": "0.9951", "loss": "0.0054", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip(); } if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:41.543283", "n_pass": [4931, 505, 305], "score": "0.9833", "loss": "0.0503", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();} if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:44.341613", "n_pass": [4933, 506, 306], "score": "0.9981", "loss": "0.0035", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if (0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:47.127539", "n_pass": [4935, 507, 307], "score": "0.9984", "loss": "0.0017", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{log(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:49.927799", "n_pass": [4941, 508, 308], "score": "0.7071", "loss": "0.4764", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"Wait \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:52.731329", "n_pass": [4944, 509, 309], "score": "0.986", "loss": "0.016", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\" \" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:55.502963", "n_pass": [4945, 510, 310], "score": "0.9882", "loss": "0.0169", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\" ); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:58:58.292360", "n_pass": [4947, 511, 311], "score": "0.9993", "loss": "0.001", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\"); } net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:01.100529", "n_pass": [4950, 512, 312], "score": "0.9957", "loss": "0.0101", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");} net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:04.454588", "n_pass": [4952, 513, 313], "score": "0.9521", "loss": "0.0631", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net(); rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:07.250051", "n_pass": [4957, 514, 314], "score": "0.9433", "loss": "0.0692", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read; if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:10.051477", "n_pass": [4964, 515, 315], "score": "0.9985", "loss": "0.003", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if (debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:12.853684", "n_pass": [4966, 516, 316], "score": "0.9979", "loss": "0.0055", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap) {info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:15.673665", "n_pass": [4970, 517, 317], "score": "0.9976", "loss": "0.0028", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) { log(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:18.533292", "n_pass": [4989, 518, 318], "score": "0.9992", "loss": "0.0013", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine.getHandshakeStatus()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:21.311311", "n_pass": [4991, 519, 319], "score": "0.999", "loss": "0.0011", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine()); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:24.114609", "n_pass": [4992, 520, 320], "score": "0.9872", "loss": "0.0163", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } else if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:26.928534", "n_pass": [4997, 521, 321], "score": "0.8998", "loss": "0.1827", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (hstatus.TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:29.713484", "n_pass": [5000, 522, 322], "score": "0.9982", "loss": "0.0019", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) != null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:32.541191", "n_pass": [5009, 523, 323], "score": "0.9952", "loss": "0.0105", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r )  null) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:35.334346", "n_pass": [5010, 524, 324], "score": "0.9957", "loss": "0.0088", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); } hstatus; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:38.136123", "n_pass": [5016, 525, 325], "score": "0.9911", "loss": "0.0133", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }; if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:40.906092", "n_pass": [5017, 526, 326], "score": "0.9928", "loss": "0.0246", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level.FINEST)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:43.694459", "n_pass": [5021, 527, 327], "score": "0.9706", "loss": "0.0469", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t) + hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:46.512105", "n_pass": [5027, 528, 328], "score": "0.9974", "loss": "0.0038", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t) hstatus); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:49.282944", "n_pass": [5028, 529, 329], "score": "0.9992", "loss": "0.0012", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:52.140395", "n_pass": [5041, 530, 330], "score": "0.9996", "loss": "0.0006", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshake; processRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:54.914219", "n_pass": [5042, 531, 331], "score": "0.9923", "loss": "0.0213", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(net.getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 16:59:57.692974", "n_pass": [5044, 532, 332], "score": "0.978", "loss": "0.0266", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log(Level.SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 17:00:00.512073", "n_pass": [5056, 533, 333], "score": "0.9959", "loss": "0.0074", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log(SEVERE, \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 17:00:03.302898", "n_pass": [5057, 534, 334], "score": "0.9967", "loss": "0.0041", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"Error handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 17:00:06.069287", "n_pass": [5059, 535, 335], "score": "0.9993", "loss": "0.001", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log(Level.SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 17:00:08.903891", "n_pass": [5071, 536, 336], "score": "0.9971", "loss": "0.0058", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log(SEVERE, \"\", ex); } } }"}
{"time": "2021-01-20 17:00:11.667835", "n_pass": [5072, 537, 337], "score": "0.9387", "loss": "0.0954", "code": "void run(){try{if (closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:00:15.365338", "n_pass": [5089, 538, 338], "score": "0.9936", "loss": "0.0143", "code": "void run(){try{if(closeHandshake  ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:00:18.173410", "n_pass": [5092, 539, 339], "score": "0.9467", "loss": "0.1148", "code": "void run(){try{if(closeHandshake ()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:00:20.954697", "n_pass": [5093, 540, 340], "score": "0.9685", "loss": "0.0936", "code": "void run(){try{if(closeHandshake()){} t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:00:23.735988", "n_pass": [5099, 541, 341], "score": "0.9813", "loss": "0.0338", "code": "void run(){try{if(closeHandshake()){}t;while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:00:26.513322", "n_pass": [5100, 542, 342], "score": "0.9477", "loss": "0.1071", "code": "void run(){try{if(closeHandshake()){};while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:00:29.256329", "n_pass": [5101, 543, 343], "score": "0.915", "loss": "0.3695", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus=getHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:00:32.180776", "n_pass": [5161, 544, 344], "score": "0.9819", "loss": "0.0752", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatusgetHandshakeStatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:00:34.962488", "n_pass": [5162, 545, 345], "score": "0.9289", "loss": "0.2019", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP=0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:00:38.859719", "n_pass": [5237, 546, 346], "score": "0.9909", "loss": "0.0212", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP0)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:00:41.652165", "n_pass": [5238, 547, 347], "score": "0.9871", "loss": "0.0465", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } } endHandshakeprocessRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:00:44.897539", "n_pass": [5352, 548, 348], "score": "0.7661", "loss": "1.2312", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {log( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:01:15.754284", "n_pass": [5823, 549, 349], "score": "0.9885", "loss": "0.0265", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {( \"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:01:18.521534", "n_pass": [5824, 550, 350], "score": "0.9793", "loss": "0.0785", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"handshaking\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:01:21.294665", "n_pass": [5826, 551, 351], "score": "0.9914", "loss": "0.0139", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\"); try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:01:24.097583", "n_pass": [5830, 552, 352], "score": "0.9938", "loss": "0.0166", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try {} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:01:26.877405", "n_pass": [5832, 553, 353], "score": "0.9171", "loss": "0.3923", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{} catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:01:29.686526", "n_pass": [5835, 554, 354], "score": "0.9982", "loss": "0.0034", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch (IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:01:32.468625", "n_pass": [5837, 555, 355], "score": "0.9966", "loss": "0.0057", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex) { log( \"\", ex); } } }"}
{"time": "2021-01-20 17:01:35.297226", "n_pass": [5843, 556, 356], "score": "0.9949", "loss": "0.0066", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){ log( \"\", ex); } } }"}
{"time": "2021-01-20 17:01:38.088030", "n_pass": [5845, 557, 357], "score": "0.9983", "loss": "0.0038", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log( \"\", ex); } } }"}
{"time": "2021-01-20 17:01:40.873280", "n_pass": [5848, 558, 358], "score": "0.9676", "loss": "0.0943", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\", ex); } } }"}
{"time": "2021-01-20 17:01:43.681867", "n_pass": [5852, 559, 359], "score": "0.9689", "loss": "0.1016", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex); } } }"}
{"time": "2021-01-20 17:01:46.461418", "n_pass": [5856, 560, 360], "score": "0.9984", "loss": "0.0019", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);} } }"}
{"time": "2021-01-20 17:01:49.232195", "n_pass": [5858, 561, 361], "score": "0.9988", "loss": "0.0015", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}} }"}
{"time": "2021-01-20 17:01:52.003701", "n_pass": [5860, 562, 362], "score": "0.9641", "loss": "0.2149", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){info(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:01:57.198575", "n_pass": [6068, 563, 363], "score": "0.9994", "loss": "0.0008", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\" \" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:01:59.967090", "n_pass": [6071, 564, 364], "score": "0.8516", "loss": "0.6478", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\" ); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:02.724475", "n_pass": [6073, 565, 365], "score": "0.9996", "loss": "0.0004", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\"); } } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:05.511392", "n_pass": [6076, 566, 366], "score": "0.9911", "loss": "0.0102", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");} } if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:08.290591", "n_pass": [6078, 567, 367], "score": "0.9937", "loss": "0.0139", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}} if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:11.065233", "n_pass": [6080, 568, 368], "score": "0.9992", "loss": "0.0011", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if (rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:13.840944", "n_pass": [6082, 569, 369], "score": "0.9971", "loss": "0.0065", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd ) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:16.616651", "n_pass": [6085, 570, 370], "score": "0.9288", "loss": "0.1112", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd) { } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:19.402023", "n_pass": [6087, 571, 371], "score": "0.9925", "loss": "0.0093", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){ } } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:22.174018", "n_pass": [6089, 572, 372], "score": "0.9961", "loss": "0.0079", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){} } if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:24.958011", "n_pass": [6091, 573, 373], "score": "0.9971", "loss": "0.0082", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}} if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:27.724764", "n_pass": [6093, 574, 374], "score": "0.9997", "loss": "0.0004", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if (isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:30.500839", "n_pass": [6095, 575, 375], "score": "0.9992", "loss": "0.0013", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()) {(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:33.292556", "n_pass": [6101, 576, 376], "score": "0.9976", "loss": "0.0031", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine); } } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:36.083126", "n_pass": [6107, 577, 377], "score": "0.4873", "loss": "1.3102", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);} } } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:38.851604", "n_pass": [6109, 578, 378], "score": "0.999", "loss": "0.0016", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}} } if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:41.624037", "n_pass": [6111, 579, 379], "score": "0.9917", "loss": "0.0093", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}} if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:44.429069", "n_pass": [6113, 580, 380], "score": "0.9916", "loss": "0.0134", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if (TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:47.213087", "n_pass": [6115, 581, 381], "score": "0.9989", "loss": "0.0016", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK) {currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:49.989623", "n_pass": [6119, 582, 382], "score": "0.9929", "loss": "0.0102", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while ((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:52.776611", "n_pass": [6126, 583, 383], "score": "0.977", "loss": "0.0281", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r ) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:55.552323", "n_pass": [6130, 584, 384], "score": "0.9958", "loss": "0.0045", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r) ) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:02:58.345592", "n_pass": [6132, 585, 385], "score": "0.913", "loss": "0.1212", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)) { run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:01.126761", "n_pass": [6134, 586, 386], "score": "0.841", "loss": "1.0", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){ run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:03.897048", "n_pass": [6136, 587, 387], "score": "0.9952", "loss": "0.0079", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run(); }if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:06.688385", "n_pass": [6141, 588, 388], "score": "0.9918", "loss": "0.0118", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if (log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:09.504696", "n_pass": [6144, 589, 389], "score": "0.9452", "loss": "0.3334", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if(log(Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:12.271193", "n_pass": [6146, 590, 390], "score": "0.9769", "loss": "0.0411", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)) {info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:15.051568", "n_pass": [6151, 591, 391], "score": "0.9947", "loss": "0.0102", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){info( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:17.843250", "n_pass": [6153, 592, 392], "score": "0.9966", "loss": "0.0055", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){( (t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:20.614475", "n_pass": [6155, 593, 393], "score": "0.9973", "loss": "0.0029", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t)); } } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:23.419988", "n_pass": [6161, 594, 394], "score": "0.9972", "loss": "0.003", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));} } if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:26.180360", "n_pass": [6163, 595, 395], "score": "0.9915", "loss": "0.0094", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}} if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:28.948322", "n_pass": [6165, 596, 396], "score": "0.9995", "loss": "0.0007", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if (hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:31.732614", "n_pass": [6167, 597, 397], "score": "0.9994", "loss": "0.0007", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus ==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:34.495321", "n_pass": [6170, 598, 398], "score": "0.9973", "loss": "0.0041", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus==HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:37.267031", "n_pass": [6171, 599, 399], "score": "0.996", "loss": "0.0092", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus=HANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:40.047079", "n_pass": [6172, 600, 400], "score": "0.9985", "loss": "0.0024", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatusHANDSHAKING) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:42.814541", "n_pass": [6173, 601, 401], "score": "0.9996", "loss": "0.0005", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus) { } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:45.583208", "n_pass": [6175, 602, 402], "score": "0.9995", "loss": "0.001", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus){ } }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:48.350974", "n_pass": [6177, 603, 403], "score": "0.9995", "loss": "0.0006", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus){} }processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:51.122260", "n_pass": [6179, 604, 404], "score": "0.9995", "loss": "0.0005", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus){}}processRealInput(getIn(), in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:53.925989", "n_pass": [6187, 605, 405], "score": "0.9997", "loss": "0.0003", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus){}}processRealInput(getIn(),in); } catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:56.731308", "n_pass": [6191, 606, 406], "score": "0.9999", "loss": "0.0001", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus){}}processRealInput(getIn(),in);} catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:03:59.521414", "n_pass": [6193, 607, 407], "score": "0.9993", "loss": "0.001", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus){}}processRealInput(getIn(),in);}catch (Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:04:02.299091", "n_pass": [6195, 608, 408], "score": "0.9998", "loss": "0.0002", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus){}}processRealInput(getIn(),in);}catch(Throwable t) {(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}
{"time": "2021-01-20 17:04:05.104838", "n_pass": [6201, 609, 409], "score": "0.9997", "loss": "0.0004", "code": "void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(\"\"+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){(\"\");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(\"\"+rd);}}finally{flip();}if(0){{(\"\");}net();rd().read;if(debugWrap){(\"\");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus){}}processRealInput(getIn(),in);}catch(Throwable t){(\"\");try{}catch(IOException ex){log(\"\",ex);}}}"}

Minimal simplified code:
void run(){try{if(closeHandshake()){}while(isAppendClosed){{}if((Level)){(""+getHandshakeStatus());}if(hstatus){synchronized(myNetOutData){while(WRAP){try{(myNetOutData);}catch(Throwable t){(myNetOutData);}hstatus();}}}if(UNWRAP){while(hstatus){if(remaining()>0){if(debugWrap){info();}wrap();hstatus();if(myAppInData){("");}if(getStatus().CLOSED){}}if(wrap()==(UNWRAP)){compact();try{if(debugWrap){(""+rd);}}finally{flip();}if(0){{("");}net();rd().read;if(debugWrap){("");}}if(rd){}}if(isLoggable()){(sslEngine);}}}if(TASK){currentTimeMillis();while((r)){run();}if((Level)){((t));}}if(hstatus){}}processRealInput(getIn(),in);}catch(Throwable t){("");try{}catch(IOException ex){log("",ex);}}}

