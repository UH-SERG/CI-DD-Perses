
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/modules/tomcat-lite/java/org/apache/tomcat/lite/io/NioThread_run.java
method_name = run
method_body = public void run() { int sloops = 0; if (debug) { log.info("Start NIO thread, daemon=" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if (debugWakeup && selected == 0) { if (sleepTime < maxSleep - 1000) { log.info("Wakeup " + selected + " " + slept + " " + sleepTime); } } if (slept < 10 && selected == 0) { if (sloops > 50) { sloops = 0; log.severe("Looping !"); resetSelector(); } sloops++; } if (selected != 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info("Wakeup selCnt=" + selected + " slept=" + (lastWakeup - now) + " ready: " + readyOps + " v=" + sk.isValid() + " ch=" + ch); } if (ch == null) { log.severe("Missing channel"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe("Invalid state, selKey doesn't match "); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe("Invalid state, channel doesn't match "); } if (!sk.isValid()) { if (debug) { log.info("!isValid, closed socket " + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning("Callback too long ! ops=" + ready + " time=" + callbackTime + " ch=" + ch + " " + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, "SelectorThread: Channel error, closing", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, "SelectorThread: Error in select", e); } } log.info("SelectorThread done"); }
predict, score, loss = run, 0.7998731136322021, 1.234201192855835

Trace of simplified code(s):
{"time": "2021-01-20 16:17:22.589995", "n_pass": [1, 1, 1], "score": "0.7575", "loss": "0.9345", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if (debugWakeup && selected == 0) { if (sleepTime < maxSleep - 1000) { log.info(\"Wakeup \" + selected + \" \" + slept + \" \" + sleepTime); } } if (slept < 10 && selected == 0) { if (sloops > 50) { sloops = 0; log.severe(\"Looping !\"); resetSelector(); } sloops++; } if (selected != 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:17:25.548065", "n_pass": [21, 2, 2], "score": "0.8588", "loss": "0.8207", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if ( 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:17:28.550003", "n_pass": [49, 3, 3], "score": "0.9937", "loss": "0.0231", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if ( 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:17:31.661283", "n_pass": [108, 4, 4], "score": "0.9474", "loss": "0.489", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if ( 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:17:35.362441", "n_pass": [218, 5, 5], "score": "0.9944", "loss": "0.0202", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } System.currentTimeMillis(); long slept = lastWakeup - now; if ( 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:17:38.276287", "n_pass": [219, 6, 6], "score": "0.9888", "loss": "0.0224", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:17:41.214086", "n_pass": [221, 7, 7], "score": "0.9637", "loss": "0.095", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:17:47.010675", "n_pass": [224, 9, 8], "score": "0.8984", "loss": "0.1237", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:17:49.899955", "n_pass": [228, 10, 9], "score": "0.9379", "loss": "0.0961", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:17:55.856088", "n_pass": [269, 12, 10], "score": "0.3603", "loss": "2.17", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:05.513890", "n_pass": [417, 15, 11], "score": "0.8716", "loss": "0.342", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:08.418020", "n_pass": [422, 16, 12], "score": "0.3183", "loss": "3.2763", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:11.334488", "n_pass": [429, 17, 13], "score": "0.87", "loss": "0.3251", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:14.215279", "n_pass": [436, 18, 14], "score": "0.9947", "loss": "0.0368", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:17.102246", "n_pass": [440, 19, 15], "score": "0.7606", "loss": "1.4533", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:20.049952", "n_pass": [456, 20, 16], "score": "0.9522", "loss": "0.0952", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:22.932399", "n_pass": [458, 21, 17], "score": "0.948", "loss": "0.1025", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:28.734723", "n_pass": [477, 23, 18], "score": "0.5159", "loss": "1.1356", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:31.663388", "n_pass": [488, 24, 19], "score": "0.8476", "loss": "0.5213", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:34.527582", "n_pass": [494, 25, 20], "score": "0.9832", "loss": "0.1019", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:37.593299", "n_pass": [541, 26, 21], "score": "0.8807", "loss": "0.3802", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:43.741234", "n_pass": [782, 28, 22], "score": "0.9429", "loss": "0.3951", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:46.589542", "n_pass": [784, 29, 23], "score": "0.9737", "loss": "0.1534", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:49.962808", "n_pass": [797, 30, 24], "score": "0.7387", "loss": "0.7691", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:53.344627", "n_pass": [809, 31, 25], "score": "0.9506", "loss": "0.2528", "code": "public void run() { if (debug) { log.info(\"Start, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:56.214268", "n_pass": [810, 32, 26], "score": "0.9053", "loss": "0.548", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:18:59.088609", "n_pass": [817, 33, 27], "score": "0.9542", "loss": "0.2404", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:01.962659", "n_pass": [827, 34, 28], "score": "0.8493", "loss": "0.4286", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:04.834546", "n_pass": [828, 35, 29], "score": "0.8348", "loss": "1.6722", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:07.709107", "n_pass": [829, 36, 30], "score": "0.9618", "loss": "0.0936", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now);iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:10.583999", "n_pass": [830, 37, 31], "score": "0.9524", "loss": "0.1805", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:13.450292", "n_pass": [836, 38, 32], "score": "0.8853", "loss": "1.5687", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk = i; i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:19.176148", "n_pass": [838, 40, 33], "score": "0.8208", "loss": "1.8", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk = i; i.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:22.088817", "n_pass": [849, 41, 34], "score": "0.8067", "loss": "0.5094", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk = i; i.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:25.032291", "n_pass": [871, 42, 35], "score": "0.9741", "loss": "0.6733", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk = i; i.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:27.937970", "n_pass": [885, 43, 36], "score": "0.94", "loss": "0.3721", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk = i; i.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:30.861727", "n_pass": [902, 44, 37], "score": "0.8381", "loss": "0.3504", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk = i; i.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:36.585680", "n_pass": [905, 46, 38], "score": "0.7446", "loss": "0.6623", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk = i; i.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); ch.writeInterest =(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:39.460783", "n_pass": [909, 47, 39], "score": "0.8475", "loss": "0.5858", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk = i; i.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); ch.writeInterest =(ch); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:19:52.029528", "n_pass": [979, 51, 40], "score": "0.9087", "loss": "0.3685", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk; i.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); ch.writeInterest =(ch); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:01.803061", "n_pass": [1057, 54, 41], "score": "0.6885", "loss": "0.9247", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk; i.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); ch.writeInterest =(ch); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:04.642684", "n_pass": [1066, 55, 42], "score": "0.8593", "loss": "0.2521", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk; i.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); ch.writeInterest =(ch); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:08.562033", "n_pass": [1114, 56, 43], "score": "0.3988", "loss": "1.1385", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) {; i.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); ch.writeInterest =(ch); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:11.363303", "n_pass": [1115, 57, 44], "score": "0.8653", "loss": "1.0089", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) {isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); ch.writeInterest =(ch); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:14.170028", "n_pass": [1116, 58, 45], "score": "0.9157", "loss": "0.1507", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); ch.writeInterest =(ch); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:17.212446", "n_pass": [1177, 59, 46], "score": "0.5538", "loss": "0.9601", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); (ch); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:20.025177", "n_pass": [1178, 60, 47], "score": "0.6973", "loss": "2.2676", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:22.863931", "n_pass": [1186, 61, 48], "score": "0.5859", "loss": "0.9146", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:32.489025", "n_pass": [1579, 63, 49], "score": "0.4975", "loss": "1.1472", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:35.306073", "n_pass": [1582, 64, 50], "score": "0.644", "loss": "0.8088", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if ( 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:38.098193", "n_pass": [1583, 65, 51], "score": "0.8308", "loss": "0.6305", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:43.742559", "n_pass": [1590, 67, 52], "score": "0.839", "loss": "0.4523", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:49.390607", "n_pass": [1598, 69, 53], "score": "0.5328", "loss": "0.803", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:52.210239", "n_pass": [1601, 70, 54], "score": "0.9908", "loss": "0.066", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCountcallbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:55.017750", "n_pass": [1602, 71, 55], "score": "0.9125", "loss": "0.1407", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:20:57.820571", "n_pass": [1603, 72, 56], "score": "0.827", "loss": "0.6709", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:00.663129", "n_pass": [1612, 73, 57], "score": "0.7568", "loss": "2.1309", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:03.473663", "n_pass": [1615, 74, 58], "score": "0.8796", "loss": "0.6025", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptiont; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:06.256933", "n_pass": [1616, 75, 59], "score": "0.9196", "loss": "0.1634", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:11.948665", "n_pass": [1631, 77, 60], "score": "0.8957", "loss": "1.3172", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:14.790632", "n_pass": [1640, 78, 61], "score": "0.8942", "loss": "1.3213", "code": "void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:18.074113", "n_pass": [1649, 79, 62], "score": "0.9224", "loss": "0.3503", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:20.951898", "n_pass": [1663, 80, 63], "score": "0.9959", "loss": "0.022", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:23.743620", "n_pass": [1665, 81, 64], "score": "0.9859", "loss": "0.2558", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPending; long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:26.560749", "n_pass": [1666, 82, 65], "score": "0.9759", "loss": "0.342", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendinglong now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:29.366510", "n_pass": [1667, 83, 66], "score": "0.8922", "loss": "0.4757", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingnow = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:32.169158", "n_pass": [1668, 84, 67], "score": "0.9771", "loss": "0.1487", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPending= System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:34.962428", "n_pass": [1669, 85, 68], "score": "0.836", "loss": "0.3767", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingSystem.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:37.749458", "n_pass": [1670, 86, 69], "score": "0.9912", "loss": "0.0271", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:40.560995", "n_pass": [1679, 87, 70], "score": "0.9275", "loss": "0.2003", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (i.hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:43.368143", "n_pass": [1684, 88, 71], "score": "0.9976", "loss": "0.0264", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:46.163972", "n_pass": [1688, 89, 72], "score": "0.9705", "loss": "0.279", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:49.425017", "n_pass": [1695, 90, 73], "score": "0.8212", "loss": "2.1521", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:52.221067", "n_pass": [1696, 91, 74], "score": "0.8501", "loss": "0.4415", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:55.076976", "n_pass": [1704, 92, 75], "score": "0.908", "loss": "0.4983", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:21:57.898905", "n_pass": [1708, 93, 76], "score": "0.9044", "loss": "0.3578", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:00.688409", "n_pass": [1709, 94, 77], "score": "0.949", "loss": "0.1537", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:03.503979", "n_pass": [1711, 95, 78], "score": "0.9217", "loss": "0.4193", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:06.324683", "n_pass": [1720, 96, 79], "score": "0.957", "loss": "0.5583", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + readyOps + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:09.144677", "n_pass": [1723, 97, 80], "score": "0.9909", "loss": "0.1181", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:11.944990", "n_pass": [1724, 98, 81], "score": "0.9641", "loss": "0.0873", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \" v=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:14.741676", "n_pass": [1726, 99, 82], "score": "0.9813", "loss": "0.1099", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:17.523287", "n_pass": [1730, 100, 83], "score": "0.6596", "loss": "1.2573", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (ch == null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:20.340226", "n_pass": [1738, 101, 84], "score": "0.9869", "loss": "0.0445", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (ch= null) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:23.122050", "n_pass": [1739, 102, 85], "score": "0.8804", "loss": "0.2699", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log.log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:25.930384", "n_pass": [1743, 103, 86], "score": "0.9526", "loss": "0.3476", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log.severe(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:28.722604", "n_pass": [1744, 104, 87], "score": "0.6739", "loss": "1.1948", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"Invalid match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:31.516154", "n_pass": [1746, 105, 88], "score": "0.9644", "loss": "0.1135", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"match \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:34.310849", "n_pass": [1747, 106, 89], "score": "0.5773", "loss": "0.9794", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:37.105068", "n_pass": [1750, 107, 90], "score": "0.9898", "loss": "0.1213", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:39.908341", "n_pass": [1752, 108, 91], "score": "0.8657", "loss": "0.6614", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:42.701740", "n_pass": [1757, 109, 92], "score": "0.9235", "loss": "0.2904", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel.channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:45.499535", "n_pass": [1758, 110, 93], "score": "0.8765", "loss": "0.2683", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch.channel = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:48.307181", "n_pass": [1763, 111, 94], "score": "0.875", "loss": "0.369", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sk.channel(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:51.121683", "n_pass": [1766, 112, 95], "score": "0.9703", "loss": "0.058", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sk(); log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:53.882088", "n_pass": [1767, 113, 96], "score": "0.975", "loss": "0.08", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sk; log.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:56.682782", "n_pass": [1768, 114, 97], "score": "0.9922", "loss": "0.0254", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sklog.severe(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:22:59.469622", "n_pass": [1769, 115, 98], "score": "0.9362", "loss": "0.1445", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:02.279493", "n_pass": [1772, 116, 99], "score": "0.9897", "loss": "0.071", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:05.090890", "n_pass": [1779, 117, 100], "score": "0.99", "loss": "0.0327", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk()) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:07.862045", "n_pass": [1780, 118, 101], "score": "0.429", "loss": "1.3111", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { log.info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:10.668230", "n_pass": [1787, 119, 102], "score": "0.9453", "loss": "0.1855", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!isValid,\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:13.449453", "n_pass": [1790, 120, 103], "score": "0.3064", "loss": "1.9921", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:16.251370", "n_pass": [1799, 121, 104], "score": "0.6926", "loss": "0.6327", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:19.027176", "n_pass": [1801, 122, 105], "score": "0.5468", "loss": "1.0793", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:21.841800", "n_pass": [1809, 123, 106], "score": "0.6709", "loss": "0.7094", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:24.660425", "n_pass": [1820, 124, 107], "score": "0.5253", "loss": "1.1225", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:27.441828", "n_pass": [1825, 125, 108], "score": "0.9996", "loss": "0.0005", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValidisReadable()) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:30.195742", "n_pass": [1826, 126, 109], "score": "0.997", "loss": "0.0035", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:33.207006", "n_pass": [1832, 127, 110], "score": "0.9408", "loss": "0.111", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback tooops=\" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:38.752247", "n_pass": [1841, 129, 111], "score": "0.9781", "loss": "0.0549", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback tooops=\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:41.613087", "n_pass": [1859, 130, 112], "score": "0.9912", "loss": "0.0405", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback tooops=\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:44.961662", "n_pass": [1903, 131, 113], "score": "0.9996", "loss": "0.0005", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback tooops=\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:48.236309", "n_pass": [1931, 132, 114], "score": "0.9367", "loss": "0.1451", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback tooops=\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:51.068048", "n_pass": [1959, 133, 115], "score": "0.6961", "loss": "0.5406", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback tooops=\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:53.831588", "n_pass": [1963, 134, 116], "score": "0.9994", "loss": "0.0008", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\"); sk; } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback tooops=\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:56.584733", "n_pass": [1964, 135, 117], "score": "0.9799", "loss": "0.0396", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) { ch = sksevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback tooops=\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:23:59.373857", "n_pass": [1973, 136, 118], "score": "0.997", "loss": "0.0033", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) { ch =severe(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback tooops=\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:24:02.301076", "n_pass": [2024, 137, 119], "score": "0.9825", "loss": "0.0211", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) { ch =severe(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } beforeCallback; if (0) { log.warning(\"Callback tooops=\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:24:05.046668", "n_pass": [2025, 138, 120], "score": "0.9989", "loss": "0.0014", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) { ch =severe(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback tooops=\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:24:07.815141", "n_pass": [2031, 139, 121], "score": "0.9984", "loss": "0.002", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) { ch =severe(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:24:11.796723", "n_pass": [2157, 140, 122], "score": "0.9644", "loss": "0.0616", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) { chsevere(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:24:16.023134", "n_pass": [2337, 141, 123], "score": "0.9434", "loss": "0.1984", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {severe(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:02.045535", "n_pass": [2875, 142, 124], "score": "0.9987", "loss": "0.0016", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"t \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:04.796951", "n_pass": [2877, 143, 125], "score": "0.9999", "loss": "0.0002", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\" \"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:07.573676", "n_pass": [2878, 144, 126], "score": "0.9975", "loss": "0.0036", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\"); } if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:10.341824", "n_pass": [2882, 145, 127], "score": "0.9993", "loss": "0.0009", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");} if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:13.123326", "n_pass": [2884, 146, 128], "score": "0.9982", "loss": "0.0025", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if (!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:15.884383", "n_pass": [2886, 147, 129], "score": "0.9987", "loss": "0.0027", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(!sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:18.644260", "n_pass": [2888, 148, 130], "score": "0.9919", "loss": "0.0297", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk) { if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:21.432882", "n_pass": [2891, 149, 131], "score": "0.9992", "loss": "0.0013", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){ if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:24.200650", "n_pass": [2893, 150, 132], "score": "0.9589", "loss": "0.0688", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if (debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:26.955901", "n_pass": [2895, 151, 133], "score": "0.9959", "loss": "0.0053", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug) { info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:29.745616", "n_pass": [2899, 152, 134], "score": "0.9932", "loss": "0.0204", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){ info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:32.509333", "n_pass": [2901, 153, 135], "score": "0.9165", "loss": "0.2572", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){info(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:35.265774", "n_pass": [2902, 154, 136], "score": "0.9928", "loss": "0.0151", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"!\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:38.023493", "n_pass": [2905, 155, 137], "score": "0.9972", "loss": "0.0076", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\" + ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:40.803584", "n_pass": [2907, 156, 138], "score": "0.9977", "loss": "0.0027", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:43.562004", "n_pass": [2909, 157, 139], "score": "0.973", "loss": "0.0327", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch); }  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:46.322235", "n_pass": [2913, 158, 140], "score": "0.9989", "loss": "0.0015", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}  } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:49.098874", "n_pass": [2915, 159, 141], "score": "0.9779", "loss": "0.0266", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);} } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:51.868271", "n_pass": [2916, 160, 142], "score": "0.9991", "loss": "0.0013", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}} try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:54.639552", "n_pass": [2918, 161, 143], "score": "0.9985", "loss": "0.0021", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:25:57.396887", "n_pass": [2920, 162, 144], "score": "0.9861", "loss": "0.0292", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:00.155735", "n_pass": [2922, 163, 145], "score": "0.9993", "loss": "0.0009", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:02.909484", "n_pass": [2924, 164, 146], "score": "0.9978", "loss": "0.0031", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:05.679475", "n_pass": [2925, 165, 147], "score": "0.974", "loss": "0.1604", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{readyreadyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:08.436202", "n_pass": [2926, 166, 148], "score": "0.9889", "loss": "0.0152", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready(); if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:11.209418", "n_pass": [2930, 167, 149], "score": "0.986", "loss": "0.0363", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if (sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:13.970594", "n_pass": [2932, 168, 150], "score": "0.9185", "loss": "0.2518", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk.isValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:16.729538", "n_pass": [2935, 169, 151], "score": "0.9979", "loss": "0.0059", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(skisValid()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:19.485731", "n_pass": [2936, 170, 152], "score": "0.924", "loss": "0.1001", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()) { handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:22.252291", "n_pass": [2940, 171, 153], "score": "0.9798", "loss": "0.0719", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){ handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:25.003443", "n_pass": [2942, 172, 154], "score": "0.9818", "loss": "0.0334", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){handleAccept(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:27.753179", "n_pass": [2943, 173, 155], "score": "0.9254", "loss": "0.1987", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:30.521304", "n_pass": [2948, 174, 156], "score": "0.9085", "loss": "0.1827", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);} if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:33.273750", "n_pass": [2950, 175, 157], "score": "0.9421", "loss": "0.1323", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if (sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:36.028700", "n_pass": [2952, 176, 158], "score": "0.9962", "loss": "0.0096", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk.isValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:38.842261", "n_pass": [2955, 177, 159], "score": "0.9996", "loss": "0.0013", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(skisValid() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:41.597127", "n_pass": [2956, 178, 160], "score": "0.9993", "loss": "0.0017", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk() && sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:44.371313", "n_pass": [2959, 179, 161], "score": "0.9934", "loss": "0.0083", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&& sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:47.122608", "n_pass": [2960, 180, 162], "score": "0.9899", "loss": "0.0202", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()& sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:49.907498", "n_pass": [2962, 181, 163], "score": "0.9975", "loss": "0.0096", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:52.655647", "n_pass": [2964, 182, 164], "score": "0.6659", "loss": "0.7482", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&skisConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:55.398764", "n_pass": [2965, 183, 165], "score": "0.9505", "loss": "0.1438", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:26:58.152204", "n_pass": [2969, 184, 166], "score": "0.9997", "loss": "0.0008", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){ sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:00.912171", "n_pass": [2971, 185, 167], "score": "0.9861", "loss": "0.0279", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:03.666404", "n_pass": [2973, 186, 168], "score": "0.9883", "loss": "0.0417", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){skinterestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:06.402495", "n_pass": [2974, 187, 169], "score": "0.7663", "loss": "0.48", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:09.149447", "n_pass": [2976, 188, 170], "score": "0.9994", "loss": "0.0011", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk(); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:11.904305", "n_pass": [2979, 189, 171], "score": "0.9849", "loss": "0.0689", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();} if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:14.673355", "n_pass": [2981, 190, 172], "score": "0.9746", "loss": "0.0354", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:17.425784", "n_pass": [2983, 191, 173], "score": "0.9227", "loss": "0.212", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:20.178711", "n_pass": [2986, 192, 174], "score": "0.958", "loss": "0.0679", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(skisValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:22.918070", "n_pass": [2987, 193, 175], "score": "0.9982", "loss": "0.0041", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:25.667014", "n_pass": [2989, 194, 176], "score": "0.999", "loss": "0.0024", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){ handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:28.412522", "n_pass": [2991, 195, 177], "score": "0.9972", "loss": "0.0067", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:31.171436", "n_pass": [2992, 196, 178], "score": "0.9994", "loss": "0.0012", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:33.941511", "n_pass": [3001, 197, 179], "score": "0.9373", "loss": "0.1786", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:36.708281", "n_pass": [3003, 198, 180], "score": "0.998", "loss": "0.005", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:39.490911", "n_pass": [3007, 199, 181], "score": "0.994", "loss": "0.0142", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:42.262259", "n_pass": [3014, 200, 182], "score": "0.9729", "loss": "0.076", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { ; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:45.017886", "n_pass": [3015, 201, 183], "score": "0.9915", "loss": "0.0352", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:47.758475", "n_pass": [3017, 202, 184], "score": "0.9777", "loss": "0.036", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:50.527662", "n_pass": [3025, 203, 185], "score": "0.9757", "loss": "0.0815", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"SelectorThread: Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:53.270245", "n_pass": [3027, 204, 186], "score": "0.998", "loss": "0.0044", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\" Channel\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:56.013699", "n_pass": [3028, 205, 187], "score": "0.9977", "loss": "0.0035", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:27:58.775480", "n_pass": [3031, 206, 188], "score": "0.9971", "loss": "0.0055", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:28:01.523757", "n_pass": [3037, 207, 189], "score": "0.9923", "loss": "0.0199", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:28:04.255135", "n_pass": [3038, 208, 190], "score": "0.9986", "loss": "0.0025", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:28:07.036959", "n_pass": [3047, 209, 191], "score": "0.9826", "loss": "0.0742", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:28:09.779517", "n_pass": [3049, 210, 192], "score": "0.9841", "loss": "0.0563", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log(SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:28:12.523060", "n_pass": [3050, 211, 193], "score": "0.9992", "loss": "0.0015", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:28:15.295143", "n_pass": [3058, 212, 194], "score": "0.9965", "loss": "0.0045", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"SelectorThread done\"); }"}
{"time": "2021-01-20 16:28:18.032996", "n_pass": [3060, 213, 195], "score": "0.9995", "loss": "0.0008", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:21.661373", "n_pass": [3069, 214, 196], "score": "0.9779", "loss": "0.0684", "code": "void run(){ if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:24.411677", "n_pass": [3071, 215, 197], "score": "0.9873", "loss": "0.0326", "code": "void run(){if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:27.162594", "n_pass": [3073, 216, 198], "score": "0.9962", "loss": "0.0098", "code": "void run(){if(debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:29.895475", "n_pass": [3077, 217, 199], "score": "0.9985", "loss": "0.0022", "code": "void run(){if(debug){ info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:32.620168", "n_pass": [3079, 218, 200], "score": "0.9983", "loss": "0.0024", "code": "void run(){if(debug){info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:35.355140", "n_pass": [3080, 219, 201], "score": "0.9984", "loss": "0.0029", "code": "void run(){if(debug){(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:38.078100", "n_pass": [3083, 220, 202], "score": "0.998", "loss": "0.0032", "code": "void run(){if(debug){(\"\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:40.796296", "n_pass": [3085, 221, 203], "score": "0.9982", "loss": "0.0035", "code": "void run(){if(debug){(\"\"+ daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:43.525496", "n_pass": [3087, 222, 204], "score": "0.9988", "loss": "0.0022", "code": "void run(){if(debug){(\"\"+daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:46.262140", "n_pass": [3091, 223, 205], "score": "0.9985", "loss": "0.0027", "code": "void run(){if(debug){(\"\"+daemon);} while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:48.991606", "n_pass": [3093, 224, 206], "score": "0.9974", "loss": "0.0066", "code": "void run(){if(debug){(\"\"+daemon);}while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:51.756425", "n_pass": [3095, 225, 207], "score": "0.9987", "loss": "0.0018", "code": "void run(){if(debug){(\"\"+daemon);}while(running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:54.502413", "n_pass": [3099, 226, 208], "score": "0.9985", "loss": "0.0023", "code": "void run(){if(debug){(\"\"+daemon);}while(running){ try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:57.232467", "n_pass": [3101, 227, 209], "score": "0.9986", "loss": "0.0022", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:28:59.967555", "n_pass": [3103, 228, 210], "score": "0.9967", "loss": "0.008", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{ currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:02.699496", "n_pass": [3105, 229, 211], "score": "0.9907", "loss": "0.0179", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:05.442359", "n_pass": [3110, 230, 212], "score": "0.9978", "loss": "0.0039", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if (nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:08.195740", "n_pass": [3112, 231, 213], "score": "0.9987", "loss": "0.0026", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup < now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:10.926344", "n_pass": [3115, 232, 214], "score": "0.9951", "loss": "0.012", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup< now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:13.654497", "n_pass": [3117, 233, 215], "score": "0.9982", "loss": "0.0029", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now) {(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:16.395555", "n_pass": [3120, 234, 216], "score": "0.9996", "loss": "0.0006", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now); while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:19.140223", "n_pass": [3126, 235, 217], "score": "0.9981", "loss": "0.0054", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while (hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:21.886113", "n_pass": [3128, 236, 218], "score": "0.9998", "loss": "0.0003", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()) { readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:24.626301", "n_pass": [3134, 237, 219], "score": "0.9984", "loss": "0.003", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){ readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:27.361748", "n_pass": [3136, 238, 220], "score": "0.9989", "loss": "0.0018", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:30.093584", "n_pass": [3138, 239, 221], "score": "0.9974", "loss": "0.0042", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps= (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:33.262184", "n_pass": [3140, 240, 222], "score": "0.9983", "loss": "0.0027", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:35.999726", "n_pass": [3144, 241, 223], "score": "0.9988", "loss": "0.0021", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:38.765133", "n_pass": [3146, 242, 224], "score": "0.9987", "loss": "0.0018", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:41.496354", "n_pass": [3148, 243, 225], "score": "0.9989", "loss": "0.0017", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk: 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:44.244071", "n_pass": [3150, 244, 226], "score": "0.9996", "loss": "0.0007", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:46.973368", "n_pass": [3154, 245, 227], "score": "0.9988", "loss": "0.0014", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:49.703854", "n_pass": [3158, 246, 228], "score": "0.9975", "loss": "0.0049", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:52.446541", "n_pass": [3163, 247, 229], "score": "0.999", "loss": "0.0015", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+ \" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:55.164743", "n_pass": [3165, 248, 230], "score": "0.9958", "loss": "0.0135", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\" \" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:29:57.884067", "n_pass": [3167, 249, 231], "score": "0.9988", "loss": "0.0019", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\" + (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:00.606737", "n_pass": [3169, 250, 232], "score": "0.99", "loss": "0.027", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+ (lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:03.336006", "n_pass": [3171, 251, 233], "score": "0.9979", "loss": "0.0054", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(lastWakeup - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:06.085950", "n_pass": [3173, 252, 234], "score": "0.9992", "loss": "0.0014", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+( - now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:08.811860", "n_pass": [3174, 253, 235], "score": "0.9848", "loss": "0.031", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(- now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:11.536944", "n_pass": [3175, 254, 236], "score": "0.9975", "loss": "0.0033", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+( now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:14.270491", "n_pass": [3176, 255, 237], "score": "0.996", "loss": "0.0055", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now) + \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:16.995668", "n_pass": [3179, 256, 238], "score": "0.999", "loss": "0.0021", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)+ \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:19.742659", "n_pass": [3180, 257, 239], "score": "0.9997", "loss": "0.0006", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:22.461043", "n_pass": [3181, 258, 240], "score": "0.9988", "loss": "0.0022", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"  \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:25.178517", "n_pass": [3183, 259, 241], "score": "0.9978", "loss": "0.0039", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\" \" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:27.892336", "n_pass": [3184, 260, 242], "score": "0.9997", "loss": "0.0006", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\" + \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:30.643076", "n_pass": [3186, 261, 243], "score": "0.9993", "loss": "0.001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+ \"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:33.373722", "n_pass": [3188, 262, 244], "score": "0.9975", "loss": "0.0065", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"=\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:36.093198", "n_pass": [3190, 263, 245], "score": "0.9919", "loss": "0.0185", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\" +\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:38.821288", "n_pass": [3192, 264, 246], "score": "0.9987", "loss": "0.0023", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\" \" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:41.551405", "n_pass": [3195, 265, 247], "score": "0.9868", "loss": "0.0396", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:44.272466", "n_pass": [3197, 266, 248], "score": "0.9925", "loss": "0.0102", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:47.001054", "n_pass": [3199, 267, 249], "score": "0.9985", "loss": "0.0045", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:49.743623", "n_pass": [3203, 268, 250], "score": "0.998", "loss": "0.0026", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);} if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:52.467755", "n_pass": [3205, 269, 251], "score": "0.9992", "loss": "0.0011", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:55.210859", "n_pass": [3207, 270, 252], "score": "0.9987", "loss": "0.0021", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:30:57.937681", "n_pass": [3209, 271, 253], "score": "0.9994", "loss": "0.0009", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:31:00.664687", "n_pass": [3212, 272, 254], "score": "0.9992", "loss": "0.0014", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:31:03.403984", "n_pass": [3219, 273, 255], "score": "0.9998", "loss": "0.0004", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\"); } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:31:06.131269", "n_pass": [3220, 274, 256], "score": "0.9989", "loss": "0.002", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");} if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:31:08.878481", "n_pass": [3222, 275, 257], "score": "0.9911", "loss": "0.0212", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:31:11.619629", "n_pass": [3224, 276, 258], "score": "0.9996", "loss": "0.0007", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:31:14.354527", "n_pass": [3230, 277, 259], "score": "0.9964", "loss": "0.0061", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:31:17.294212", "n_pass": [3303, 278, 260], "score": "0.9986", "loss": "0.0023", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:31:20.063469", "n_pass": [3321, 279, 261], "score": "0.9918", "loss": "0.0243", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:31:22.805814", "n_pass": [3329, 280, 262], "score": "0.999", "loss": "0.0017", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }; } } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:31:25.525359", "n_pass": [3330, 281, 263], "score": "0.9994", "loss": "0.0009", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } } log(\"done\"); }"}
{"time": "2021-01-20 16:31:28.289955", "n_pass": [3345, 282, 264], "score": "0.9995", "loss": "0.0009", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:31:31.964038", "n_pass": [3383, 283, 265], "score": "0.9954", "loss": "0.0096", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeupnow){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:31:34.688354", "n_pass": [3384, 284, 266], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch); } if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:31:54.406577", "n_pass": [3702, 285, 267], "score": "1.0", "loss": "0.0", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);} if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:31:57.129579", "n_pass": [3703, 286, 268], "score": "0.9999", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:31:59.854920", "n_pass": [3705, 287, 269], "score": "1.0", "loss": "0.0", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:02.589971", "n_pass": [3709, 288, 270], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:05.344087", "n_pass": [3714, 289, 271], "score": "0.9982", "loss": "0.0034", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+ \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:08.066097", "n_pass": [3716, 290, 272], "score": "1.0", "loss": "0.0", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:10.788736", "n_pass": [3718, 291, 273], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:13.514511", "n_pass": [3720, 292, 274], "score": "0.9999", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+ callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:16.257493", "n_pass": [3722, 293, 275], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt); } { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:18.992908", "n_pass": [3726, 294, 276], "score": "1.0", "loss": "0.0", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);} { }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:21.717614", "n_pass": [3728, 295, 277], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{ }  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:24.471564", "n_pass": [3730, 296, 278], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}  } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:27.201685", "n_pass": [3732, 297, 279], "score": "0.9999", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{} } catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:29.922333", "n_pass": [3733, 298, 280], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}} catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:32.678608", "n_pass": [3735, 299, 281], "score": "0.9999", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch (Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:35.419806", "n_pass": [3737, 300, 282], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t) {(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:38.158229", "n_pass": [3743, 301, 283], "score": "0.9981", "loss": "0.0032", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\"); close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:40.895201", "n_pass": [3750, 302, 284], "score": "1.0", "loss": "0.0", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close(); } }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:43.623063", "n_pass": [3755, 303, 285], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();} }} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:46.346197", "n_pass": [3757, 304, 286], "score": "0.9979", "loss": "0.0036", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}} } catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:49.075544", "n_pass": [3760, 305, 287], "score": "0.9999", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}}} catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:51.799141", "n_pass": [3762, 306, 288], "score": "0.9999", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}}}catch (Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:54.527766", "n_pass": [3764, 307, 289], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}}}catch(Throwable e) { log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:57.274873", "n_pass": [3770, 308, 290], "score": "0.9991", "loss": "0.0012", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}}}catch(Throwable e){ log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:32:59.989537", "n_pass": [3772, 309, 291], "score": "0.9999", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}}}catch(Throwable e){log( \"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:33:02.715067", "n_pass": [3775, 310, 292], "score": "0.9999", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}}}catch(Throwable e){log(\"\", e); } }(\"done\"); }"}
{"time": "2021-01-20 16:33:05.432017", "n_pass": [3779, 311, 293], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}}}catch(Throwable e){log(\"\",e); } }(\"done\"); }"}
{"time": "2021-01-20 16:33:08.196399", "n_pass": [3783, 312, 294], "score": "1.0", "loss": "0.0", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}}}catch(Throwable e){log(\"\",e);} }(\"done\"); }"}
{"time": "2021-01-20 16:33:10.933830", "n_pass": [3785, 313, 295], "score": "1.0", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}}}catch(Throwable e){log(\"\",e);}}(\"done\"); }"}
{"time": "2021-01-20 16:33:13.658849", "n_pass": [3789, 314, 296], "score": "0.9999", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}}}catch(Throwable e){log(\"\",e);}}(\"\"); }"}
{"time": "2021-01-20 16:33:16.395660", "n_pass": [3793, 315, 297], "score": "0.9999", "loss": "0.0001", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");close();}}}}catch(Throwable e){log(\"\",e);}}(\"\");}"}

Minimal simplified code:
void run(){if(debug){(""+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){readyOps=(valid)?sk:0;if(debugWakeup){(""+""+(now)""+""+""+ch);}if(null){("");}if(channel()){("");}if(sk){if(debug){(""+ch);}}try{ready();if(sk()){(ch);}if(sk()&sk()){sk();}if(sk){(ch);}if(0){(""+""+callbackCnt);}{}}catch(Throwable t){("");close();}}}}catch(Throwable e){log("",e);}}("");}

