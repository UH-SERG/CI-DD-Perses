
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__commons-codec/src/main/java/org/apache/commons/codec/language/bm/Rule_getInstanceMap.java
method_name = getInstanceMap
method_body = public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt, final String lang) { final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throw new IllegalArgumentException(String.format("No rules found for %s, %s, %s.", nameType.getName(), rt.getName(), lang)); } return rules; }
predict, score, loss = getInstanceMap, 0.4071723222732544, 1.094578742980957

Trace of simplified code(s):
{"time": "2021-01-23 20:49:52.389124", "n_pass": [1, 1, 1], "score": "0.4072", "loss": "1.0946", "code": "public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt, final String lang) { final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throw new IllegalArgumentException(String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang)); } return rules; }"}
{"time": "2021-01-23 20:49:58.153106", "n_pass": [54, 3, 2], "score": "0.4051", "loss": "1.1518", "code": "public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt, final String lang) { final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(\"No rules found for %s, %s, %s.\", nameType.getName(), rt.getName(), lang)); } return rules; }"}
{"time": "2021-01-23 20:50:00.797237", "n_pass": [56, 4, 3], "score": "0.4086", "loss": "1.1461", "code": "public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt, final String lang) { final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(\"%s, %s.\", nameType.getName(), rt.getName(), lang)); } return rules; }"}
{"time": "2021-01-23 20:50:03.438196", "n_pass": [58, 5, 4], "score": "0.4695", "loss": "0.9576", "code": "public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt, final String lang) { final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(\"%s, %s.\", nameType.getNng)); } return rules; }"}
{"time": "2021-01-23 20:50:16.718270", "n_pass": [122, 10, 5], "score": "0.4224", "loss": "1.0564", "code": "public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt, final String lang) { final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(nameType.getNng)); } return rules; }"}
{"time": "2021-01-23 20:50:29.999988", "n_pass": [198, 15, 6], "score": "0.4082", "loss": "1.0956", "code": "public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt, final String lang) { final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(pe.getNng)); } return rules; }"}
{"time": "2021-01-23 20:50:32.665999", "n_pass": [201, 16, 7], "score": "0.7502", "loss": "0.5006", "code": "public static Map<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt, final String lang) { final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:50:35.316820", "n_pass": [205, 17, 8], "score": "0.7502", "loss": "0.5006", "code": "public staap<String, List<Rule>> getInstanceMap(final NameType nameType, final RuleType rt, final String lang) { final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:50:38.803165", "n_pass": [214, 18, 9], "score": "0.2229", "loss": "1.8873", "code": "public staap<String, List<Rule>> getInstanceMap(fiameType nameType, final RuleType rt, final String lang) { final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:50:41.436882", "n_pass": [215, 19, 10], "score": "0.2229", "loss": "1.8873", "code": "public staap<String, List<Rule>> getInstanceMap(fipe nameType, final RuleType rt, final String lang) { final Map<String, List<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:50:54.661551", "n_pass": [229, 24, 11], "score": "0.2363", "loss": "1.8043", "code": "public staap<String, List<Rule>> getInstanceMap(fipe nameType, final RuleType rt, final String lang) { final Map<String<Rule>> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:50:57.327472", "n_pass": [230, 25, 12], "score": "0.3696", "loss": "1.5393", "code": "public staap<String, List<Rule>> getInstanceMap(fipe nameType, final RuleType rt, final String lang) { final Map<String> rules = RULES.get(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:50:59.987677", "n_pass": [233, 26, 13], "score": "0.567", "loss": "1.1185", "code": "public staap<String, List<Rule>> getInstanceMap(fipe nameType, final RuleType rt, final String lang) { final Map<String> rules = RUt(nameType).get(rt).get(lang); if (rules == null) { throception(String.format(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:51:02.651483", "n_pass": [237, 27, 14], "score": "0.5558", "loss": "1.0942", "code": "public staap<String, List<Rule>> getInstanceMap(fipe nameType, final RuleType rt, final String lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (rules == null) { throception(String.format(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:51:05.287980", "n_pass": [240, 28, 15], "score": "0.5561", "loss": "1.184", "code": "public staap<String, List<Rule>> getInstanceMap(fipe nameType, final RuleType rt, final String lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r= null) { throception(String.format(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:51:07.922647", "n_pass": [241, 29, 16], "score": "0.549", "loss": "1.3091", "code": "public staap<String, List<Rule>> getInstanceMap(fipe nameType, final RuleType rt, final String lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { throception(String.format(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:51:10.570447", "n_pass": [243, 30, 17], "score": "0.549", "loss": "1.3091", "code": "public staap<String, List<Rule>> getInstanceMap(fipe nameType, final RuleType rt, final String lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(String.format(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:51:13.223556", "n_pass": [245, 31, 18], "score": "0.5927", "loss": "1.0168", "code": "public staap<String, List<Rule>> getInstanceMap(fipe nameType, final RuleType rt, final String lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(pe.getNng)); } retles; }"}
{"time": "2021-01-23 20:51:15.851452", "n_pass": [247, 32, 19], "score": "0.5703", "loss": "1.144", "code": "public staap<String, List<Rule>> getInstanceMap(fipe nameType, final RuleType rt, final String lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:51:18.501852", "n_pass": [252, 33, 20], "score": "0.5703", "loss": "1.144", "code": "publiap<String, List<Rule>> getInstanceMap(fipe nameType, final RuleType rt, final String lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:51:24.693238", "n_pass": [264, 35, 21], "score": "0.4818", "loss": "2.3118", "code": "publiap<String, List<Rule>> getInstanceMap(fipe nameType, fiuleType rt, final String lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:51:27.316080", "n_pass": [265, 36, 22], "score": "0.4818", "loss": "2.3118", "code": "publiap<String, List<Rule>> getInstanceMap(fipe nameType, fipe rt, final String lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:51:29.976800", "n_pass": [268, 37, 23], "score": "0.394", "loss": "2.7008", "code": "publiap<String, List<Rule>> getInstanceMap(fipe nameType, fipe rt, finring lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:51:33.016189", "n_pass": [287, 38, 24], "score": "0.394", "loss": "2.7008", "code": "ap<String, List<Rule>> getInstanceMap(fipe nameType, fipe rt, finring lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:51:44.815258", "n_pass": [386, 42, 25], "score": "0.394", "loss": "2.7008", "code": "ap<String,ist<Rule>> getInstanceMap(fipe nameType, fipe rt, finring lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:51:47.445090", "n_pass": [387, 43, 26], "score": "0.394", "loss": "2.7008", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType, fipe rt, finring lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:52:03.135268", "n_pass": [403, 48, 27], "score": "0.3069", "loss": "2.9116", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt, finring lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:52:05.781588", "n_pass": [406, 49, 28], "score": "0.3069", "loss": "2.9116", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,nring lang) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:52:11.046709", "n_pass": [409, 51, 29], "score": "0.2889", "loss": "2.833", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,nring g) { final Map<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:52:13.691058", "n_pass": [413, 52, 30], "score": "0.2889", "loss": "2.833", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,nring g) { finaap<String> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:52:19.369589", "n_pass": [416, 54, 31], "score": "0.275", "loss": "2.9125", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,nring g) { finaap<Str> rules = RUt(nameType).get(rtlang); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:52:32.973047", "n_pass": [427, 59, 32], "score": "0.2029", "loss": "3.2022", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,nring g) { finaap<Str> rules = RUt(nameType).get(rtg); if (r) { thion(Stormat(Nng)); } retles; }"}
{"time": "2021-01-23 20:52:40.883195", "n_pass": [435, 62, 33], "score": "0.189", "loss": "3.3246", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,nring g) { finaap<Str> rules = RUt(nameType).get(rtg); if (r) { thion(Stat(Nng)); } retles; }"}
{"time": "2021-01-23 20:52:43.514602", "n_pass": [437, 63, 34], "score": "0.2328", "loss": "2.9074", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,nring g) { finaap<Str> rules = RUt(nameType).get(rtg); if (r) { thion(Stat()); } retles; }"}
{"time": "2021-01-23 20:52:46.143686", "n_pass": [440, 64, 35], "score": "0.2493", "loss": "3.2984", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,nring g) { finaap<Str> rules = RUt(nameType).get(rtg); if (r) { thion(Stat()); } les; }"}
{"time": "2021-01-23 20:52:48.785701", "n_pass": [441, 65, 36], "score": "0.2374", "loss": "2.87", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,nring g) { finaap<Str> rules = RUt(nameType).get(rtg); if (r) { thion(Stat()); } ; }"}
{"time": "2021-01-23 20:53:15.114559", "n_pass": [469, 74, 37], "score": "0.2374", "loss": "2.87", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,nring g) { fap<Str> rules = RUt(nameType).get(rtg); if (r) { thion(Stat()); } ; }"}
{"time": "2021-01-23 20:54:02.598222", "n_pass": [619, 90, 38], "score": "0.4355", "loss": "2.5129", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { fap<Str> rules = RUt(nameType).get(rtg); if (r) { thion(Stat()); } ; }"}
{"time": "2021-01-23 20:54:15.790171", "n_pass": [628, 95, 39], "score": "0.4355", "loss": "2.5129", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<Str> rules = RUt(nameType).get(rtg); if (r) { thion(Stat()); } ; }"}
{"time": "2021-01-23 20:54:18.849336", "n_pass": [630, 96, 40], "score": "0.4364", "loss": "2.5071", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<r> rules = RUt(nameType).get(rtg); if (r) { thion(Stat()); } ; }"}
{"time": "2021-01-23 20:54:21.890943", "n_pass": [632, 97, 41], "score": "0.4107", "loss": "2.6794", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<r>ules = RUt(nameType).get(rtg); if (r) { thion(Stat()); } ; }"}
{"time": "2021-01-23 20:54:24.521041", "n_pass": [633, 98, 42], "score": "0.4042", "loss": "2.6871", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<r>es = RUt(nameType).get(rtg); if (r) { thion(Stat()); } ; }"}
{"time": "2021-01-23 20:54:27.167867", "n_pass": [636, 99, 43], "score": "0.2104", "loss": "3.3036", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<r>es =Ut(nameType).get(rtg); if (r) { thion(Stat()); } ; }"}
{"time": "2021-01-23 20:54:43.001662", "n_pass": [646, 105, 44], "score": "0.2362", "loss": "3.1225", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<r>es =Ut(nameType).get(r); if (r) { thion(Stat()); } ; }"}
{"time": "2021-01-23 20:54:48.273229", "n_pass": [654, 107, 45], "score": "0.2362", "loss": "3.1225", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<r>es =Ut(nameType).get(r); if (r) { thn(Stat()); } ; }"}
{"time": "2021-01-23 20:54:50.927877", "n_pass": [656, 108, 46], "score": "0.2411", "loss": "3.0529", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<r>es =Ut(nameType).get(r); if (r) { thn(at()); } ; }"}
{"time": "2021-01-23 20:54:53.568185", "n_pass": [658, 109, 47], "score": "0.2259", "loss": "3.2146", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<r>es =Ut(nameType).get(r); if (r) { thn(at); } ; }"}
{"time": "2021-01-23 20:54:56.190736", "n_pass": [661, 110, 48], "score": "0.2259", "loss": "3.2146", "code": "ap<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<r>es =Ut(nameType).get(r); if (r) { thn(at); } }"}
{"time": "2021-01-23 20:54:58.820328", "n_pass": [663, 111, 49], "score": "0.2259", "loss": "3.2146", "code": "p<String,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<r>es =Ut(nameType).get(r); if (r) { thn(at); } }"}
{"time": "2021-01-23 20:55:14.542338", "n_pass": [671, 117, 50], "score": "0.2037", "loss": "2.9646", "code": "p<Strin,t<Rule>> getInstanceMap(fipe nameType,pe rt,ring g) { p<r>es =Ut(nameType).get(r); if (r) { thn(at); } }"}
{"time": "2021-01-23 20:55:30.325836", "n_pass": [681, 123, 51], "score": "0.2037", "loss": "2.9646", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,pe rt,ring g) { p<r>es =Ut(nameType).get(r); if (r) { thn(at); } }"}
{"time": "2021-01-23 20:56:10.455278", "n_pass": [711, 136, 52], "score": "0.2173", "loss": "2.736", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e rt,ring g) { p<r>es =Ut(nameType).get(r); if (r) { thn(at); } }"}
{"time": "2021-01-23 20:56:13.079440", "n_pass": [714, 137, 53], "score": "0.1732", "loss": "2.8795", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g) { p<r>es =Ut(nameType).get(r); if (r) { thn(at); } }"}
{"time": "2021-01-23 20:56:40.636402", "n_pass": [744, 147, 54], "score": "0.1736", "loss": "2.8397", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g) { p<r>es =Ut(nameType).get(r); if (r) { n(at); } }"}
{"time": "2021-01-23 20:56:43.297242", "n_pass": [746, 148, 55], "score": "0.1845", "loss": "2.7193", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g) { p<r>es =Ut(nameType).get(r); if (r) { n(); } }"}
{"time": "2021-01-23 20:58:03.953805", "n_pass": [813, 176, 56], "score": "0.1771", "loss": "2.7939", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g) { p<r>es =Ut(neType).get(r); if (r) { n(); } }"}
{"time": "2021-01-23 20:58:06.602870", "n_pass": [814, 177, 57], "score": "0.1777", "loss": "2.75", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g) { p<r>es =Ut(nype).get(r); if (r) { n(); } }"}
{"time": "2021-01-23 20:59:36.869363", "n_pass": [941, 207, 58], "score": "0.1777", "loss": "2.75", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g) { p<r>es =Ut(nype).get(r);if (r) { n(); } }"}
{"time": "2021-01-23 20:59:39.489285", "n_pass": [943, 208, 59], "score": "0.1777", "loss": "2.75", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g) { p<r>es =Ut(nype).get(r);if(r) { n(); } }"}
{"time": "2021-01-23 20:59:42.140919", "n_pass": [947, 209, 60], "score": "0.1777", "loss": "2.75", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g) { p<r>es =Ut(nype).get(r);if(r){ n(); } }"}
{"time": "2021-01-23 20:59:44.773737", "n_pass": [949, 210, 61], "score": "0.1777", "loss": "2.75", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g) { p<r>es =Ut(nype).get(r);if(r){n(); } }"}
{"time": "2021-01-23 20:59:47.425011", "n_pass": [954, 211, 62], "score": "0.1777", "loss": "2.75", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g) { p<r>es =Ut(nype).get(r);if(r){n();} }"}
{"time": "2021-01-23 20:59:50.059879", "n_pass": [956, 212, 63], "score": "0.1777", "loss": "2.75", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g) { p<r>es =Ut(nype).get(r);if(r){n();}}"}
{"time": "2021-01-23 21:01:07.050548", "n_pass": [1014, 239, 64], "score": "0.1777", "loss": "2.75", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g){ p<r>es =Ut(nype).get(r);if(r){n();}}"}
{"time": "2021-01-23 21:01:09.686440", "n_pass": [1016, 240, 65], "score": "0.1777", "loss": "2.75", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g){p<r>es =Ut(nype).get(r);if(r){n();}}"}
{"time": "2021-01-23 21:01:13.140868", "n_pass": [1021, 241, 66], "score": "0.1842", "loss": "2.7129", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g){p<r>s =Ut(nype).get(r);if(r){n();}}"}
{"time": "2021-01-23 21:01:15.767599", "n_pass": [1023, 242, 67], "score": "0.1842", "loss": "2.7129", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g){p<r>s=Ut(nype).get(r);if(r){n();}}"}
{"time": "2021-01-23 21:01:18.829408", "n_pass": [1025, 243, 68], "score": "0.1828", "loss": "2.7212", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g){p<r>s=t(nype).get(r);if(r){n();}}"}
{"time": "2021-01-23 21:01:21.465943", "n_pass": [1026, 244, 69], "score": "0.1806", "loss": "2.7306", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g){p<r>s=(nype).get(r);if(r){n();}}"}
{"time": "2021-01-23 21:01:24.091500", "n_pass": [1028, 245, 70], "score": "0.1806", "loss": "2.7306", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g){p<r>s=(ype).get(r);if(r){n();}}"}
{"time": "2021-01-23 21:01:26.723557", "n_pass": [1029, 246, 71], "score": "0.1812", "loss": "2.7243", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g){p<r>s=(pe).get(r);if(r){n();}}"}
{"time": "2021-01-23 21:01:29.377129", "n_pass": [1030, 247, 72], "score": "0.1766", "loss": "2.7442", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g){p<r>s=(e).get(r);if(r){n();}}"}
{"time": "2021-01-23 21:01:42.593896", "n_pass": [1038, 252, 73], "score": "0.191", "loss": "2.6411", "code": "p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g){p<r>s=(e).get();if(r){n();}}"}

Minimal simplified code:
p<Strin,t<Rule>>getInstanceMap(fipe nameType,e t,ring g){p<r>s=(e).get();if(r){n();}}

