
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/yandex-qatools__postgresql-embedded/src/test/java/ru/yandex/qatools/embed/postgresql/TestPostgresWithPgCtl_setUp.java
method_name = setUp
method_body = @Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getInstance(new RuntimeConfigBuilder().defaults(Command.PgCtl).build()); final PostgresConfig config = new PostgresConfig(Version.Main.PRODUCTION, new AbstractPostgresConfig.Net("localhost", findFreePort()), new AbstractPostgresConfig.Storage("test"), new AbstractPostgresConfig.Timeout(), new AbstractPostgresConfig.Credentials("user", "password"), Command.PgCtl); config.getAdditionalInitDbParams().addAll(asList("-E", "SQL_ASCII", "--locale=C", "--lc-collate=C", "--lc-ctype=C")); PostgresExecutable exec = runtime.prepare(config); process = exec.start(); sleep(2000); String url = format("jdbc:postgresql://%s:%s/%s?user=%s&password=%s", config.net().host(), config.net().port(), config.storage().dbName(), config.credentials().username(), config.credentials().password()); conn = DriverManager.getConnection(url); }

Trace of simplified code(s):

{"time": "2020-12-29 00:56:05.381685", "score": "0.3353", "loss": "1.6291", "code": "class T { @Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getInstance(new RuntimeConfigBuilder().defaults(Command.PgCtl).build()); final PostgresConfig config = new PostgresConfig(Version.Main.PRODUCTION, new AbstractPostgresConfig.Net(\"localhost\", findFreePort()), new AbstractPostgresConfig.Storage(\"test\"), new AbstractPostgresConfig.Timeout(), new AbstractPostgresConfig.Credentials(\"user\", \"password\"), Command.PgCtl); config.getAdditionalInitDbParams().addAll(asList(\"-E\", \"SQL_ASCII\", \"--locale=C\", \"--lc-collate=C\", \"--lc-ctype=C\")); PostgresExecutable exec = runtime.prepare(config); process = exec.start(); sleep(2000); String url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().host(), config.net().port(), config.storage().dbName(), config.credentials().username(), config.credentials().password()); conn = DriverManager.getConnection(url); } }"}
{"time": "2020-12-29 00:59:12.762349", "score": "0.3668", "loss": "1.3271", "code": "class T { @Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getInstance(new RuntimeConfigBuilder().defaults(Command.PgCtl).build()); final PostgresConfig config = new PostgresConfig(Version.Main.PRODUCTION, new AbstractPostgresConfig.Net(\"localhost\", findFreePort()), new AbstractPostgresConfig.Storage(\"test\"), new AbstractPostgresConfig.Timeout(), new AbstractPostgresConfig.Credentials(\"user\", \"password\"), Command.PgCtl); config.getAdditionalInitDbParams().addAll(asList(\"-E\", \"SQL_ASCII\", \"--locale=C\", \"--lc-collate=C\", \"--lc-ctype=C\")); PostgresExecutable exec = runtime.prepare(config); } }"}
{"time": "2020-12-29 01:01:49.219250", "score": "0.5845", "loss": "0.6907", "code": "class T { @Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getInstance(new RuntimeConfigBuilder().defaults(Command.PgCtl).build()); final PostgresConfig config = new PostgresConfig(Version.Main.PRODUCTION, new AbstractPostgresConfig.Net(\"localhost\", findFreePort()), new AbstractPostgresConfig.Storage(\"test\"), new AbstractPostgresConfig.Timeout(), new AbstractPostgresConfig.Credentials(\"user\", \"password\"), Command.PgCtl); PostgresExecutable exec = runtime.prepare(config); } }"}
{"time": "2020-12-29 01:02:30.513891", "score": "0.5026", "loss": "0.6892", "code": "class T { @Before public void setUp() throws Exception { PostgresExecutable exec = runtime.prepare(config); } }"}
{"time": "2020-12-29 01:04:47.429910", "score": "0.7664", "loss": "0.2715", "code": "class T { @Before public void setUp() throws Exception { PostgresExecutable runtime ; } }"}
{"time": "2020-12-29 01:06:07.101257", "score": "0.7664", "loss": "0.2715", "code": "class T { @Before void setUp() throws Exception { PostgresExecutable runtime ; } }"}
{"time": "2020-12-29 01:07:26.316443", "score": "0.7108", "loss": "0.3475", "code": "class T { @Before void setUp() { PostgresExecutable runtime ; } }"}

Minimal simplified code:
class T {
@Before        void setUp()                  {ostgresExecutable        runtime                ;                                                                                                                                                                                                                                                                                             }
}


