
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-federation/openam-federation-library/src/main/java/com/sun/identity/sae/api/SecureAttrs_main.java
method_name = main
method_body = static public void main(String[] args) { try { SecureAttrs.dbg = true; Properties properties = new Properties(); properties.setProperty("keystorefile", "mykeystore"); properties.setProperty("keystoretype", "JKS"); properties.setProperty("keystorepass", "22222222"); properties.setProperty("privatekeyalias", "test"); properties.setProperty("publickeyalias", "test"); properties.setProperty("privatekeypass", "22222222"); properties.setProperty("encryptionkeystrength", "56"); properties.setProperty("encryptionalgorithm", "DES"); SecureAttrs.init("testsym", SecureAttrs.SAE_CRYPTO_TYPE_SYM, properties); SecureAttrs.init("testasym", SecureAttrs.SAE_CRYPTO_TYPE_ASYM, properties); System.out.println("TEST 1 START test encoded str ==========="); SecureAttrs secureattrs = SecureAttrs.getInstance("testsym"); String s = "YnJhbmNoPTAwNXxtYWlsPXVzZXI1QG1haWwuY29tfHN1bi51c2VyaWQ9dXNlcjV8U2lnbmF0dXJlPVRTMTE3NDI3ODY1OTM2NlRTbzI2MkhoL3R1dDRJc0U1V3ZqWjVSLzZkM0FzPQ=="; Map map = secureattrs.verifyEncodedString(s, "secret"); if (map == null) System.out.println(" FAILED"); else System.out.println(" PASSED" + map); System.out.println("TEST 1 END ================"); System.out.println("TEST 2 START : encode followed by decode ==="); HashMap hashmap = new HashMap(); hashmap.put("branch", "bb"); hashmap.put("mail", "mm"); hashmap.put("sun.userid", "uu"); hashmap.put("sun.spappurl", "apapp"); System.out.println(" TEST 2a START : SYM KEY ==="); secureattrs = SecureAttrs.getInstance("testsym"); String s1 = "secret"; String s2 = secureattrs.getEncodedString(hashmap, s1); System.out.println("Encoded string: " + s2); Map map1 = secureattrs.verifyEncodedString(s2, s1); if (map1 != null) System.out.println(" 2a PASSED " + map1); else System.out.println(" 2a FAILED " + map1); System.out.println(" TEST 2b START : ASYM KEY ==="); secureattrs = getInstance("testasym"); s1 = "test"; String s3 = secureattrs.getEncodedString(hashmap, s1); System.out.println("Encoded string: " + s3); map1 = secureattrs.verifyEncodedString(s3, s1); if (map1 != null) System.out.println(" 2b PASSED " + map1); else System.out.println(" 2b FAILED " + map1); System.out.println("TEST 2 END ===================="); System.out.println("TEST 3 START : decode with incorrect secret"); System.out.println(" TEST 3a START : SYM KEY ==="); secureattrs = getInstance("testsym"); map1 = secureattrs.verifyEncodedString(s2, "junk"); if (map1 != null) System.out.println(" 3a FAILED " + map1); else System.out.println(" 3a PASSED " + map1); System.out.println(" TEST 3b START : ASYM KEY ==="); secureattrs = getInstance("testasym"); map1 = secureattrs.verifyEncodedString(s3, "junk"); if (map1 != null) System.out.println(" 3b FAILED " + map1); else System.out.println(" 3b PASSED " + map1); System.out.println("TEST 3 END ===================="); System.out.println("TEST 4 START : decode with correct secret"); System.out.println(" TEST 4a START : SYM KEY ==="); secureattrs = getInstance("testsym"); s1 = "secret"; map1 = secureattrs.verifyEncodedString(s2, s1); if (map1 != null) System.out.println(" 4a PASSED " + map1); else System.out.println(" 4a FAILED " + map1); System.out.println(" TEST 4b START : ASYM KEY ==="); secureattrs = getInstance("testasym"); s1 = "test"; map1 = secureattrs.verifyEncodedString(s3, s1); if (map1 != null) System.out.println(" 4a PASSED " + map1); else System.out.println(" 4a FAILED " + map1); System.out.println("TEST 4 END ===================="); System.out.println(" TEST 5a START : ASYM KEY ==="); secureattrs = getInstance("testasym"); s1 = "test"; s3 = secureattrs.getEncodedString(hashmap, s1, s1); System.out.println("Encrypted string: " + s3); map1 = secureattrs.verifyEncodedString(s3, s1, s1); if (map1 != null) System.out.println(" 5a PASSED " + map1); else System.out.println(" 5a FAILED " + map1); System.out.println(" TEST 5b START : SYM KEY ==="); secureattrs = SecureAttrs.getInstance("testsym"); s1 = "secret"; s2 = secureattrs.getEncodedString(hashmap, s1, s1); System.out.println("Encrypted string: " + s2); map1 = secureattrs.verifyEncodedString(s2, s1, s1); if (map1 != null) System.out.println(" 5b PASSED " + map1); else System.out.println(" 5b FAILED " + map1); System.out.println("TEST 5 END ===================="); } catch (Exception exception) { exception.printStackTrace(); System.out.println("TEST Exc : " + exception); } }

Trace of simplified code(s):

{"time": "2021-01-25 16:44:56.618556", "score": "0.9978", "loss": "0.0052", "code": "class T { static public void main(String[] args) { try { SecureAttrs.dbg = true; Properties properties = new Properties(); properties.setProperty(\"keystorefile\", \"mykeystore\"); properties.setProperty(\"keystoretype\", \"JKS\"); properties.setProperty(\"keystorepass\", \"22222222\"); properties.setProperty(\"privatekeyalias\", \"test\"); properties.setProperty(\"publickeyalias\", \"test\"); properties.setProperty(\"privatekeypass\", \"22222222\"); properties.setProperty(\"encryptionkeystrength\", \"56\"); properties.setProperty(\"encryptionalgorithm\", \"DES\"); SecureAttrs.init(\"testsym\", SecureAttrs.SAE_CRYPTO_TYPE_SYM, properties); SecureAttrs.init(\"testasym\", SecureAttrs.SAE_CRYPTO_TYPE_ASYM, properties); System.out.println(\"TEST 1 START test encoded str ===========\"); SecureAttrs secureattrs = SecureAttrs.getInstance(\"testsym\"); String s = \"YnJhbmNoPTAwNXxtYWlsPXVzZXI1QG1haWwuY29tfHN1bi51c2VyaWQ9dXNlcjV8U2lnbmF0dXJlPVRTMTE3NDI3ODY1OTM2NlRTbzI2MkhoL3R1dDRJc0U1V3ZqWjVSLzZkM0FzPQ==\"; Map map = secureattrs.verifyEncodedString(s, \"secret\"); if (map == null) System.out.println(\" FAILED\"); else System.out.println(\" PASSED\" + map); System.out.println(\"TEST 1 END ================\"); System.out.println(\"TEST 2 START : encode followed by decode ===\"); HashMap hashmap = new HashMap(); hashmap.put(\"branch\", \"bb\"); hashmap.put(\"mail\", \"mm\"); hashmap.put(\"sun.userid\", \"uu\"); hashmap.put(\"sun.spappurl\", \"apapp\"); System.out.println(\" TEST 2a START : SYM KEY ===\"); secureattrs = SecureAttrs.getInstance(\"testsym\"); String s1 = \"secret\"; String s2 = secureattrs.getEncodedString(hashmap, s1); System.out.println(\"Encoded string: \" + s2); Map map1 = secureattrs.verifyEncodedString(s2, s1); if (map1 != null) System.out.println(\" 2a PASSED \" + map1); else System.out.println(\" 2a FAILED \" + map1); System.out.println(\" TEST 2b START : ASYM KEY ===\"); secureattrs = getInstance(\"testasym\"); s1 = \"test\"; String s3 = secureattrs.getEncodedString(hashmap, s1); System.out.println(\"Encoded string: \" + s3); map1 = secureattrs.verifyEncodedString(s3, s1); if (map1 != null) System.out.println(\" 2b PASSED \" + map1); else System.out.println(\" 2b FAILED \" + map1); System.out.println(\"TEST 2 END ====================\"); System.out.println(\"TEST 3 START : decode with incorrect secret\"); System.out.println(\" TEST 3a START : SYM KEY ===\"); secureattrs = getInstance(\"testsym\"); map1 = secureattrs.verifyEncodedString(s2, \"junk\"); if (map1 != null) System.out.println(\" 3a FAILED \" + map1); else System.out.println(\" 3a PASSED \" + map1); System.out.println(\" TEST 3b START : ASYM KEY ===\"); secureattrs = getInstance(\"testasym\"); map1 = secureattrs.verifyEncodedString(s3, \"junk\"); if (map1 != null) System.out.println(\" 3b FAILED \" + map1); else System.out.println(\" 3b PASSED \" + map1); System.out.println(\"TEST 3 END ====================\"); System.out.println(\"TEST 4 START : decode with correct secret\"); System.out.println(\" TEST 4a START : SYM KEY ===\"); secureattrs = getInstance(\"testsym\"); s1 = \"secret\"; map1 = secureattrs.verifyEncodedString(s2, s1); if (map1 != null) System.out.println(\" 4a PASSED \" + map1); else System.out.println(\" 4a FAILED \" + map1); System.out.println(\" TEST 4b START : ASYM KEY ===\"); secureattrs = getInstance(\"testasym\"); s1 = \"test\"; map1 = secureattrs.verifyEncodedString(s3, s1); if (map1 != null) System.out.println(\" 4a PASSED \" + map1); else System.out.println(\" 4a FAILED \" + map1); System.out.println(\"TEST 4 END ====================\"); System.out.println(\" TEST 5a START : ASYM KEY ===\"); secureattrs = getInstance(\"testasym\"); s1 = \"test\"; s3 = secureattrs.getEncodedString(hashmap, s1, s1); System.out.println(\"Encrypted string: \" + s3); map1 = secureattrs.verifyEncodedString(s3, s1, s1); if (map1 != null) System.out.println(\" 5a PASSED \" + map1); else System.out.println(\" 5a FAILED \" + map1); System.out.println(\" TEST 5b START : SYM KEY ===\"); secureattrs = SecureAttrs.getInstance(\"testsym\"); s1 = \"secret\"; s2 = secureattrs.getEncodedString(hashmap, s1, s1); System.out.println(\"Encrypted string: \" + s2); map1 = secureattrs.verifyEncodedString(s2, s1, s1); if (map1 != null) System.out.println(\" 5b PASSED \" + map1); else System.out.println(\" 5b FAILED \" + map1); System.out.println(\"TEST 5 END ====================\"); } catch (Exception exception) { exception.printStackTrace(); System.out.println(\"TEST Exc : \" + exception); } } }"}
{"time": "2021-01-25 16:49:21.418876", "score": "0.9709", "loss": "0.0326", "code": "class T { static public void main(String[] args) { try { } catch (Exception exception) { exception.printStackTrace(); System.out.println(\"TEST Exc : \" + exception); } } }"}
{"time": "2021-01-25 16:50:01.191029", "score": "0.9842", "loss": "0.0171", "code": "class T { static public void main(String[] args) { try { } catch (Exception exception) { } } }"}
{"time": "2021-01-25 16:52:00.050905", "score": "0.9842", "loss": "0.0171", "code": "class T { void main(String[] args) { try { } catch (Exception exception) { } } }"}

Minimal simplified code:
class T {
              void main(String[] args) { try {} catch (Exception exception) {                                                                             } }
}


