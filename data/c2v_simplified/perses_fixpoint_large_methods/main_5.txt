
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Treeptik__cloudunit/cu-cli/src/main/java/fr/treeptik/cloudunit/cli/utils/InstallCert_main.java
method_name = main
method_body = public static void main(String[] args) throws Exception { String host; int port; char[] passphrase; if ((args.length == 1) || (args.length == 2)) { String[] c = args[0].split(":"); host = c[0]; port = (c.length == 1) ? 443 : Integer.parseInt(c[1]); String p = (args.length == 1) ? "changeit" : args[1]; passphrase = p.toCharArray(); } else { System.out.println("Usage: java InstallCert <host>[:port] [passphrase]"); return; } File file = new File("jssecacerts"); if (file.isFile() == false) { char SEP = File.separatorChar; File dir = new File(System.getProperty("java.home") + SEP + "lib" + SEP + "security"); file = new File(dir, "jssecacerts"); if (file.isFile() == false) { file = new File(dir, "cacerts"); } } System.out.println("Loading KeyStore " + file + "..."); InputStream in = new FileInputStream(file); KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()); ks.load(in, passphrase); in.close(); SSLContext context = SSLContext.getInstance("TLS"); TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); tmf.init(ks); X509TrustManager defaultTrustManager = (X509TrustManager) tmf.getTrustManagers()[0]; SavingTrustManager tm = new SavingTrustManager(defaultTrustManager); context.init(null, new TrustManager[] { tm }, null); SSLSocketFactory factory = context.getSocketFactory(); System.out.println("Opening connection to " + host + ":" + port + "..."); SSLSocket socket = (SSLSocket) factory.createSocket(host, port); socket.setSoTimeout(10000); try { System.out.println("Starting SSL handshake..."); socket.startHandshake(); socket.close(); System.out.println(); System.out.println("No errors, certificate is already trusted"); } catch (SSLException e) { System.out.println(); e.printStackTrace(System.out); } X509Certificate[] chain = tm.chain; if (chain == null) { System.out.println("Could not obtain server certificate chain"); return; } BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); System.out.println(); System.out.println("Server sent " + chain.length + " certificate(s):"); System.out.println(); MessageDigest sha1 = MessageDigest.getInstance("SHA1"); MessageDigest md5 = MessageDigest.getInstance("MD5"); for (int i = 0; i < chain.length; i++) { X509Certificate cert = chain[i]; System.out.println(" " + (i + 1) + " Subject " + cert.getSubjectDN()); System.out.println(" Issuer " + cert.getIssuerDN()); sha1.update(cert.getEncoded()); System.out.println(" sha1 " + toHexString(sha1.digest())); md5.update(cert.getEncoded()); System.out.println(" md5 " + toHexString(md5.digest())); System.out.println(); } System.out.println("Enter certificate to add to trusted keystore or 'q' to quit: [1]"); String line = reader.readLine().trim(); int k; try { k = (line.length() == 0) ? 0 : Integer.parseInt(line) - 1; } catch (NumberFormatException e) { System.out.println("KeyStore not changed"); return; } X509Certificate cert = chain[k]; String alias = host + "-" + (k + 1); ks.setCertificateEntry(alias, cert); OutputStream out = new FileOutputStream("jssecacerts"); ks.store(out, passphrase); out.close(); System.out.println(); System.out.println(cert); System.out.println(); System.out.println("Added certificate to keystore 'jssecacerts' using alias '" + alias + "'"); }

Trace of simplified code(s):

{"time": "2021-01-25 16:26:45.163066", "score": "0.9999", "loss": "0.0012", "code": "class T { public static void main(String[] args) throws Exception { String host; int port; char[] passphrase; if ((args.length == 1) || (args.length == 2)) { String[] c = args[0].split(\":\"); host = c[0]; port = (c.length == 1) ? 443 : Integer.parseInt(c[1]); String p = (args.length == 1) ? \"changeit\" : args[1]; passphrase = p.toCharArray(); } else { System.out.println(\"Usage: java InstallCert <host>[:port] [passphrase]\"); return; } File file = new File(\"jssecacerts\"); if (file.isFile() == false) { char SEP = File.separatorChar; File dir = new File(System.getProperty(\"java.home\") + SEP + \"lib\" + SEP + \"security\"); file = new File(dir, \"jssecacerts\"); if (file.isFile() == false) { file = new File(dir, \"cacerts\"); } } System.out.println(\"Loading KeyStore \" + file + \"...\"); InputStream in = new FileInputStream(file); KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()); ks.load(in, passphrase); in.close(); SSLContext context = SSLContext.getInstance(\"TLS\"); TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); tmf.init(ks); X509TrustManager defaultTrustManager = (X509TrustManager) tmf.getTrustManagers()[0]; SavingTrustManager tm = new SavingTrustManager(defaultTrustManager); context.init(null, new TrustManager[] { tm }, null); SSLSocketFactory factory = context.getSocketFactory(); System.out.println(\"Opening connection to \" + host + \":\" + port + \"...\"); SSLSocket socket = (SSLSocket) factory.createSocket(host, port); socket.setSoTimeout(10000); try { System.out.println(\"Starting SSL handshake...\"); socket.startHandshake(); socket.close(); System.out.println(); System.out.println(\"No errors, certificate is already trusted\"); } catch (SSLException e) { System.out.println(); e.printStackTrace(System.out); } X509Certificate[] chain = tm.chain; if (chain == null) { System.out.println(\"Could not obtain server certificate chain\"); return; } BufferedReader reader = new BufferedReader(new InputStreamReader(System.in)); System.out.println(); System.out.println(\"Server sent \" + chain.length + \" certificate(s):\"); System.out.println(); MessageDigest sha1 = MessageDigest.getInstance(\"SHA1\"); MessageDigest md5 = MessageDigest.getInstance(\"MD5\"); for (int i = 0; i < chain.length; i++) { X509Certificate cert = chain[i]; System.out.println(\" \" + (i + 1) + \" Subject \" + cert.getSubjectDN()); System.out.println(\" Issuer \" + cert.getIssuerDN()); sha1.update(cert.getEncoded()); System.out.println(\" sha1 \" + toHexString(sha1.digest())); md5.update(cert.getEncoded()); System.out.println(\" md5 \" + toHexString(md5.digest())); System.out.println(); } System.out.println(\"Enter certificate to add to trusted keystore or 'q' to quit: [1]\"); String line = reader.readLine().trim(); int k; try { k = (line.length() == 0) ? 0 : Integer.parseInt(line) - 1; } catch (NumberFormatException e) { System.out.println(\"KeyStore not changed\"); return; } X509Certificate cert = chain[k]; String alias = host + \"-\" + (k + 1); ks.setCertificateEntry(alias, cert); OutputStream out = new FileOutputStream(\"jssecacerts\"); ks.store(out, passphrase); out.close(); System.out.println(); System.out.println(cert); System.out.println(); System.out.println(\"Added certificate to keystore 'jssecacerts' using alias '\" + alias + \"'\"); } }"}
{"time": "2021-01-25 16:31:02.897122", "score": "0.972", "loss": "0.2119", "code": "class T { public static void main(String[] args) throws Exception { String host; int port; char[] passphrase; if ((args.length == 1) || (args.length == 2)) { String[] c = args[0].split(\":\"); host = c[0]; port = (c.length == 1) ? 443 : Integer.parseInt(c[1]); String p = (args.length == 1) ? \"changeit\" : args[1]; passphrase = p.toCharArray(); } else { System.out.println(\"Usage: java InstallCert <host>[:port] [passphrase]\"); return; } File file = new File(\"jssecacerts\"); if (file.isFile() == false) { char SEP = File.separatorChar; File dir = new File(System.getProperty(\"java.home\") + SEP + \"lib\" + SEP + \"security\"); file = new File(dir, \"jssecacerts\"); if (file.isFile() == false) { file = new File(dir, \"cacerts\"); } } System.out.println(\"Loading KeyStore \" + file + \"...\"); InputStream in = new FileInputStream(file); KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()); ks.load(in, passphrase); in.close(); SSLContext context = SSLContext.getInstance(\"TLS\"); TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); tmf.init(ks); X509TrustManager defaultTrustManager = (X509TrustManager) tmf.getTrustManagers()[0]; SavingTrustManager tm = new SavingTrustManager(defaultTrustManager); context.init(null, new TrustManager[] { tm }, null); SSLSocketFactory factory = context.getSocketFactory(); System.out.println(\"Opening connection to \" + host + \":\" + port + \"...\"); SSLSocket socket = (SSLSocket) factory.createSocket(host, port); socket.setSoTimeout(10000); try { System.out.println(\"Starting SSL handshake...\"); socket.startHandshake(); socket.close(); System.out.println(); System.out.println(\"No errors, certificate is already trusted\"); } catch (SSLException e) { System.out.println(); e.printStackTrace(System.out); } X509Certificate[] chain = tm.chain; } }"}
{"time": "2021-01-25 16:32:18.957701", "score": "0.9827", "loss": "0.1386", "code": "class T { public static void main(String[] args) throws Exception { String host; int port; char[] passphrase; if ((args.length == 1) || (args.length == 2)) { String[] c = args[0].split(\":\"); host = c[0]; port = (c.length == 1) ? 443 : Integer.parseInt(c[1]); String p = (args.length == 1) ? \"changeit\" : args[1]; passphrase = p.toCharArray(); } else { System.out.println(\"Usage: java InstallCert <host>[:port] [passphrase]\"); return; } File file = new File(\"jssecacerts\"); if (file.isFile() == false) { char SEP = File.separatorChar; File dir = new File(System.getProperty(\"java.home\") + SEP + \"lib\" + SEP + \"security\"); file = new File(dir, \"jssecacerts\"); if (file.isFile() == false) { file = new File(dir, \"cacerts\"); } } System.out.println(\"Loading KeyStore \" + file + \"...\"); InputStream in = new FileInputStream(file); KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()); ks.load(in, passphrase); in.close(); SSLContext context = SSLContext.getInstance(\"TLS\"); } }"}
{"time": "2021-01-25 16:33:34.857406", "score": "1.0", "loss": "0.0", "code": "class T { public static void main(String[] args) throws Exception { String host; int port; char[] passphrase; if ((args.length == 1) || (args.length == 2)) { String[] c = args[0].split(\":\"); host = c[0]; port = (c.length == 1) ? 443 : Integer.parseInt(c[1]); String p = (args.length == 1) ? \"changeit\" : args[1]; passphrase = p.toCharArray(); } else { System.out.println(\"Usage: java InstallCert <host>[:port] [passphrase]\"); return; } File file = new File(\"jssecacerts\"); if (file.isFile() == false) { char SEP = File.separatorChar; File dir = new File(System.getProperty(\"java.home\") + SEP + \"lib\" + SEP + \"security\"); file = new File(dir, \"jssecacerts\"); if (file.isFile() == false) { file = new File(dir, \"cacerts\"); } } } }"}
{"time": "2021-01-25 16:34:50.596040", "score": "0.9995", "loss": "0.0007", "code": "class T { public static void main(String[] args) throws Exception { String host; int port; char[] passphrase; } }"}
{"time": "2021-01-25 16:36:05.938551", "score": "1.0", "loss": "0.0", "code": "class T { public static void main(String[] args) throws Exception { String host; int port; } }"}
{"time": "2021-01-25 16:37:21.634049", "score": "1.0", "loss": "0.0", "code": "class T { public static void main(String[] args) throws Exception { String host; } }"}
{"time": "2021-01-25 16:39:16.488755", "score": "0.9999", "loss": "0.0001", "code": "class T { public static void main(String args) throws Exception { String host; } }"}
{"time": "2021-01-25 16:40:31.761952", "score": "0.9959", "loss": "0.005", "code": "class T { public static void main(String args) { String host; } }"}
{"time": "2021-01-25 16:41:11.299120", "score": "0.9959", "loss": "0.005", "code": "class T { void main(String args) { String host; } }"}

Minimal simplified code:
class T {
              void main(String   args)                  { String host}
}


