
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/qpython-android__qpython/qpysdk/src/main/java/org/renpy/android/PythonActivity_onCreate.java
method_name = onCreate
method_body = @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Hardware.context = this; Action.context = this; mActivity = this; getWindowManager().getDefaultDisplay().getMetrics(Hardware.metrics); resourceManager = new ResourceManager(this); String debugFlag = getIntent().getStringExtra(EXTRA_CONTENT_URL5); if (debugFlag != null) { if (debugFlag.equals("0")) { debugLog = false; } } String root = getIntent().getStringExtra(EXTRA_CONTENT_URL4); if (root != null) { File n = new File(root); if (n.exists()) { externalStorage = n; } else { externalStorage = new File(Environment.getExternalStorageDirectory(), root); } } else { externalStorage = new File(Environment.getExternalStorageDirectory(), "qpython"); } Log.d(TAG, "externalStorage:" + externalStorage); mScript = null; String act = getIntent().getStringExtra(EXTRA_CONTENT_URL1); boolean fullscreen = false; if (act != null && act.equals("execute")) { mPath = new File(getIntent().getStringExtra(EXTRA_CONTENT_URL2)); File f = new File(mPath, "main.py"); if (f.exists()) { if (FileHelper.getFileContents(f.toString()).contains("#qpy:fullscreen")) { fullscreen = true; } } Project p = Project.scanDirectory(mPath); if (p != null) { if (p.landscape) { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); } else { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); } if (p.fullscreen) { fullscreen = true; } } } else { String fn = getIntent().getStringExtra(EXTRA_CONTENT_URL2); if (fn == null) { isMain = true; fn = "/sdcard/qpython/launcher.py"; } mScript = new File(fn); if (!mScript.exists()) { String file1 = FileHelper.LoadDataFromAssets(this, "main.py"); FileHelper.writeToFile(fn, file1); } mPath = mScript.getParentFile(); if (FileHelper.getFileContents(mScript.toString()).contains("#qpy:fullscreen")) { fullscreen = true; } } if (fullscreen) { getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); } try { FileWriter f = new FileWriter(new File(mPath, ".launch")); f.write("started"); f.close(); } catch (IOException e) { } updateNotification(mPath.toString()); requestWindowFeature(Window.FEATURE_NO_TITLE); String full = getIntent().getStringExtra(EXTRA_CONTENT_URL3); File logFile = new File(mPath, ".run.log"); if (logFile.exists()) { logFile.delete(); } String s = ""; if (mScript != null) { s = mScript.getName(); } else { File f = new File(mPath, "main.py"); if (f.exists()) { s = "main.py"; } else { f = new File(mPath, "main.pyo"); if (f.exists()) { s = "main.pyo"; } } } Log.d(TAG, "[RUN param:" + externalStorage.getAbsolutePath().toString() + "-" + mPath.getAbsolutePath().toString() + "-" + s + "]"); mView = new SDLSurfaceView(this, mPath.getAbsolutePath().toString(), s, externalStorage.getAbsolutePath().toString()); IntentFilter filter = new IntentFilter(".PythonActivity"); registerReceiver(mReceiver, filter); startPyScreen(); }

Trace of simplified code(s):

{"time": "2021-01-27 03:36:01.777057", "score": "0.9917", "loss": "0.0115", "code": "class T { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Hardware.context = this; Action.context = this; mActivity = this; getWindowManager().getDefaultDisplay().getMetrics(Hardware.metrics); resourceManager = new ResourceManager(this); String debugFlag = getIntent().getStringExtra(EXTRA_CONTENT_URL5); if (debugFlag != null) { if (debugFlag.equals(\"0\")) { debugLog = false; } } String root = getIntent().getStringExtra(EXTRA_CONTENT_URL4); if (root != null) { File n = new File(root); if (n.exists()) { externalStorage = n; } else { externalStorage = new File(Environment.getExternalStorageDirectory(), root); } } else { externalStorage = new File(Environment.getExternalStorageDirectory(), \"qpython\"); } Log.d(TAG, \"externalStorage:\" + externalStorage); mScript = null; String act = getIntent().getStringExtra(EXTRA_CONTENT_URL1); boolean fullscreen = false; if (act != null && act.equals(\"execute\")) { mPath = new File(getIntent().getStringExtra(EXTRA_CONTENT_URL2)); File f = new File(mPath, \"main.py\"); if (f.exists()) { if (FileHelper.getFileContents(f.toString()).contains(\"#qpy:fullscreen\")) { fullscreen = true; } } Project p = Project.scanDirectory(mPath); if (p != null) { if (p.landscape) { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); } else { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); } if (p.fullscreen) { fullscreen = true; } } } else { String fn = getIntent().getStringExtra(EXTRA_CONTENT_URL2); if (fn == null) { isMain = true; fn = \"/sdcard/qpython/launcher.py\"; } mScript = new File(fn); if (!mScript.exists()) { String file1 = FileHelper.LoadDataFromAssets(this, \"main.py\"); FileHelper.writeToFile(fn, file1); } mPath = mScript.getParentFile(); if (FileHelper.getFileContents(mScript.toString()).contains(\"#qpy:fullscreen\")) { fullscreen = true; } } if (fullscreen) { getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); } try { FileWriter f = new FileWriter(new File(mPath, \".launch\")); f.write(\"started\"); f.close(); } catch (IOException e) { } updateNotification(mPath.toString()); requestWindowFeature(Window.FEATURE_NO_TITLE); String full = getIntent().getStringExtra(EXTRA_CONTENT_URL3); File logFile = new File(mPath, \".run.log\"); if (logFile.exists()) { logFile.delete(); } String s = \"\"; if (mScript != null) { s = mScript.getName(); } else { File f = new File(mPath, \"main.py\"); if (f.exists()) { s = \"main.py\"; } else { f = new File(mPath, \"main.pyo\"); if (f.exists()) { s = \"main.pyo\"; } } } Log.d(TAG, \"[RUN param:\" + externalStorage.getAbsolutePath().toString() + \"-\" + mPath.getAbsolutePath().toString() + \"-\" + s + \"]\"); mView = new SDLSurfaceView(this, mPath.getAbsolutePath().toString(), s, externalStorage.getAbsolutePath().toString()); IntentFilter filter = new IntentFilter(\".PythonActivity\"); registerReceiver(mReceiver, filter); startPyScreen(); } }"}
{"time": "2021-01-27 03:40:42.496331", "score": "0.9907", "loss": "0.0116", "code": "class T { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Hardware.context = this; Action.context = this; mActivity = this; getWindowManager().getDefaultDisplay().getMetrics(Hardware.metrics); resourceManager = new ResourceManager(this); String debugFlag = getIntent().getStringExtra(EXTRA_CONTENT_URL5); if (debugFlag != null) { if (debugFlag.equals(\"0\")) { debugLog = false; } } String root = getIntent().getStringExtra(EXTRA_CONTENT_URL4); if (root != null) { File n = new File(root); if (n.exists()) { externalStorage = n; } else { externalStorage = new File(Environment.getExternalStorageDirectory(), root); } } else { externalStorage = new File(Environment.getExternalStorageDirectory(), \"qpython\"); } Log.d(TAG, \"externalStorage:\" + externalStorage); mScript = null; String act = getIntent().getStringExtra(EXTRA_CONTENT_URL1); boolean fullscreen = false; if (act != null && act.equals(\"execute\")) { mPath = new File(getIntent().getStringExtra(EXTRA_CONTENT_URL2)); File f = new File(mPath, \"main.py\"); if (f.exists()) { if (FileHelper.getFileContents(f.toString()).contains(\"#qpy:fullscreen\")) { fullscreen = true; } } Project p = Project.scanDirectory(mPath); if (p != null) { if (p.landscape) { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE); } else { setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); } if (p.fullscreen) { fullscreen = true; } } } else { String fn = getIntent().getStringExtra(EXTRA_CONTENT_URL2); if (fn == null) { isMain = true; fn = \"/sdcard/qpython/launcher.py\"; } mScript = new File(fn); if (!mScript.exists()) { String file1 = FileHelper.LoadDataFromAssets(this, \"main.py\"); FileHelper.writeToFile(fn, file1); } mPath = mScript.getParentFile(); if (FileHelper.getFileContents(mScript.toString()).contains(\"#qpy:fullscreen\")) { fullscreen = true; } } } }"}
{"time": "2021-01-27 03:41:57.198960", "score": "1.0", "loss": "0.0", "code": "class T { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Hardware.context = this; Action.context = this; mActivity = this; getWindowManager().getDefaultDisplay().getMetrics(Hardware.metrics); resourceManager = new ResourceManager(this); String debugFlag = getIntent().getStringExtra(EXTRA_CONTENT_URL5); if (debugFlag != null) { if (debugFlag.equals(\"0\")) { debugLog = false; } } } }"}
{"time": "2021-01-27 03:43:11.956307", "score": "1.0", "loss": "0.0", "code": "class T { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Hardware.context = this; Action.context = this; mActivity = this; } }"}
{"time": "2021-01-27 03:44:26.221079", "score": "1.0", "loss": "0.0", "code": "class T { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Hardware.context = this; } }"}
{"time": "2021-01-27 03:45:40.434774", "score": "1.0", "loss": "0.0", "code": "class T { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); } }"}
{"time": "2021-01-27 03:46:54.618475", "score": "1.0", "loss": "0.0", "code": "class T { void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); } }"}
{"time": "2021-01-27 03:47:33.530018", "score": "1.0", "loss": "0.0", "code": "class T { void onCreate( ) { super.onCreate(savedInstanceState); } }"}

Minimal simplified code:
class T {
                    void onCreate(                         ) { super.onCreate}
}


