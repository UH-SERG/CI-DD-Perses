
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/pqc/crypto/ntru/NTRUSigningKeyGenerationParameters_equals.java
method_name = equals
method_body = public boolean equals(Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (!(obj instanceof NTRUSigningKeyGenerationParameters)) { return false; } NTRUSigningKeyGenerationParameters other = (NTRUSigningKeyGenerationParameters) obj; if (B != other.B) { return false; } if (N != other.N) { return false; } if (basisType != other.basisType) { return false; } if (Double.doubleToLongBits(beta) != Double.doubleToLongBits(other.beta)) { return false; } if (Double.doubleToLongBits(betaSq) != Double.doubleToLongBits(other.betaSq)) { return false; } if (bitsF != other.bitsF) { return false; } if (d != other.d) { return false; } if (d1 != other.d1) { return false; } if (d2 != other.d2) { return false; } if (d3 != other.d3) { return false; } if (hashAlg == null) { if (other.hashAlg != null) { return false; } } else if (!hashAlg.getAlgorithmName().equals(other.hashAlg.getAlgorithmName())) { return false; } if (keyGenAlg != other.keyGenAlg) { return false; } if (Double.doubleToLongBits(keyNormBound) != Double.doubleToLongBits(other.keyNormBound)) { return false; } if (Double.doubleToLongBits(keyNormBoundSq) != Double.doubleToLongBits(other.keyNormBoundSq)) { return false; } if (Double.doubleToLongBits(normBound) != Double.doubleToLongBits(other.normBound)) { return false; } if (Double.doubleToLongBits(normBoundSq) != Double.doubleToLongBits(other.normBoundSq)) { return false; } if (polyType != other.polyType) { return false; } if (primeCheck != other.primeCheck) { return false; } if (q != other.q) { return false; } if (signFailTolerance != other.signFailTolerance) { return false; } if (sparse != other.sparse) { return false; } return true; }

Trace of simplified code(s):

{"time": "2021-01-25 18:01:47.434904", "score": "0.9995", "loss": "0.0006", "code": "class T { public boolean equals(Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (!(obj instanceof NTRUSigningKeyGenerationParameters)) { return false; } NTRUSigningKeyGenerationParameters other = (NTRUSigningKeyGenerationParameters) obj; if (B != other.B) { return false; } if (N != other.N) { return false; } if (basisType != other.basisType) { return false; } if (Double.doubleToLongBits(beta) != Double.doubleToLongBits(other.beta)) { return false; } if (Double.doubleToLongBits(betaSq) != Double.doubleToLongBits(other.betaSq)) { return false; } if (bitsF != other.bitsF) { return false; } if (d != other.d) { return false; } if (d1 != other.d1) { return false; } if (d2 != other.d2) { return false; } if (d3 != other.d3) { return false; } if (hashAlg == null) { if (other.hashAlg != null) { return false; } } else if (!hashAlg.getAlgorithmName().equals(other.hashAlg.getAlgorithmName())) { return false; } if (keyGenAlg != other.keyGenAlg) { return false; } if (Double.doubleToLongBits(keyNormBound) != Double.doubleToLongBits(other.keyNormBound)) { return false; } if (Double.doubleToLongBits(keyNormBoundSq) != Double.doubleToLongBits(other.keyNormBoundSq)) { return false; } if (Double.doubleToLongBits(normBound) != Double.doubleToLongBits(other.normBound)) { return false; } if (Double.doubleToLongBits(normBoundSq) != Double.doubleToLongBits(other.normBoundSq)) { return false; } if (polyType != other.polyType) { return false; } if (primeCheck != other.primeCheck) { return false; } if (q != other.q) { return false; } if (signFailTolerance != other.signFailTolerance) { return false; } if (sparse != other.sparse) { return false; } return true; } }"}
{"time": "2021-01-25 18:07:04.600944", "score": "1.0", "loss": "0.0", "code": "class T { public boolean equals(Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (!(obj instanceof NTRUSigningKeyGenerationParameters)) { return false; } NTRUSigningKeyGenerationParameters other = (NTRUSigningKeyGenerationParameters) obj; if (B != other.B) { return false; } if (N != other.N) { return false; } if (basisType != other.basisType) { return false; } if (Double.doubleToLongBits(beta) != Double.doubleToLongBits(other.beta)) { return false; } if (Double.doubleToLongBits(betaSq) != Double.doubleToLongBits(other.betaSq)) { return false; } if (bitsF != other.bitsF) { return false; } if (d != other.d) { return false; } if (d1 != other.d1) { return false; } if (d2 != other.d2) { return false; } } }"}
{"time": "2021-01-25 18:08:20.677368", "score": "1.0", "loss": "0.0", "code": "class T { public boolean equals(Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (!(obj instanceof NTRUSigningKeyGenerationParameters)) { return false; } NTRUSigningKeyGenerationParameters other = (NTRUSigningKeyGenerationParameters) obj; if (B != other.B) { return false; } if (N != other.N) { return false; } if (basisType != other.basisType) { return false; } } }"}
{"time": "2021-01-25 18:09:36.661799", "score": "1.0", "loss": "0.0", "code": "class T { public boolean equals(Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (!(obj instanceof NTRUSigningKeyGenerationParameters)) { return false; } NTRUSigningKeyGenerationParameters other = (NTRUSigningKeyGenerationParameters) obj; } }"}
{"time": "2021-01-25 18:10:52.824953", "score": "0.9999", "loss": "0.0002", "code": "class T { public boolean equals(Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } } }"}
{"time": "2021-01-25 18:12:08.669809", "score": "0.9908", "loss": "0.0193", "code": "class T { public boolean equals(Object obj) { if (this == obj) { return true; } } }"}
{"time": "2021-01-25 18:14:05.484072", "score": "0.9974", "loss": "0.0034", "code": "class T { public boolean equals(Object obj) { if (this == obj) return true; } }"}
{"time": "2021-01-25 18:14:45.581506", "score": "0.8388", "loss": "0.2039", "code": "class T { public boolean equals(Object obj) { if ( obj) return true; } }"}
{"time": "2021-01-25 18:16:05.502607", "score": "0.8894", "loss": "0.1428", "code": "class T { public boolean equals(Object obj) { if ( obj) return ; } }"}
{"time": "2021-01-25 18:16:45.320980", "score": "0.8894", "loss": "0.1428", "code": "class T { boolean equals(Object obj) { if ( obj) return ; } }"}
{"time": "2021-01-25 18:19:49.312127", "score": "0.7378", "loss": "0.3573", "code": "class T { boolean equals(Object obj) { return ; } }"}

Minimal simplified code:
class T {
       boolean equals(Object obj) {                    return}
}


