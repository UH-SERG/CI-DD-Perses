
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/jobs/UpdateSynopticMessageCounts_execute.java
method_name = execute
method_body = public void execute(JobExecutionContext arg0) throws JobExecutionException { Connection clConnection = null; Statement statement = null; ResultSet unreadMessageCountRS = null; ResultSet allTopicsAndForumsRS = null; ResultSet synotpicSitesRS = null; PreparedStatement unreadMessagesbySitePS = null; PreparedStatement findSitesbySitePS = null; String siteFilter = ServerConfigurationService.getString("msgcntr.synoptic.updateMessageCountsSiteFilter"); boolean filterSites = siteFilter != null && !"".equals(siteFilter); int count = 0; log.info("UpdateSynopticMessageCounts job launched: " + new Date()); try { clConnection = sqlService.borrowConnection(); statement = clConnection.createStatement(); if (filterSites) { unreadMessagesbySitePS = clConnection.prepareStatement(UNREAD_MESSAGES_BY_SITE_QUERY); unreadMessagesbySitePS.setString(1, siteFilter); unreadMessageCountRS = unreadMessagesbySitePS.executeQuery(); } else { unreadMessageCountRS = statement.executeQuery(UNREAD_MESSAGES_QUERY); } HashMap<String, HashMap<String, Integer>> siteAndUserMessageCountHM = getSiteAndUserMessageCountHM(unreadMessageCountRS); allTopicsAndForumsRS = statement.executeQuery(TOPICS_AND_FORUMS_QUERY); HashMap<String, HashMap<Long, DecoratedForumInfo>> allTopicsAndForumsHM = getAllTopicsAndForumsHM(allTopicsAndForumsRS); String siteId = ""; String siteTitle = ""; int BINARY_FLAGS; if (runOracleSQL) { if (filterSites) { findSitesbySitePS = clConnection.prepareStatement(FIND_ALL_SYNOPTIC_SITES_BY_SITE_QUERY_ORACLE); findSitesbySitePS.setString(1, siteFilter); synotpicSitesRS = findSitesbySitePS.executeQuery(); } else { synotpicSitesRS = statement.executeQuery(FIND_ALL_SYNOPTIC_SITES_QUERY_ORACLE); } } else { if (filterSites) { findSitesbySitePS = clConnection.prepareStatement(FIND_ALL_SYNOPTIC_SITES_BY_SITE_QUERY_GENERIC); findSitesbySitePS.setString(1, siteFilter); synotpicSitesRS = findSitesbySitePS.executeQuery(); } else { synotpicSitesRS = statement.executeQuery(FIND_ALL_SYNOPTIC_SITES_QUERY_GENERIC); } } while (synotpicSitesRS.next()) { boolean isMessageForumsPageInSite = false; boolean isMessagesPageInSite = false; boolean isForumsPageInSite = false; siteId = synotpicSitesRS.getString("SITE_ID"); siteTitle = synotpicSitesRS.getString("TITLE"); if (runOracleSQL) { BINARY_FLAGS = synotpicSitesRS.getInt("BINARY_FLAGS"); if (BINARY_FLAGS % 10 >= 1) isForumsPageInSite = true; if (BINARY_FLAGS % 100 >= 10) isMessagesPageInSite = true; if (BINARY_FLAGS % 1000 >= 100) isMessageForumsPageInSite = true; } updateSynopticToolInfoForAllUsers(siteId, siteTitle, clConnection, isMessageForumsPageInSite, isMessagesPageInSite, isForumsPageInSite, siteAndUserMessageCountHM, allTopicsAndForumsHM); count++; if (count % 1000 == 0) { log.info("UpdateSynopticMessageCounts Progress: " + count + " Sites updated"); } } } catch (Exception e1) { log.error(e1.getMessage(), e1); } finally { try { if (unreadMessageCountRS != null) unreadMessageCountRS.close(); } catch (Exception e) { log.warn(e.getMessage()); } try { if (allTopicsAndForumsRS != null) allTopicsAndForumsRS.close(); } catch (Exception e) { log.warn(e.getMessage()); } try { if (synotpicSitesRS != null) synotpicSitesRS.close(); } catch (Exception e) { log.warn(e.getMessage()); } try { if (statement != null) statement.close(); } catch (Exception e) { log.warn(e.getMessage()); } try { if (unreadMessagesbySitePS != null) unreadMessagesbySitePS.close(); } catch (Exception e) { log.warn(e.getMessage()); } try { if (findSitesbySitePS != null) findSitesbySitePS.close(); } catch (Exception e) { log.warn(e.getMessage()); } sqlService.returnConnection(clConnection); } log.info("UpdateSynopticMessageCounts job finished: " + new Date()); }

Trace of simplified code(s):

{"time": "2021-01-25 13:37:52.889632", "score": "0.9824", "loss": "0.02", "code": "class T { public void execute(JobExecutionContext arg0) throws JobExecutionException { Connection clConnection = null; Statement statement = null; ResultSet unreadMessageCountRS = null; ResultSet allTopicsAndForumsRS = null; ResultSet synotpicSitesRS = null; PreparedStatement unreadMessagesbySitePS = null; PreparedStatement findSitesbySitePS = null; String siteFilter = ServerConfigurationService.getString(\"msgcntr.synoptic.updateMessageCountsSiteFilter\"); boolean filterSites = siteFilter != null && !\"\".equals(siteFilter); int count = 0; log.info(\"UpdateSynopticMessageCounts job launched: \" + new Date()); try { clConnection = sqlService.borrowConnection(); statement = clConnection.createStatement(); if (filterSites) { unreadMessagesbySitePS = clConnection.prepareStatement(UNREAD_MESSAGES_BY_SITE_QUERY); unreadMessagesbySitePS.setString(1, siteFilter); unreadMessageCountRS = unreadMessagesbySitePS.executeQuery(); } else { unreadMessageCountRS = statement.executeQuery(UNREAD_MESSAGES_QUERY); } HashMap<String, HashMap<String, Integer>> siteAndUserMessageCountHM = getSiteAndUserMessageCountHM(unreadMessageCountRS); allTopicsAndForumsRS = statement.executeQuery(TOPICS_AND_FORUMS_QUERY); HashMap<String, HashMap<Long, DecoratedForumInfo>> allTopicsAndForumsHM = getAllTopicsAndForumsHM(allTopicsAndForumsRS); String siteId = \"\"; String siteTitle = \"\"; int BINARY_FLAGS; if (runOracleSQL) { if (filterSites) { findSitesbySitePS = clConnection.prepareStatement(FIND_ALL_SYNOPTIC_SITES_BY_SITE_QUERY_ORACLE); findSitesbySitePS.setString(1, siteFilter); synotpicSitesRS = findSitesbySitePS.executeQuery(); } else { synotpicSitesRS = statement.executeQuery(FIND_ALL_SYNOPTIC_SITES_QUERY_ORACLE); } } else { if (filterSites) { findSitesbySitePS = clConnection.prepareStatement(FIND_ALL_SYNOPTIC_SITES_BY_SITE_QUERY_GENERIC); findSitesbySitePS.setString(1, siteFilter); synotpicSitesRS = findSitesbySitePS.executeQuery(); } else { synotpicSitesRS = statement.executeQuery(FIND_ALL_SYNOPTIC_SITES_QUERY_GENERIC); } } while (synotpicSitesRS.next()) { boolean isMessageForumsPageInSite = false; boolean isMessagesPageInSite = false; boolean isForumsPageInSite = false; siteId = synotpicSitesRS.getString(\"SITE_ID\"); siteTitle = synotpicSitesRS.getString(\"TITLE\"); if (runOracleSQL) { BINARY_FLAGS = synotpicSitesRS.getInt(\"BINARY_FLAGS\"); if (BINARY_FLAGS % 10 >= 1) isForumsPageInSite = true; if (BINARY_FLAGS % 100 >= 10) isMessagesPageInSite = true; if (BINARY_FLAGS % 1000 >= 100) isMessageForumsPageInSite = true; } updateSynopticToolInfoForAllUsers(siteId, siteTitle, clConnection, isMessageForumsPageInSite, isMessagesPageInSite, isForumsPageInSite, siteAndUserMessageCountHM, allTopicsAndForumsHM); count++; if (count % 1000 == 0) { log.info(\"UpdateSynopticMessageCounts Progress: \" + count + \" Sites updated\"); } } } catch (Exception e1) { log.error(e1.getMessage(), e1); } finally { try { if (unreadMessageCountRS != null) unreadMessageCountRS.close(); } catch (Exception e) { log.warn(e.getMessage()); } try { if (allTopicsAndForumsRS != null) allTopicsAndForumsRS.close(); } catch (Exception e) { log.warn(e.getMessage()); } try { if (synotpicSitesRS != null) synotpicSitesRS.close(); } catch (Exception e) { log.warn(e.getMessage()); } try { if (statement != null) statement.close(); } catch (Exception e) { log.warn(e.getMessage()); } try { if (unreadMessagesbySitePS != null) unreadMessagesbySitePS.close(); } catch (Exception e) { log.warn(e.getMessage()); } try { if (findSitesbySitePS != null) findSitesbySitePS.close(); } catch (Exception e) { log.warn(e.getMessage()); } sqlService.returnConnection(clConnection); } log.info(\"UpdateSynopticMessageCounts job finished: \" + new Date()); } }"}
{"time": "2021-01-25 13:41:33.932880", "score": "0.996", "loss": "0.0049", "code": "class T { public void execute(JobExecutionContext arg0) throws JobExecutionException { Connection clConnection = null; Statement statement = null; ResultSet unreadMessageCountRS = null; ResultSet allTopicsAndForumsRS = null; ResultSet synotpicSitesRS = null; PreparedStatement unreadMessagesbySitePS = null; PreparedStatement findSitesbySitePS = null; } }"}
{"time": "2021-01-25 13:42:49.507769", "score": "0.9979", "loss": "0.0026", "code": "class T { public void execute(JobExecutionContext arg0) throws JobExecutionException { Connection clConnection = null; Statement statement = null; ResultSet unreadMessageCountRS = null; ResultSet allTopicsAndForumsRS = null; } }"}
{"time": "2021-01-25 13:44:05.186857", "score": "0.9987", "loss": "0.0017", "code": "class T { public void execute(JobExecutionContext arg0) throws JobExecutionException { Connection clConnection = null; Statement statement = null; } }"}
{"time": "2021-01-25 13:45:20.375949", "score": "0.9983", "loss": "0.0022", "code": "class T { public void execute(JobExecutionContext arg0) throws JobExecutionException { Connection clConnection = null; } }"}
{"time": "2021-01-25 13:46:36.043751", "score": "0.9983", "loss": "0.0022", "code": "class T { public void execute(JobExecutionContext arg0) throws JobExecutionException { Connection clConnection ; } }"}
{"time": "2021-01-25 13:48:35.391920", "score": "0.9983", "loss": "0.0022", "code": "class T { void execute(JobExecutionContext arg0) throws JobExecutionException { Connection clConnection ; } }"}

Minimal simplified code:
class T {
       void execute(JobExecutionContext arg0) throws JobExecutionException { Connection clConnection}
}


