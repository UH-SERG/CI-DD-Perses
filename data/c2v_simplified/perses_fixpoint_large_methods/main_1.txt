
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/test/org/apache/catalina/tribes/demos/LoadTest_main.java
method_name = main
method_body = public static void main(String[] args) throws Exception { boolean send = true; boolean debug = false; long pause = 0; int count = 1000000; int stats = 10000; boolean breakOnEx = false; int threads = 1; boolean shutdown = false; int startoptions = Channel.DEFAULT; int channelOptions = Channel.SEND_OPTIONS_DEFAULT; if (args.length == 0) { args = new String[] { "-help" }; } for (int i = 0; i < args.length; i++) { if ("-threads".equals(args[i])) { threads = Integer.parseInt(args[++i]); } else if ("-count".equals(args[i])) { count = Integer.parseInt(args[++i]); System.out.println("Sending " + count + " messages."); } else if ("-pause".equals(args[i])) { pause = Long.parseLong(args[++i]) * 1000; } else if ("-break".equals(args[i])) { breakOnEx = true; } else if ("-shutdown".equals(args[i])) { shutdown = true; } else if ("-stats".equals(args[i])) { stats = Integer.parseInt(args[++i]); System.out.println("Stats every " + stats + " message"); } else if ("-sendoptions".equals(args[i])) { channelOptions = Integer.parseInt(args[++i]); System.out.println("Setting send options to " + channelOptions); } else if ("-startoptions".equals(args[i])) { startoptions = Integer.parseInt(args[++i]); System.out.println("Setting start options to " + startoptions); } else if ("-size".equals(args[i])) { size = Integer.parseInt(args[++i]) - 4; System.out.println("Message size will be:" + (size + 4) + " bytes"); } else if ("-mode".equals(args[i])) { if ("receive".equals(args[++i])) send = false; } else if ("-debug".equals(args[i])) { debug = true; } else if ("-help".equals(args[i])) { usage(); System.exit(1); } } ManagedChannel channel = (ManagedChannel) ChannelCreator.createChannel(args); LoadTest test = new LoadTest(channel, send, count, debug, pause, stats, breakOnEx); test.channelOptions = channelOptions; LoadMessage msg = new LoadMessage(); messageSize = LoadMessage.getMessageSize(msg); channel.addChannelListener(test); channel.addMembershipListener(test); channel.start(startoptions); Runtime.getRuntime().addShutdownHook(new Shutdown(channel)); while (threads > 1) { Thread t = new Thread(test); t.setDaemon(true); t.start(); threads--; test = new LoadTest(channel, send, count, debug, pause, stats, breakOnEx); test.channelOptions = channelOptions; } test.run(); if (shutdown && send) channel.stop(Channel.DEFAULT); System.out.println("System test complete, sleeping to let threads finish."); Thread.sleep(60 * 1000 * 60); }

Trace of simplified code(s):

{"time": "2021-01-25 10:15:04.259591", "score": "0.9913", "loss": "0.0147", "code": "class T { public static void main(String[] args) throws Exception { boolean send = true; boolean debug = false; long pause = 0; int count = 1000000; int stats = 10000; boolean breakOnEx = false; int threads = 1; boolean shutdown = false; int startoptions = Channel.DEFAULT; int channelOptions = Channel.SEND_OPTIONS_DEFAULT; if (args.length == 0) { args = new String[] { \"-help\" }; } for (int i = 0; i < args.length; i++) { if (\"-threads\".equals(args[i])) { threads = Integer.parseInt(args[++i]); } else if (\"-count\".equals(args[i])) { count = Integer.parseInt(args[++i]); System.out.println(\"Sending \" + count + \" messages.\"); } else if (\"-pause\".equals(args[i])) { pause = Long.parseLong(args[++i]) * 1000; } else if (\"-break\".equals(args[i])) { breakOnEx = true; } else if (\"-shutdown\".equals(args[i])) { shutdown = true; } else if (\"-stats\".equals(args[i])) { stats = Integer.parseInt(args[++i]); System.out.println(\"Stats every \" + stats + \" message\"); } else if (\"-sendoptions\".equals(args[i])) { channelOptions = Integer.parseInt(args[++i]); System.out.println(\"Setting send options to \" + channelOptions); } else if (\"-startoptions\".equals(args[i])) { startoptions = Integer.parseInt(args[++i]); System.out.println(\"Setting start options to \" + startoptions); } else if (\"-size\".equals(args[i])) { size = Integer.parseInt(args[++i]) - 4; System.out.println(\"Message size will be:\" + (size + 4) + \" bytes\"); } else if (\"-mode\".equals(args[i])) { if (\"receive\".equals(args[++i])) send = false; } else if (\"-debug\".equals(args[i])) { debug = true; } else if (\"-help\".equals(args[i])) { usage(); System.exit(1); } } ManagedChannel channel = (ManagedChannel) ChannelCreator.createChannel(args); LoadTest test = new LoadTest(channel, send, count, debug, pause, stats, breakOnEx); test.channelOptions = channelOptions; LoadMessage msg = new LoadMessage(); messageSize = LoadMessage.getMessageSize(msg); channel.addChannelListener(test); channel.addMembershipListener(test); channel.start(startoptions); Runtime.getRuntime().addShutdownHook(new Shutdown(channel)); while (threads > 1) { Thread t = new Thread(test); t.setDaemon(true); t.start(); threads--; test = new LoadTest(channel, send, count, debug, pause, stats, breakOnEx); test.channelOptions = channelOptions; } test.run(); if (shutdown && send) channel.stop(Channel.DEFAULT); System.out.println(\"System test complete, sleeping to let threads finish.\"); Thread.sleep(60 * 1000 * 60); } }"}
{"time": "2021-01-25 10:18:46.214454", "score": "0.9999", "loss": "0.0001", "code": "class T { public static void main(String[] args) throws Exception { boolean send = true; boolean debug = false; long pause = 0; int count = 1000000; int stats = 10000; boolean breakOnEx = false; int threads = 1; boolean shutdown = false; int startoptions = Channel.DEFAULT; int channelOptions = Channel.SEND_OPTIONS_DEFAULT; if (args.length == 0) { args = new String[] { \"-help\" }; } for (int i = 0; i < args.length; i++) { if (\"-threads\".equals(args[i])) { threads = Integer.parseInt(args[++i]); } else if (\"-count\".equals(args[i])) { count = Integer.parseInt(args[++i]); System.out.println(\"Sending \" + count + \" messages.\"); } else if (\"-pause\".equals(args[i])) { pause = Long.parseLong(args[++i]) * 1000; } else if (\"-break\".equals(args[i])) { breakOnEx = true; } else if (\"-shutdown\".equals(args[i])) { shutdown = true; } else if (\"-stats\".equals(args[i])) { stats = Integer.parseInt(args[++i]); System.out.println(\"Stats every \" + stats + \" message\"); } else if (\"-sendoptions\".equals(args[i])) { channelOptions = Integer.parseInt(args[++i]); System.out.println(\"Setting send options to \" + channelOptions); } else if (\"-startoptions\".equals(args[i])) { startoptions = Integer.parseInt(args[++i]); System.out.println(\"Setting start options to \" + startoptions); } else if (\"-size\".equals(args[i])) { size = Integer.parseInt(args[++i]) - 4; System.out.println(\"Message size will be:\" + (size + 4) + \" bytes\"); } else if (\"-mode\".equals(args[i])) { if (\"receive\".equals(args[++i])) send = false; } else if (\"-debug\".equals(args[i])) { debug = true; } else if (\"-help\".equals(args[i])) { usage(); System.exit(1); } } ManagedChannel channel = (ManagedChannel) ChannelCreator.createChannel(args); } }"}
{"time": "2021-01-25 10:20:03.473446", "score": "1.0", "loss": "0.0", "code": "class T { public static void main(String[] args) throws Exception { boolean send = true; boolean debug = false; long pause = 0; int count = 1000000; int stats = 10000; boolean breakOnEx = false; int threads = 1; } }"}
{"time": "2021-01-25 10:21:18.894505", "score": "1.0", "loss": "0.0", "code": "class T { public static void main(String[] args) throws Exception { boolean send = true; boolean debug = false; long pause = 0; int count = 1000000; } }"}
{"time": "2021-01-25 10:22:34.502692", "score": "1.0", "loss": "0.0", "code": "class T { public static void main(String[] args) throws Exception { boolean send = true; boolean debug = false; } }"}
{"time": "2021-01-25 10:23:49.809192", "score": "1.0", "loss": "0.0", "code": "class T { public static void main(String[] args) throws Exception { boolean send = true; } }"}
{"time": "2021-01-25 10:25:44.519465", "score": "0.9999", "loss": "0.0001", "code": "class T { public static void main(String args) throws Exception { boolean send = true; } }"}
{"time": "2021-01-25 10:26:24.327884", "score": "0.9998", "loss": "0.0002", "code": "class T { public static void main(String args) throws Exception { boolean send ; } }"}
{"time": "2021-01-25 10:27:04.322941", "score": "0.6888", "loss": "0.3737", "code": "class T { public static void main(String args) { boolean send ; } }"}
{"time": "2021-01-25 10:27:44.117337", "score": "0.6888", "loss": "0.3737", "code": "class T { void main(String args) { boolean send ; } }"}

Minimal simplified code:
class T {
              void main(String   args)                  { boolean send}
}


