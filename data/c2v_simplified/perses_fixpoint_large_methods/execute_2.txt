
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/catalina/ant/AbstractCatalinaTask_execute.java
method_name = execute
method_body = public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod("PUT"); if (contentType != null) { hconn.setRequestProperty("Content-Type", contentType); } if (contentLength >= 0) { hconn.setRequestProperty("Content-Length", "" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod("GET"); } hconn.setRequestProperty("User-Agent", "Catalina-Ant-Task/1.0"); String input = username + ":" + password; String output = Base64.encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty("Authorization", "Basic " + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff = new StringBuilder(); String error = null; int msgPriority = Project.MSG_INFO; boolean first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\r') || (ch == '\n')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith("OK -")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (buff.length() > 0) { handleOutput(buff.toString(), msgPriority); } if (error != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } }

Trace of simplified code(s):

{"time": "2021-01-25 10:31:30.562586", "score": "0.9528", "loss": "0.1275", "code": "class T { public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { URLConnection conn = null; InputStreamReader reader = null; try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentType != null) { hconn.setRequestProperty(\"Content-Type\", contentType); } if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\"); String input = username + \":\" + password; String output = Base64.encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff = new StringBuilder(); String error = null; int msgPriority = Project.MSG_INFO; boolean first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\r') || (ch == '\n')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (buff.length() > 0) { handleOutput(buff.toString(), msgPriority); } if (error != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } } }"}
{"time": "2021-01-25 10:35:51.699740", "score": "0.8069", "loss": "0.5185", "code": "class T { public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentType != null) { hconn.setRequestProperty(\"Content-Type\", contentType); } if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\"); String input = username + \":\" + password; String output = Base64.encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); hconn.connect(); if (istream != null) { BufferedOutputStream ostream = new BufferedOutputStream(hconn.getOutputStream(), 1024); byte[] buffer = new byte[1024]; while (true) { int n = istream.read(buffer); if (n < 0) { break; } ostream.write(buffer, 0, n); } ostream.flush(); ostream.close(); istream.close(); } reader = new InputStreamReader(hconn.getInputStream(), CHARSET); StringBuilder buff = new StringBuilder(); String error = null; int msgPriority = Project.MSG_INFO; boolean first = true; while (true) { int ch = reader.read(); if (ch < 0) { break; } else if ((ch == '\r') || (ch == '\n')) { if (buff.length() > 0) { String line = buff.toString(); buff.setLength(0); if (first) { if (!line.startsWith(\"OK -\")) { error = line; msgPriority = Project.MSG_ERR; } first = false; } handleOutput(line, msgPriority); } } else { buff.append((char) ch); } } if (buff.length() > 0) { handleOutput(buff.toString(), msgPriority); } if (error != null && isFailOnError()) { throw new BuildException(error); } } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } } }"}
{"time": "2021-01-25 10:38:47.840648", "score": "0.6379", "loss": "0.7527", "code": "class T { public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); if (istream != null) { hconn.setDoOutput(true); hconn.setRequestMethod(\"PUT\"); if (contentType != null) { hconn.setRequestProperty(\"Content-Type\", contentType); } if (contentLength >= 0) { hconn.setRequestProperty(\"Content-Length\", \"\" + contentLength); hconn.setFixedLengthStreamingMode(contentLength); } } else { hconn.setDoOutput(false); hconn.setRequestMethod(\"GET\"); } hconn.setRequestProperty(\"User-Agent\", \"Catalina-Ant-Task/1.0\"); String input = username + \":\" + password; String output = Base64.encodeBase64String(input.getBytes(StandardCharsets.ISO_8859_1)); hconn.setRequestProperty(\"Authorization\", \"Basic \" + output); } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } } }"}
{"time": "2021-01-25 10:40:08.236761", "score": "0.585", "loss": "1.8331", "code": "class T { public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); hconn.setUseCaches(false); } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } } }"}
{"time": "2021-01-25 10:42:07.463064", "score": "0.9934", "loss": "0.0201", "code": "class T { public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { try { conn = (new URL(url + command)).openConnection(); HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } } }"}
{"time": "2021-01-25 10:46:05.883298", "score": "0.9869", "loss": "0.054", "code": "class T { public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { try { HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); } catch (Exception e) { if (isFailOnError()) { throw new BuildException(e); } else { handleErrorOutput(e.getMessage()); } } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } } }"}
{"time": "2021-01-25 10:50:42.787021", "score": "0.8936", "loss": "0.3641", "code": "class T { public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { try { HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); } finally { closeRedirector(); if (reader != null) { try { reader.close(); } catch (IOException ioe) { } reader = null; } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } } }"}
{"time": "2021-01-25 10:53:16.939749", "score": "0.8949", "loss": "0.3356", "code": "class T { public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { try { HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); } finally { closeRedirector(); if (reader != null) { } if (istream != null) { try { istream.close(); } catch (IOException ioe) { } } } } }"}
{"time": "2021-01-25 10:53:56.772780", "score": "0.8946", "loss": "0.3332", "code": "class T { public void execute(String command, InputStream istream, String contentType, int contentLength) throws BuildException { try { HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); } finally { closeRedirector(); if (reader != null) { } if (istream != null) try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-25 10:55:33.269930", "score": "0.9981", "loss": "0.0045", "code": "class T { public void execute( ) throws BuildException { try { HttpURLConnection hconn = (HttpURLConnection) conn; hconn.setAllowUserInteraction(false); hconn.setDoInput(true); } finally { closeRedirector(); if (reader != null) { } if (istream != null) try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-25 10:56:13.138647", "score": "0.9968", "loss": "0.0103", "code": "class T { public void execute( ) throws BuildException { try { hconn.setAllowUserInteraction(false); hconn.setDoInput(true); } finally { closeRedirector(); if (reader != null) { } if (istream != null) try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-25 10:56:52.903952", "score": "0.9967", "loss": "0.0096", "code": "class T { public void execute( ) throws BuildException { try { hconn.setDoInput(true); } finally { closeRedirector(); if (reader != null) { } if (istream != null) try { istream.close(); } catch (IOException ioe) { } } } }"}
{"time": "2021-01-25 10:58:12.338413", "score": "0.9973", "loss": "0.0062", "code": "class T { public void execute( ) throws BuildException { try { hconn.setDoInput(true); } finally { closeRedirector(); if (reader != null) { } if (istream != null) try { } catch (IOException ioe) { } } } }"}
{"time": "2021-01-25 10:58:51.996954", "score": "0.9974", "loss": "0.006", "code": "class T { public void execute( ) throws BuildException { try { hconn.setDoInput(true); } finally { if (reader != null) { } if (istream != null) try { } catch (IOException ioe) { } } } }"}
{"time": "2021-01-25 11:01:28.331416", "score": "0.8763", "loss": "0.1845", "code": "class T { public void execute( ) throws BuildException { try { hconn.setDoInput( ); } finally { if (reader != null) { } if (istream != null) try { } catch (IOException ioe) { } } } }"}
{"time": "2021-01-25 11:02:08.062420", "score": "0.8763", "loss": "0.1845", "code": "class T { void execute( ) throws BuildException { try { hconn.setDoInput( ); } finally { if (reader != null) { } if (istream != null) try { } catch (IOException ioe) { } } } }"}
{"time": "2021-01-25 11:05:54.108021", "score": "0.8329", "loss": "0.3691", "code": "class T { void execute( ) throws BuildException { hconn.setDoInput( ); } }"}

Minimal simplified code:
class T {
       void execute(                                                                          ) throws BuildException {                                                                                                                                                                                                               hconn.setDoInput}
}


