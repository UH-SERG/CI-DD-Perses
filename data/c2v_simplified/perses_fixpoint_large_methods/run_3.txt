
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/modules/tomcat-lite/java/org/apache/tomcat/lite/io/jsse/SslChannel_run.java
method_name = run
method_body = public void run() { try { boolean initial = true; SSLEngineResult wrap = null; HandshakeStatus hstatus = sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System.currentTimeMillis() - t0 > handshakeTimeout) { throw new TimeoutException(); } if (wrap != null && wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info("-->doHandshake() loop: status = " + hstatus + " " + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, "Wrap error", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info("UNWRAP: rem=" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe("Unexpected data after unwrap"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info("Read: " + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info("Wait: " + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info("Read after wait: " + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info("Unwrap chunk done " + hstatus + " " + wrap + " " + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info("Tasks done in " + (t1task - t0task) + " new status " + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, "Error handshaking", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, "Error closing", ex); } } }

Trace of simplified code(s):

{"time": "2021-01-25 12:03:17.411904", "score": "0.7174", "loss": "0.7283", "code": "class T { public void run() { try { boolean initial = true; SSLEngineResult wrap = null; HandshakeStatus hstatus = sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System.currentTimeMillis() - t0 > handshakeTimeout) { throw new TimeoutException(); } if (wrap != null && wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } endHandshake(); processRealInput(net.getIn(), in); } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:10:15.559752", "score": "0.9736", "loss": "0.0577", "code": "class T { public void run() { try { boolean initial = true; SSLEngineResult wrap = null; HandshakeStatus hstatus = sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } long t0 = System.currentTimeMillis(); while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System.currentTimeMillis() - t0 > handshakeTimeout) { throw new TimeoutException(); } if (wrap != null && wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:12:17.910050", "score": "0.8768", "loss": "0.2628", "code": "class T { public void run() { try { boolean initial = true; SSLEngineResult wrap = null; HandshakeStatus hstatus = sslEngine.getHandshakeStatus(); if (!closeHandshake && (hstatus == HandshakeStatus.NOT_HANDSHAKING || initial)) { sslEngine.beginHandshake(); hstatus = sslEngine.getHandshakeStatus(); } while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System.currentTimeMillis() - t0 > handshakeTimeout) { throw new TimeoutException(); } if (wrap != null && wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:13:00.582301", "score": "0.9364", "loss": "0.0742", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System.currentTimeMillis() - t0 > handshakeTimeout) { throw new TimeoutException(); } if (wrap != null && wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } if (hstatus == HandshakeStatus.NOT_HANDSHAKING) { break; } } } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:16:29.840021", "score": "0.9547", "loss": "0.0677", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (System.currentTimeMillis() - t0 > handshakeTimeout) { throw new TimeoutException(); } if (wrap != null && wrap.getStatus() == Status.CLOSED) { break; } if (log.isLoggable(Level.FINEST)) { log.info(\"-->doHandshake() loop: status = \" + hstatus + \" \" + sslEngine.getHandshakeStatus()); } if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } } } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:17:51.670207", "score": "0.9426", "loss": "0.1051", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } } } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:18:35.776391", "score": "0.7903", "loss": "0.281", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { if (hstatus == HandshakeStatus.NEED_WRAP) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } else if (hstatus == HandshakeStatus.NEED_UNWRAP) { while (hstatus == HandshakeStatus.NEED_UNWRAP) { if (myNetInData.remaining() > 0) { myAppInData.clear(); if (debugWrap) { log.info(\"UNWRAP: rem=\" + myNetInData.remaining()); } wrap = sslEngine.unwrap(myNetInData, myAppInData); hstatus = wrap.getHandshakeStatus(); myAppInData.flip(); if (myAppInData.remaining() > 0) { log.severe(\"Unexpected data after unwrap\"); } if (wrap.getStatus() == Status.CLOSED) { break; } } if (wrap == null || wrap.getStatus() == Status.BUFFER_UNDERFLOW || (hstatus == HandshakeStatus.NEED_UNWRAP && myNetInData.remaining() == 0)) { myNetInData.compact(); int rd; try { rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read: \" + rd); } } finally { myNetInData.flip(); } if (rd == 0) { if (debugWrap) { log.info(\"Wait: \" + handshakeTimeout); } net.getIn().waitData(handshakeTimeout); rd = net.getIn().read(myNetInData); if (debugWrap) { log.info(\"Read after wait: \" + rd); } } if (rd < 0) { break; } } if (log.isLoggable(Level.FINEST)) { log.info(\"Unwrap chunk done \" + hstatus + \" \" + wrap + \" \" + sslEngine.getHandshakeStatus()); } } } else if (hstatus == HandshakeStatus.NEED_TASK) { long t0task = System.currentTimeMillis(); Runnable r; while ((r = sslEngine.getDelegatedTask()) != null) { r.run(); } long t1task = System.currentTimeMillis(); hstatus = sslEngine.getHandshakeStatus(); if (log.isLoggable(Level.FINEST)) { log.info(\"Tasks done in \" + (t1task - t0task) + \" new status \" + hstatus); } } } } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:18:45.880184", "score": "0.9853", "loss": "0.019", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } net.startSending(); } } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:20:05.748499", "score": "0.9897", "loss": "0.0114", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { initial = false; synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } } } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:22:04.603121", "score": "0.9528", "loss": "0.0552", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { synchronized (myNetOutData) { while (hstatus == HandshakeStatus.NEED_WRAP) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } } } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:23:22.591072", "score": "0.9647", "loss": "0.0577", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { synchronized (myNetOutData) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } hstatus = wrap.getHandshakeStatus(); } } } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:26:11.716981", "score": "0.4496", "loss": "0.9895", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { synchronized (myNetOutData) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } } } } catch (Throwable t) { log.log(Level.SEVERE, \"Error handshaking\", t); try { close(); net.close(); sendHandleReceivedCallback(); } catch (IOException ex) { log.log(Level.SEVERE, \"Error closing\", ex); } } } }"}
{"time": "2021-01-25 12:30:48.741558", "score": "0.4954", "loss": "1.0191", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { synchronized (myNetOutData) { myNetOutData.compact(); try { wrap = sslEngine.wrap(myAppOutData, myNetOutData); } catch (Throwable t) { log.log(Level.SEVERE, \"Wrap error\", t); close(); return; } finally { myNetOutData.flip(); } if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } } } } catch (Throwable t) { } } }"}
{"time": "2021-01-25 12:31:40.826766", "score": "0.8852", "loss": "0.1742", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { synchronized (myNetOutData) { myNetOutData.compact(); if (myNetOutData.remaining() > 0) { net.getOut().write(myNetOutData); } } } } catch (Throwable t) { } } }"}
{"time": "2021-01-25 12:33:37.440947", "score": "0.911", "loss": "0.2386", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && !net.getIn().isAppendClosed()) { synchronized (myNetOutData) { myNetOutData.compact(); if (myNetOutData.remaining() > 0) net.getOut().write(myNetOutData); } } } catch (Throwable t) { } } }"}
{"time": "2021-01-25 12:34:55.589371", "score": "0.9422", "loss": "0.1597", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && net.getIn().isAppendClosed()) { synchronized (myNetOutData) { myNetOutData.compact(); if (myNetOutData.remaining() > 0) net.getOut().write(myNetOutData); } } } catch (Throwable t) { } } }"}
{"time": "2021-01-25 12:36:50.200290", "score": "0.9844", "loss": "0.0553", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && net.getIn().isAppendClosed()) { synchronized (myNetOutData) { if (myNetOutData.remaining() > 0) net.getOut().write(myNetOutData); } } } catch (Throwable t) { } } }"}
{"time": "2021-01-25 12:39:25.181006", "score": "0.9761", "loss": "0.1104", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && net.getIn() ) { synchronized (myNetOutData) { if (myNetOutData.remaining() > 0) net.getOut().write(myNetOutData); } } } catch (Throwable t) { } } }"}
{"time": "2021-01-25 12:41:26.000428", "score": "0.9677", "loss": "0.1173", "code": "class T { public void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && net.getIn() ) { synchronized (myNetOutData) { if (myNetOutData.remaining() > 0) net.getOut().write( ); } } } catch (Throwable t) { } } }"}
{"time": "2021-01-25 12:42:05.529088", "score": "0.9677", "loss": "0.1173", "code": "class T { void run() { try { while (hstatus != HandshakeStatus.NOT_HANDSHAKING && hstatus != HandshakeStatus.FINISHED && net.getIn() ) { synchronized (myNetOutData) { if (myNetOutData.remaining() > 0) net.getOut().write( ); } } } catch (Throwable t) { } } }"}
{"time": "2021-01-25 12:46:26.177319", "score": "0.7149", "loss": "0.4998", "code": "class T { void run() { try { synchronized (myNetOutData) { if (myNetOutData.remaining() > 0) net.getOut().write( ); } } catch (Throwable t) { } } }"}
{"time": "2021-01-25 12:47:05.798112", "score": "0.7766", "loss": "0.3659", "code": "class T { void run() { try { if (myNetOutData.remaining() > 0) net.getOut().write( ); } catch (Throwable t) { } } }"}

Minimal simplified code:
class T {
       void run() { try{                                                                                                                                                                                                                                                                                                                   }catch (Throwable t) {                                                                                                                                                                                   } }
}


