
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/58code__Oceanus/oceanus-all/oceanus-exchange/oceanus-exchange-sqlparser/src/main/java/com/bj58/sql/parser/NumericConstantNode_init.java
method_name = init
method_body = public void init(Object arg1) throws StandardException { int precision = 0, scal = 0, maxwidth = 0; Boolean isNullable; boolean valueInP; TypeId typeId = null; int typeid = 0; if (arg1 instanceof TypeId) { typeId = (TypeId) arg1; isNullable = Boolean.TRUE; valueInP = false; maxwidth = 0; } else { isNullable = Boolean.FALSE; valueInP = true; } switch(getNodeType()) { case NodeTypes.TINYINT_CONSTANT_NODE: precision = TypeId.SMALLINT_PRECISION; scal = TypeId.SMALLINT_SCALE; if (valueInP) { maxwidth = TypeId.SMALLINT_MAXWIDTH; typeid = Types.TINYINT; setValue((Byte) arg1); } break; case NodeTypes.INT_CONSTANT_NODE: precision = TypeId.INT_PRECISION; scal = TypeId.INT_SCALE; if (valueInP) { maxwidth = TypeId.INT_MAXWIDTH; typeid = Types.INTEGER; setValue((Integer) arg1); } break; case NodeTypes.SMALLINT_CONSTANT_NODE: precision = TypeId.SMALLINT_PRECISION; scal = TypeId.SMALLINT_SCALE; if (valueInP) { maxwidth = TypeId.SMALLINT_MAXWIDTH; typeid = Types.SMALLINT; setValue((Short) arg1); } break; case NodeTypes.LONGINT_CONSTANT_NODE: precision = TypeId.LONGINT_PRECISION; scal = TypeId.LONGINT_SCALE; if (valueInP) { maxwidth = TypeId.LONGINT_MAXWIDTH; typeid = Types.BIGINT; setValue((Long) arg1); } break; case NodeTypes.DECIMAL_CONSTANT_NODE: if (valueInP) { typeid = Types.DECIMAL; String image = (String) arg1; int length = image.length(); int idx = image.indexOf('.'); precision = length; if (!Character.isDigit(image.charAt(0)) && (idx != 0)) precision--; if (idx < 0) scal = 0; else { precision--; scal = length - idx - 1; } maxwidth = length; setValue(new BigDecimal(image)); } else { precision = TypeId.DEFAULT_DECIMAL_PRECISION; scal = TypeId.DEFAULT_DECIMAL_SCALE; maxwidth = TypeId.DECIMAL_MAXWIDTH; } break; case NodeTypes.DOUBLE_CONSTANT_NODE: precision = TypeId.DOUBLE_PRECISION; scal = TypeId.DOUBLE_SCALE; if (valueInP) { maxwidth = TypeId.DOUBLE_MAXWIDTH; typeid = Types.DOUBLE; setValue((Double) arg1); } break; case NodeTypes.FLOAT_CONSTANT_NODE: precision = TypeId.REAL_PRECISION; scal = TypeId.REAL_SCALE; if (valueInP) { maxwidth = TypeId.REAL_MAXWIDTH; typeid = Types.REAL; setValue((Float) arg1); } break; default: assert false : "Unexpected nodeType = " + getNodeType(); break; } setType((typeId != null) ? typeId : TypeId.getBuiltInTypeId(typeid), precision, scal, isNullable.booleanValue(), maxwidth); }

Trace of simplified code(s):

{"time": "2021-01-27 03:06:01.978965", "score": "0.9997", "loss": "0.0005", "code": "class T { public void init(Object arg1) throws StandardException { int precision = 0, scal = 0, maxwidth = 0; Boolean isNullable; boolean valueInP; TypeId typeId = null; int typeid = 0; if (arg1 instanceof TypeId) { typeId = (TypeId) arg1; isNullable = Boolean.TRUE; valueInP = false; maxwidth = 0; } else { isNullable = Boolean.FALSE; valueInP = true; } switch(getNodeType()) { case NodeTypes.TINYINT_CONSTANT_NODE: precision = TypeId.SMALLINT_PRECISION; scal = TypeId.SMALLINT_SCALE; if (valueInP) { maxwidth = TypeId.SMALLINT_MAXWIDTH; typeid = Types.TINYINT; setValue((Byte) arg1); } break; case NodeTypes.INT_CONSTANT_NODE: precision = TypeId.INT_PRECISION; scal = TypeId.INT_SCALE; if (valueInP) { maxwidth = TypeId.INT_MAXWIDTH; typeid = Types.INTEGER; setValue((Integer) arg1); } break; case NodeTypes.SMALLINT_CONSTANT_NODE: precision = TypeId.SMALLINT_PRECISION; scal = TypeId.SMALLINT_SCALE; if (valueInP) { maxwidth = TypeId.SMALLINT_MAXWIDTH; typeid = Types.SMALLINT; setValue((Short) arg1); } break; case NodeTypes.LONGINT_CONSTANT_NODE: precision = TypeId.LONGINT_PRECISION; scal = TypeId.LONGINT_SCALE; if (valueInP) { maxwidth = TypeId.LONGINT_MAXWIDTH; typeid = Types.BIGINT; setValue((Long) arg1); } break; case NodeTypes.DECIMAL_CONSTANT_NODE: if (valueInP) { typeid = Types.DECIMAL; String image = (String) arg1; int length = image.length(); int idx = image.indexOf('.'); precision = length; if (!Character.isDigit(image.charAt(0)) && (idx != 0)) precision--; if (idx < 0) scal = 0; else { precision--; scal = length - idx - 1; } maxwidth = length; setValue(new BigDecimal(image)); } else { precision = TypeId.DEFAULT_DECIMAL_PRECISION; scal = TypeId.DEFAULT_DECIMAL_SCALE; maxwidth = TypeId.DECIMAL_MAXWIDTH; } break; case NodeTypes.DOUBLE_CONSTANT_NODE: precision = TypeId.DOUBLE_PRECISION; scal = TypeId.DOUBLE_SCALE; if (valueInP) { maxwidth = TypeId.DOUBLE_MAXWIDTH; typeid = Types.DOUBLE; setValue((Double) arg1); } break; case NodeTypes.FLOAT_CONSTANT_NODE: precision = TypeId.REAL_PRECISION; scal = TypeId.REAL_SCALE; if (valueInP) { maxwidth = TypeId.REAL_MAXWIDTH; typeid = Types.REAL; setValue((Float) arg1); } break; default: assert false : \"Unexpected nodeType = \" + getNodeType(); break; } setType((typeId != null) ? typeId : TypeId.getBuiltInTypeId(typeid), precision, scal, isNullable.booleanValue(), maxwidth); } }"}
{"time": "2021-01-27 03:09:50.427500", "score": "0.7907", "loss": "0.4225", "code": "class T { public void init(Object arg1) throws StandardException { int precision = 0, scal = 0, maxwidth = 0; Boolean isNullable; boolean valueInP; TypeId typeId = null; } }"}
{"time": "2021-01-27 03:11:43.223683", "score": "0.8196", "loss": "0.3626", "code": "class T { public void init(Object arg1) throws StandardException { int precision = 0, scal = 0, maxwidth = 0; Boolean isNullable; boolean valueInP; } }"}
{"time": "2021-01-27 03:13:00.869419", "score": "0.9985", "loss": "0.002", "code": "class T { public void init(Object arg1) throws StandardException { boolean valueInP; } }"}
{"time": "2021-01-27 03:14:15.100199", "score": "0.9976", "loss": "0.0052", "code": "class T { public void init( ) throws StandardException { boolean valueInP; } }"}
{"time": "2021-01-27 03:14:54.186999", "score": "0.9997", "loss": "0.0005", "code": "class T { public void init( ) { boolean valueInP; } }"}

Minimal simplified code:
class T {
       void init(           )                          {                                                                boolean valueIn}
}


