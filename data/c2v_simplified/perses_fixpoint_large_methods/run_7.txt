
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/net/ha/JournalClient_run.java
method_name = run
method_body = @Override public void run() { running = true; notifyCallback(JournalClientEvents.EVT_RUNNING); int event = JournalClientEvents.EVT_NONE; boolean connected = false; try { while (true) { if (!connected) { int retryCount = config.getReconnectPolicy().getRetryCount(); int loginRetryCount = config.getReconnectPolicy().getLoginRetryCount(); do { try { closeChannel(); try { openChannel(); counter.incrementAndGet(); } catch (JournalNetworkException e) { if (retryCount-- > 0) { continue; } else { break; } } sendProtocolVersion(); checkAuthAndSendCredential(); resubscribe(); sendReady(); connected = true; notifyCallback(JournalClientEvents.EVT_CONNECTED); } catch (UnauthorizedException e) { notifyCallback(JournalClientEvents.EVT_AUTH_ERROR); loginRetryCount--; } catch (AuthenticationConfigException | AuthenticationProviderException e) { closeChannel(); close0(); notifyCallback(JournalClientEvents.EVT_AUTH_CONFIG_ERROR); return; } catch (JournalNetworkException e) { LOG.info().$(e.getMessage()).$(); closeChannel(); } if (!connected && retryCount-- > 0 && loginRetryCount > 0) { LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(config.getReconnectPolicy().getSleepBetweenRetriesMillis())); LOG.info().$("Retrying reconnect ... [").$(retryCount + 1).$(']').$(); } else { break; } } while (true); if (!connected && (retryCount == 0 || loginRetryCount == 0)) { event = JournalClientEvents.EVT_SERVER_ERROR; } } try { if (connected && channel.isOpen() && isRunning()) { commandConsumer.read(channel); byte cmd = commandConsumer.getCommand(); switch(cmd) { case Command.JOURNAL_DELTA_CMD: statsChannel.setDelegate(channel); int index = intResponseConsumer.getValue(statsChannel); deltaConsumers.getQuick(index).read(statsChannel); statusSentList.set(index, 0); statsChannel.logStats(); break; case Command.SERVER_READY_CMD: sendState(); sendReady(); break; case Command.SERVER_HEARTBEAT: if (processSubscriptionQueue()) { sendReady(); } else { event = JournalClientEvents.EVT_CLIENT_HALT; } break; case Command.SERVER_SHUTDOWN: connected = false; break; default: LOG.info().$("Unknown command: ").$(cmd).$(); break; } } else if (event == JournalClientEvents.EVT_NONE) { event = JournalClientEvents.EVT_CLIENT_HALT; } } catch (IncompatibleJournalException e) { LOG.error().$(e.getMessage()).$(); event = JournalClientEvents.EVT_INCOMPATIBLE_JOURNAL; } catch (JournalNetworkException e) { LOG.error().$("Network error. Server died?").$(); LOG.debug().$("Network error details: ").$(e).$(); notifyCallback(JournalClientEvents.EVT_SERVER_DIED); connected = false; } catch (Throwable e) { LOG.error().$("Unhandled exception in client").$(e).$(); event = JournalClientEvents.EVT_CLIENT_EXCEPTION; } if (event != JournalClientEvents.EVT_NONE) { if (channel != null && channel.isOpen()) { sendDisconnect(); } closeChannel(); close0(); notifyCallback(event); break; } } } catch (Throwable e) { LOG.error().$("Fatal exception when closing client").$(e).$(); closeChannel(); close0(); } finally { running = false; notifyCallback(JournalClientEvents.EVT_TERMINATED); haltLatch.countDown(); LOG.info().$("Terminated").$(); } }

Trace of simplified code(s):

{"time": "2021-01-25 17:30:55.849627", "score": "0.9919", "loss": "0.0158", "code": "class T { @Override public void run() { running = true; notifyCallback(JournalClientEvents.EVT_RUNNING); int event = JournalClientEvents.EVT_NONE; boolean connected = false; try { while (true) { if (!connected) { int retryCount = config.getReconnectPolicy().getRetryCount(); int loginRetryCount = config.getReconnectPolicy().getLoginRetryCount(); do { try { closeChannel(); try { openChannel(); counter.incrementAndGet(); } catch (JournalNetworkException e) { if (retryCount-- > 0) { continue; } else { break; } } sendProtocolVersion(); checkAuthAndSendCredential(); resubscribe(); sendReady(); connected = true; notifyCallback(JournalClientEvents.EVT_CONNECTED); } catch (UnauthorizedException e) { notifyCallback(JournalClientEvents.EVT_AUTH_ERROR); loginRetryCount--; } catch (AuthenticationConfigException | AuthenticationProviderException e) { closeChannel(); close0(); notifyCallback(JournalClientEvents.EVT_AUTH_CONFIG_ERROR); return; } catch (JournalNetworkException e) { LOG.info().$(e.getMessage()).$(); closeChannel(); } if (!connected && retryCount-- > 0 && loginRetryCount > 0) { LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(config.getReconnectPolicy().getSleepBetweenRetriesMillis())); LOG.info().$(\"Retrying reconnect ... [\").$(retryCount + 1).$(']').$(); } else { break; } } while (true); if (!connected && (retryCount == 0 || loginRetryCount == 0)) { event = JournalClientEvents.EVT_SERVER_ERROR; } } try { if (connected && channel.isOpen() && isRunning()) { commandConsumer.read(channel); byte cmd = commandConsumer.getCommand(); switch(cmd) { case Command.JOURNAL_DELTA_CMD: statsChannel.setDelegate(channel); int index = intResponseConsumer.getValue(statsChannel); deltaConsumers.getQuick(index).read(statsChannel); statusSentList.set(index, 0); statsChannel.logStats(); break; case Command.SERVER_READY_CMD: sendState(); sendReady(); break; case Command.SERVER_HEARTBEAT: if (processSubscriptionQueue()) { sendReady(); } else { event = JournalClientEvents.EVT_CLIENT_HALT; } break; case Command.SERVER_SHUTDOWN: connected = false; break; default: LOG.info().$(\"Unknown command: \").$(cmd).$(); break; } } else if (event == JournalClientEvents.EVT_NONE) { event = JournalClientEvents.EVT_CLIENT_HALT; } } catch (IncompatibleJournalException e) { LOG.error().$(e.getMessage()).$(); event = JournalClientEvents.EVT_INCOMPATIBLE_JOURNAL; } catch (JournalNetworkException e) { LOG.error().$(\"Network error. Server died?\").$(); LOG.debug().$(\"Network error details: \").$(e).$(); notifyCallback(JournalClientEvents.EVT_SERVER_DIED); connected = false; } catch (Throwable e) { LOG.error().$(\"Unhandled exception in client\").$(e).$(); event = JournalClientEvents.EVT_CLIENT_EXCEPTION; } if (event != JournalClientEvents.EVT_NONE) { if (channel != null && channel.isOpen()) { sendDisconnect(); } closeChannel(); close0(); notifyCallback(event); break; } } } catch (Throwable e) { LOG.error().$(\"Fatal exception when closing client\").$(e).$(); closeChannel(); close0(); } finally { running = false; notifyCallback(JournalClientEvents.EVT_TERMINATED); haltLatch.countDown(); LOG.info().$(\"Terminated\").$(); } } }"}
{"time": "2021-01-25 17:34:37.889919", "score": "0.6743", "loss": "0.4358", "code": "class T { @Override public void run() { running = true; notifyCallback(JournalClientEvents.EVT_RUNNING); int event = JournalClientEvents.EVT_NONE; } }"}
{"time": "2021-01-25 17:35:53.259368", "score": "0.5446", "loss": "0.6389", "code": "class T { @Override public void run() { running = true; notifyCallback(JournalClientEvents.EVT_RUNNING); } }"}
{"time": "2021-01-25 17:38:27.904414", "score": "0.8412", "loss": "0.2627", "code": "class T { @Override public void run() { running = true; notifyCallback( ); } }"}
{"time": "2021-01-25 17:39:47.070047", "score": "0.8412", "loss": "0.2627", "code": "class T { @Override void run() { running = true; notifyCallback( ); } }"}
{"time": "2021-01-25 17:44:08.440818", "score": "0.9635", "loss": "0.0568", "code": "class T { @Override void run() { notifyCallback( ); } }"}

Minimal simplified code:
class T {
@Override        void run() {                 notifyCallback}
}


