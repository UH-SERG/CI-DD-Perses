
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Piasy__AppRTC-Android/app/src/main/java/org/appspot/apprtc/CallActivity_onCreate.java
method_name = onCreate
method_body = @Override @SuppressWarnings("deprecation") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON); getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility()); setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0); int videoOutHeight = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException("Failed to open video file for output: " + saveRemoteVideoToFile, e); } } fullscreenRenderer.init(eglBase.getEglBaseContext(), null); fullscreenRenderer.setScalingType(ScalingType.SCALE_ASPECT_FILL); pipRenderer.setZOrderMediaOverlay(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { logAndToast("Permission " + permission + " is not granted"); setResult(RESULT_CANCELED); finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, "Didn't get any URL in intent!"); setResult(RESULT_CANCELED); finish(); return; } String roomId = intent.getStringExtra(EXTRA_ROOMID); Log.d(TAG, "Room ID: " + roomId); if (roomId == null || roomId.length() == 0) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, "Incorrect room ID in intent!"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1), intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEO_BITRATE, 0), intent.getStringExtra(EXTRA_VIDEOCODEC), intent.getBooleanExtra(EXTRA_HWCODEC_ENABLED, true), intent.getBooleanExtra(EXTRA_FLEXFEC_ENABLED, false), intent.getIntExtra(EXTRA_AUDIO_BITRATE, 0), intent.getStringExtra(EXTRA_AUDIOCODEC), intent.getBooleanExtra(EXTRA_NOAUDIOPROCESSING_ENABLED, false), intent.getBooleanExtra(EXTRA_AECDUMP_ENABLED, false), intent.getBooleanExtra(EXTRA_SAVE_INPUT_AUDIO_TO_FILE_ENABLED, false), intent.getBooleanExtra(EXTRA_OPENSLES_ENABLED, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AEC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AGC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_NS, false), intent.getBooleanExtra(EXTRA_DISABLE_WEBRTC_AGC_AND_HPF, false), intent.getBooleanExtra(EXTRA_ENABLE_RTCEVENTLOG, false), intent.getBooleanExtra(EXTRA_USE_LEGACY_AUDIO_DEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, "VIDEO_FILE: '" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + "'"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, "Using DirectRTCClient because room name looks like an IP."); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } }

Trace of simplified code(s):

{"time": "2021-01-27 03:19:17.732341", "score": "0.9761", "loss": "0.0261", "code": "class T { @Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON); getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility()); setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0); int videoOutHeight = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer.init(eglBase.getEglBaseContext(), null); fullscreenRenderer.setScalingType(ScalingType.SCALE_ASPECT_FILL); pipRenderer.setZOrderMediaOverlay(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { logAndToast(\"Permission \" + permission + \" is not granted\"); setResult(RESULT_CANCELED); finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn't get any URL in intent!\"); setResult(RESULT_CANCELED); finish(); return; } String roomId = intent.getStringExtra(EXTRA_ROOMID); Log.d(TAG, \"Room ID: \" + roomId); if (roomId == null || roomId.length() == 0) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Incorrect room ID in intent!\"); setResult(RESULT_CANCELED); finish(); return; } boolean loopback = intent.getBooleanExtra(EXTRA_LOOPBACK, false); boolean tracing = intent.getBooleanExtra(EXTRA_TRACING, false); int videoWidth = intent.getIntExtra(EXTRA_VIDEO_WIDTH, 0); int videoHeight = intent.getIntExtra(EXTRA_VIDEO_HEIGHT, 0); screencaptureEnabled = intent.getBooleanExtra(EXTRA_SCREENCAPTURE, false); if (screencaptureEnabled && videoWidth == 0 && videoHeight == 0) { DisplayMetrics displayMetrics = getDisplayMetrics(); videoWidth = displayMetrics.widthPixels; videoHeight = displayMetrics.heightPixels; } DataChannelParameters dataChannelParameters = null; if (intent.getBooleanExtra(EXTRA_DATA_CHANNEL_ENABLED, false)) { dataChannelParameters = new DataChannelParameters(intent.getBooleanExtra(EXTRA_ORDERED, true), intent.getIntExtra(EXTRA_MAX_RETRANSMITS_MS, -1), intent.getIntExtra(EXTRA_MAX_RETRANSMITS, -1), intent.getStringExtra(EXTRA_PROTOCOL), intent.getBooleanExtra(EXTRA_NEGOTIATED, false), intent.getIntExtra(EXTRA_ID, -1)); } peerConnectionParameters = new PeerConnectionParameters(intent.getBooleanExtra(EXTRA_VIDEO_CALL, true), loopback, tracing, videoWidth, videoHeight, intent.getIntExtra(EXTRA_VIDEO_FPS, 0), intent.getIntExtra(EXTRA_VIDEO_BITRATE, 0), intent.getStringExtra(EXTRA_VIDEOCODEC), intent.getBooleanExtra(EXTRA_HWCODEC_ENABLED, true), intent.getBooleanExtra(EXTRA_FLEXFEC_ENABLED, false), intent.getIntExtra(EXTRA_AUDIO_BITRATE, 0), intent.getStringExtra(EXTRA_AUDIOCODEC), intent.getBooleanExtra(EXTRA_NOAUDIOPROCESSING_ENABLED, false), intent.getBooleanExtra(EXTRA_AECDUMP_ENABLED, false), intent.getBooleanExtra(EXTRA_SAVE_INPUT_AUDIO_TO_FILE_ENABLED, false), intent.getBooleanExtra(EXTRA_OPENSLES_ENABLED, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AEC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_AGC, false), intent.getBooleanExtra(EXTRA_DISABLE_BUILT_IN_NS, false), intent.getBooleanExtra(EXTRA_DISABLE_WEBRTC_AGC_AND_HPF, false), intent.getBooleanExtra(EXTRA_ENABLE_RTCEVENTLOG, false), intent.getBooleanExtra(EXTRA_USE_LEGACY_AUDIO_DEVICE, false), dataChannelParameters); commandLineRun = intent.getBooleanExtra(EXTRA_CMDLINE, false); int runTimeMs = intent.getIntExtra(EXTRA_RUNTIME, 0); Log.d(TAG, \"VIDEO_FILE: '\" + intent.getStringExtra(EXTRA_VIDEO_FILE_AS_CAMERA) + \"'\"); if (loopback || !DirectRTCClient.IP_PATTERN.matcher(roomId).matches()) { appRtcClient = new WebSocketRTCClient(this); } else { Log.i(TAG, \"Using DirectRTCClient because room name looks like an IP.\"); appRtcClient = new DirectRTCClient(this); } String urlParameters = intent.getStringExtra(EXTRA_URLPARAMETERS); roomConnectionParameters = new RoomConnectionParameters(roomUri.toString(), roomId, loopback, urlParameters); if (CpuMonitor.isSupported()) { cpuMonitor = new CpuMonitor(this); hudFragment.setCpuMonitor(cpuMonitor); } callFragment.setArguments(intent.getExtras()); hudFragment.setArguments(intent.getExtras()); FragmentTransaction ft = getFragmentManager().beginTransaction(); ft.add(R.id.call_fragment_container, callFragment); ft.add(R.id.hud_fragment_container, hudFragment); ft.commit(); if (commandLineRun && runTimeMs > 0) { (new Handler()).postDelayed(new Runnable() { @Override public void run() { disconnect(); } }, runTimeMs); } peerConnectionClient = new PeerConnectionClient(getApplicationContext(), eglBase, peerConnectionParameters, CallActivity.this); PeerConnectionFactory.Options options = new PeerConnectionFactory.Options(); if (loopback) { options.networkIgnoreMask = 0; } peerConnectionClient.createPeerConnectionFactory(options); if (screencaptureEnabled) { startScreenCapture(); } else { startCall(); } } }"}
{"time": "2021-01-27 03:23:24.395796", "score": "0.5468", "loss": "0.605", "code": "class T { @Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON); getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility()); setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); final Intent intent = getIntent(); final EglBase eglBase = EglBase.create(); pipRenderer.init(eglBase.getEglBaseContext(), null); pipRenderer.setScalingType(ScalingType.SCALE_ASPECT_FIT); String saveRemoteVideoToFile = intent.getStringExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE); if (saveRemoteVideoToFile != null) { int videoOutWidth = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_WIDTH, 0); int videoOutHeight = intent.getIntExtra(EXTRA_SAVE_REMOTE_VIDEO_TO_FILE_HEIGHT, 0); try { videoFileRenderer = new VideoFileRenderer(saveRemoteVideoToFile, videoOutWidth, videoOutHeight, eglBase.getEglBaseContext()); remoteSinks.add(videoFileRenderer); } catch (IOException e) { throw new RuntimeException(\"Failed to open video file for output: \" + saveRemoteVideoToFile, e); } } fullscreenRenderer.init(eglBase.getEglBaseContext(), null); fullscreenRenderer.setScalingType(ScalingType.SCALE_ASPECT_FILL); pipRenderer.setZOrderMediaOverlay(true); pipRenderer.setEnableHardwareScaler(true); fullscreenRenderer.setEnableHardwareScaler(false); setSwappedFeeds(true); for (String permission : MANDATORY_PERMISSIONS) { if (checkCallingOrSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) { logAndToast(\"Permission \" + permission + \" is not granted\"); setResult(RESULT_CANCELED); finish(); return; } } Uri roomUri = intent.getData(); if (roomUri == null) { logAndToast(getString(R.string.missing_url)); Log.e(TAG, \"Didn't get any URL in intent!\"); setResult(RESULT_CANCELED); finish(); return; } } }"}
{"time": "2021-01-27 03:24:39.598636", "score": "0.9999", "loss": "0.0001", "code": "class T { @Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON); getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility()); setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; pipRenderer = findViewById(R.id.pip_video_view); fullscreenRenderer = findViewById(R.id.fullscreen_video_view); callFragment = new CallFragment(); hudFragment = new HudFragment(); View.OnClickListener listener = new View.OnClickListener() { @Override public void onClick(View view) { toggleCallControlFragmentVisibility(); } }; pipRenderer.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { setSwappedFeeds(!isSwappedFeeds); } }); fullscreenRenderer.setOnClickListener(listener); remoteSinks.add(remoteProxyRenderer); } }"}
{"time": "2021-01-27 03:25:54.483354", "score": "1.0", "loss": "0.0", "code": "class T { @Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON); getWindow().getDecorView().setSystemUiVisibility(getSystemUiVisibility()); setContentView(R.layout.activity_call); iceConnected = false; signalingParameters = null; } }"}
{"time": "2021-01-27 03:27:09.597995", "score": "1.0", "loss": "0.0", "code": "class T { @Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().addFlags(LayoutParams.FLAG_FULLSCREEN | LayoutParams.FLAG_KEEP_SCREEN_ON | LayoutParams.FLAG_SHOW_WHEN_LOCKED | LayoutParams.FLAG_TURN_SCREEN_ON); } }"}
{"time": "2021-01-27 03:28:25.654617", "score": "1.0", "loss": "0.0", "code": "class T { @Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Thread.setDefaultUncaughtExceptionHandler(new UnhandledExceptionHandler(this)); } }"}
{"time": "2021-01-27 03:29:42.027572", "score": "1.0", "loss": "0.0", "code": "class T { @Override @SuppressWarnings(\"deprecation\") public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); } }"}
{"time": "2021-01-27 03:31:01.169319", "score": "1.0", "loss": "0.0", "code": "class T { void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); } }"}
{"time": "2021-01-27 03:32:17.067617", "score": "1.0", "loss": "0.0", "code": "class T { void onCreate( ) { super.onCreate(savedInstanceState); } }"}

Minimal simplified code:
class T {
                                                  void onCreate(                         ) { super.onCreate}
}


