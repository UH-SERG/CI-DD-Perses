
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/ouya__ouya-sdk-examples/Cordova/InAppPurchases/plugins/cordova-plugin-ouya-sdk/src/android/CordovaOuyaPlugin_execute.java
method_name = execute
method_body = @Override public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException { JSONObject result = null; if (sEnableLogging) { Log.i(TAG, "********************* execute action=" + action); } if (action.equals("setCallbackOnGenericMotionEvent")) { sCallbackOnGenericMotionEvent = callbackContext; PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, ""); pluginResult.setKeepCallback(true); sCallbackOnGenericMotionEvent.sendPluginResult(pluginResult); return true; } else if (action.equals("setCallbackOnKeyUp")) { sCallbackOnKeyUp = callbackContext; PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, ""); pluginResult.setKeepCallback(true); sCallbackOnKeyUp.sendPluginResult(pluginResult); return true; } else if (action.equals("setCallbackOnKeyDown")) { sCallbackOnKeyDown = callbackContext; PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, ""); pluginResult.setKeepCallback(true); sCallbackOnKeyDown.sendPluginResult(pluginResult); return true; } else if (action.equals("initOuyaPlugin")) { sCallbackInitOuyaPlugin = callbackContext; JSONArray jsonArray = null; if (args.length() > 0) { try { jsonArray = new JSONArray(args.get(0).toString()); } catch (Exception e) { result = createError(0, "initOuyaPlugin failed to read argument!"); sCallbackInitOuyaPlugin.error(result); return true; } } else { result = createError(0, "initOuyaPlugin arg1 is null!"); sCallbackInitOuyaPlugin.error(result); return true; } initOuyaPlugin(jsonArray); return true; } else if (action.equals("requestGamerInfo")) { sCallbackRequestGamerInfo = callbackContext; requestGamerInfo(); return true; } else if (action.equals("requestProducts")) { sCallbackRequestProducts = callbackContext; JSONArray jsonArray = null; if (args.length() > 0) { try { jsonArray = new JSONArray(args.get(0).toString()); } catch (Exception e) { result = createError(0, "requestProducts failed to read argument!"); sCallbackRequestProducts.error(result); return true; } } else { result = createError(0, "requestProducts arg1 is null!"); sCallbackRequestProducts.error(result); return true; } requestProducts(jsonArray); return true; } else if (action.equals("requestPurchase")) { sCallbackRequestPurchase = callbackContext; String identifier = null; if (args.length() > 0) { try { Log.i(TAG, "requestPurchase identifier=" + args.getString(0)); identifier = args.getString(0); } catch (Exception e) { result = createError(0, "requestPurchase failed to read argument!"); sCallbackRequestPurchase.error(result); return true; } } else { result = createError(0, "requestPurchase arg1 is null!"); sCallbackRequestPurchase.error(result); return true; } requestPurchase(identifier); return true; } else if (action.equals("requestReceipts")) { sCallbackRequestReceipts = callbackContext; requestReceipts(); return true; } else if (action.equals("setSafeArea")) { float amount = 0f; if (args.length() > 0) { try { Log.i(TAG, "setSafeArea identifier=" + args.getString(0)); amount = (float) args.getDouble(0); } catch (Exception e) { result = createError(0, "setSafeArea failed to read argument!"); callbackContext.error(result); return true; } } else { result = createError(0, "setSafeArea arg1 is null!"); callbackContext.error(result); return true; } setSafeArea(callbackContext, amount); return true; } else if (action.equals("getDeviceHardware")) { getDeviceHardware(callbackContext); return true; } else if (action.equals("shutdown")) { shutdown(callbackContext); return true; } return false; }

Trace of simplified code(s):

{"time": "2021-01-25 20:28:21.471179", "score": "0.9253", "loss": "0.1659", "code": "class T { @Override public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException { JSONObject result = null; if (sEnableLogging) { Log.i(TAG, \"********************* execute action=\" + action); } if (action.equals(\"setCallbackOnGenericMotionEvent\")) { sCallbackOnGenericMotionEvent = callbackContext; PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, \"\"); pluginResult.setKeepCallback(true); sCallbackOnGenericMotionEvent.sendPluginResult(pluginResult); return true; } else if (action.equals(\"setCallbackOnKeyUp\")) { sCallbackOnKeyUp = callbackContext; PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, \"\"); pluginResult.setKeepCallback(true); sCallbackOnKeyUp.sendPluginResult(pluginResult); return true; } else if (action.equals(\"setCallbackOnKeyDown\")) { sCallbackOnKeyDown = callbackContext; PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, \"\"); pluginResult.setKeepCallback(true); sCallbackOnKeyDown.sendPluginResult(pluginResult); return true; } else if (action.equals(\"initOuyaPlugin\")) { sCallbackInitOuyaPlugin = callbackContext; JSONArray jsonArray = null; if (args.length() > 0) { try { jsonArray = new JSONArray(args.get(0).toString()); } catch (Exception e) { result = createError(0, \"initOuyaPlugin failed to read argument!\"); sCallbackInitOuyaPlugin.error(result); return true; } } else { result = createError(0, \"initOuyaPlugin arg1 is null!\"); sCallbackInitOuyaPlugin.error(result); return true; } initOuyaPlugin(jsonArray); return true; } else if (action.equals(\"requestGamerInfo\")) { sCallbackRequestGamerInfo = callbackContext; requestGamerInfo(); return true; } else if (action.equals(\"requestProducts\")) { sCallbackRequestProducts = callbackContext; JSONArray jsonArray = null; if (args.length() > 0) { try { jsonArray = new JSONArray(args.get(0).toString()); } catch (Exception e) { result = createError(0, \"requestProducts failed to read argument!\"); sCallbackRequestProducts.error(result); return true; } } else { result = createError(0, \"requestProducts arg1 is null!\"); sCallbackRequestProducts.error(result); return true; } requestProducts(jsonArray); return true; } else if (action.equals(\"requestPurchase\")) { sCallbackRequestPurchase = callbackContext; String identifier = null; if (args.length() > 0) { try { Log.i(TAG, \"requestPurchase identifier=\" + args.getString(0)); identifier = args.getString(0); } catch (Exception e) { result = createError(0, \"requestPurchase failed to read argument!\"); sCallbackRequestPurchase.error(result); return true; } } else { result = createError(0, \"requestPurchase arg1 is null!\"); sCallbackRequestPurchase.error(result); return true; } requestPurchase(identifier); return true; } else if (action.equals(\"requestReceipts\")) { sCallbackRequestReceipts = callbackContext; requestReceipts(); return true; } else if (action.equals(\"setSafeArea\")) { float amount = 0f; if (args.length() > 0) { try { Log.i(TAG, \"setSafeArea identifier=\" + args.getString(0)); amount = (float) args.getDouble(0); } catch (Exception e) { result = createError(0, \"setSafeArea failed to read argument!\"); callbackContext.error(result); return true; } } else { result = createError(0, \"setSafeArea arg1 is null!\"); callbackContext.error(result); return true; } setSafeArea(callbackContext, amount); return true; } else if (action.equals(\"getDeviceHardware\")) { getDeviceHardware(callbackContext); return true; } else if (action.equals(\"shutdown\")) { shutdown(callbackContext); return true; } return false; } }"}
{"time": "2021-01-25 20:31:00.848145", "score": "0.9972", "loss": "0.004", "code": "class T { @Override public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException { Log.i(TAG, \"********************* execute action=\" + action); } }"}
{"time": "2021-01-25 20:34:16.260506", "score": "0.9795", "loss": "0.0315", "code": "class T { @Override public boolean execute(String action, JSONArray args, CallbackContext callbackContext) throws JSONException { Log.i( ); } }"}
{"time": "2021-01-25 20:34:56.237648", "score": "0.8085", "loss": "0.3607", "code": "class T { @Override public boolean execute(String action , CallbackContext callbackContext) throws JSONException { Log.i( ); } }"}
{"time": "2021-01-25 20:35:36.340949", "score": "0.4994", "loss": "0.9303", "code": "class T { boolean execute(String action , CallbackContext callbackContext) throws JSONException { Log.i( ); } }"}
{"time": "2021-01-25 20:36:16.484673", "score": "0.4905", "loss": "0.946", "code": "class T { boolean execute(String action , CallbackContext callbackContext) { Log.i( ); } }"}

Minimal simplified code:
class T {
                 boolean execute(String action                , CallbackContext callbackContext)                                                                      { Log.i(                                                     ); }
}


