
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Waikato__meka/src/main/java/meka/core/MatrixUtils_squaredError.java
method_name = squaredError
method_body = public static double squaredError(double[] vector1, double[] vector2) { double squaredError = 0; for (int i = 0; i < vector1.length; i++) { squaredError += (vector1[i] - vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }
predict, score, loss = squaredError, 0.44593632, 2.1768532

Trace of simplified code(s):
{"time": "2021-01-23 10:53:38.517235", "n_pass": [1, 1, 1], "score": "0.4459", "loss": "2.1769", "code": "public static double squaredError(double[] vector1, double[] vector2) { double squaredError = 0; for (int i = 0; i < vector1.length; i++) { squaredError += (vector1[i] - vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-23 10:53:40.271927", "n_pass": [26, 2, 2], "score": "0.4677", "loss": "1.7946", "code": "public static double squaredError(double[] vector1, double[] vector2) { double squaredError = 0; for (int i = 0; i < vector1.length; i++) { squaredError += (vector1[i] - vecto[i]); } return squaredError; }"}
{"time": "2021-01-23 10:53:42.021243", "n_pass": [50, 3, 3], "score": "0.4677", "loss": "1.7946", "code": "double squaredError(double[] vector1, double[] vector2) { double squaredError = 0; for (int i = 0; i < vector1.length; i++) { squaredError += (vector1[i] - vecto[i]); } return squaredError; }"}
{"time": "2021-01-23 10:53:45.835489", "n_pass": [93, 5, 4], "score": "0.4423", "loss": "1.7787", "code": "double squaredError(d vector1, double[] vector2) { double squaredError = 0; for (int i = 0; i < vector1.length; i++) { squaredError += (vector1[i] - vecto[i]); } return squaredError; }"}
{"time": "2021-01-23 10:53:48.550266", "n_pass": [100, 7, 5], "score": "0.5899", "loss": "1.5197", "code": "double squaredError(d vector1, double[] vector2) { double squar = 0; for (int i = 0; i < vector1.length; i++) { squaredError += (vector1[i] - vecto[i]); } return squaredError; }"}
{"time": "2021-01-23 10:53:49.887798", "n_pass": [104, 8, 6], "score": "0.6335", "loss": "1.1918", "code": "double squaredError(d vector1, double[] vector2) { double squar = 0; for (int i = 0;ctor1.length; i++) { squaredError += (vector1[i] - vecto[i]); } return squaredError; }"}
{"time": "2021-01-23 10:53:51.224652", "n_pass": [105, 9, 7], "score": "0.5275", "loss": "1.7703", "code": "double squaredError(d vector1, double[] vector2) { double squar = 0; for (int i = 0;ength; i++) { squaredError += (vector1[i] - vecto[i]); } return squaredError; }"}
{"time": "2021-01-23 10:54:01.409855", "n_pass": [180, 16, 8], "score": "0.4507", "loss": "1.9445", "code": "double squaredError(d vector1, double[] vector2) { double squar = 0; for (int i = 0;ength; i++) { squaredError += (or1[i] - vecto[i]); } return squaredError; }"}
{"time": "2021-01-23 10:54:02.732537", "n_pass": [182, 17, 9], "score": "0.5503", "loss": "1.678", "code": "double squaredError(d vector1, double[] vector2) { double squar = 0; for (int i = 0;ength; i++) { squaredError += (or1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:54:10.798841", "n_pass": [192, 23, 10], "score": "0.2023", "loss": "3.4717", "code": "dou squaredError(d vector1, double[] vector2) { double squar = 0; for (int i = 0;ength; i++) { squaredError += (or1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:54:20.283611", "n_pass": [205, 29, 11], "score": "0.2152", "loss": "3.3327", "code": "dou squaredError(d vector1, double[] vec) { double squar = 0; for (int i = 0;ength; i++) { squaredError += (or1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:54:50.347646", "n_pass": [330, 49, 12], "score": "0.2493", "loss": "2.8734", "code": "dou squaredError(d vector1, double[] vec) { doub squar = 0; for (int i = 0;ength; i++) { squaredError += (or1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:54:55.714275", "n_pass": [344, 53, 13], "score": "0.2474", "loss": "2.7371", "code": "dou squaredError(d vector1, double[] vec) { doub squar = 0; for (int i = 0;eth; i++) { squaredError += (or1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:54:57.056029", "n_pass": [345, 54, 14], "score": "0.3442", "loss": "2.3746", "code": "dou squaredError(d vector1, double[] vec) { doub squar = 0; for (int i = 0;e; i++) { squaredError += (or1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:05.070253", "n_pass": [355, 60, 15], "score": "0.3619", "loss": "2.7201", "code": "dou squaredError(d vector1, double[] vec) { doub squar = 0; for (int i = 0;e; i++) { squaredErr += (or1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:09.065295", "n_pass": [359, 63, 16], "score": "0.4726", "loss": "2.619", "code": "dou squaredError(d vector1, double[] vec) { doub squar = 0; for (int i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:23.703337", "n_pass": [380, 74, 17], "score": "0.5422", "loss": "2.5101", "code": "du squaredError(d vector1, double[] vec) { doub squar = 0; for (int i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:25.034107", "n_pass": [381, 75, 18], "score": "0.58", "loss": "2.1084", "code": "d squaredError(d vector1, double[] vec) { doub squar = 0; for (int i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:31.864585", "n_pass": [396, 77, 19], "score": "0.6535", "loss": "2.0071", "code": "d squaredError(d vecr1, double[] vec) { doub squar = 0; for (int i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:33.230600", "n_pass": [397, 78, 20], "score": "0.5933", "loss": "2.0763", "code": "d squaredError(d vec, double[] vec) { doub squar = 0; for (int i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:34.563435", "n_pass": [399, 79, 21], "score": "0.4412", "loss": "2.4283", "code": "d squaredError(d vec, uble[] vec) { doub squar = 0; for (int i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:35.892551", "n_pass": [400, 80, 22], "score": "0.4385", "loss": "2.571", "code": "d squaredError(d vec, le[] vec) { doub squar = 0; for (int i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:37.217908", "n_pass": [402, 81, 23], "score": "0.5145", "loss": "2.0009", "code": "d squaredError(d vec, le vec) { doub squar = 0; for (int i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:38.545551", "n_pass": [404, 82, 24], "score": "0.4401", "loss": "2.2574", "code": "d squaredError(d vec, le v) { doub squar = 0; for (int i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:39.874049", "n_pass": [407, 83, 25], "score": "0.265", "loss": "3.2975", "code": "d squaredError(d vec, le v) { ub squar = 0; for (int i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:45.236816", "n_pass": [411, 87, 26], "score": "0.2394", "loss": "3.4019", "code": "d squaredError(d vec, le v) { ub squ = 0; for (int i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:55:46.576437", "n_pass": [418, 88, 27], "score": "0.2356", "loss": "3.249", "code": "d squaredError(d vec, le v) { ub squ = 0; for (i i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:56:19.294369", "n_pass": [476, 109, 28], "score": "0.2354", "loss": "3.2835", "code": "d squaredError(d vec, le v) { ub s = 0; for (i i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:57:01.354482", "n_pass": [649, 130, 29], "score": "0.2354", "loss": "3.2835", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i = 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:57:06.698717", "n_pass": [654, 134, 30], "score": "0.2354", "loss": "3.2835", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i= 0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:57:08.043771", "n_pass": [656, 135, 31], "score": "0.2354", "loss": "3.2835", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i=0;e; i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:57:10.735690", "n_pass": [661, 137, 32], "score": "0.2354", "loss": "3.2835", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i=0;e;i++) { squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:57:12.075847", "n_pass": [666, 138, 33], "score": "0.2354", "loss": "3.2835", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i=0;e;i++){ squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:57:13.413237", "n_pass": [668, 139, 34], "score": "0.2354", "loss": "3.2835", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i=0;e;i++){squaredErr += (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:57:28.187351", "n_pass": [679, 150, 35], "score": "0.2354", "loss": "3.2835", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i=0;e;i++){squaredErr+= (1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:57:31.222200", "n_pass": [682, 152, 36], "score": "0.2354", "loss": "3.2835", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i=0;e;i++){squaredErr+=(1[i] -to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:57:32.587541", "n_pass": [688, 153, 37], "score": "0.2354", "loss": "3.2835", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i=0;e;i++){squaredErr+=(1[i]-to[i]); } return squaredError; }"}
{"time": "2021-01-23 10:57:33.950740", "n_pass": [690, 154, 38], "score": "0.221", "loss": "3.3994", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i=0;e;i++){squaredErr+=(1[i]-o[i]); } return squaredError; }"}
{"time": "2021-01-23 10:57:35.298430", "n_pass": [697, 155, 39], "score": "0.221", "loss": "3.3994", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i=0;e;i++){squaredErr+=(1[i]-o[i]);} return squaredError; }"}
{"time": "2021-01-23 10:57:36.633146", "n_pass": [699, 156, 40], "score": "0.221", "loss": "3.3994", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError; }"}
{"time": "2021-01-23 10:58:03.401679", "n_pass": [720, 176, 41], "score": "0.221", "loss": "3.3994", "code": "d squaredError(d vec, le v) { ub s = 0; for(i i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}
{"time": "2021-01-23 10:58:14.125948", "n_pass": [743, 180, 42], "score": "0.221", "loss": "3.3994", "code": "d squaredError(d vec,le v) { ub s = 0; for(i i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}
{"time": "2021-01-23 10:58:15.461676", "n_pass": [744, 181, 43], "score": "0.3291", "loss": "2.6958", "code": "d squaredError(d vec,e v) { ub s = 0; for(i i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}
{"time": "2021-01-23 10:58:16.812985", "n_pass": [749, 182, 44], "score": "0.3291", "loss": "2.6958", "code": "d squaredError(d vec,e v){ ub s = 0; for(i i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}
{"time": "2021-01-23 10:58:18.150181", "n_pass": [751, 183, 45], "score": "0.3291", "loss": "2.6958", "code": "d squaredError(d vec,e v){ub s = 0; for(i i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}
{"time": "2021-01-23 10:58:19.507861", "n_pass": [752, 184, 46], "score": "0.3837", "loss": "2.5287", "code": "d squaredError(d vec,e v){b s = 0; for(i i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}
{"time": "2021-01-23 10:58:24.919779", "n_pass": [756, 188, 47], "score": "0.3837", "loss": "2.5287", "code": "d squaredError(d vec,e v){b s= 0; for(i i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}
{"time": "2021-01-23 10:58:26.257373", "n_pass": [758, 189, 48], "score": "0.3837", "loss": "2.5287", "code": "d squaredError(d vec,e v){b s=0; for(i i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}
{"time": "2021-01-23 10:58:27.594735", "n_pass": [761, 190, 49], "score": "0.3837", "loss": "2.5287", "code": "d squaredError(d vec,e v){b s=0;for(i i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}
{"time": "2021-01-23 10:58:28.949259", "n_pass": [766, 191, 50], "score": "0.3703", "loss": "3.0035", "code": "d squaredError(d vec,e v){b s=0;for( i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}
{"time": "2021-01-23 10:58:30.285555", "n_pass": [767, 192, 51], "score": "0.3703", "loss": "3.0035", "code": "d squaredError(d vec,e v){b s=0;for(i=0;e;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}
{"time": "2021-01-23 10:58:32.980186", "n_pass": [772, 194, 52], "score": "0.225", "loss": "3.2512", "code": "d squaredError(d vec,e v){b s=0;for(i=0;;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}"}

Minimal simplified code:
d squaredError(d vec,e v){b s=0;for(i=0;;i++){squaredErr+=(1[i]-o[i]);}return squaredError;}

