
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Glitchfiend__BiomesOPlenty/src/main/java/biomesoplenty/common/handler/decoration/DecorateBiomeEventHandler_onBiomeDecorate.java
method_name = onBiomeDecorate
method_body = @SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes.contains(event.getWorld().getWorldType())) return; if (event.getType() != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.getRand(), event.getPos(), GeneratorStage.mapDecorateType(event.getType())); } }
predict, score, loss = onBiomeDecorate, 0.39743173, 3.3577843

Trace of simplified code(s):
{"time": "2021-01-23 09:38:12.121833", "n_pass": [1, 1, 1], "score": "0.3974", "loss": "3.3578", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes.contains(event.getWorld().getWorldType())) return; if (event.getType() != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.getRand(), event.getPos(), GeneratorStage.mapDecorateType(event.getType())); } }"}
{"time": "2021-01-23 09:38:15.215226", "n_pass": [49, 3, 2], "score": "0.3817", "loss": "3.8044", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecins(event.getWorld().getWorldType())) return; if (event.getType() != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.getRand(), event.getPos(), GeneratorStage.mapDecorateType(event.getType())); } }"}
{"time": "2021-01-23 09:38:16.560176", "n_pass": [57, 4, 3], "score": "0.3263", "loss": "3.8706", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecins(event.getWorld().getWorldType())) return; if (event.getType() != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.getRand(), eveStage.mapDecorateType(event.getType())); } }"}
{"time": "2021-01-23 09:38:19.615110", "n_pass": [102, 6, 4], "score": "0.3437", "loss": "3.9886", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecins(event.getWorld().getWorldType())) return; if (event.getType() != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:38:25.757578", "n_pass": [114, 10, 5], "score": "0.3405", "loss": "3.8345", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecins(event.getWorldType())) return; if (event.getType() != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:38:31.207865", "n_pass": [120, 14, 6], "score": "0.3738", "loss": "3.5585", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecins(event.getWorldType())) return; if (event.getType() != DecorateCUSTOM) { runGeneratorStage(event.getWorld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:38:32.540497", "n_pass": [122, 15, 7], "score": "0.4995", "loss": "3.0228", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecins(event.getWorldType())) return; if (event.getType() != DecorateCUSTOM) { rStage(event.getWorld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:38:41.340502", "n_pass": [139, 21, 8], "score": "0.583", "loss": "2.7936", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.ins(event.getWorldType())) return; if (event.getType() != DecorateCUSTOM) { rStage(event.getWorld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:38:44.045235", "n_pass": [144, 23, 9], "score": "0.5669", "loss": "2.5067", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.ins(event.getWorldType())) return; if (event!= DecorateCUSTOM) { rStage(event.getWorld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:38:45.378473", "n_pass": [145, 24, 10], "score": "0.4037", "loss": "3.6878", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.ins(event.getWorldType())) return; if (eventCUSTOM) { rStage(event.getWorld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:38:55.486872", "n_pass": [210, 31, 11], "score": "0.5871", "loss": "3.4486", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.ins(event.getWorldType())) return; if (eveOM) { rStage(event.getWorld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:38:56.832844", "n_pass": [214, 32, 12], "score": "0.4451", "loss": "3.8517", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.ins(event.getWorldType())) return; if (eveOM) { rStage(eventrld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:39:08.891611", "n_pass": [227, 41, 13], "score": "0.359", "loss": "4.094", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.ins(event.getWorldType())) return; if (eveOM) { rStage(eventrld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:39:17.980844", "n_pass": [237, 47, 14], "score": "0.459", "loss": "2.6527", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvecorate event) { if (BOPBiomes.ins(event.getWorldType())) return; if (eveOM) { rStage(eventrld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:39:19.306007", "n_pass": [238, 48, 15], "score": "0.459", "loss": "2.6527", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (BOPBiomes.ins(event.getWorldType())) return; if (eveOM) { rStage(eventrld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:39:20.633059", "n_pass": [242, 49, 16], "score": "0.5108", "loss": "2.5257", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (omes.ins(event.getWorldType())) return; if (eveOM) { rStage(eventrld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:39:21.959351", "n_pass": [243, 50, 17], "score": "0.5025", "loss": "2.5892", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (ins(event.getWorldType())) return; if (eveOM) { rStage(eventrld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:39:23.295469", "n_pass": [245, 51, 18], "score": "0.359", "loss": "3.4027", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (ins(egetWorldType())) return; if (eveOM) { rStage(eventrld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:39:25.967363", "n_pass": [247, 53, 19], "score": "0.324", "loss": "3.8742", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (ins(egetWope())) return; if (eveOM) { rStage(eventrld(), event.getRand(), eveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:39:28.647280", "n_pass": [258, 55, 20], "score": "0.4257", "loss": "3.8426", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (ins(egetWope())) return; if (eveOM) { rStage(eventrld(), event.getRaeveStage.mapDecorateType(pe())); } }"}
{"time": "2021-01-23 09:39:32.666958", "n_pass": [261, 58, 21], "score": "0.4094", "loss": "4.5851", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (ins(egetWope())) return; if (eveOM) { rStage(eventrld(), event.getRaeveStage.mapteType(pe())); } }"}
{"time": "2021-01-23 09:39:33.986085", "n_pass": [262, 59, 22], "score": "0.3743", "loss": "4.5827", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (ins(egetWope())) return; if (eveOM) { rStage(eventrld(), event.getRaeveStage.map(pe())); } }"}
{"time": "2021-01-23 09:39:35.311230", "n_pass": [263, 60, 23], "score": "0.4905", "loss": "3.2138", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (ins(egetWope())) return; if (eveOM) { rStage(eventrld(), event.getRaeveStage.map); } }"}
{"time": "2021-01-23 09:39:45.701608", "n_pass": [280, 67, 24], "score": "0.527", "loss": "3.1617", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (ins(epe())) return; if (eveOM) { rStage(eventrld(), event.getRaeveStage.map); } }"}
{"time": "2021-01-23 09:39:47.025570", "n_pass": [290, 68, 25], "score": "0.3208", "loss": "3.9464", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (ins(epe())) return; if (eveOM) { rStage(eventrld(), eventeveStage.map); } }"}
{"time": "2021-01-23 09:39:48.361753", "n_pass": [291, 69, 26], "score": "0.2892", "loss": "4.3644", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (ins(epe())) return; if (eveOM) { rStage(eventrld(), eventge.map); } }"}
{"time": "2021-01-23 09:39:49.676093", "n_pass": [292, 70, 27], "score": "0.3283", "loss": "4.7385", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee event) { if (ins(epe())) return; if (eveOM) { rStage(eventrld(), event); } }"}
{"time": "2021-01-23 09:40:19.861524", "n_pass": [395, 90, 28], "score": "0.3291", "loss": "6.6628", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee et) { if (ins(epe())) return; if (eveOM) { rStage(eventrld(), event); } }"}
{"time": "2021-01-23 09:40:23.834379", "n_pass": [403, 93, 29], "score": "0.2964", "loss": "5.4742", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee et) { if (ins(epe())) urn; if (eveOM) { rStage(eventrld(), event); } }"}
{"time": "2021-01-23 09:40:25.150758", "n_pass": [404, 94, 30], "score": "0.3291", "loss": "6.6628", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee et) { if (ins(epe())) ; if (eveOM) { rStage(eventrld(), event); } }"}
{"time": "2021-01-23 09:40:30.416471", "n_pass": [413, 98, 31], "score": "0.3291", "loss": "6.6628", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee et) { if (ins(epe())) ; if (eveOM) { rStage(evrld(), event); } }"}
{"time": "2021-01-23 09:40:31.757981", "n_pass": [414, 99, 32], "score": "0.394", "loss": "6.5494", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee et) { if (ins(epe())) ; if (eveOM) { rStage(ev(), event); } }"}
{"time": "2021-01-23 09:40:56.836904", "n_pass": [450, 116, 33], "score": "0.4853", "loss": "5.1544", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee et) { if (ins(ep)) ; if (eveOM) { rStage(ev(), event); } }"}
{"time": "2021-01-23 09:41:24.551892", "n_pass": [493, 135, 34], "score": "0.5142", "loss": "5.8827", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee et) { if ((ep)) ; if (eveOM) { rStage(ev(), event); } }"}
{"time": "2021-01-23 09:41:54.023635", "n_pass": [624, 154, 35], "score": "0.4504", "loss": "4.3965", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t) { if ((ep)) ; if (eveOM) { rStage(ev(), event); } }"}
{"time": "2021-01-23 09:42:05.936426", "n_pass": [647, 163, 36], "score": "0.4331", "loss": "3.9254", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t) { if ((ep)) ; if (eveOM) { rStage(ev(),vent); } }"}
{"time": "2021-01-23 09:43:00.911042", "n_pass": [718, 200, 37], "score": "0.3071", "loss": "5.8876", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t) { if ((ep)) if (eveOM) { rStage(ev(),vent); } }"}
{"time": "2021-01-23 09:44:03.263947", "n_pass": [851, 240, 38], "score": "0.3071", "loss": "5.8876", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t) { if ((ep)) if (eveOM) {rStage(ev(),vent); } }"}
{"time": "2021-01-23 09:44:13.862831", "n_pass": [860, 248, 39], "score": "0.3258", "loss": "5.2641", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t) { if ((ep)) if (eveOM) {rStage(e(),vent); } }"}
{"time": "2021-01-23 09:44:20.500302", "n_pass": [870, 253, 40], "score": "0.3258", "loss": "5.2641", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t) { if ((ep)) if (eveOM) {rStage(e(),vent);} }"}
{"time": "2021-01-23 09:44:21.838929", "n_pass": [872, 254, 41], "score": "0.3258", "loss": "5.2641", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t) { if ((ep)) if (eveOM) {rStage(e(),vent);}}"}
{"time": "2021-01-23 09:45:11.533806", "n_pass": [933, 287, 42], "score": "0.3258", "loss": "5.2641", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t){ if ((ep)) if (eveOM) {rStage(e(),vent);}}"}
{"time": "2021-01-23 09:45:12.876661", "n_pass": [935, 288, 43], "score": "0.3258", "loss": "5.2641", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t){if ((ep)) if (eveOM) {rStage(e(),vent);}}"}
{"time": "2021-01-23 09:45:14.219432", "n_pass": [938, 289, 44], "score": "0.3258", "loss": "5.2641", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t){if((ep)) if (eveOM) {rStage(e(),vent);}}"}
{"time": "2021-01-23 09:45:16.881290", "n_pass": [942, 291, 45], "score": "0.3127", "loss": "5.6862", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t){if((e)) if (eveOM) {rStage(e(),vent);}}"}
{"time": "2021-01-23 09:45:18.186972", "n_pass": [945, 292, 46], "score": "0.3127", "loss": "5.6862", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t){if((e))if (eveOM) {rStage(e(),vent);}}"}
{"time": "2021-01-23 09:45:19.509473", "n_pass": [948, 293, 47], "score": "0.3127", "loss": "5.6862", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t){if((e))if(eveOM) {rStage(e(),vent);}}"}
{"time": "2021-01-23 09:45:27.451178", "n_pass": [956, 299, 48], "score": "0.3127", "loss": "5.6862", "code": "@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t){if((e))if(eveOM){rStage(e(),vent);}}"}

Minimal simplified code:
@Subscribe public void onBiomeDecorate(DecorateBiomeEvee t){if((e))if(eveOM){rStage(e(),vent);}}

