
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Glitchfiend__BiomesOPlenty/src/main/java/biomesoplenty/common/handler/decoration/DecorateBiomeEventHandler_onBiomeDecorate.java
method_name = onBiomeDecorate
method_body = @SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes.contains(event.getWorld().getWorldType())) return; if (event.getType() != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.getRand(), event.getPos(), GeneratorStage.mapDecorateType(event.getType())); } }
predict, score, loss = onBiomeDecorate, 0.39743173, 3.3577843

Trace of simplified code(s):
{"time": "2021-01-20 05:34:57.436932", "n_pass": [1, 1, 1], "score": "0.3974", "loss": "3.3578", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes.contains(event.getWorld().getWorldType())) return; if (event.getType() != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.getRand(), event.getPos(), GeneratorStage.mapDecorateType(event.getType())); } }"}
{"time": "2021-01-20 05:34:58.798687", "n_pass": [22, 2, 2], "score": "0.3366", "loss": "3.618", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes) return; if (event.getType() != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.getRand(), event.getPos(), GeneratorStage.mapDecorateType(event.getType())); } }"}
{"time": "2021-01-20 05:35:00.144788", "n_pass": [23, 3, 3], "score": "0.4935", "loss": "2.9736", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.getRand(), event.getPos(), GeneratorStage.mapDecorateType(event.getType())); } }"}
{"time": "2021-01-20 05:35:04.195374", "n_pass": [46, 6, 4], "score": "0.49", "loss": "2.7795", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.getPos(), GeneratorStage.mapDecorateType(event.getType())); } }"}
{"time": "2021-01-20 05:35:05.538641", "n_pass": [47, 7, 5], "score": "0.4762", "loss": "2.7866", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes != Decorate.EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.mapDecorateType(event.getType())); } }"}
{"time": "2021-01-20 05:35:11.653452", "n_pass": [91, 11, 6], "score": "0.5388", "loss": "2.9683", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes !=EventType.CUSTOM) { runGeneratorStage(event.getWorld(), event.mapDecorateType(event.getType())); } }"}
{"time": "2021-01-20 05:35:12.985148", "n_pass": [97, 12, 7], "score": "0.3938", "loss": "3.5091", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes !=EventType.CUSTOM) { runGeneratorStage(event.getWorld(),mapDecorateType(event.getType())); } }"}
{"time": "2021-01-20 05:35:20.372551", "n_pass": [154, 16, 8], "score": "0.4451", "loss": "3.3112", "code": "@SubscribeEvent public void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes !=EventType.CUSTOM) { runGeneratorStage(event.getWorld(),mapDecorateType(getType())); } }"}
{"time": "2021-01-20 05:35:23.018548", "n_pass": [163, 18, 9], "score": "0.4451", "loss": "3.3112", "code": "@SubscribeEvent  void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes !=EventType.CUSTOM) { runGeneratorStage(event.getWorld(),mapDecorateType(getType())); } }"}
{"time": "2021-01-20 05:35:24.339374", "n_pass": [164, 19, 10], "score": "0.4451", "loss": "3.3112", "code": "@SubscribeEvent void onBiomeDecorate(DecorateBiomeEvent.Decorate event) { if (BOPBiomes.excludedDecoratedWorldTypes !=EventType.CUSTOM) { runGeneratorStage(event.getWorld(),mapDecorateType(getType())); } }"}
{"time": "2021-01-20 05:35:27.773756", "n_pass": [175, 21, 11], "score": "0.4451", "loss": "3.3112", "code": "@SubscribeEvent void onBiomeDecorate(DecorateBiomeEvent.Decorate event){ if (BOPBiomes.excludedDecoratedWorldTypes !=EventType.CUSTOM) { runGeneratorStage(event.getWorld(),mapDecorateType(getType())); } }"}
{"time": "2021-01-20 05:35:31.800601", "n_pass": [182, 24, 12], "score": "0.3184", "loss": "3.914", "code": "@SubscribeEvent void onBiomeDecorate(DecorateBiomeEvent.Decorate event){ if (BOPBiomes.excludedDecoratedWorldTypes !=EventType) { runGeneratorStage(event.getWorld(),mapDecorateType(getType())); } }"}
{"time": "2021-01-20 05:35:45.059923", "n_pass": [265, 31, 13], "score": "0.3184", "loss": "3.914", "code": "@SubscribeEvent void onBiomeDecorate(DecorateBiomeEvent.Decorate event){ if (BOPBiomes.excludedDecoratedWorldTypes !=EventType) { runGeneratorStage(event.getWorld(),mapDecorateType(getType()));} }"}
{"time": "2021-01-20 05:35:46.387982", "n_pass": [266, 32, 14], "score": "0.3184", "loss": "3.914", "code": "@SubscribeEvent void onBiomeDecorate(DecorateBiomeEvent.Decorate event){ if (BOPBiomes.excludedDecoratedWorldTypes !=EventType) { runGeneratorStage(event.getWorld(),mapDecorateType(getType()));}}"}
{"time": "2021-01-20 05:35:50.161003", "n_pass": [282, 34, 15], "score": "0.3184", "loss": "3.914", "code": "@SubscribeEvent void onBiomeDecorate(DecorateBiomeEvent.Decorate event){if (BOPBiomes.excludedDecoratedWorldTypes !=EventType) { runGeneratorStage(event.getWorld(),mapDecorateType(getType()));}}"}
{"time": "2021-01-20 05:35:51.493630", "n_pass": [284, 35, 16], "score": "0.3184", "loss": "3.914", "code": "@SubscribeEvent void onBiomeDecorate(DecorateBiomeEvent.Decorate event){if(BOPBiomes.excludedDecoratedWorldTypes !=EventType) { runGeneratorStage(event.getWorld(),mapDecorateType(getType()));}}"}
{"time": "2021-01-20 05:35:54.163302", "n_pass": [289, 37, 17], "score": "0.3184", "loss": "3.914", "code": "@SubscribeEvent void onBiomeDecorate(DecorateBiomeEvent.Decorate event){if(BOPBiomes.excludedDecoratedWorldTypes!=EventType) { runGeneratorStage(event.getWorld(),mapDecorateType(getType()));}}"}
{"time": "2021-01-20 05:35:56.860163", "n_pass": [294, 39, 18], "score": "0.3184", "loss": "3.914", "code": "@SubscribeEvent void onBiomeDecorate(DecorateBiomeEvent.Decorate event){if(BOPBiomes.excludedDecoratedWorldTypes!=EventType){ runGeneratorStage(event.getWorld(),mapDecorateType(getType()));}}"}
{"time": "2021-01-20 05:35:58.192834", "n_pass": [296, 40, 19], "score": "0.3184", "loss": "3.914", "code": "@SubscribeEvent void onBiomeDecorate(DecorateBiomeEvent.Decorate event){if(BOPBiomes.excludedDecoratedWorldTypes!=EventType){runGeneratorStage(event.getWorld(),mapDecorateType(getType()));}}"}

Minimal simplified code:
@SubscribeEvent void onBiomeDecorate(DecorateBiomeEvent.Decorate event){if(BOPBiomes.excludedDecoratedWorldTypes!=EventType){runGeneratorStage(event.getWorld(),mapDecorateType(getType()));}}

