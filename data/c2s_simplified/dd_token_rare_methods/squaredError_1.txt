
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/Waikato__meka/src/main/java/meka/core/MatrixUtils_squaredError.java
method_name = squaredError
method_body = public static double squaredError(double[] vector1, double[] vector2) { double squaredError = 0; for (int i = 0; i < vector1.length; i++) { squaredError += (vector1[i] - vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }
predict, score, loss = squaredError, 0.44593632, 2.1768534

Trace of simplified code(s):
{"time": "2021-01-20 05:48:05.092257", "n_pass": [1, 1, 1], "score": "0.4459", "loss": "2.1769", "code": "public static double squaredError(double[] vector1, double[] vector2) { double squaredError = 0; for (int i = 0; i < vector1.length; i++) { squaredError += (vector1[i] - vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:06.463166", "n_pass": [46, 2, 2], "score": "0.3149", "loss": "2.3209", "code": "public static double squaredError(double[] vector12) { double squaredError = 0; for (int i = 0; i < vector1.length; i++) { squaredError += (vector1[i] - vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:07.820989", "n_pass": [53, 3, 3], "score": "0.3204", "loss": "2.2675", "code": "public static double squaredError(double[] vector12) { double squaredError = 0; for (int i = 0; i < vector1.length; i++) { squaredError += ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:09.576600", "n_pass": [106, 4, 4], "score": "0.3204", "loss": "2.2675", "code": " double squaredError(double[] vector12) { double squaredError = 0; for (int i = 0; i < vector1.length; i++) { squaredError += ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:12.701184", "n_pass": [120, 6, 5], "score": "0.3434", "loss": "2.0549", "code": " double squaredError(double[] vector12) { double squaredError = 0; for (int i = 0; i .length; i++) { squaredError += ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:18.578930", "n_pass": [199, 8, 6], "score": "0.3342", "loss": "2.1281", "code": " double squaredError(double[] vector12) { double squaredError = 0; for (int i = 0; i ; i++) { squaredError += ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:19.941444", "n_pass": [204, 9, 7], "score": "0.2671", "loss": "2.545", "code": " double squaredError(double[] vector12) { double squaredError = 0; for (int i = 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:23.058397", "n_pass": [224, 11, 8], "score": "0.2671", "loss": "2.545", "code": "double squaredError(double[] vector12) { double squaredError = 0; for (int i = 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:25.164866", "n_pass": [232, 12, 9], "score": "0.2671", "loss": "2.545", "code": "double squaredError(double[]vector12) { double squaredError = 0; for (int i = 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:26.514361", "n_pass": [234, 13, 10], "score": "0.2671", "loss": "2.545", "code": "double squaredError(double[]vector2) { double squaredError = 0; for (int i = 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:27.900432", "n_pass": [235, 14, 11], "score": "0.2671", "loss": "2.545", "code": "double squaredError(double[]vector) { double squaredError = 0; for (int i = 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:44.712874", "n_pass": [357, 18, 12], "score": "0.2671", "loss": "2.545", "code": "double squaredError(double[]vector) { double squaredError= 0; for (int i = 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:46.061266", "n_pass": [358, 19, 13], "score": "0.2671", "loss": "2.545", "code": "double squaredError(double[]vector) { double squaredError=0; for (int i = 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:47.441083", "n_pass": [361, 20, 14], "score": "0.2671", "loss": "2.545", "code": "double squaredError(double[]vector) { double squaredError=0;for (int i = 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:48.794744", "n_pass": [363, 21, 15], "score": "0.2671", "loss": "2.545", "code": "double squaredError(double[]vector) { double squaredError=0;for(int i = 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:50.139319", "n_pass": [365, 22, 16], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for( i = 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:51.491507", "n_pass": [366, 23, 17], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i = 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:52.874705", "n_pass": [368, 24, 18], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i= 0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:54.226764", "n_pass": [370, 25, 19], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0; i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:55.604805", "n_pass": [373, 26, 20], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i ; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:58.301634", "n_pass": [375, 28, 21], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i; i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:48:59.644333", "n_pass": [377, 29, 22], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++) { squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:01.004521", "n_pass": [382, 30, 23], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){ squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:02.344686", "n_pass": [384, 31, 24], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError= ( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:04.058889", "n_pass": [387, 32, 25], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=( vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:05.411147", "n_pass": [389, 33, 26], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=(vector2[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:08.105786", "n_pass": [391, 35, 27], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=(vector[i]) * (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:09.455631", "n_pass": [396, 36, 28], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])* (vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:10.796458", "n_pass": [398, 37, 29], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])*(vector1[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:13.509748", "n_pass": [401, 39, 30], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])*(vector[i] - vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:14.860076", "n_pass": [405, 40, 31], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])*(vector[i]- vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:16.233439", "n_pass": [407, 41, 32], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])*(vector[i]-vector2[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:18.931609", "n_pass": [409, 43, 33], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])*(vector[i]-vector[i]); } return squaredError; }"}
{"time": "2021-01-20 05:49:20.289828", "n_pass": [415, 44, 34], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])*(vector[i]-vector[i]);} return squaredError; }"}
{"time": "2021-01-20 05:49:21.639164", "n_pass": [417, 45, 35], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])*(vector[i]-vector[i]);}return squaredError; }"}
{"time": "2021-01-20 05:49:27.083371", "n_pass": [422, 49, 36], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector) { double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])*(vector[i]-vector[i]);}return squaredError;}"}
{"time": "2021-01-20 05:49:29.178251", "n_pass": [433, 50, 37], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector){ double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])*(vector[i]-vector[i]);}return squaredError;}"}
{"time": "2021-01-20 05:49:30.527580", "n_pass": [435, 51, 38], "score": "0.2462", "loss": "3.0169", "code": "double squaredError(double[]vector){double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])*(vector[i]-vector[i]);}return squaredError;}"}

Minimal simplified code:
double squaredError(double[]vector){double squaredError=0;for(i=0;i;i++){squaredError=(vector[i])*(vector[i]-vector[i]);}return squaredError;}

