
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/modules/tomcat-lite/java/org/apache/tomcat/lite/io/NioThread_run.java
method_name = run
method_body = public void run() { int sloops = 0; if (debug) { log.info("Start NIO thread, daemon=" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if (debugWakeup && selected == 0) { if (sleepTime < maxSleep - 1000) { log.info("Wakeup " + selected + " " + slept + " " + sleepTime); } } if (slept < 10 && selected == 0) { if (sloops > 50) { sloops = 0; log.severe("Looping !"); resetSelector(); } sloops++; } if (selected != 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info("Wakeup selCnt=" + selected + " slept=" + (lastWakeup - now) + " ready: " + readyOps + " v=" + sk.isValid() + " ch=" + ch); } if (ch == null) { log.severe("Missing channel"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe("Invalid state, selKey doesn't match "); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe("Invalid state, channel doesn't match "); } if (!sk.isValid()) { if (debug) { log.info("!isValid, closed socket " + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning("Callback too long ! ops=" + ready + " time=" + callbackTime + " ch=" + ch + " " + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, "SelectorThread: Channel error, closing", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, "SelectorThread: Error in select", e); } } log.info("SelectorThread done"); }

Trace of simplified code(s):

{"time": "2021-01-25 08:41:10.341250", "score": "0.8298", "loss": "0.3373", "code": "class T { public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if (debugWakeup && selected == 0) { if (sleepTime < maxSleep - 1000) { log.info(\"Wakeup \" + selected + \" \" + slept + \" \" + sleepTime); } } if (slept < 10 && selected == 0) { if (sloops > 50) { sloops = 0; log.severe(\"Looping !\"); resetSelector(); } sloops++; } if (selected != 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); } }"}
{"time": "2021-01-25 08:42:20.617626", "score": "0.8736", "loss": "0.2643", "code": "class T { public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if (debugWakeup && selected == 0) { if (sleepTime < maxSleep - 1000) { log.info(\"Wakeup \" + selected + \" \" + slept + \" \" + sleepTime); } } if (slept < 10 && selected == 0) { if (sloops > 50) { sloops = 0; log.severe(\"Looping !\"); resetSelector(); } sloops++; } if (selected != 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } } }"}
{"time": "2021-01-25 08:42:43.881773", "score": "0.7935", "loss": "0.4047", "code": "class T { public void run() { while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if (debugWakeup && selected == 0) { if (sleepTime < maxSleep - 1000) { log.info(\"Wakeup \" + selected + \" \" + slept + \" \" + sleepTime); } } if (slept < 10 && selected == 0) { if (sloops > 50) { sloops = 0; log.severe(\"Looping !\"); resetSelector(); } sloops++; } if (selected != 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } } }"}
{"time": "2021-01-25 08:43:06.923535", "score": "0.7906", "loss": "0.5401", "code": "class T { public void run() { while (running) try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if (debugWakeup && selected == 0) { if (sleepTime < maxSleep - 1000) { log.info(\"Wakeup \" + selected + \" \" + slept + \" \" + sleepTime); } } if (slept < 10 && selected == 0) { if (sloops > 50) { sloops = 0; log.severe(\"Looping !\"); resetSelector(); } sloops++; } if (selected != 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } }"}
{"time": "2021-01-25 08:43:37.176540", "score": "0.5227", "loss": "0.9534", "code": "class T { public void run() { while (running) try { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } }"}
{"time": "2021-01-25 08:43:49.196543", "score": "0.8649", "loss": "0.2803", "code": "class T { public void run() { while (running) try { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } }"}
{"time": "2021-01-25 08:44:02.158359", "score": "0.9229", "loss": "0.1863", "code": "class T { public void run() { while (running) try { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } }"}
{"time": "2021-01-25 08:44:12.902052", "score": "0.9415", "loss": "0.152", "code": "class T { public void run() { while (running) try { } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } }"}
{"time": "2021-01-25 08:44:23.606022", "score": "0.8639", "loss": "0.4448", "code": "class T { public void run() { while (running) try { } catch (Throwable e) { } } }"}
{"time": "2021-01-25 08:44:34.217858", "score": "0.8639", "loss": "0.4448", "code": "class T { void run() { while (running) try { } catch (Throwable e) { } } }"}
{"time": "2021-01-25 08:45:33.207115", "score": "0.2841", "loss": "1.7784", "code": "class T { void run() { try { } catch (Throwable e) { } } }"}

Minimal simplified code:
class T {
       void run() {                                                                                                  try{                                                                     }                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         catch (Throwable e) {                                                              }                                    }
}


