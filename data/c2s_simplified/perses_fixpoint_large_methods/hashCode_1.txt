
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/MariaDB__mariadb-connector-j/src/main/java/org/mariadb/jdbc/internal/util/Options_hashCode.java
method_name = hashCode
method_body = @SuppressWarnings("SimplifiableIfStatement") @Override public int hashCode() { int result = user != null ? user.hashCode() : 0; result = 31 * result + (password != null ? password.hashCode() : 0); result = 31 * result + (trustServerCertificate ? 1 : 0); result = 31 * result + (serverSslCert != null ? serverSslCert.hashCode() : 0); result = 31 * result + (trustStore != null ? trustStore.hashCode() : 0); result = 31 * result + (trustStorePassword != null ? trustStorePassword.hashCode() : 0); result = 31 * result + (keyStore != null ? keyStore.hashCode() : 0); result = 31 * result + (keyStorePassword != null ? keyStorePassword.hashCode() : 0); result = 31 * result + (keyPassword != null ? keyPassword.hashCode() : 0); result = 31 * result + (enabledSslProtocolSuites != null ? enabledSslProtocolSuites.hashCode() : 0); result = 31 * result + (useFractionalSeconds ? 1 : 0); result = 31 * result + (pinGlobalTxToPhysicalConnection ? 1 : 0); result = 31 * result + (socketFactory != null ? socketFactory.hashCode() : 0); result = 31 * result + connectTimeout; result = 31 * result + (pipe != null ? pipe.hashCode() : 0); result = 31 * result + (localSocket != null ? localSocket.hashCode() : 0); result = 31 * result + (sharedMemory != null ? sharedMemory.hashCode() : 0); result = 31 * result + (tcpNoDelay ? 1 : 0); result = 31 * result + (tcpKeepAlive ? 1 : 0); result = 31 * result + (tcpRcvBuf != null ? tcpRcvBuf.hashCode() : 0); result = 31 * result + (tcpSndBuf != null ? tcpSndBuf.hashCode() : 0); result = 31 * result + (tcpAbortiveClose ? 1 : 0); result = 31 * result + (localSocketAddress != null ? localSocketAddress.hashCode() : 0); result = 31 * result + (socketTimeout != null ? socketTimeout.hashCode() : 0); result = 31 * result + (allowMultiQueries ? 1 : 0); result = 31 * result + (rewriteBatchedStatements ? 1 : 0); result = 31 * result + (useCompression ? 1 : 0); result = 31 * result + (interactiveClient ? 1 : 0); result = 31 * result + (passwordCharacterEncoding != null ? passwordCharacterEncoding.hashCode() : 0); result = 31 * result + (useSsl ? 1 : 0); result = 31 * result + (enabledSslCipherSuites != null ? enabledSslCipherSuites.hashCode() : 0); result = 31 * result + (sessionVariables != null ? sessionVariables.hashCode() : 0); result = 31 * result + (tinyInt1isBit ? 1 : 0); result = 31 * result + (yearIsDateType ? 1 : 0); result = 31 * result + (createDatabaseIfNotExist ? 1 : 0); result = 31 * result + (serverTimezone != null ? serverTimezone.hashCode() : 0); result = 31 * result + (nullCatalogMeansCurrent ? 1 : 0); result = 31 * result + (dumpQueriesOnException ? 1 : 0); result = 31 * result + (useOldAliasMetadataBehavior ? 1 : 0); result = 31 * result + (allowLocalInfile ? 1 : 0); result = 31 * result + (cachePrepStmts ? 1 : 0); result = 31 * result + prepStmtCacheSize; result = 31 * result + prepStmtCacheSqlLimit; result = 31 * result + (useLegacyDatetimeCode ? 1 : 0); result = 31 * result + (maximizeMysqlCompatibility ? 1 : 0); result = 31 * result + (useServerPrepStmts ? 1 : 0); result = 31 * result + (continueBatchOnError ? 1 : 0); result = 31 * result + (jdbcCompliantTruncation ? 1 : 0); result = 31 * result + (cacheCallableStmts ? 1 : 0); result = 31 * result + callableStmtCacheSize; result = 31 * result + (connectionAttributes != null ? connectionAttributes.hashCode() : 0); result = 31 * result + (useBatchMultiSend != null ? useBatchMultiSend.hashCode() : 0); result = 31 * result + useBatchMultiSendNumber; result = 31 * result + (usePipelineAuth != null ? usePipelineAuth.hashCode() : 0); result = 31 * result + (enablePacketDebug ? 1 : 0); result = 31 * result + (useBulkStmts ? 1 : 0); result = 31 * result + (disableSslHostnameVerification ? 1 : 0); result = 31 * result + (log ? 1 : 0); result = 31 * result + (profileSql ? 1 : 0); result = 31 * result + maxQuerySizeToLog; result = 31 * result + (slowQueryThresholdNanos != null ? slowQueryThresholdNanos.hashCode() : 0); result = 31 * result + (assureReadOnly ? 1 : 0); result = 31 * result + (autoReconnect ? 1 : 0); result = 31 * result + (failOnReadOnly ? 1 : 0); result = 31 * result + (allowMasterDownConnection ? 1 : 0); result = 31 * result + retriesAllDown; result = 31 * result + validConnectionTimeout; result = 31 * result + loadBalanceBlacklistTimeout; result = 31 * result + failoverLoopRetries; result = 31 * result + (pool ? 1 : 0); result = 31 * result + (registerJmxPool ? 1 : 0); result = 31 * result + (useResetConnection ? 1 : 0); result = 31 * result + (staticGlobal ? 1 : 0); result = 31 * result + (poolName != null ? poolName.hashCode() : 0); result = 31 * result + maxPoolSize; result = 31 * result + (minPoolSize != null ? minPoolSize.hashCode() : 0); result = 31 * result + maxIdleTime; result = 31 * result + poolValidMinDelay; result = 31 * result + (autocommit ? 1 : 0); return result; }

Trace of simplified code(s):

{"time": "2021-01-25 09:43:04.960306", "score": "0.9925", "loss": "0.0087", "code": "class T { @SuppressWarnings(\"SimplifiableIfStatement\") @Override public int hashCode() { int result = user != null ? user.hashCode() : 0; result = 31 * result + (password != null ? password.hashCode() : 0); result = 31 * result + (trustServerCertificate ? 1 : 0); result = 31 * result + (serverSslCert != null ? serverSslCert.hashCode() : 0); result = 31 * result + (trustStore != null ? trustStore.hashCode() : 0); result = 31 * result + (trustStorePassword != null ? trustStorePassword.hashCode() : 0); result = 31 * result + (keyStore != null ? keyStore.hashCode() : 0); result = 31 * result + (keyStorePassword != null ? keyStorePassword.hashCode() : 0); result = 31 * result + (keyPassword != null ? keyPassword.hashCode() : 0); result = 31 * result + (enabledSslProtocolSuites != null ? enabledSslProtocolSuites.hashCode() : 0); result = 31 * result + (useFractionalSeconds ? 1 : 0); result = 31 * result + (pinGlobalTxToPhysicalConnection ? 1 : 0); result = 31 * result + (socketFactory != null ? socketFactory.hashCode() : 0); result = 31 * result + connectTimeout; result = 31 * result + (pipe != null ? pipe.hashCode() : 0); result = 31 * result + (localSocket != null ? localSocket.hashCode() : 0); result = 31 * result + (sharedMemory != null ? sharedMemory.hashCode() : 0); result = 31 * result + (tcpNoDelay ? 1 : 0); result = 31 * result + (tcpKeepAlive ? 1 : 0); result = 31 * result + (tcpRcvBuf != null ? tcpRcvBuf.hashCode() : 0); result = 31 * result + (tcpSndBuf != null ? tcpSndBuf.hashCode() : 0); result = 31 * result + (tcpAbortiveClose ? 1 : 0); result = 31 * result + (localSocketAddress != null ? localSocketAddress.hashCode() : 0); result = 31 * result + (socketTimeout != null ? socketTimeout.hashCode() : 0); result = 31 * result + (allowMultiQueries ? 1 : 0); result = 31 * result + (rewriteBatchedStatements ? 1 : 0); result = 31 * result + (useCompression ? 1 : 0); result = 31 * result + (interactiveClient ? 1 : 0); result = 31 * result + (passwordCharacterEncoding != null ? passwordCharacterEncoding.hashCode() : 0); result = 31 * result + (useSsl ? 1 : 0); result = 31 * result + (enabledSslCipherSuites != null ? enabledSslCipherSuites.hashCode() : 0); result = 31 * result + (sessionVariables != null ? sessionVariables.hashCode() : 0); result = 31 * result + (tinyInt1isBit ? 1 : 0); result = 31 * result + (yearIsDateType ? 1 : 0); result = 31 * result + (createDatabaseIfNotExist ? 1 : 0); result = 31 * result + (serverTimezone != null ? serverTimezone.hashCode() : 0); result = 31 * result + (nullCatalogMeansCurrent ? 1 : 0); result = 31 * result + (dumpQueriesOnException ? 1 : 0); result = 31 * result + (useOldAliasMetadataBehavior ? 1 : 0); result = 31 * result + (allowLocalInfile ? 1 : 0); result = 31 * result + (cachePrepStmts ? 1 : 0); result = 31 * result + prepStmtCacheSize; result = 31 * result + prepStmtCacheSqlLimit; result = 31 * result + (useLegacyDatetimeCode ? 1 : 0); result = 31 * result + (maximizeMysqlCompatibility ? 1 : 0); result = 31 * result + (useServerPrepStmts ? 1 : 0); result = 31 * result + (continueBatchOnError ? 1 : 0); result = 31 * result + (jdbcCompliantTruncation ? 1 : 0); result = 31 * result + (cacheCallableStmts ? 1 : 0); result = 31 * result + callableStmtCacheSize; result = 31 * result + (connectionAttributes != null ? connectionAttributes.hashCode() : 0); result = 31 * result + (useBatchMultiSend != null ? useBatchMultiSend.hashCode() : 0); result = 31 * result + useBatchMultiSendNumber; result = 31 * result + (usePipelineAuth != null ? usePipelineAuth.hashCode() : 0); result = 31 * result + (enablePacketDebug ? 1 : 0); result = 31 * result + (useBulkStmts ? 1 : 0); result = 31 * result + (disableSslHostnameVerification ? 1 : 0); result = 31 * result + (log ? 1 : 0); result = 31 * result + (profileSql ? 1 : 0); result = 31 * result + maxQuerySizeToLog; result = 31 * result + (slowQueryThresholdNanos != null ? slowQueryThresholdNanos.hashCode() : 0); result = 31 * result + (assureReadOnly ? 1 : 0); result = 31 * result + (autoReconnect ? 1 : 0); result = 31 * result + (failOnReadOnly ? 1 : 0); result = 31 * result + (allowMasterDownConnection ? 1 : 0); result = 31 * result + retriesAllDown; result = 31 * result + validConnectionTimeout; result = 31 * result + loadBalanceBlacklistTimeout; result = 31 * result + failoverLoopRetries; result = 31 * result + (pool ? 1 : 0); result = 31 * result + (registerJmxPool ? 1 : 0); result = 31 * result + (useResetConnection ? 1 : 0); result = 31 * result + (staticGlobal ? 1 : 0); result = 31 * result + (poolName != null ? poolName.hashCode() : 0); result = 31 * result + maxPoolSize; result = 31 * result + (minPoolSize != null ? minPoolSize.hashCode() : 0); result = 31 * result + maxIdleTime; result = 31 * result + poolValidMinDelay; result = 31 * result + (autocommit ? 1 : 0); return result; } }"}
{"time": "2021-01-25 09:43:53.896963", "score": "0.999", "loss": "0.0013", "code": "class T { @SuppressWarnings(\"SimplifiableIfStatement\") @Override public int hashCode() { int result = user != null ? user.hashCode() : 0; result = 31 * result + (password != null ? password.hashCode() : 0); result = 31 * result + (trustServerCertificate ? 1 : 0); result = 31 * result + (serverSslCert != null ? serverSslCert.hashCode() : 0); result = 31 * result + (trustStore != null ? trustStore.hashCode() : 0); result = 31 * result + (trustStorePassword != null ? trustStorePassword.hashCode() : 0); result = 31 * result + (keyStore != null ? keyStore.hashCode() : 0); result = 31 * result + (keyStorePassword != null ? keyStorePassword.hashCode() : 0); result = 31 * result + (keyPassword != null ? keyPassword.hashCode() : 0); result = 31 * result + (enabledSslProtocolSuites != null ? enabledSslProtocolSuites.hashCode() : 0); result = 31 * result + (useFractionalSeconds ? 1 : 0); result = 31 * result + (pinGlobalTxToPhysicalConnection ? 1 : 0); result = 31 * result + (socketFactory != null ? socketFactory.hashCode() : 0); result = 31 * result + connectTimeout; result = 31 * result + (pipe != null ? pipe.hashCode() : 0); result = 31 * result + (localSocket != null ? localSocket.hashCode() : 0); result = 31 * result + (sharedMemory != null ? sharedMemory.hashCode() : 0); result = 31 * result + (tcpNoDelay ? 1 : 0); result = 31 * result + (tcpKeepAlive ? 1 : 0); result = 31 * result + (tcpRcvBuf != null ? tcpRcvBuf.hashCode() : 0); result = 31 * result + (tcpSndBuf != null ? tcpSndBuf.hashCode() : 0); result = 31 * result + (tcpAbortiveClose ? 1 : 0); result = 31 * result + (localSocketAddress != null ? localSocketAddress.hashCode() : 0); result = 31 * result + (socketTimeout != null ? socketTimeout.hashCode() : 0); result = 31 * result + (allowMultiQueries ? 1 : 0); result = 31 * result + (rewriteBatchedStatements ? 1 : 0); result = 31 * result + (useCompression ? 1 : 0); result = 31 * result + (interactiveClient ? 1 : 0); result = 31 * result + (passwordCharacterEncoding != null ? passwordCharacterEncoding.hashCode() : 0); result = 31 * result + (useSsl ? 1 : 0); result = 31 * result + (enabledSslCipherSuites != null ? enabledSslCipherSuites.hashCode() : 0); result = 31 * result + (sessionVariables != null ? sessionVariables.hashCode() : 0); result = 31 * result + (tinyInt1isBit ? 1 : 0); result = 31 * result + (yearIsDateType ? 1 : 0); result = 31 * result + (createDatabaseIfNotExist ? 1 : 0); result = 31 * result + (serverTimezone != null ? serverTimezone.hashCode() : 0); result = 31 * result + (nullCatalogMeansCurrent ? 1 : 0); result = 31 * result + (dumpQueriesOnException ? 1 : 0); result = 31 * result + (useOldAliasMetadataBehavior ? 1 : 0); result = 31 * result + (allowLocalInfile ? 1 : 0); } }"}
{"time": "2021-01-25 09:44:15.519187", "score": "0.9995", "loss": "0.001", "code": "class T { @SuppressWarnings(\"SimplifiableIfStatement\") @Override public int hashCode() { int result = user != null ? user.hashCode() : 0; result = 31 * result + (password != null ? password.hashCode() : 0); result = 31 * result + (trustServerCertificate ? 1 : 0); result = 31 * result + (serverSslCert != null ? serverSslCert.hashCode() : 0); result = 31 * result + (trustStore != null ? trustStore.hashCode() : 0); result = 31 * result + (trustStorePassword != null ? trustStorePassword.hashCode() : 0); result = 31 * result + (keyStore != null ? keyStore.hashCode() : 0); result = 31 * result + (keyStorePassword != null ? keyStorePassword.hashCode() : 0); result = 31 * result + (keyPassword != null ? keyPassword.hashCode() : 0); result = 31 * result + (enabledSslProtocolSuites != null ? enabledSslProtocolSuites.hashCode() : 0); result = 31 * result + (useFractionalSeconds ? 1 : 0); result = 31 * result + (pinGlobalTxToPhysicalConnection ? 1 : 0); result = 31 * result + (socketFactory != null ? socketFactory.hashCode() : 0); result = 31 * result + connectTimeout; result = 31 * result + (pipe != null ? pipe.hashCode() : 0); result = 31 * result + (localSocket != null ? localSocket.hashCode() : 0); result = 31 * result + (sharedMemory != null ? sharedMemory.hashCode() : 0); result = 31 * result + (tcpNoDelay ? 1 : 0); result = 31 * result + (tcpKeepAlive ? 1 : 0); result = 31 * result + (tcpRcvBuf != null ? tcpRcvBuf.hashCode() : 0); } }"}
{"time": "2021-01-25 09:44:37.033920", "score": "0.9991", "loss": "0.0014", "code": "class T { @SuppressWarnings(\"SimplifiableIfStatement\") @Override public int hashCode() { int result = user != null ? user.hashCode() : 0; result = 31 * result + (password != null ? password.hashCode() : 0); result = 31 * result + (trustServerCertificate ? 1 : 0); result = 31 * result + (serverSslCert != null ? serverSslCert.hashCode() : 0); result = 31 * result + (trustStore != null ? trustStore.hashCode() : 0); result = 31 * result + (trustStorePassword != null ? trustStorePassword.hashCode() : 0); result = 31 * result + (keyStore != null ? keyStore.hashCode() : 0); result = 31 * result + (keyStorePassword != null ? keyStorePassword.hashCode() : 0); result = 31 * result + (keyPassword != null ? keyPassword.hashCode() : 0); result = 31 * result + (enabledSslProtocolSuites != null ? enabledSslProtocolSuites.hashCode() : 0); } }"}
{"time": "2021-01-25 09:44:58.469034", "score": "0.9997", "loss": "0.0005", "code": "class T { @SuppressWarnings(\"SimplifiableIfStatement\") @Override public int hashCode() { int result = user != null ? user.hashCode() : 0; result = 31 * result + (password != null ? password.hashCode() : 0); result = 31 * result + (trustServerCertificate ? 1 : 0); result = 31 * result + (serverSslCert != null ? serverSslCert.hashCode() : 0); result = 31 * result + (trustStore != null ? trustStore.hashCode() : 0); } }"}
{"time": "2021-01-25 09:45:19.861352", "score": "0.9997", "loss": "0.0004", "code": "class T { @SuppressWarnings(\"SimplifiableIfStatement\") @Override public int hashCode() { int result = user != null ? user.hashCode() : 0; result = 31 * result + (password != null ? password.hashCode() : 0); result = 31 * result + (trustServerCertificate ? 1 : 0); } }"}
{"time": "2021-01-25 09:45:41.294304", "score": "0.9996", "loss": "0.0007", "code": "class T { @SuppressWarnings(\"SimplifiableIfStatement\") @Override public int hashCode() { int result = user != null ? user.hashCode() : 0; result = 31 * result + (password != null ? password.hashCode() : 0); } }"}
{"time": "2021-01-25 09:46:02.725671", "score": "0.9992", "loss": "0.0021", "code": "class T { @SuppressWarnings(\"SimplifiableIfStatement\") @Override public int hashCode() { int result = user != null ? user.hashCode() : 0; } }"}
{"time": "2021-01-25 09:47:08.066374", "score": "0.5436", "loss": "0.9867", "code": "class T { @SuppressWarnings(\"SimplifiableIfStatement\") @Override public int hashCode() { int result = user != null ; } }"}
{"time": "2021-01-25 09:47:29.475062", "score": "0.5436", "loss": "0.9867", "code": "class T { @SuppressWarnings(\"SimplifiableIfStatement\") @Override int hashCode() { int result = user != null ; } }"}
{"time": "2021-01-25 09:48:01.388055", "score": "0.7724", "loss": "0.3898", "code": "class T { @Override int hashCode() { int result = user != null ; } }"}
{"time": "2021-01-25 09:49:27.875015", "score": "0.6437", "loss": "1.0115", "code": "class T { @Override int hashCode() { int result ; } }"}

Minimal simplified code:
class T {
                                             @Override        int hashCode() { int result}
}


