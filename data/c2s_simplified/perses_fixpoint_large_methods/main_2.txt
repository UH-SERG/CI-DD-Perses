
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/catalina/startup/Tool_main.java
method_name = main
method_body = @SuppressWarnings("null") public static void main(String[] args) { if (catalinaHome == null) { log.error("Must set '" + Globals.CATALINA_HOME_PROP + "' system property"); System.exit(1); } int index = 0; while (true) { if (index == args.length) { usage(); System.exit(1); } if ("-ant".equals(args[index])) ant = true; else if ("-common".equals(args[index])) common = true; else if ("-server".equals(args[index])) server = true; else if ("-shared".equals(args[index])) shared = true; else break; index++; } if (index > args.length) { usage(); System.exit(1); } if (ant) System.setProperty("ant.home", catalinaHome); ClassLoader classLoader = null; try { ArrayList<File> packed = new ArrayList<>(); ArrayList<File> unpacked = new ArrayList<>(); unpacked.add(new File(catalinaHome, "classes")); packed.add(new File(catalinaHome, "lib")); if (common) { unpacked.add(new File(catalinaHome, "common" + File.separator + "classes")); packed.add(new File(catalinaHome, "common" + File.separator + "lib")); } if (server) { unpacked.add(new File(catalinaHome, "server" + File.separator + "classes")); packed.add(new File(catalinaHome, "server" + File.separator + "lib")); } if (shared) { unpacked.add(new File(catalinaHome, "shared" + File.separator + "classes")); packed.add(new File(catalinaHome, "shared" + File.separator + "lib")); } classLoader = ClassLoaderFactory.createClassLoader(unpacked.toArray(new File[0]), packed.toArray(new File[0]), null); } catch (Throwable t) { ExceptionUtils.handleThrowable(t); log.error("Class loader creation threw exception", t); System.exit(1); } Thread.currentThread().setContextClassLoader(classLoader); Class<?> clazz = null; String className = args[index++]; try { if (log.isDebugEnabled()) log.debug("Loading application class " + className); clazz = classLoader.loadClass(className); } catch (Throwable t) { ExceptionUtils.handleThrowable(t); log.error("Exception creating instance of " + className, t); System.exit(1); } Method method = null; String[] params = new String[args.length - index]; System.arraycopy(args, index, params, 0, params.length); try { if (log.isDebugEnabled()) log.debug("Identifying main() method"); String methodName = "main"; Class<?>[] paramTypes = new Class[1]; paramTypes[0] = params.getClass(); method = clazz.getMethod(methodName, paramTypes); } catch (Throwable t) { ExceptionUtils.handleThrowable(t); log.error("Exception locating main() method", t); System.exit(1); } try { if (log.isDebugEnabled()) log.debug("Calling main() method"); Object[] paramValues = new Object[1]; paramValues[0] = params; method.invoke(null, paramValues); } catch (Throwable t) { t = ExceptionUtils.unwrapInvocationTargetException(t); ExceptionUtils.handleThrowable(t); log.error("Exception calling main() method", t); System.exit(1); } }

Trace of simplified code(s):

{"time": "2021-01-25 08:38:07.621178", "score": "0.96", "loss": "0.0621", "code": "class T { @SuppressWarnings(\"null\") public static void main(String[] args) { if (catalinaHome == null) { log.error(\"Must set '\" + Globals.CATALINA_HOME_PROP + \"' system property\"); System.exit(1); } int index = 0; while (true) { if (index == args.length) { usage(); System.exit(1); } if (\"-ant\".equals(args[index])) ant = true; else if (\"-common\".equals(args[index])) common = true; else if (\"-server\".equals(args[index])) server = true; else if (\"-shared\".equals(args[index])) shared = true; else break; index++; } if (index > args.length) { usage(); System.exit(1); } if (ant) System.setProperty(\"ant.home\", catalinaHome); ClassLoader classLoader = null; try { ArrayList<File> packed = new ArrayList<>(); ArrayList<File> unpacked = new ArrayList<>(); unpacked.add(new File(catalinaHome, \"classes\")); packed.add(new File(catalinaHome, \"lib\")); if (common) { unpacked.add(new File(catalinaHome, \"common\" + File.separator + \"classes\")); packed.add(new File(catalinaHome, \"common\" + File.separator + \"lib\")); } if (server) { unpacked.add(new File(catalinaHome, \"server\" + File.separator + \"classes\")); packed.add(new File(catalinaHome, \"server\" + File.separator + \"lib\")); } if (shared) { unpacked.add(new File(catalinaHome, \"shared\" + File.separator + \"classes\")); packed.add(new File(catalinaHome, \"shared\" + File.separator + \"lib\")); } classLoader = ClassLoaderFactory.createClassLoader(unpacked.toArray(new File[0]), packed.toArray(new File[0]), null); } catch (Throwable t) { ExceptionUtils.handleThrowable(t); log.error(\"Class loader creation threw exception\", t); System.exit(1); } Thread.currentThread().setContextClassLoader(classLoader); Class<?> clazz = null; String className = args[index++]; try { if (log.isDebugEnabled()) log.debug(\"Loading application class \" + className); clazz = classLoader.loadClass(className); } catch (Throwable t) { ExceptionUtils.handleThrowable(t); log.error(\"Exception creating instance of \" + className, t); System.exit(1); } Method method = null; String[] params = new String[args.length - index]; System.arraycopy(args, index, params, 0, params.length); try { if (log.isDebugEnabled()) log.debug(\"Identifying main() method\"); String methodName = \"main\"; Class<?>[] paramTypes = new Class[1]; paramTypes[0] = params.getClass(); method = clazz.getMethod(methodName, paramTypes); } catch (Throwable t) { ExceptionUtils.handleThrowable(t); log.error(\"Exception locating main() method\", t); System.exit(1); } try { if (log.isDebugEnabled()) log.debug(\"Calling main() method\"); Object[] paramValues = new Object[1]; paramValues[0] = params; method.invoke(null, paramValues); } catch (Throwable t) { t = ExceptionUtils.unwrapInvocationTargetException(t); ExceptionUtils.handleThrowable(t); log.error(\"Exception calling main() method\", t); System.exit(1); } } }"}
{"time": "2021-01-25 08:38:57.302399", "score": "0.9454", "loss": "0.0721", "code": "class T { @SuppressWarnings(\"null\") public static void main(String[] args) { t = ExceptionUtils.unwrapInvocationTargetException(t); ExceptionUtils.handleThrowable(t); log.error(\"Exception calling main() method\", t); System.exit(1); } }"}
{"time": "2021-01-25 08:39:45.840817", "score": "0.9593", "loss": "0.0563", "code": "class T { @SuppressWarnings(\"null\") public static void main(String[] args) { } }"}
{"time": "2021-01-25 08:39:56.523381", "score": "0.9939", "loss": "0.0125", "code": "class T { void main(String[] args) { } }"}
{"time": "2021-01-25 08:40:17.923176", "score": "0.7634", "loss": "0.5046", "code": "class T { void main(String args) { } }"}

Minimal simplified code:
class T {
                                        void main(String   args)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 {                                                                                                                                                            }
}


