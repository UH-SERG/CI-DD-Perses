
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/javaee__javamail/demo/src/main/java/populate_main.java
method_name = main
method_body = public static void main(String[] argv) { String srcURL = null; String dstURL = null; boolean debug = false; int optind; for (optind = 0; optind < argv.length; optind++) { if (argv[optind].equals("-s")) { srcURL = argv[++optind]; } else if (argv[optind].equals("-d")) { dstURL = argv[++optind]; } else if (argv[optind].equals("-D")) { debug = true; } else if (argv[optind].equals("-f")) { force = true; } else if (argv[optind].equals("-S")) { skipSpecial = true; } else if (argv[optind].equals("-c")) { clear = true; } else if (argv[optind].equals("-P")) { dontPreserveFlags = true; } else if (argv[optind].equals("-W")) { warn = true; } else if (argv[optind].equals("--")) { optind++; break; } else if (argv[optind].startsWith("-")) { printUsage(); System.exit(1); } else { break; } } try { if (srcURL == null || dstURL == null) { printUsage(); System.exit(1); } Session session = Session.getInstance(System.getProperties(), null); session.setDebug(debug); URLName srcURLName = new URLName(srcURL); Folder srcFolder; if (srcURLName.getFile() == null) { Store s = session.getStore(srcURLName); s.connect(); srcFolder = s.getDefaultFolder(); } else { srcFolder = session.getFolder(new URLName(srcURL)); if (!srcFolder.exists()) { System.out.println("source folder does not exist"); srcFolder.getStore().close(); System.exit(1); } } URLName dstURLName = new URLName(dstURL); Folder dstFolder; if (dstURLName.getFile() == null) { Store s = session.getStore(dstURLName); s.connect(); dstFolder = s.getFolder(srcFolder.getName()); } else dstFolder = session.getFolder(dstURLName); if (clear && dstFolder.exists()) { if (!dstFolder.delete(true)) { System.out.println("couldn't delete " + dstFolder.getFullName()); return; } } copy(srcFolder, dstFolder); srcFolder.getStore().close(); dstFolder.getStore().close(); } catch (MessagingException mex) { System.out.println(mex.getMessage()); mex.printStackTrace(); } }

Trace of simplified code(s):

{"time": "2021-01-25 09:56:04.559237", "score": "0.9818", "loss": "0.0261", "code": "class T { public static void main(String[] argv) { String srcURL = null; String dstURL = null; boolean debug = false; int optind; for (optind = 0; optind < argv.length; optind++) { if (argv[optind].equals(\"-s\")) { srcURL = argv[++optind]; } else if (argv[optind].equals(\"-d\")) { dstURL = argv[++optind]; } else if (argv[optind].equals(\"-D\")) { debug = true; } else if (argv[optind].equals(\"-f\")) { force = true; } else if (argv[optind].equals(\"-S\")) { skipSpecial = true; } else if (argv[optind].equals(\"-c\")) { clear = true; } else if (argv[optind].equals(\"-P\")) { dontPreserveFlags = true; } else if (argv[optind].equals(\"-W\")) { warn = true; } else if (argv[optind].equals(\"--\")) { optind++; break; } else if (argv[optind].startsWith(\"-\")) { printUsage(); System.exit(1); } else { break; } } try { if (srcURL == null || dstURL == null) { printUsage(); System.exit(1); } Session session = Session.getInstance(System.getProperties(), null); session.setDebug(debug); URLName srcURLName = new URLName(srcURL); Folder srcFolder; if (srcURLName.getFile() == null) { Store s = session.getStore(srcURLName); s.connect(); srcFolder = s.getDefaultFolder(); } else { srcFolder = session.getFolder(new URLName(srcURL)); if (!srcFolder.exists()) { System.out.println(\"source folder does not exist\"); srcFolder.getStore().close(); System.exit(1); } } URLName dstURLName = new URLName(dstURL); Folder dstFolder; if (dstURLName.getFile() == null) { Store s = session.getStore(dstURLName); s.connect(); dstFolder = s.getFolder(srcFolder.getName()); } else dstFolder = session.getFolder(dstURLName); if (clear && dstFolder.exists()) { if (!dstFolder.delete(true)) { System.out.println(\"couldn't delete \" + dstFolder.getFullName()); return; } } copy(srcFolder, dstFolder); srcFolder.getStore().close(); dstFolder.getStore().close(); } catch (MessagingException mex) { System.out.println(mex.getMessage()); mex.printStackTrace(); } } }"}
{"time": "2021-01-25 09:56:54.336394", "score": "0.9989", "loss": "0.0019", "code": "class T { public static void main(String[] argv) { } }"}
{"time": "2021-01-25 09:57:15.537230", "score": "0.9087", "loss": "0.1617", "code": "class T { public static void main(String argv) { } }"}
{"time": "2021-01-25 09:57:26.129632", "score": "0.9087", "loss": "0.1617", "code": "class T { void main(String argv) { } }"}

Minimal simplified code:
class T {
              void main(String   argv) {}
}


