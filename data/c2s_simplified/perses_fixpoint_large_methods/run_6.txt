
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/main/java/com/iplanet/services/comm/https/JSSProxy_run.java
method_name = run
method_body = public void run() { Integer remotePort = new Integer(inconnection.getPort()); byte[] prebuffer = new byte[1]; DataInputStream inFrom; try { inFrom = new DataInputStream(inconnection.getInputStream()); inFrom.readFully(prebuffer, 0, 1); } catch (IOException e) { debug.error("JSSProxySessionRunnable: Unable to open input stream on " + inconnection, e); connectHashMap.remove(remotePort); closeSockets(); return; } String info = (String) connectHashMap.remove(remotePort); StringTokenizer st = new StringTokenizer(info); String host = st.nextToken(); int port; try { port = Integer.parseInt(st.nextToken()); } catch (Exception ex) { port = 8080; } try { toProxySocket = new Socket(host, port); toProxySocket.setTcpNoDelay(true); } catch (Exception ex) { toProxySocket = null; if (debug.messageEnabled()) { debug.message("JSSProxySessionRunnable: " + "Unable to connect to " + host + ":" + port + ". ", ex); } } if (toProxySocket == null) { closeSockets(); return; } String desthost = st.nextToken(); String destport = st.nextToken(); OutputStream out = null; InputStream in = null; byte[] reply = new byte[200]; int replyLen = 0; int newlinesSeen = 0; boolean headerDone = false; try { out = toProxySocket.getOutputStream(); String msg = "CONNECT " + desthost + ":" + destport + " HTTP/1.0\n" + "User-Agent: " + sun.net.www.protocol.http.HttpURLConnection.userAgent + "\r\n\r\n"; debug.message(msg); byte[] b; try { b = msg.getBytes("ASCII7"); } catch (UnsupportedEncodingException ignored) { b = msg.getBytes(); } out.write(b); out.flush(); in = toProxySocket.getInputStream(); boolean error = false; while (newlinesSeen < 2) { int i = in.read(); if (i < 0) { debug.error("JSSProxySessionRunnable: " + "Unexpected EOF from proxy"); closeSockets(); return; } if (i == '\n') { headerDone = true; ++newlinesSeen; } else if (i != '\r') { newlinesSeen = 0; if (!headerDone && replyLen < reply.length) { reply[replyLen++] = (byte) i; } } } } catch (IOException ioe) { debug.error("JSSProxySessionRunnable: " + "Unable to get OutputStream", ioe); closeSockets(); return; } String replyStr; try { replyStr = new String(reply, 0, replyLen, "ASCII7"); } catch (UnsupportedEncodingException ignored) { replyStr = new String(reply, 0, replyLen); } if (!replyStr.startsWith("HTTP/1.0 200")) { debug.error("JSSProxySessionRunnable: Unable to tunnel through "); closeSockets(); return; } try { out.write(prebuffer); out.flush(); } catch (IOException ioe) { debug.error("JSSProxySessionRunnable: " + "Unable to write prebuffer.", ioe); closeSockets(); return; } new RWGroupJSSProxy(inconnection, toProxySocket); }

Trace of simplified code(s):

{"time": "2021-01-25 09:22:43.787851", "score": "0.7762", "loss": "0.5234", "code": "class T { public void run() { Integer remotePort = new Integer(inconnection.getPort()); byte[] prebuffer = new byte[1]; DataInputStream inFrom; try { inFrom = new DataInputStream(inconnection.getInputStream()); inFrom.readFully(prebuffer, 0, 1); } catch (IOException e) { debug.error(\"JSSProxySessionRunnable: Unable to open input stream on \" + inconnection, e); connectHashMap.remove(remotePort); closeSockets(); return; } String info = (String) connectHashMap.remove(remotePort); StringTokenizer st = new StringTokenizer(info); String host = st.nextToken(); int port; try { port = Integer.parseInt(st.nextToken()); } catch (Exception ex) { port = 8080; } try { toProxySocket = new Socket(host, port); toProxySocket.setTcpNoDelay(true); } catch (Exception ex) { toProxySocket = null; if (debug.messageEnabled()) { debug.message(\"JSSProxySessionRunnable: \" + \"Unable to connect to \" + host + \":\" + port + \". \", ex); } } if (toProxySocket == null) { closeSockets(); return; } String desthost = st.nextToken(); String destport = st.nextToken(); OutputStream out = null; InputStream in = null; byte[] reply = new byte[200]; int replyLen = 0; int newlinesSeen = 0; boolean headerDone = false; try { out = toProxySocket.getOutputStream(); String msg = \"CONNECT \" + desthost + \":\" + destport + \" HTTP/1.0\n\" + \"User-Agent: \" + sun.net.www.protocol.http.HttpURLConnection.userAgent + \"\r\n\r\n\"; debug.message(msg); byte[] b; try { b = msg.getBytes(\"ASCII7\"); } catch (UnsupportedEncodingException ignored) { b = msg.getBytes(); } out.write(b); out.flush(); in = toProxySocket.getInputStream(); boolean error = false; while (newlinesSeen < 2) { int i = in.read(); if (i < 0) { debug.error(\"JSSProxySessionRunnable: \" + \"Unexpected EOF from proxy\"); closeSockets(); return; } if (i == '\n') { headerDone = true; ++newlinesSeen; } else if (i != '\r') { newlinesSeen = 0; if (!headerDone && replyLen < reply.length) { reply[replyLen++] = (byte) i; } } } } catch (IOException ioe) { debug.error(\"JSSProxySessionRunnable: \" + \"Unable to get OutputStream\", ioe); closeSockets(); return; } String replyStr; try { replyStr = new String(reply, 0, replyLen, \"ASCII7\"); } catch (UnsupportedEncodingException ignored) { replyStr = new String(reply, 0, replyLen); } if (!replyStr.startsWith(\"HTTP/1.0 200\")) { debug.error(\"JSSProxySessionRunnable: Unable to tunnel through \"); closeSockets(); return; } try { out.write(prebuffer); out.flush(); } catch (IOException ioe) { debug.error(\"JSSProxySessionRunnable: \" + \"Unable to write prebuffer.\", ioe); closeSockets(); return; } new RWGroupJSSProxy(inconnection, toProxySocket); } }"}
{"time": "2021-01-25 09:24:43.007086", "score": "0.466", "loss": "1.2632", "code": "class T { public void run() { Integer remotePort = new Integer(inconnection.getPort()); byte[] prebuffer = new byte[1]; DataInputStream inFrom; try { inFrom = new DataInputStream(inconnection.getInputStream()); inFrom.readFully(prebuffer, 0, 1); } catch (IOException e) { debug.error(\"JSSProxySessionRunnable: Unable to open input stream on \" + inconnection, e); connectHashMap.remove(remotePort); closeSockets(); return; } String info = (String) connectHashMap.remove(remotePort); StringTokenizer st = new StringTokenizer(info); String host = st.nextToken(); int port; try { port = Integer.parseInt(st.nextToken()); } catch (Exception ex) { port = 8080; } try { toProxySocket = new Socket(host, port); toProxySocket.setTcpNoDelay(true); } catch (Exception ex) { toProxySocket = null; if (debug.messageEnabled()) { debug.message(\"JSSProxySessionRunnable: \" + \"Unable to connect to \" + host + \":\" + port + \". \", ex); } } if (toProxySocket == null) { closeSockets(); return; } String desthost = st.nextToken(); String destport = st.nextToken(); } }"}
{"time": "2021-01-25 09:25:15.687919", "score": "0.5515", "loss": "1.0996", "code": "class T { public void run() { Integer remotePort = new Integer(inconnection.getPort()); byte[] prebuffer = new byte[1]; DataInputStream inFrom; try { inFrom = new DataInputStream(inconnection.getInputStream()); inFrom.readFully(prebuffer, 0, 1); } catch (IOException e) { debug.error(\"JSSProxySessionRunnable: Unable to open input stream on \" + inconnection, e); connectHashMap.remove(remotePort); closeSockets(); return; } String info = (String) connectHashMap.remove(remotePort); StringTokenizer st = new StringTokenizer(info); String host = st.nextToken(); int port; try { port = Integer.parseInt(st.nextToken()); } catch (Exception ex) { port = 8080; } try { toProxySocket = new Socket(host, port); toProxySocket.setTcpNoDelay(true); } catch (Exception ex) { toProxySocket = null; if (debug.messageEnabled()) { debug.message(\"JSSProxySessionRunnable: \" + \"Unable to connect to \" + host + \":\" + port + \". \", ex); } } } }"}
{"time": "2021-01-25 09:25:37.643220", "score": "0.51", "loss": "1.1941", "code": "class T { public void run() { Integer remotePort = new Integer(inconnection.getPort()); byte[] prebuffer = new byte[1]; DataInputStream inFrom; try { inFrom = new DataInputStream(inconnection.getInputStream()); inFrom.readFully(prebuffer, 0, 1); } catch (IOException e) { debug.error(\"JSSProxySessionRunnable: Unable to open input stream on \" + inconnection, e); connectHashMap.remove(remotePort); closeSockets(); return; } String info = (String) connectHashMap.remove(remotePort); StringTokenizer st = new StringTokenizer(info); String host = st.nextToken(); int port; try { port = Integer.parseInt(st.nextToken()); } catch (Exception ex) { port = 8080; } } }"}
{"time": "2021-01-25 09:25:59.427051", "score": "0.4463", "loss": "1.4881", "code": "class T { public void run() { Integer remotePort = new Integer(inconnection.getPort()); byte[] prebuffer = new byte[1]; DataInputStream inFrom; try { inFrom = new DataInputStream(inconnection.getInputStream()); inFrom.readFully(prebuffer, 0, 1); } catch (IOException e) { debug.error(\"JSSProxySessionRunnable: Unable to open input stream on \" + inconnection, e); connectHashMap.remove(remotePort); closeSockets(); return; } String info = (String) connectHashMap.remove(remotePort); StringTokenizer st = new StringTokenizer(info); String host = st.nextToken(); int port; } }"}
{"time": "2021-01-25 09:27:03.976725", "score": "0.4757", "loss": "1.4514", "code": "class T { public void run() { Integer remotePort = new Integer(inconnection.getPort()); byte[] prebuffer = new byte[1]; DataInputStream inFrom; try { inFrom = new DataInputStream(inconnection.getInputStream()); inFrom.readFully(prebuffer, 0, 1); } catch (IOException e) { debug.error(\"JSSProxySessionRunnable: Unable to open input stream on \" + inconnection, e); connectHashMap.remove(remotePort); closeSockets(); return; } String info = (String) connectHashMap.remove(remotePort); String host = st.nextToken(); int port; } }"}
{"time": "2021-01-25 09:27:25.702725", "score": "0.2362", "loss": "2.3761", "code": "class T { public void run() { String info = (String) connectHashMap.remove(remotePort); String host = st.nextToken(); int port; } }"}
{"time": "2021-01-25 09:27:36.411187", "score": "0.2714", "loss": "2.5292", "code": "class T { public void run() { String host = st.nextToken(); int port; } }"}
{"time": "2021-01-25 09:28:35.028314", "score": "0.3197", "loss": "2.2714", "code": "class T { public void run() { String host = st.nextToken(); } }"}
{"time": "2021-01-25 09:28:45.722845", "score": "0.3197", "loss": "2.2714", "code": "class T { void run() { String host = st.nextToken(); } }"}

Minimal simplified code:
class T {
       void run() {tring host = st.nextToken}
}


