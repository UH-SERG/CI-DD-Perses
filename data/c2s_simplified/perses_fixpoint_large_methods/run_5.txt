
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/apache__apex-core/engine/src/main/java/com/datatorrent/stram/StramLocalCluster_run.java
method_name = run
method_body = @Override @SuppressWarnings({ "SleepWhileInLoop", "ResultOfObjectAllocationIgnored" }) public void run(long runMillis) { Thread eventLoopThread = null; List<Thread> containerThreads = new LinkedList<>(); try { if (!perContainerBufferServer) { eventLoopThread = StreamingContainer.eventloop.start(); bufferServer = new Server(StreamingContainer.eventloop, 0, 1024 * 1024, 8); try { bufferServer.setSpoolStorage(new DiskStorage()); } catch (IOException e) { throw new RuntimeException(e); } bufferServerAddress = InetSocketAddress.createUnresolved(LOCALHOST, bufferServer.run().getPort()); LOG.info("Buffer server started: {}", bufferServerAddress); } long endMillis = System.currentTimeMillis() + runMillis; while (!appDone) { for (String containerIdStr : dnmgr.containerStopRequests.values()) { StreamingContainer c = childContainers.get(containerIdStr); if (c != null) { ContainerHeartbeatResponse r = new ContainerHeartbeatResponse(); r.shutdown = StreamingContainerUmbilicalProtocol.ShutdownType.ABORT; c.processHeartbeatResponse(r); } dnmgr.containerStopRequests.remove(containerIdStr); LOG.info("Container {} restart.", containerIdStr); dnmgr.scheduleContainerRestart(containerIdStr); } while (!dnmgr.containerStartRequests.isEmpty()) { ContainerStartRequest cdr = dnmgr.containerStartRequests.poll(); if (cdr != null) { new LocalStreamingContainerLauncher(cdr, containerThreads); } } if (heartbeatMonitoringEnabled) { dnmgr.monitorHeartbeat(false); } if (childContainers.isEmpty() && dnmgr.containerStartRequests.isEmpty()) { appDone = true; } if (runMillis > 0 && System.currentTimeMillis() > endMillis) { appDone = true; } try { if (exitCondition != null && exitCondition.call()) { LOG.info("Stopping on exit condition"); appDone = true; } } catch (Exception ex) { break; } if (Thread.interrupted()) { break; } if (!appDone) { try { Thread.sleep(1000); } catch (InterruptedException e) { LOG.debug("Sleep interrupted", e); break; } } } } finally { for (LocalStreamingContainer lsc : childContainers.values()) { injectShutdown.put(lsc.getContainerId(), lsc); lsc.triggerHeartbeat(); } for (Thread thread : containerThreads) { try { thread.join(1000); } catch (InterruptedException e) { LOG.debug("Wait for {} to terminate interrupted", thread, e); } if (thread.isAlive()) { LOG.warn("Container thread {} is still alive", thread.getName()); } } try { dnmgr.teardown(); } catch (RuntimeException e) { LOG.warn("Exception during StreamingContainerManager teardown", e); } if (bufferServerAddress != null) { try { bufferServer.stop(); } catch (RuntimeException e) { LOG.warn("Exception during BufferServer stop", e); } } if (eventLoopThread != null) { try { StreamingContainer.eventloop.stop(); eventLoopThread.join(1000); } catch (InterruptedException ie) { LOG.debug("Wait for {} to terminate interrupted", eventLoopThread.getName(), ie); } catch (RuntimeException e) { LOG.warn("Exception during {} stop", StreamingContainer.eventloop, e); } if (StreamingContainer.eventloop.isActive()) { LOG.warn("Event loop {} is still active", StreamingContainer.eventloop); } } } LOG.info("Application finished."); }

Trace of simplified code(s):

{"time": "2021-01-25 09:07:29.901135", "score": "0.3721", "loss": "1.5444", "code": "class T { @Override @SuppressWarnings({ \"SleepWhileInLoop\", \"ResultOfObjectAllocationIgnored\" }) public void run(long runMillis) { Thread eventLoopThread = null; List<Thread> containerThreads = new LinkedList<>(); try { if (!perContainerBufferServer) { eventLoopThread = StreamingContainer.eventloop.start(); bufferServer = new Server(StreamingContainer.eventloop, 0, 1024 * 1024, 8); try { bufferServer.setSpoolStorage(new DiskStorage()); } catch (IOException e) { throw new RuntimeException(e); } bufferServerAddress = InetSocketAddress.createUnresolved(LOCALHOST, bufferServer.run().getPort()); LOG.info(\"Buffer server started: {}\", bufferServerAddress); } long endMillis = System.currentTimeMillis() + runMillis; while (!appDone) { for (String containerIdStr : dnmgr.containerStopRequests.values()) { StreamingContainer c = childContainers.get(containerIdStr); if (c != null) { ContainerHeartbeatResponse r = new ContainerHeartbeatResponse(); r.shutdown = StreamingContainerUmbilicalProtocol.ShutdownType.ABORT; c.processHeartbeatResponse(r); } dnmgr.containerStopRequests.remove(containerIdStr); LOG.info(\"Container {} restart.\", containerIdStr); dnmgr.scheduleContainerRestart(containerIdStr); } while (!dnmgr.containerStartRequests.isEmpty()) { ContainerStartRequest cdr = dnmgr.containerStartRequests.poll(); if (cdr != null) { new LocalStreamingContainerLauncher(cdr, containerThreads); } } if (heartbeatMonitoringEnabled) { dnmgr.monitorHeartbeat(false); } if (childContainers.isEmpty() && dnmgr.containerStartRequests.isEmpty()) { appDone = true; } if (runMillis > 0 && System.currentTimeMillis() > endMillis) { appDone = true; } try { if (exitCondition != null && exitCondition.call()) { LOG.info(\"Stopping on exit condition\"); appDone = true; } } catch (Exception ex) { break; } if (Thread.interrupted()) { break; } if (!appDone) { try { Thread.sleep(1000); } catch (InterruptedException e) { LOG.debug(\"Sleep interrupted\", e); break; } } } } finally { for (LocalStreamingContainer lsc : childContainers.values()) { injectShutdown.put(lsc.getContainerId(), lsc); lsc.triggerHeartbeat(); } for (Thread thread : containerThreads) { try { thread.join(1000); } catch (InterruptedException e) { LOG.debug(\"Wait for {} to terminate interrupted\", thread, e); } if (thread.isAlive()) { LOG.warn(\"Container thread {} is still alive\", thread.getName()); } } try { dnmgr.teardown(); } catch (RuntimeException e) { LOG.warn(\"Exception during StreamingContainerManager teardown\", e); } if (bufferServerAddress != null) { try { bufferServer.stop(); } catch (RuntimeException e) { LOG.warn(\"Exception during BufferServer stop\", e); } } if (eventLoopThread != null) { try { StreamingContainer.eventloop.stop(); eventLoopThread.join(1000); } catch (InterruptedException ie) { LOG.debug(\"Wait for {} to terminate interrupted\", eventLoopThread.getName(), ie); } catch (RuntimeException e) { LOG.warn(\"Exception during {} stop\", StreamingContainer.eventloop, e); } if (StreamingContainer.eventloop.isActive()) { LOG.warn(\"Event loop {} is still active\", StreamingContainer.eventloop); } } } LOG.info(\"Application finished.\"); } }"}
{"time": "2021-01-25 09:08:56.626691", "score": "0.4911", "loss": "1.722", "code": "class T { @Override @SuppressWarnings({ \"SleepWhileInLoop\", \"ResultOfObjectAllocationIgnored\" }) public void run(long runMillis) { Thread eventLoopThread = null; List<Thread> containerThreads = new LinkedList<>(); LOG.info(\"Application finished.\"); } }"}
{"time": "2021-01-25 09:09:28.716438", "score": "0.2966", "loss": "2.17", "code": "class T { @Override @SuppressWarnings({ \"SleepWhileInLoop\", \"ResultOfObjectAllocationIgnored\" }) public void run(long runMillis) { List<Thread> containerThreads = new LinkedList<>(); LOG.info(\"Application finished.\"); } }"}
{"time": "2021-01-25 09:09:50.123108", "score": "0.3853", "loss": "2.2621", "code": "class T { void run(long runMillis) { List<Thread> containerThreads = new LinkedList<>(); LOG.info(\"Application finished.\"); } }"}
{"time": "2021-01-25 09:10:23.831372", "score": "0.2795", "loss": "3.2835", "code": "class T { void run(long runMillis) { List<Thread> containerThreads = new LinkedList<>(); } }"}
{"time": "2021-01-25 09:10:56.124161", "score": "0.3545", "loss": "2.7744", "code": "class T { void run(long runMillis) { List containerThreads = new LinkedList<>(); } }"}
{"time": "2021-01-25 09:11:17.343340", "score": "0.3545", "loss": "2.7744", "code": "class T { void run(long runMillis) { List containerThreads = new LinkedList (); } }"}

Minimal simplified code:
class T {
                                                                                              void run(long runMillis) {                                List         containerThreads = new LinkedList  ();                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          }
}


