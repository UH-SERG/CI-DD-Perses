
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/MKergall__osmbonuspack/OSMBonusPackTuto/src/main/java/com/example/osmbonuspacktuto/MainActivity_onCreate.java
method_name = onCreate
method_body = @Override protected void onCreate(Bundle savedInstanceState) { StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build(); StrictMode.setThreadPolicy(policy); super.onCreate(savedInstanceState); setContentView(R.layout.main); map = (MapView) findViewById(R.id.map); map.setBuiltInZoomControls(true); map.setMultiTouchControls(true); GeoPoint startPoint = new GeoPoint(48.13, -1.63); IMapController mapController = map.getController(); mapController.setZoom(10.0); mapController.setCenter(startPoint); Marker startMarker = new Marker(map); startMarker.setPosition(startPoint); startMarker.setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM); startMarker.setTitle("Start point"); startMarker.setDraggable(true); startMarker.setOnMarkerDragListener(new OnMarkerDragListenerDrawer()); map.getOverlays().add(startMarker); RoadManager roadManager = new OSRMRoadManager(this); ArrayList<GeoPoint> waypoints = new ArrayList<GeoPoint>(); waypoints.add(startPoint); GeoPoint endPoint = new GeoPoint(48.4, -1.9); waypoints.add(endPoint); Road road = roadManager.getRoad(waypoints); if (road.mStatus != Road.STATUS_OK) Toast.makeText(this, "Error when loading the road - status=" + road.mStatus, Toast.LENGTH_SHORT).show(); Polyline roadOverlay = RoadManager.buildRoadOverlay(road); map.getOverlays().add(roadOverlay); FolderOverlay roadMarkers = new FolderOverlay(); map.getOverlays().add(roadMarkers); Drawable nodeIcon = ResourcesCompat.getDrawable(getResources(), R.drawable.marker_node, null); for (int i = 0; i < road.mNodes.size(); i++) { RoadNode node = road.mNodes.get(i); Marker nodeMarker = new Marker(map); nodeMarker.setPosition(node.mLocation); nodeMarker.setIcon(nodeIcon); nodeMarker.setTitle("Step " + i); nodeMarker.setSnippet(node.mInstructions); nodeMarker.setSubDescription(Road.getLengthDurationText(this, node.mLength, node.mDuration)); Drawable iconContinue = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_continue, null); nodeMarker.setImage(iconContinue); roadMarkers.add(nodeMarker); } NominatimPOIProvider poiProvider = new NominatimPOIProvider("OsmNavigator/1.0"); ArrayList<POI> pois = poiProvider.getPOICloseTo(startPoint, "cinema", 50, 0.1); RadiusMarkerClusterer poiMarkers = new RadiusMarkerClusterer(this); Drawable clusterIconD = ResourcesCompat.getDrawable(getResources(), R.drawable.marker_poi_cluster, null); Bitmap clusterIcon = ((BitmapDrawable) clusterIconD).getBitmap(); poiMarkers.setIcon(clusterIcon); poiMarkers.getTextPaint().setTextSize(12 * getResources().getDisplayMetrics().density); poiMarkers.mAnchorV = Marker.ANCHOR_BOTTOM; poiMarkers.mTextAnchorU = 0.70f; poiMarkers.mTextAnchorV = 0.27f; map.getOverlays().add(poiMarkers); Drawable poiIcon = ResourcesCompat.getDrawable(getResources(), R.drawable.marker_poi_default, null); if (pois != null) { for (POI poi : pois) { Marker poiMarker = new Marker(map); poiMarker.setTitle(poi.mType); poiMarker.setSnippet(poi.mDescription); poiMarker.setPosition(poi.mLocation); poiMarker.setIcon(poiIcon); if (poi.mThumbnail != null) { poiMarker.setImage(new BitmapDrawable(getResources(), poi.mThumbnail)); } poiMarker.setInfoWindow(new CustomInfoWindow(map)); poiMarker.setRelatedObject(poi); poiMarkers.add(poiMarker); } } mKmlDocument = new KmlDocument(); OverpassAPIProvider overpassProvider = new OverpassAPIProvider(); BoundingBox oBB = new BoundingBox(startPoint.getLatitude() + 0.25, startPoint.getLongitude() + 0.25, startPoint.getLatitude() - 0.25, startPoint.getLongitude() - 0.25); String oUrl = overpassProvider.urlForTagSearchKml("highway=speed_camera", oBB, 500, 30); boolean ok = overpassProvider.addInKmlFolder(mKmlDocument.mKmlRoot, oUrl); if (ok) { Drawable defaultMarker = ResourcesCompat.getDrawable(getResources(), R.drawable.marker_kml_point, null); Bitmap defaultBitmap = ((BitmapDrawable) defaultMarker).getBitmap(); Style defaultStyle = new Style(defaultBitmap, 0x901010AA, 3.0f, 0x20AA1010); KmlFeature.Styler styler = new MyKmlStyler(defaultStyle); FolderOverlay kmlOverlay = (FolderOverlay) mKmlDocument.mKmlRoot.buildOverlay(map, defaultStyle, styler, mKmlDocument); map.getOverlays().add(kmlOverlay); BoundingBox bb = mKmlDocument.mKmlRoot.getBoundingBox(); if (bb != null) { setInitialViewOn(bb); } } else Toast.makeText(this, "Error when loading KML", Toast.LENGTH_SHORT).show(); if (mKmlDocument.mKmlRoot != null) { KmlFolder root = mKmlDocument.mKmlRoot; root.addOverlay(roadOverlay, mKmlDocument); root.addOverlay(roadMarkers, mKmlDocument); mKmlDocument.saveAsKML(mKmlDocument.getDefaultPathForAndroid("my_route.kml")); mKmlDocument.saveAsGeoJSON(mKmlDocument.getDefaultPathForAndroid("my_route.json")); } MapEventsOverlay mapEventsOverlay = new MapEventsOverlay(this); map.getOverlays().add(0, mapEventsOverlay); }

Trace of simplified code(s):

{"time": "2021-01-25 08:47:47.848157", "score": "0.9873", "loss": "0.0477", "code": "class T { @Override protected void onCreate(Bundle savedInstanceState) { StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build(); StrictMode.setThreadPolicy(policy); super.onCreate(savedInstanceState); setContentView(R.layout.main); map = (MapView) findViewById(R.id.map); map.setBuiltInZoomControls(true); map.setMultiTouchControls(true); GeoPoint startPoint = new GeoPoint(48.13, -1.63); IMapController mapController = map.getController(); mapController.setZoom(10.0); mapController.setCenter(startPoint); Marker startMarker = new Marker(map); startMarker.setPosition(startPoint); startMarker.setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM); startMarker.setTitle(\"Start point\"); startMarker.setDraggable(true); startMarker.setOnMarkerDragListener(new OnMarkerDragListenerDrawer()); map.getOverlays().add(startMarker); RoadManager roadManager = new OSRMRoadManager(this); ArrayList<GeoPoint> waypoints = new ArrayList<GeoPoint>(); waypoints.add(startPoint); GeoPoint endPoint = new GeoPoint(48.4, -1.9); waypoints.add(endPoint); Road road = roadManager.getRoad(waypoints); if (road.mStatus != Road.STATUS_OK) Toast.makeText(this, \"Error when loading the road - status=\" + road.mStatus, Toast.LENGTH_SHORT).show(); Polyline roadOverlay = RoadManager.buildRoadOverlay(road); map.getOverlays().add(roadOverlay); FolderOverlay roadMarkers = new FolderOverlay(); map.getOverlays().add(roadMarkers); Drawable nodeIcon = ResourcesCompat.getDrawable(getResources(), R.drawable.marker_node, null); for (int i = 0; i < road.mNodes.size(); i++) { RoadNode node = road.mNodes.get(i); Marker nodeMarker = new Marker(map); nodeMarker.setPosition(node.mLocation); nodeMarker.setIcon(nodeIcon); nodeMarker.setTitle(\"Step \" + i); nodeMarker.setSnippet(node.mInstructions); nodeMarker.setSubDescription(Road.getLengthDurationText(this, node.mLength, node.mDuration)); Drawable iconContinue = ResourcesCompat.getDrawable(getResources(), R.drawable.ic_continue, null); nodeMarker.setImage(iconContinue); roadMarkers.add(nodeMarker); } NominatimPOIProvider poiProvider = new NominatimPOIProvider(\"OsmNavigator/1.0\"); ArrayList<POI> pois = poiProvider.getPOICloseTo(startPoint, \"cinema\", 50, 0.1); RadiusMarkerClusterer poiMarkers = new RadiusMarkerClusterer(this); Drawable clusterIconD = ResourcesCompat.getDrawable(getResources(), R.drawable.marker_poi_cluster, null); Bitmap clusterIcon = ((BitmapDrawable) clusterIconD).getBitmap(); poiMarkers.setIcon(clusterIcon); poiMarkers.getTextPaint().setTextSize(12 * getResources().getDisplayMetrics().density); poiMarkers.mAnchorV = Marker.ANCHOR_BOTTOM; poiMarkers.mTextAnchorU = 0.70f; poiMarkers.mTextAnchorV = 0.27f; map.getOverlays().add(poiMarkers); Drawable poiIcon = ResourcesCompat.getDrawable(getResources(), R.drawable.marker_poi_default, null); if (pois != null) { for (POI poi : pois) { Marker poiMarker = new Marker(map); poiMarker.setTitle(poi.mType); poiMarker.setSnippet(poi.mDescription); poiMarker.setPosition(poi.mLocation); poiMarker.setIcon(poiIcon); if (poi.mThumbnail != null) { poiMarker.setImage(new BitmapDrawable(getResources(), poi.mThumbnail)); } poiMarker.setInfoWindow(new CustomInfoWindow(map)); poiMarker.setRelatedObject(poi); poiMarkers.add(poiMarker); } } mKmlDocument = new KmlDocument(); OverpassAPIProvider overpassProvider = new OverpassAPIProvider(); BoundingBox oBB = new BoundingBox(startPoint.getLatitude() + 0.25, startPoint.getLongitude() + 0.25, startPoint.getLatitude() - 0.25, startPoint.getLongitude() - 0.25); String oUrl = overpassProvider.urlForTagSearchKml(\"highway=speed_camera\", oBB, 500, 30); boolean ok = overpassProvider.addInKmlFolder(mKmlDocument.mKmlRoot, oUrl); if (ok) { Drawable defaultMarker = ResourcesCompat.getDrawable(getResources(), R.drawable.marker_kml_point, null); Bitmap defaultBitmap = ((BitmapDrawable) defaultMarker).getBitmap(); Style defaultStyle = new Style(defaultBitmap, 0x901010AA, 3.0f, 0x20AA1010); KmlFeature.Styler styler = new MyKmlStyler(defaultStyle); FolderOverlay kmlOverlay = (FolderOverlay) mKmlDocument.mKmlRoot.buildOverlay(map, defaultStyle, styler, mKmlDocument); map.getOverlays().add(kmlOverlay); BoundingBox bb = mKmlDocument.mKmlRoot.getBoundingBox(); if (bb != null) { setInitialViewOn(bb); } } else Toast.makeText(this, \"Error when loading KML\", Toast.LENGTH_SHORT).show(); if (mKmlDocument.mKmlRoot != null) { KmlFolder root = mKmlDocument.mKmlRoot; root.addOverlay(roadOverlay, mKmlDocument); root.addOverlay(roadMarkers, mKmlDocument); mKmlDocument.saveAsKML(mKmlDocument.getDefaultPathForAndroid(\"my_route.kml\")); mKmlDocument.saveAsGeoJSON(mKmlDocument.getDefaultPathForAndroid(\"my_route.json\")); } MapEventsOverlay mapEventsOverlay = new MapEventsOverlay(this); map.getOverlays().add(0, mapEventsOverlay); } }"}
{"time": "2021-01-25 08:48:36.409192", "score": "0.9833", "loss": "0.1105", "code": "class T { @Override protected void onCreate(Bundle savedInstanceState) { KmlFolder root = mKmlDocument.mKmlRoot; root.addOverlay(roadOverlay, mKmlDocument); root.addOverlay(roadMarkers, mKmlDocument); mKmlDocument.saveAsKML(mKmlDocument.getDefaultPathForAndroid(\"my_route.kml\")); mKmlDocument.saveAsGeoJSON(mKmlDocument.getDefaultPathForAndroid(\"my_route.json\")); } }"}
{"time": "2021-01-25 08:48:57.986375", "score": "0.9891", "loss": "0.0554", "code": "class T { @Override protected void onCreate(Bundle savedInstanceState) { KmlFolder root = mKmlDocument.mKmlRoot; root.addOverlay(roadOverlay, mKmlDocument); root.addOverlay(roadMarkers, mKmlDocument); } }"}
{"time": "2021-01-25 08:49:30.131325", "score": "0.9283", "loss": "0.2617", "code": "class T { @Override protected void onCreate(Bundle savedInstanceState) { root.addOverlay(roadMarkers, mKmlDocument); } }"}
{"time": "2021-01-25 08:50:23.949184", "score": "0.9283", "loss": "0.2617", "code": "class T { @Override void onCreate(Bundle savedInstanceState) { root.addOverlay(roadMarkers, mKmlDocument); } }"}

Minimal simplified code:
class T {
@Override           void onCreate(Bundle savedInstanceState{                                                                                     root.addOverlay(roadMarkers, mKmlDocument);                                                                                                                                                                    }
}


