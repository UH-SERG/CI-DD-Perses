
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/yahoo__FEL/src/main/java/it/cnr/isti/hpc/Word2VecCompress_main.java
method_name = main
method_body = public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), "Creates a compressed representation of quantized word2vec vectors", new Parameter[] { new UnflaggedOption("input", JSAP.STRING_PARSER, true, "Input file"), new UnflaggedOption("output", JSAP.STRING_PARSER, false, "Compressed version"), new Switch("check", JSAP.NO_SHORTFLAG, "check", "Check correctness of output") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_filename = jsapResult.getString("input"); String output_filename = jsapResult.getString("output", null); int numWords, vectorSize; float quantizationFactor; List<String> indexToWord; int[] entries; long[] columnAbsSum; ProgressLogger pl = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split("\t"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start("Reading the dictionary"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); indexToWord.add(lines.readLine().trim()); } pl.done(); entries = new int[numWords * vectorSize]; columnAbsSum = new long[vectorSize]; pl.expectedUpdates = numWords; pl.start("Reading the vectors"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(" "); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start("Compressing the vectors"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info("Overall vector bit streams: {} bytes, {} bps", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean("check")) { pl.expectedUpdates = numWords; pl.start("Checking the output"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error("Row {}, Column {}: Expected {}, got {}", i, col, expected, got); System.exit(1); } } } pl.done(); } }
predict, score, loss = main, 0.9969547, 0.0038466079

Trace of simplified code(s):
{"time": "2021-01-20 10:20:24.282516", "n_pass": [1, 1, 1], "score": "0.9974", "loss": "0.0033", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_filename = jsapResult.getString(\"input\"); String output_filename = jsapResult.getString(\"output\", null); int numWords, vectorSize; float quantizationFactor; List<String> indexToWord; int[] entries; long[] columnAbsSum; ProgressLogger pl = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); indexToWord.add(lines.readLine().trim()); } pl.done(); entries = new int[numWords * vectorSize]; columnAbsSum = new long[vectorSize]; pl.expectedUpdates = numWords; pl.start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); pl.expectedUpdates = numWords; pl.start(\"Compressing the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); endpoints.add(obs.writtenBits()); int rowStart = permutation[i] * vectorSize; for (int col = 0; col < vectorSize; ++col) { int entry = entries[rowStart + col]; obs.writeGolomb(Fast.int2nat(entry), golombModuli[col]); } } pl.done(); obs.close(); while (oa.length() % 4 != 0) { oa.write(0); } oa.trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:26.096626", "n_pass": [25, 2, 2], "score": "0.9913", "loss": "0.0118", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_filename = jsapResult.getString(\"input\"); String output_filename = jsapResult.getString(\"output\", null); int numWords, vectorSize; float quantizationFactor; List<String> indexToWord; int[] entries; long[] columnAbsSum; ProgressLogger pl = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); indexToWord.add(lines.readLine().trim()); } pl.done(); entries = new int[numWords * vectorSize]; columnAbsSum = new long[vectorSize]; pl.expectedUpdates = numWords; pl.start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:28.058664", "n_pass": [101, 3, 3], "score": "0.9783", "loss": "0.0308", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_filename = indexToWord; int[] entries; long[] columnAbsSum; ProgressLogger pl = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); indexToWord.add(lines.readLine().trim()); } pl.done(); entries = new int[numWords * vectorSize]; columnAbsSum = new long[vectorSize]; pl.expectedUpdates = numWords; pl.start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:29.973311", "n_pass": [182, 4, 4], "score": "0.9972", "loss": "0.0036", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_ = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); indexToWord.add(lines.readLine().trim()); } pl.done(); entries = new int[numWords * vectorSize]; columnAbsSum = new long[vectorSize]; pl.expectedUpdates = numWords; pl.start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:31.748124", "n_pass": [190, 5, 5], "score": "0.9774", "loss": "0.0315", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_ = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize]; columnAbsSum = new long[vectorSize]; pl.expectedUpdates = numWords; pl.start(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:33.455429", "n_pass": [192, 6, 6], "score": "0.9588", "loss": "0.0622", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_ = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.out.println(bps); EliasFanoMonotoneLongBigList efEndpoints = new EliasFanoMonotoneLongBigList(endpoints); Word2VecCompress word2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:35.367004", "n_pass": [215, 7, 7], "score": "0.9957", "loss": "0.0054", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; String input_ = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:37.169726", "n_pass": [235, 8, 8], "score": "0.9806", "loss": "0.0238", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines.readLine().split(\"\\t\"); numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:39.685032", "n_pass": [387, 9, 9], "score": "0.997", "loss": "0.0037", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt(header[1]); quantizationFactor = Float.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:41.344722", "n_pass": [389, 10, 10], "score": "0.9827", "loss": "0.0246", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseIntFloat.parseFloat(header[2]); pl.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:43.039974", "n_pass": [390, 11, 11], "score": "0.8155", "loss": "0.3579", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries = new int[numWords * vectorSize];(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:44.765785", "n_pass": [397, 12, 12], "score": "0.9921", "loss": "0.011", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); String[] lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:46.454830", "n_pass": [401, 13, 13], "score": "0.9967", "loss": "0.0043", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), new MinimalPerfectHashFunction.Builder<CharSequence>().keys(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:48.781450", "n_pass": [425, 14, 14], "score": "0.9921", "loss": "0.0106", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } FastByteArrayOutputStream oa = new FastByteArrayOutputStream(); OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:50.529814", "n_pass": [434, 15, 15], "score": "0.9946", "loss": "0.0067", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = new LongArrayList(); trim(); double bps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:52.203174", "n_pass": [437, 16, 16], "score": "0.9312", "loss": "0.114", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array.length / entries.length; logger.info(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:53.852154", "n_pass": [439, 17, 17], "score": "0.9768", "loss": "0.0299", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords; pl.start(\"Checking the output\"); for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:55.594134", "n_pass": [450, 18, 18], "score": "0.9422", "loss": "0.0788", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed representation of quantized word2vec vectors\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:57.380341", "n_pass": [470, 19, 19], "score": "0.9861", "loss": "0.0191", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", JSAP.NO_SHORTFLAG, \"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:20:59.041638", "n_pass": [477, 20, 20], "score": "0.9918", "loss": "0.0109", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult jsapResult = jsap = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:01.821674", "n_pass": [739, 21, 21], "score": "0.9925", "loss": "0.0095", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult = new ProgressLogger(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:03.463321", "n_pass": [740, 22, 22], "score": "0.9895", "loss": "0.0144", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = lines; numWords = Integer.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:05.132852", "n_pass": [748, 23, 23], "score": "0.9816", "loss": "0.0222", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize = Integer.parseInt.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:06.828195", "n_pass": [751, 24, 24], "score": "0.9949", "loss": "0.0064", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize.expectedUpdates = numWords; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:08.469804", "n_pass": [752, 25, 25], "score": "0.9945", "loss": "0.0066", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {lineEntries = lines.readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:10.208729", "n_pass": [770, 26, 26], "score": "0.9352", "loss": "0.1176", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { int m = 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:12.009739", "n_pass": [796, 27, 27], "score": "0.9967", "loss": "0.0045", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if (columnAbsSum[col] > numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:15.395825", "n_pass": [798, 28, 28], "score": "0.99", "loss": "0.0117", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(1.0 - f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:17.483517", "n_pass": [809, 29, 29], "score": "0.9849", "loss": "0.0244", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } ShiftAddXorSignedStringMap dictionaryHash = new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:19.091325", "n_pass": [813, 30, 30], "score": "0.9782", "loss": "0.0382", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord.iterator(), (indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:20.701274", "n_pass": [815, 31, 31], "score": "0.9961", "loss": "0.0047", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0; i < numWords; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:22.335633", "n_pass": [824, 32, 32], "score": "0.9973", "loss": "0.0038", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints = newbps = 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:24.406577", "n_pass": [836, 33, 33], "score": "0.997", "loss": "0.0038", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit streams: {} bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:26.026164", "n_pass": [840, 34, 34], "score": "0.9982", "loss": "0.0025", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bytes, {} bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:27.608880", "n_pass": [841, 35, 35], "score": "0.9957", "loss": "0.0047", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oa.array.length, bps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:29.188471", "n_pass": [843, 36, 36], "score": "0.9944", "loss": "0.0072", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System.outword2vec = new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:30.774323", "n_pass": [845, 37, 37], "score": "0.9976", "loss": "0.003", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize, quantizationFactor, oa.array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:32.389884", "n_pass": [848, 38, 38], "score": "0.9856", "loss": "0.0166", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,array, efEndpoints, dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:33.964920", "n_pass": [849, 39, 39], "score": "0.9487", "loss": "0.0709", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_filename != null) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:35.566397", "n_pass": [852, 40, 40], "score": "0.9981", "loss": "0.0024", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { pl.lightUpdate(); int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:37.240273", "n_pass": [864, 41, 41], "score": "0.9938", "loss": "0.0067", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) { int[] vec = word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:38.812323", "n_pass": [865, 42, 42], "score": "0.9941", "loss": "0.0079", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, Column {}: Expected {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:40.521825", "n_pass": [880, 43, 43], "score": "0.991", "loss": "0.0109", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {},  {}, got {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:42.105823", "n_pass": [881, 44, 44], "score": "0.9808", "loss": "0.0249", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i, col, expected, got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:43.680975", "n_pass": [883, 45, 45], "score": "0.9977", "loss": "0.0027", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAP.STRING_PARSER, false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:45.775530", "n_pass": [904, 46, 46], "score": "0.9783", "loss": "0.0278", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"output\", JSAPfalse, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:49.694164", "n_pass": [1050, 47, 47], "score": "0.9958", "loss": "0.0049", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(false, \"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:53.771498", "n_pass": [1486, 48, 48], "score": "0.9917", "loss": "0.0098", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"Check correctness of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:55.366408", "n_pass": [1492, 49, 49], "score": "0.9945", "loss": "0.0064", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \" of output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:56.943060", "n_pass": [1493, 50, 50], "score": "0.9987", "loss": "0.0017", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult(logger); try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:21:58.533127", "n_pass": [1497, 51, 51], "score": "0.961", "loss": "0.0513", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines = new BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:00.141889", "n_pass": [1502, 52, 52], "score": "0.9648", "loss": "0.0507", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader(input_filename))) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:01.729791", "n_pass": [1505, 53, 53], "score": "0.9985", "loss": "0.0019", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) { String[] header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:03.312752", "n_pass": [1508, 54, 54], "score": "0.988", "loss": "0.02", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = linesInteger.parseInt(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:04.911238", "n_pass": [1511, 55, 55], "score": "0.9363", "loss": "0.0982", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); vectorSize; pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:06.509418", "n_pass": [1514, 56, 56], "score": "0.9892", "loss": "0.0129", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]); pl.start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:08.096832", "n_pass": [1515, 57, 57], "score": "0.9577", "loss": "0.0541", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading the dictionary\"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:09.671747", "n_pass": [1518, 58, 58], "score": "0.9926", "loss": "0.0083", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i = 0; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:11.273976", "n_pass": [1527, 59, 59], "score": "0.9974", "loss": "0.0031", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; i < numWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:12.846023", "n_pass": [1529, 60, 60], "score": "0.958", "loss": "0.0574", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ++i) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:14.415412", "n_pass": [1531, 61, 61], "score": "0.993", "loss": "0.0076", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); entries =(\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:16.000007", "n_pass": [1536, 62, 62], "score": "0.9967", "loss": "0.0044", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Reading the vectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:17.575429", "n_pass": [1538, 63, 63], "score": "0.991", "loss": "0.0104", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i = 0; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:19.150766", "n_pass": [1543, 64, 64], "score": "0.9966", "loss": "0.004", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; i < numWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:20.716355", "n_pass": [1545, 65, 65], "score": "0.9694", "loss": "0.0359", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ++i) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:22.286674", "n_pass": [1547, 66, 66], "score": "0.994", "loss": "0.0074", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(\" \"); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:23.859016", "n_pass": [1551, 67, 67], "score": "0.9981", "loss": "0.0027", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col = 0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:25.430679", "n_pass": [1555, 68, 68], "score": "0.9974", "loss": "0.003", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0; col < vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:27.006183", "n_pass": [1557, 69, 69], "score": "0.9866", "loss": "0.0189", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize; ++col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:28.582003", "n_pass": [1559, 70, 70], "score": "0.9942", "loss": "0.0067", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[i * vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:30.202183", "n_pass": [1568, 71, 71], "score": "0.9933", "loss": "0.0084", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[ vectorSize + col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:31.776665", "n_pass": [1569, 72, 72], "score": "0.9933", "loss": "0.0085", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = entry; columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:33.352749", "n_pass": [1572, 73, 73], "score": "0.9645", "loss": "0.0449", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) + 1; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:34.974907", "n_pass": [1579, 74, 74], "score": "0.9898", "loss": "0.0144", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); } int[] golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:36.580314", "n_pass": [1585, 75, 75], "score": "0.9989", "loss": "0.0013", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col < vectorSize; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:38.190347", "n_pass": [1595, 76, 76], "score": "0.9941", "loss": "0.0079", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { 0; if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:39.763403", "n_pass": [1599, 77, 77], "score": "0.9741", "loss": "0.036", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) Math.ceil(Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:41.407324", "n_pass": [1613, 78, 78], "score": "0.9911", "loss": "0.0106", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2.0 - f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:42.967403", "n_pass": [1616, 79, 79], "score": "0.9604", "loss": "0.0485", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2- f) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:44.526274", "n_pass": [1617, 80, 80], "score": "0.9936", "loss": "0.0074", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] = m; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:46.130728", "n_pass": [1625, 81, 81], "score": "0.9799", "loss": "0.0238", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; } new ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:47.719750", "n_pass": [1627, 82, 82], "score": "0.9906", "loss": "0.012", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord(indexToWord).transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:49.281810", "n_pass": [1629, 83, 83], "score": "0.9985", "loss": "0.0018", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build()); int[] permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:50.862277", "n_pass": [1636, 84, 84], "score": "0.9958", "loss": "0.005", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = dictionaryHash.get(indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:52.488701", "n_pass": [1650, 85, 85], "score": "0.9897", "loss": "0.0136", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue(); permutation[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:54.067367", "n_pass": [1655, 86, 86], "score": "0.9896", "loss": "0.0124", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream obs = new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:56.047254", "n_pass": [1660, 87, 87], "score": "0.9521", "loss": "0.0791", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(oa, 0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:57.609156", "n_pass": [1663, 88, 88], "score": "0.9876", "loss": "0.0171", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0); final LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:22:59.153805", "n_pass": [1665, 89, 89], "score": "0.975", "loss": "0.033", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8.0 * oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:00.707734", "n_pass": [1668, 90, 90], "score": "0.9921", "loss": "0.0088", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall vector bit bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:02.544649", "n_pass": [1672, 91, 91], "score": "0.9959", "loss": "0.0059", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps); System. new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:04.112948", "n_pass": [1676, 92, 92], "score": "0.9902", "loss": "0.0128", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps); new Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:05.647527", "n_pass": [1677, 93, 93], "score": "0.9711", "loss": "0.0334", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords, vectorSize,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:07.225745", "n_pass": [1680, 94, 94], "score": "0.9286", "loss": "0.1037", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,dictionaryHash, golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:08.779606", "n_pass": [1681, 95, 95], "score": "0.9972", "loss": "0.0034", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) { BinIO.storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:10.338580", "n_pass": [1686, 96, 96], "score": "0.9897", "loss": "0.0155", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec, output_filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:11.915603", "n_pass": [1689, 97, 97], "score": "0.9936", "loss": "0.008", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if (jsapResult.getBoolean(\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:13.468691", "n_pass": [1693, 98, 98], "score": "0.9906", "loss": "0.0132", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdates = numWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:15.022525", "n_pass": [1698, 99, 99], "score": "0.996", "loss": "0.0054", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i < numWords; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:16.606576", "n_pass": [1705, 100, 100], "score": "0.996", "loss": "0.0061", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) {  word2vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:18.158733", "n_pass": [1709, 101, 101], "score": "0.9715", "loss": "0.0421", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { vec.getInt(indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:19.690268", "n_pass": [1710, 102, 102], "score": "0.983", "loss": "0.0233", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col < vectorSize; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:21.274562", "n_pass": [1719, 103, 103], "score": "0.995", "loss": "0.0056", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * vectorSize + col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:22.868647", "n_pass": [1725, 104, 104], "score": "0.9792", "loss": "0.0265", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if (expected != got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:24.433197", "n_pass": [1731, 105, 105], "score": "0.9828", "loss": "0.0214", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}, {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:25.974400", "n_pass": [1735, 106, 106], "score": "0.9955", "loss": "0.0053", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:27.563654", "n_pass": [1745, 107, 107], "score": "0.9872", "loss": "0.016", "code": " void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:29.507684", "n_pass": [1750, 108, 108], "score": "0.9591", "loss": "0.0713", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2VecCompress.class.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:31.047204", "n_pass": [1756, 109, 109], "score": "0.9965", "loss": "0.0054", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates a compressed\", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:32.605991", "n_pass": [1760, 110, 110], "score": "0.9983", "loss": "0.0028", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\", JSAP.STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:34.146026", "n_pass": [1767, 111, 111], "score": "0.9582", "loss": "0.0688", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_PARSER, true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:35.714405", "n_pass": [1769, 112, 112], "score": "0.9802", "loss": "0.0282", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); JSAPResult; try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:37.276887", "n_pass": [1783, 113, 113], "score": "0.9662", "loss": "0.0502", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header = lines(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:38.852571", "n_pass": [1793, 114, 114], "score": "0.9977", "loss": "0.0031", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (int col0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:40.486407", "n_pass": [1824, 115, 115], "score": "0.9159", "loss": "0.1419", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0; col ; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:42.172093", "n_pass": [1856, 116, 116], "score": "0.9782", "loss": "0.0324", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(word2vec,filename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:44.500862", "n_pass": [1929, 117, 117], "score": "0.9633", "loss": "0.0519", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) { pl.expectedUpdatesnumWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:46.088873", "n_pass": [1936, 118, 118], "score": "0.9936", "loss": "0.0079", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) { numWords;  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:47.669092", "n_pass": [1937, 119, 119], "score": "0.9823", "loss": "0.0256", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0; i ; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:49.219063", "n_pass": [1942, 120, 120], "score": "0.9765", "loss": "0.0371", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0; col ; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:50.803165", "n_pass": [1953, 121, 121], "score": "0.9655", "loss": "0.0505", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) {  header (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:23:53.000394", "n_pass": [2016, 122, 122], "score": "0.9956", "loss": "0.0065", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), new Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:23.952312", "n_pass": [2662, 123, 123], "score": "0.9977", "loss": "0.003", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"),  Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:25.486613", "n_pass": [2663, 124, 124], "score": "0.9455", "loss": "0.0985", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"check\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:27.033234", "n_pass": [2667, 125, 125], "score": "0.9788", "loss": "0.0344", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\", \"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:28.564821", "n_pass": [2670, 126, 126], "score": "0.9936", "loss": "0.0096", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"output\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:30.094344", "n_pass": [2672, 127, 127], "score": "0.9699", "loss": "0.0428", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\") }); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:31.629242", "n_pass": [2675, 128, 128], "score": "0.8767", "loss": "0.2011", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")}); try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:33.190065", "n_pass": [2679, 129, 129], "score": "0.9858", "loss": "0.0191", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try (final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:34.719652", "n_pass": [2681, 130, 130], "score": "0.9654", "loss": "0.0477", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(final BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:36.239919", "n_pass": [2683, 131, 131], "score": "0.9821", "loss": "0.0251", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try( BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:37.755409", "n_pass": [2684, 132, 132], "score": "0.9906", "loss": "0.012", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines =BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:39.279658", "n_pass": [2688, 133, 133], "score": "0.9971", "loss": "0.004", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=BufferedReader(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:40.795610", "n_pass": [2690, 134, 134], "score": "0.9424", "loss": "0.0883", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(new FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:42.323381", "n_pass": [2692, 135, 135], "score": "0.9272", "loss": "0.1883", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=( FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:43.834683", "n_pass": [2693, 136, 136], "score": "0.9719", "loss": "0.0402", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())) { (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:45.376296", "n_pass": [2699, 137, 137], "score": "0.9904", "loss": "0.0139", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){ (header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:46.931798", "n_pass": [2701, 138, 138], "score": "0.9618", "loss": "0.0595", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"Reading \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:48.479633", "n_pass": [2712, 139, 139], "score": "0.898", "loss": "0.1797", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\" \"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:50.008819", "n_pass": [2713, 140, 140], "score": "0.9853", "loss": "0.0198", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\"); indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:51.534002", "n_pass": [2717, 141, 141], "score": "0.9791", "loss": "0.0358", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord = new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:53.053939", "n_pass": [2719, 142, 142], "score": "0.99", "loss": "0.0141", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord= new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:54.569356", "n_pass": [2721, 143, 143], "score": "0.9757", "loss": "0.0382", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>(); for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:56.113359", "n_pass": [2730, 144, 144], "score": "0.9847", "loss": "0.0264", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for (int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:57.629556", "n_pass": [2732, 145, 145], "score": "0.9971", "loss": "0.004", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(int i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:24:59.176218", "n_pass": [2734, 146, 146], "score": "0.9566", "loss": "0.0719", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for( i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:00.690747", "n_pass": [2735, 147, 147], "score": "0.9895", "loss": "0.0144", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(i ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:02.245287", "n_pass": [2736, 148, 148], "score": "0.9976", "loss": "0.0033", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for( ; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:03.763572", "n_pass": [2737, 149, 149], "score": "0.9861", "loss": "0.023", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(; inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:05.315644", "n_pass": [2739, 150, 150], "score": "0.9881", "loss": "0.0163", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;inumWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:06.826473", "n_pass": [2740, 151, 151], "score": "0.9626", "loss": "0.0699", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;numWords; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:08.339260", "n_pass": [2741, 152, 152], "score": "0.99", "loss": "0.0136", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;; ) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:09.853985", "n_pass": [2743, 153, 153], "score": "0.9803", "loss": "0.0294", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;) {} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:11.370867", "n_pass": [2745, 154, 154], "score": "0.9838", "loss": "0.0216", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){} pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:12.902043", "n_pass": [2748, 155, 155], "score": "0.9789", "loss": "0.0288", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl.done(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:14.413739", "n_pass": [2750, 156, 156], "score": "0.9683", "loss": "0.044", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pldone(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:15.919529", "n_pass": [2751, 157, 157], "score": "0.8657", "loss": "0.2571", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl(); (\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:17.448875", "n_pass": [2755, 158, 158], "score": "0.9955", "loss": "0.0075", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"Readingvectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:18.977331", "n_pass": [2758, 159, 159], "score": "0.9814", "loss": "0.0239", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"vectors\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:20.484993", "n_pass": [2759, 160, 160], "score": "0.9198", "loss": "0.1686", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\"); for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:22.001798", "n_pass": [2763, 161, 161], "score": "0.9786", "loss": "0.0309", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for (int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:23.511784", "n_pass": [2765, 162, 162], "score": "0.9696", "loss": "0.0527", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(int i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:25.069306", "n_pass": [2767, 163, 163], "score": "0.9878", "loss": "0.0176", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for( i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:26.575486", "n_pass": [2768, 164, 164], "score": "0.9848", "loss": "0.0199", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(i ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:28.115065", "n_pass": [2769, 165, 165], "score": "0.9682", "loss": "0.0481", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for( ; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:29.629473", "n_pass": [2770, 166, 166], "score": "0.977", "loss": "0.0319", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(; inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:31.147149", "n_pass": [2772, 167, 167], "score": "0.6559", "loss": "0.7855", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;inumWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:32.662744", "n_pass": [2773, 168, 168], "score": "0.8618", "loss": "0.2546", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;numWords; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:34.169761", "n_pass": [2774, 169, 169], "score": "0.9612", "loss": "0.0658", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine().split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:35.716317", "n_pass": [2778, 170, 170], "score": "0.971", "loss": "0.0467", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine.split(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:37.219697", "n_pass": [2779, 171, 171], "score": "0.9715", "loss": "0.0462", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine(); for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:38.724043", "n_pass": [2780, 172, 172], "score": "0.9296", "loss": "0.1439", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0;  vectorSize;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:40.264561", "n_pass": [2785, 173, 173], "score": "0.9941", "loss": "0.0081", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { int entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:41.814961", "n_pass": [2789, 174, 174], "score": "0.9547", "loss": "0.0748", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = Integer.parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:43.322661", "n_pass": [2792, 175, 175], "score": "0.9957", "loss": "0.0063", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col] += Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:44.895190", "n_pass": [2804, 176, 176], "score": "0.9882", "loss": "0.0175", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= Fast.int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:46.414965", "n_pass": [2806, 177, 177], "score": "0.962", "loss": "0.0625", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= int2nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:47.916119", "n_pass": [2807, 178, 178], "score": "0.929", "loss": "0.1227", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl.done(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:49.472553", "n_pass": [2814, 179, 179], "score": "0.9802", "loss": "0.0303", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl(); }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:50.983905", "n_pass": [2815, 180, 180], "score": "0.9948", "loss": "0.0085", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (int col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:52.532902", "n_pass": [2826, 181, 181], "score": "0.9883", "loss": "0.017", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; ++col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:54.056135", "n_pass": [2831, 182, 182], "score": "0.9843", "loss": "0.0245", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { double f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:55.602617", "n_pass": [2839, 183, 183], "score": "0.9863", "loss": "0.0242", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math.log(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:57.591099", "n_pass": [2855, 184, 184], "score": "0.7967", "loss": "0.3967", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) / -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:25:59.102260", "n_pass": [2858, 185, 185], "score": "0.9659", "loss": "0.0557", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) -Math.log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:00.600535", "n_pass": [2859, 186, 186], "score": "0.9788", "loss": "0.03", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(indexToWord.transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:02.505453", "n_pass": [2870, 187, 187], "score": "0.9935", "loss": "0.0101", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(TransformationStrategies.utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:04.003833", "n_pass": [2872, 188, 188], "score": "0.9763", "loss": "0.0366", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build());  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:05.537829", "n_pass": [2877, 189, 189], "score": "0.8985", "loss": "0.1559", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);  permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:07.042345", "n_pass": [2879, 190, 190], "score": "0.9517", "loss": "0.0904", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;; ++i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:08.623668", "n_pass": [2892, 191, 191], "score": "0.9511", "loss": "0.076", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;+i) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:10.129904", "n_pass": [2893, 192, 192], "score": "0.9738", "loss": "0.0361", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { int newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:11.632688", "n_pass": [2896, 193, 193], "score": "0.9784", "loss": "0.0332", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos = (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:13.139753", "n_pass": [2898, 194, 194], "score": "0.9925", "loss": "0.0128", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord.get(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:14.647579", "n_pass": [2900, 195, 195], "score": "0.9897", "loss": "0.0156", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue()[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:16.170573", "n_pass": [2904, 196, 196], "score": "0.8041", "loss": "0.3615", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= new OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:17.704691", "n_pass": [2912, 197, 197], "score": "0.985", "loss": "0.0213", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList endpoints= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:19.215285", "n_pass": [2916, 198, 198], "score": "0.6483", "loss": "0.8766", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList= 8* oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:21.088228", "n_pass": [2918, 199, 199], "score": "0.8961", "loss": "0.2188", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa.array(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:22.587240", "n_pass": [2920, 200, 200], "score": "0.995", "loss": "0.0092", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"Overall  bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:24.077034", "n_pass": [2922, 201, 201], "score": "0.9711", "loss": "0.056", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\" bps\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:25.562882", "n_pass": [2923, 202, 202], "score": "0.9637", "loss": "0.0642", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\", oabps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:27.066901", "n_pass": [2925, 203, 203], "score": "0.9889", "loss": "0.0198", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word2VecCompress(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:28.568578", "n_pass": [2928, 204, 204], "score": "0.9815", "loss": "0.0301", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords,golombModuli); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:30.074862", "n_pass": [2930, 205, 205], "score": "0.9597", "loss": "0.0692", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (int i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:31.660709", "n_pass": [2949, 206, 206], "score": "0.9678", "loss": "0.0504", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; ++i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:33.207795", "n_pass": [2954, 207, 207], "score": "0.9834", "loss": "0.0306", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (indexToWord.get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:34.713549", "n_pass": [2958, 208, 208], "score": "0.9454", "loss": "0.105", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (int col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:36.231183", "n_pass": [2964, 209, 209], "score": "0.9865", "loss": "0.0242", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; ++col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:37.738798", "n_pass": [2969, 210, 210], "score": "0.9642", "loss": "0.0626", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { int expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:39.236407", "n_pass": [2972, 211, 211], "score": "0.9877", "loss": "0.0205", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; int got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:40.762328", "n_pass": [2980, 212, 212], "score": "0.9817", "loss": "0.0321", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { logger.error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:42.334537", "n_pass": [2991, 213, 213], "score": "0.9807", "loss": "0.0298", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row {}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:43.826600", "n_pass": [2994, 214, 214], "score": "0.6603", "loss": "0.7605", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", i,got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:45.317166", "n_pass": [2997, 215, 215], "score": "0.9203", "loss": "0.1634", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); System.exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:46.863961", "n_pass": [3000, 216, 216], "score": "0.9471", "loss": "0.1036", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } pl.done(); } }"}
{"time": "2021-01-20 10:26:48.382252", "n_pass": [3007, 217, 217], "score": "0.8878", "loss": "0.2188", "code": " void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:26:49.907079", "n_pass": [3012, 218, 218], "score": "0.9418", "loss": "0.098", "code": "void main(String[] args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:26:52.216700", "n_pass": [3020, 219, 219], "score": "0.9726", "loss": "0.0489", "code": "void main(String[]args)  { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:26:53.728958", "n_pass": [3023, 220, 220], "score": "0.9704", "loss": "0.0626", "code": "void main(String[]args) { SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:26:55.212862", "n_pass": [3024, 221, 221], "score": "0.9173", "loss": "0.1627", "code": "void main(String[]args){ SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:26:56.716904", "n_pass": [3026, 222, 222], "score": "0.9593", "loss": "0.0829", "code": "void main(String[]args){SimpleJSAP jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:26:58.204657", "n_pass": [3027, 223, 223], "score": "0.9739", "loss": "0.0452", "code": "void main(String[]args){ jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:26:59.704582", "n_pass": [3028, 224, 224], "score": "0.7492", "loss": "0.4658", "code": "void main(String[]args){jsap = new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:01.209346", "n_pass": [3030, 225, 225], "score": "0.9451", "loss": "0.0948", "code": "void main(String[]args){jsap= new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:02.690719", "n_pass": [3032, 226, 226], "score": "0.8083", "loss": "0.3104", "code": "void main(String[]args){jsap=new SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:04.170375", "n_pass": [3033, 227, 227], "score": "0.8958", "loss": "0.2009", "code": "void main(String[]args){jsap= SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:05.682468", "n_pass": [3034, 228, 228], "score": "0.9865", "loss": "0.0221", "code": "void main(String[]args){jsap=SimpleJSAP(Word2.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:07.170286", "n_pass": [3038, 229, 229], "score": "0.8134", "loss": "0.3306", "code": "void main(String[]args){jsap=SimpleJSAP(Word.getName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:08.654756", "n_pass": [3039, 230, 230], "score": "0.9811", "loss": "0.0341", "code": "void main(String[]args){jsap=SimpleJSAP(WordgetName(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:10.138577", "n_pass": [3040, 231, 231], "score": "0.9231", "loss": "0.1374", "code": "void main(String[]args){jsap=SimpleJSAP(Word(), \"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:11.625289", "n_pass": [3044, 232, 232], "score": "0.987", "loss": "0.022", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"Creates \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:13.124304", "n_pass": [3046, 233, 233], "score": "0.9819", "loss": "0.0276", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\" \", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:14.601119", "n_pass": [3047, 234, 234], "score": "0.9452", "loss": "0.1017", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\", new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:16.086535", "n_pass": [3050, 235, 235], "score": "0.9341", "loss": "0.1249", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[] { new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:17.591752", "n_pass": [3056, 236, 236], "score": "0.9558", "loss": "0.0766", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{ new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:19.072640", "n_pass": [3058, 237, 237], "score": "0.9478", "loss": "0.0838", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{new UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:20.546271", "n_pass": [3059, 238, 238], "score": "0.9816", "loss": "0.0299", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{ UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:22.048158", "n_pass": [3060, 239, 239], "score": "0.9679", "loss": "0.0489", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"input\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:23.536633", "n_pass": [3064, 240, 240], "score": "0.9683", "loss": "0.0581", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\".STRING_true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:25.015748", "n_pass": [3067, 241, 241], "score": "0.6209", "loss": "0.8007", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._true, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:26.494415", "n_pass": [3069, 242, 242], "score": "0.8615", "loss": "0.2442", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._, \"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:28.001338", "n_pass": [3071, 243, 243], "score": "0.8782", "loss": "0.1921", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"Input file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:29.503710", "n_pass": [3073, 244, 244], "score": "0.9847", "loss": "0.0233", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\" file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:30.993982", "n_pass": [3074, 245, 245], "score": "0.971", "loss": "0.0484", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"file\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:32.477046", "n_pass": [3075, 246, 246], "score": "0.9637", "loss": "0.0615", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"), new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:33.982303", "n_pass": [3079, 247, 247], "score": "0.9574", "loss": "0.0713", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),new UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:35.495280", "n_pass": [3080, 248, 248], "score": "0.9749", "loss": "0.0436", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"), UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:37.006849", "n_pass": [3081, 249, 249], "score": "0.9638", "loss": "0.0692", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),UnflaggedOption(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:38.484592", "n_pass": [3082, 250, 250], "score": "0.9886", "loss": "0.0175", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"Compressed version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:39.982119", "n_pass": [3085, 251, 251], "score": "0.9593", "loss": "0.0708", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\" version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:41.462750", "n_pass": [3086, 252, 252], "score": "0.9945", "loss": "0.0089", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"version\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:42.938194", "n_pass": [3087, 253, 253], "score": "0.9731", "loss": "0.0475", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"), Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:44.420173", "n_pass": [3091, 254, 254], "score": "0.939", "loss": "0.1106", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } } pl; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:46.196860", "n_pass": [3187, 255, 255], "score": "0.9947", "loss": "0.0086", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }; }  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:47.671138", "n_pass": [3188, 256, 256], "score": "0.9824", "loss": "0.0288", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()).build);permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:49.781354", "n_pass": [3240, 257, 257], "score": "0.7688", "loss": "0.4522", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { newPos (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:51.324063", "n_pass": [3256, 258, 258], "score": "0.9573", "loss": "0.0762", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i)).intValue[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:52.809634", "n_pass": [3260, 259, 259], "score": "0.9933", "loss": "0.0112", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; } OutputBitStream= OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:54.324153", "n_pass": [3267, 260, 260], "score": "0.989", "loss": "0.019", "code": "void main(String[]args){jsap=SimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; } OutputBitStreamOutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:57.484887", "n_pass": [3358, 261, 261], "score": "0.9795", "loss": "0.0344", "code": "void main(String[]args){jsapSimpleJSAP(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; } OutputBitStreamOutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:27:58.957166", "n_pass": [3359, 262, 262], "score": "0.9502", "loss": "0.0859", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; } OutputBitStreamOutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:28:01.974395", "n_pass": [3559, 263, 263], "score": "0.9459", "loss": "0.0918", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_) {storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:28:53.764687", "n_pass": [4213, 264, 264], "score": "0.9283", "loss": "0.1428", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){storeObject(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:28:55.253353", "n_pass": [4215, 265, 265], "score": "0.9767", "loss": "0.042", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(wordfilename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:28:56.738722", "n_pass": [4217, 266, 266], "score": "0.9718", "loss": "0.0559", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename); } if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:28:58.254287", "n_pass": [4221, 267, 267], "score": "0.9943", "loss": "0.0093", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);} if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:28:59.745941", "n_pass": [4223, 268, 268], "score": "0.9418", "loss": "0.1128", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if ((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:01.235135", "n_pass": [4225, 269, 269], "score": "0.917", "loss": "0.1498", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"check\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:02.729670", "n_pass": [4229, 270, 270], "score": "0.9555", "loss": "0.0869", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")) {  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:04.224121", "n_pass": [4233, 271, 271], "score": "0.9306", "loss": "0.1219", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){  for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:05.725538", "n_pass": [4235, 272, 272], "score": "0.8677", "loss": "0.3239", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){ for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:07.205925", "n_pass": [4236, 273, 273], "score": "0.9857", "loss": "0.0268", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for (i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:08.721791", "n_pass": [4238, 274, 274], "score": "0.8905", "loss": "0.239", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i = 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:10.216710", "n_pass": [4241, 275, 275], "score": "0.926", "loss": "0.1407", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i= 0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:11.702071", "n_pass": [4243, 276, 276], "score": "0.9559", "loss": "0.0856", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;; i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:13.216359", "n_pass": [4247, 277, 277], "score": "0.9866", "loss": "0.0218", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;i) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:14.717286", "n_pass": [4248, 278, 278], "score": "0.8999", "loss": "0.206", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;) { (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:16.201965", "n_pass": [4250, 279, 279], "score": "0.9647", "loss": "0.068", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){ (get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:17.710289", "n_pass": [4252, 280, 280], "score": "0.8671", "loss": "0.2854", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){(get(i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:19.217613", "n_pass": [4254, 281, 281], "score": "0.9506", "loss": "0.0903", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i)); for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:20.746726", "n_pass": [4260, 282, 282], "score": "0.9711", "loss": "0.0531", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for (col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:22.229691", "n_pass": [4262, 283, 283], "score": "0.8513", "loss": "0.2856", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col = 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:23.718956", "n_pass": [4265, 284, 284], "score": "0.9843", "loss": "0.0273", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col= 0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:25.217624", "n_pass": [4267, 285, 285], "score": "0.9763", "loss": "0.0418", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;; col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:26.730283", "n_pass": [4271, 286, 286], "score": "0.7561", "loss": "0.5245", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;col) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:28.211877", "n_pass": [4272, 287, 287], "score": "0.9571", "loss": "0.0767", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;) { expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:29.693713", "n_pass": [4274, 288, 288], "score": "0.95", "loss": "0.1024", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){ expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:31.202190", "n_pass": [4276, 289, 289], "score": "0.9413", "loss": "0.1051", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected = entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:32.706279", "n_pass": [4278, 290, 290], "score": "0.8792", "loss": "0.2495", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected= entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:34.189177", "n_pass": [4280, 291, 291], "score": "0.9542", "loss": "0.0914", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i * col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:35.706643", "n_pass": [4284, 292, 292], "score": "0.963", "loss": "0.0728", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i* col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:37.224461", "n_pass": [4286, 293, 293], "score": "0.9806", "loss": "0.033", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col]; got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:38.738868", "n_pass": [4290, 294, 294], "score": "0.9145", "loss": "0.1954", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got = vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:40.236764", "n_pass": [4292, 295, 295], "score": "0.9652", "loss": "0.0614", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got= vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:41.718652", "n_pass": [4294, 296, 296], "score": "0.8618", "loss": "0.3323", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col]; if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:43.224418", "n_pass": [4300, 297, 297], "score": "0.9468", "loss": "0.1046", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if ( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:44.727025", "n_pass": [4302, 298, 298], "score": "0.988", "loss": "0.0192", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if( got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:46.212879", "n_pass": [4304, 299, 299], "score": "0.9928", "loss": "0.0121", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got) { error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:47.721652", "n_pass": [4307, 300, 300], "score": "0.9244", "loss": "0.14", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){ error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:49.206512", "n_pass": [4309, 301, 301], "score": "0.9447", "loss": "0.1101", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"Row}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:50.697689", "n_pass": [4313, 302, 302], "score": "0.9494", "loss": "0.1091", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"}\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:52.209742", "n_pass": [4314, 303, 303], "score": "0.993", "loss": "0.0133", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\", got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:53.693026", "n_pass": [4317, 304, 304], "score": "0.9874", "loss": "0.0211", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got); exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:55.213809", "n_pass": [4321, 305, 305], "score": "0.9663", "loss": "0.0637", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);exit(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:56.688711", "n_pass": [4322, 306, 306], "score": "0.8948", "loss": "0.2037", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1); } } } done(); } }"}
{"time": "2021-01-20 10:29:58.188133", "n_pass": [4327, 307, 307], "score": "0.715", "loss": "0.5764", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);} } } done(); } }"}
{"time": "2021-01-20 10:29:59.668652", "n_pass": [4329, 308, 308], "score": "0.8794", "loss": "0.2203", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}} } done(); } }"}
{"time": "2021-01-20 10:30:01.149726", "n_pass": [4331, 309, 309], "score": "0.9788", "loss": "0.0412", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}} done(); } }"}
{"time": "2021-01-20 10:30:02.634127", "n_pass": [4333, 310, 310], "score": "0.9456", "loss": "0.107", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done(); } }"}
{"time": "2021-01-20 10:30:04.139788", "n_pass": [4338, 311, 311], "score": "0.9814", "loss": "0.0341", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();} }"}
{"time": "2021-01-20 10:30:05.618035", "n_pass": [4340, 312, 312], "score": "0.9066", "loss": "0.1663", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;; ) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:08.163907", "n_pass": [4450, 313, 313], "score": "0.9763", "loss": "0.0405", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;) {readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:09.641087", "n_pass": [4452, 314, 314], "score": "0.9454", "loss": "0.1065", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){readLine; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:11.135284", "n_pass": [4454, 315, 315], "score": "0.9351", "loss": "0.1266", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){; for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:12.617146", "n_pass": [4455, 316, 316], "score": "0.9487", "loss": "0.1045", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){ for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:14.137361", "n_pass": [4456, 317, 317], "score": "0.9365", "loss": "0.129", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for (0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:15.633286", "n_pass": [4458, 318, 318], "score": "0.9901", "loss": "0.018", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(0; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:17.142992", "n_pass": [4460, 319, 319], "score": "0.8662", "loss": "0.2784", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(; ;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:18.637488", "n_pass": [4462, 320, 320], "score": "0.8761", "loss": "0.2366", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;col) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:20.114750", "n_pass": [4464, 321, 321], "score": "0.8768", "loss": "0.2567", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;) { entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:21.624251", "n_pass": [4466, 322, 322], "score": "0.9645", "loss": "0.0646", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){ entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:23.129080", "n_pass": [4468, 323, 323], "score": "0.9383", "loss": "0.1306", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry = parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:24.603842", "n_pass": [4470, 324, 324], "score": "0.9577", "loss": "0.084", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry= parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:26.079157", "n_pass": [4472, 325, 325], "score": "0.9827", "loss": "0.0309", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=parseInt(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:27.546081", "n_pass": [4473, 326, 326], "score": "0.9889", "loss": "0.0223", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]); entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:29.045352", "n_pass": [4481, 327, 327], "score": "0.8829", "loss": "0.2406", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[+ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:30.547413", "n_pass": [4484, 328, 328], "score": "0.9625", "loss": "0.0683", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[ col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:32.030673", "n_pass": [4485, 329, 329], "score": "0.9353", "loss": "0.12", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col] = columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:33.506184", "n_pass": [4488, 330, 330], "score": "0.9734", "loss": "0.0526", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]= columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:34.976295", "n_pass": [4490, 331, 331], "score": "0.9224", "loss": "0.1719", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]= nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:36.463754", "n_pass": [4496, 332, 332], "score": "0.9844", "loss": "0.0277", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=nat(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:37.932168", "n_pass": [4497, 333, 333], "score": "0.9734", "loss": "0.0548", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry) ; } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:39.412895", "n_pass": [4501, 334, 334], "score": "0.7743", "loss": "0.4644", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry); } }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:40.891384", "n_pass": [4503, 335, 335], "score": "0.9201", "loss": "0.1531", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);} }}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:42.392120", "n_pass": [4505, 336, 336], "score": "0.9626", "loss": "0.0702", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}  golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:43.894049", "n_pass": [4508, 337, 337], "score": "0.9683", "loss": "0.0593", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}} golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:45.363623", "n_pass": [4509, 338, 338], "score": "0.9359", "loss": "0.1269", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli = new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:46.834293", "n_pass": [4511, 339, 339], "score": "0.8598", "loss": "0.2799", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli= new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:48.350816", "n_pass": [4513, 340, 340], "score": "0.8196", "loss": "0.3947", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=new int[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:49.834555", "n_pass": [4515, 341, 341], "score": "0.9826", "loss": "0.0264", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize]; for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:51.320855", "n_pass": [4521, 342, 342], "score": "0.9496", "loss": "0.096", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for (col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:52.792591", "n_pass": [4523, 343, 343], "score": "0.8409", "loss": "0.3324", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col = 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:54.294154", "n_pass": [4526, 344, 344], "score": "0.7838", "loss": "0.4723", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col= 0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:55.813177", "n_pass": [4528, 345, 345], "score": "0.9302", "loss": "0.1223", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;; col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:57.292098", "n_pass": [4532, 346, 346], "score": "0.9428", "loss": "0.1015", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;col) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:30:58.789872", "n_pass": [4533, 347, 347], "score": "0.847", "loss": "0.288", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;) { if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:00.261216", "n_pass": [4535, 348, 348], "score": "0.9862", "loss": "0.0216", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){ if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:01.740390", "n_pass": [4537, 349, 349], "score": "0.9479", "loss": "0.1052", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if ( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:03.231697", "n_pass": [4539, 350, 350], "score": "0.9827", "loss": "0.0311", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if( numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:04.717519", "n_pass": [4541, 351, 351], "score": "0.9771", "loss": "0.0387", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords) { f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:06.213942", "n_pass": [4544, 352, 352], "score": "0.9721", "loss": "0.0462", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){ f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:07.701116", "n_pass": [4546, 353, 353], "score": "0.9706", "loss": "0.0478", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f = ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:09.193155", "n_pass": [4548, 354, 354], "score": "0.8982", "loss": "0.1831", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f= ((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:11.090276", "n_pass": [4550, 355, 355], "score": "0.9416", "loss": "0.1199", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double) numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:12.573799", "n_pass": [4555, 356, 356], "score": "0.8711", "loss": "0.2497", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords) / columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:14.049143", "n_pass": [4558, 357, 357], "score": "0.9733", "loss": "0.0511", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/ columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:15.539573", "n_pass": [4560, 358, 358], "score": "0.9933", "loss": "0.0099", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col]; m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:17.042635", "n_pass": [4566, 359, 359], "score": "0.9061", "loss": "0.1609", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m = (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:18.543346", "n_pass": [4568, 360, 360], "score": "0.978", "loss": "0.0382", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m= (int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:20.027001", "n_pass": [4570, 361, 361], "score": "0.9573", "loss": "0.0707", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int) (Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:21.530394", "n_pass": [4574, 362, 362], "score": "0.9902", "loss": "0.0164", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)(Math(2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:22.992436", "n_pass": [4576, 363, 363], "score": "0.7397", "loss": "0.563", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2) .log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:24.480050", "n_pass": [4580, 364, 364], "score": "0.9427", "loss": "0.1043", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log(f)); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:25.966228", "n_pass": [4584, 365, 365], "score": "0.9635", "loss": "0.0633", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log()); } golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:27.460071", "n_pass": [4588, 366, 366], "score": "0.959", "loss": "0.0624", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());} golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:28.942498", "n_pass": [4590, 367, 367], "score": "0.9551", "loss": "0.0774", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col] ; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:30.433542", "n_pass": [4595, 368, 368], "score": "0.9788", "loss": "0.0291", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col]; }ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:31.946575", "n_pass": [4597, 369, 369], "score": "0.794", "loss": "0.4193", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}ShiftAddXorSignedStringMap(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:33.416158", "n_pass": [4599, 370, 370], "score": "0.9455", "loss": "0.0989", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}(transform(utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:34.886026", "n_pass": [4601, 371, 371], "score": "0.9764", "loss": "0.0361", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf16()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:36.355889", "n_pass": [4604, 372, 372], "score": "0.8707", "loss": "0.259", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf6()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:37.851039", "n_pass": [4605, 373, 373], "score": "0.9592", "loss": "0.0693", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation = new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:39.362948", "n_pass": [4612, 374, 374], "score": "0.9529", "loss": "0.0829", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation= new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:40.834293", "n_pass": [4614, 375, 375], "score": "0.8901", "loss": "0.2086", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=new int[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:42.331155", "n_pass": [4616, 376, 376], "score": "0.9311", "loss": "0.1171", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords]; for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:43.812856", "n_pass": [4622, 377, 377], "score": "0.9769", "loss": "0.04", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for (int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:45.310343", "n_pass": [4624, 378, 378], "score": "0.9428", "loss": "0.0874", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(int i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:46.776110", "n_pass": [4626, 379, 379], "score": "0.9752", "loss": "0.0387", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for( i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:48.236602", "n_pass": [4627, 380, 380], "score": "0.8756", "loss": "0.2323", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i = 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:49.701723", "n_pass": [4629, 381, 381], "score": "0.8357", "loss": "0.3258", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i= 0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:51.170169", "n_pass": [4631, 382, 382], "score": "0.9766", "loss": "0.0397", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;) { (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:52.666321", "n_pass": [4636, 383, 383], "score": "0.9422", "loss": "0.1001", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){ (indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:54.135037", "n_pass": [4638, 384, 384], "score": "0.9568", "loss": "0.079", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){(indexToWord(i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:55.602963", "n_pass": [4640, 385, 385], "score": "0.9382", "loss": "0.1046", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos] = i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:57.105893", "n_pass": [4648, 386, 386], "score": "0.9186", "loss": "0.1339", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]= i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:31:58.573114", "n_pass": [4650, 387, 387], "score": "0.9539", "loss": "0.0757", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i; }OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:00.047397", "n_pass": [4653, 388, 388], "score": "0.9587", "loss": "0.0663", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}OutputBitStream(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:01.545929", "n_pass": [4655, 389, 389], "score": "0.7831", "loss": "0.3934", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=  oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:03.036823", "n_pass": [4662, 390, 390], "score": "0.9488", "loss": "0.0806", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList= oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:04.533901", "n_pass": [4663, 391, 391], "score": "0.9539", "loss": "0.0653", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);Word(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:06.050256", "n_pass": [4672, 392, 392], "score": "0.9758", "loss": "0.041", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords); if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:07.551823", "n_pass": [4677, 393, 393], "score": "0.9622", "loss": "0.0578", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if (output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:09.050806", "n_pass": [4679, 394, 394], "score": "0.9757", "loss": "0.0331", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(output_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:10.534297", "n_pass": [4681, 395, 395], "score": "0.6815", "loss": "0.6944", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i=0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:12.090635", "n_pass": [4701, 396, 396], "score": "0.7156", "loss": "0.5852", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i0;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:13.588677", "n_pass": [4702, 397, 397], "score": "0.7589", "loss": "0.4522", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col=0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:15.110732", "n_pass": [4716, 398, 398], "score": "0.8523", "loss": "0.2322", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col0;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:16.567361", "n_pass": [4717, 399, 399], "score": "0.979", "loss": "0.031", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected=entries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:18.082463", "n_pass": [4723, 400, 400], "score": "0.9683", "loss": "0.0532", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expectedentries[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:19.569359", "n_pass": [4724, 401, 401], "score": "0.8411", "loss": "0.3071", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i*col];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:21.049163", "n_pass": [4727, 402, 402], "score": "0.8455", "loss": "0.2767", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[icol];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:22.506757", "n_pass": [4728, 403, 403], "score": "0.9563", "loss": "0.0734", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got=vec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:23.985259", "n_pass": [4732, 404, 404], "score": "0.8979", "loss": "0.1931", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];gotvec[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:25.466470", "n_pass": [4733, 405, 405], "score": "0.8418", "loss": "0.2912", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry=(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:28.137120", "n_pass": [4881, 406, 406], "score": "0.9731", "loss": "0.0423", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli=newint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:29.668928", "n_pass": [4907, 407, 407], "score": "0.8572", "loss": "0.2443", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModulinewint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:31.179206", "n_pass": [4908, 408, 408], "score": "0.8205", "loss": "0.3605", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuliint[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:32.642679", "n_pass": [4909, 409, 409], "score": "0.8664", "loss": "0.2484", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col=0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:34.148101", "n_pass": [4917, 410, 410], "score": "0.8902", "loss": "0.2221", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col0;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:35.612787", "n_pass": [4918, 411, 411], "score": "0.913", "loss": "0.1625", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation=newint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:37.675819", "n_pass": [4973, 412, 412], "score": "0.8206", "loss": "0.4026", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutationnewint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:39.130609", "n_pass": [4974, 413, 413], "score": "0.8733", "loss": "0.274", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutationint[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:40.609500", "n_pass": [4975, 414, 414], "score": "0.934", "loss": "0.1049", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation[numWords];for(i=0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:42.098611", "n_pass": [4983, 415, 415], "score": "0.8188", "loss": "0.4404", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation[numWords];for(i0;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:43.565402", "n_pass": [4984, 416, 416], "score": "0.8157", "loss": "0.4583", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation[numWords];for(i;;){((i))[newPos]=i;}(0);LongArrayList=oa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:45.104466", "n_pass": [5006, 417, 417], "score": "0.8085", "loss": "0.4648", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation[numWords];for(i;;){((i))[newPos]=i;}(0);LongArrayListoa(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:46.560017", "n_pass": [5007, 418, 418], "score": "0.7869", "loss": "0.4607", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation[numWords];for(i;;){((i))[newPos]=i;}(0);LongArrayList(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(i;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:48.161558", "n_pass": [5039, 419, 419], "score": "0.8262", "loss": "0.3596", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation[numWords];for(i;;){((i))[newPos]=i;}(0);LongArrayList(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(;;){((i));for(col;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:49.693708", "n_pass": [5052, 420, 420], "score": "0.855", "loss": "0.3764", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){entry(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation[numWords];for(i;;){((i))[newPos]=i;}(0);LongArrayList(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(;;){((i));for(;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:52.402575", "n_pass": [5209, 421, 421], "score": "0.894", "loss": "0.2201", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(col;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation[numWords];for(i;;){((i))[newPos]=i;}(0);LongArrayList(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(;;){((i));for(;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:53.946253", "n_pass": [5241, 422, 422], "score": "0.8024", "loss": "0.4129", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation[numWords];for(i;;){((i))[newPos]=i;}(0);LongArrayList(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(;;){((i));for(;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}
{"time": "2021-01-20 10:32:56.011975", "n_pass": [5302, 423, 423], "score": "0.7126", "loss": "0.6926", "code": "void main(String[]args){jsap(Word(),\"\",new Parameter[]{UnflaggedOption(\"\"._,\"\"),(\"\"),Switch(\"\",\"\")});try(BufferedReader lines=(FileReader())){(header[0]).start(\"\");indexToWord=new ArrayList<>();for(;;){}pl();(\"\");for(;;){for(;;){(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation[numWords];for(;;){((i))[newPos]=i;}(0);LongArrayList(\"\",bps);(numWords);if(_){(filename);}if((\"\")){for(;;){((i));for(;;){expected[i];got[col];if(got){error(\"\",got);(1);}}}done();}}"}

Minimal simplified code:
void main(String[]args){jsap(Word(),"",new Parameter[]{UnflaggedOption(""._,""),(""),Switch("","")});try(BufferedReader lines=(FileReader())){(header[0]).start("");indexToWord=new ArrayList<>();for(;;){}pl();("");for(;;){for(;;){(lineEntries[col]);entries[col]=columnAbsSum[col]=(entry);}}}golombModuli[vectorSize];for(;;){if(numWords){f=((double)numWords)/columnAbsSum[col];m=(int)((2).log());}golombModuli[col];}((utf()));permutation[numWords];for(;;){((i))[newPos]=i;}(0);LongArrayList("",bps);(numWords);if(_){(filename);}if(("")){for(;;){((i));for(;;){expected[i];got[col];if(got){error("",got);(1);}}}done();}}

