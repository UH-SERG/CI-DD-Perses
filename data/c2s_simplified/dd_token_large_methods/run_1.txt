
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/java/org/apache/catalina/servlets/CGIServlet_run.java
method_name = run
method_body = protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + ": not ready to run."); } if (debug >= 1) { log("runCGI(envp=[" + env + "], command=" + command + ")"); } if ((command.indexOf(File.separator + "." + File.separator) >= 0) || (command.indexOf(File.separator + "..") >= 0) || (command.indexOf(".." + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + "Illegal Character in CGI command " + "path ('.' or '..') detected. Not " + "running CGI [" + command + "]."); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; BufferedOutputStream commandsStdIn = null; Process proc = null; int bufRead = -1; List<String> cmdAndArgs = new ArrayList<>(); if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get("CONTENT_LENGTH"); if (!"".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !("".equals(line))) { if (debug >= 2) { log("runCGI: addHeader(\"" + line + "\")"); } if (line.startsWith("HTTP")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(":") >= 0) { String header = line.substring(0, line.indexOf(":")).trim(); String value = line.substring(line.indexOf(":") + 1).trim(); if (header.equalsIgnoreCase("status")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log("runCGI: bad header line \"" + line + "\""); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log("runCGI: output " + bufRead + " bytes of data"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log("Caught exception " + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log("Exception closing header reader " + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) { log("Exception closing output stream " + ioe); } } if (errReaderThread != null) { try { errReaderThread.join(stderrTimeout); } catch (InterruptedException e) { log("Interupted waiting for stderr reader thread"); } } if (debug > 4) { log("Running finally block"); } if (proc != null) { proc.destroy(); proc = null; } } }
predict, score, loss = run, 0.6998341, 0.94026816

Trace of simplified code(s):
{"time": "2021-01-20 08:56:35.042520", "n_pass": [1, 1, 1], "score": "0.7995", "loss": "1.0555", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \": not ready to run.\"); } if (debug >= 1) { log(\"runCGI(envp=[\" + env + \"], command=\" + command + \")\"); } if ((command.indexOf(File.separator + \".\" + File.separator) >= 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + \"path ('.' or '..') detected. Not \" + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; BufferedOutputStream commandsStdIn = null; Process proc = null; int bufRead = -1; List<String> cmdAndArgs = new ArrayList<>(); if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) { log(\"Exception closing output stream \" + ioe); } } if (errReaderThread != null) { try { errReaderThread.join(stderrTimeout); } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:37.395088", "n_pass": [93, 2, 2], "score": "0.6653", "loss": "1.1496", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if ((command.indexOf(File.separator + \".\" + File.separator) >= 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + \"path ('.' or '..') detected. Not \" + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; BufferedOutputStream commandsStdIn = null; Process proc = null; int bufRead = -1; List<String> cmdAndArgs = new ArrayList<>(); if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) { log(\"Exception closing output stream \" + ioe); } } if (errReaderThread != null) { try { errReaderThread.join(stderrTimeout); } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:39.089126", "n_pass": [99, 3, 3], "score": "0.6101", "loss": "0.9234", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if ((command.indexOf(File.separator + \".\" + File.separator) >= 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + \"path ('.' or '..') detected. Not \" + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) { log(\"Exception closing output stream \" + ioe); } } if (errReaderThread != null) { try { errReaderThread.join(stderrTimeout); } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:41.526217", "n_pass": [121, 4, 4], "score": "0.6643", "loss": "0.938", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if ((command.indexOf(File.separator + \".\" + File.separator) >= 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + \"path ('.' or '..') detected. Not \" + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:43.920678", "n_pass": [216, 5, 5], "score": "0.6997", "loss": "0.7834", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + \"path ('.' or '..') detected. Not \" + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:45.555256", "n_pass": [221, 6, 6], "score": "0.6616", "loss": "0.7337", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } if (cgiExecutableArgs != null) { cmdAndArgs.addAll(cgiExecutableArgs); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:47.197109", "n_pass": [226, 7, 7], "score": "0.6512", "loss": "1.1761", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start(); InputStream cgiHeaderStream = new HTTPHeaderInputStream(proc.getInputStream()); cgiHeaderReader = new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:48.899118", "n_pass": [237, 8, 8], "score": "0.9285", "loss": "0.3773", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = new byte[2048]; OutputStream out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:52.153716", "n_pass": [428, 9, 9], "score": "0.8141", "loss": "0.7102", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output \" + bufRead + \" bytes of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:53.841233", "n_pass": [435, 10, 10], "score": "0.5588", "loss": "1.5163", "code": "protected void run() throws IOException { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:55.743688", "n_pass": [466, 11, 11], "score": "0.7048", "loss": "12.3664", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI command \" + + \"running CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:57.385583", "n_pass": [480, 12, 12], "score": "0.6581", "loss": "12.1204", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime rt = null; BufferedReader cgiHeaderReader = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:56:58.978488", "n_pass": [483, 13, 13], "score": "0.6417", "loss": "11.2547", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(); proc = rt.exec(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:00.759929", "n_pass": [492, 14, 14], "score": "0.7561", "loss": "11.091", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flow(stdin, commandsStdIn); commandsStdIn.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:02.399803", "n_pass": [500, 15, 15], "score": "0.3678", "loss": "11.121", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools.flush(); commandsStdIn.close(); } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:04.021548", "n_pass": [501, 16, 16], "score": "0.4484", "loss": "11.2323", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); final BufferedReader stdErrRdr = commandsStdErr; errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:05.629837", "n_pass": [505, 17, 17], "score": "0.7396", "loss": "11.8952", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.start();new BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:08.591428", "n_pass": [810, 18, 18], "score": "0.4846", "loss": "11.1102", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String line = null; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:10.227900", "n_pass": [815, 19, 19], "score": "0.7575", "loss": "11.4811", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { String header = line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:11.968456", "n_pass": [838, 20, 20], "score": "0.7304", "loss": "11.8604", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trim(); String value = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:13.579223", "n_pass": [842, 21, 21], "score": "0.7771", "loss": "11.7473", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimvalue = line.substring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:15.199456", "n_pass": [843, 22, 22], "score": "0.5296", "loss": "11.37", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } } else { log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:16.882153", "n_pass": [855, 23, 23], "score": "0.7815", "loss": "12.1527", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: bad header line \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:18.458443", "n_pass": [857, 24, 24], "score": "0.7758", "loss": "12.9349", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + line + \"\\\"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:20.054188", "n_pass": [859, 25, 25], "score": "0.7058", "loss": "10.9437", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[] bBuf = newout = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:21.680558", "n_pass": [862, 26, 26], "score": "0.7125", "loss": "11.4485", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput = proc.getInputStream(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:23.259452", "n_pass": [865, 27, 27], "score": "0.7363", "loss": "11.7805", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((bufRead = cgiOutput.read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:24.839319", "n_pass": [868, 28, 28], "score": "0.7607", "loss": "10.7694", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf)) != -1) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:26.541051", "n_pass": [885, 29, 29], "score": "0.4576", "loss": "11.012", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for stderr reader thread\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:28.674784", "n_pass": [923, 30, 30], "score": "0.6713", "loss": "11.7297", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { proc.destroy(); proc = null; } } }"}
{"time": "2021-01-20 08:57:30.336802", "n_pass": [932, 31, 31], "score": "0.3484", "loss": "10.8832", "code": " { if (!isReady()) { throw new IOException(this.getClass().getName() + \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:31.949362", "n_pass": [940, 32, 32], "score": "0.5725", "loss": "9.9143", "code": " { if (!isReady()) { throw new IOException(this.getClass()+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf(File.separator + \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:33.574119", "n_pass": [949, 33, 33], "score": "0.8019", "loss": "11.7294", "code": " { if (!isReady()) { throw new IOException(this.getClass()+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf( \"..\") >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:35.138511", "n_pass": [950, 34, 34], "score": "0.8068", "loss": "11.6764", "code": " { if (!isReady()) { throw new IOException(this.getClass()+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character in CGI CGI [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:36.803580", "n_pass": [963, 35, 35], "score": "0.4234", "loss": "10.6368", "code": " { if (!isReady()) { throw new IOException(this.getClass()+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" + command + \"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:38.382666", "n_pass": [965, 36, 36], "score": "0.6152", "loss": "11.2256", "code": " { if (!isReady()) { throw new IOException(this.getClass()+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; BufferedReader commandsStdErr = null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:39.970927", "n_pass": [971, 37, 37], "score": "0.4033", "loss": "10.9242", "code": " { if (!isReady()) { throw new IOException(this.getClass()+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length() != 0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:41.591987", "n_pass": [975, 38, 38], "score": "0.7902", "loss": "11.5195", "code": " { if (!isReady()) { throw new IOException(this.getClass()+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add(command); cmdAndArgs.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:43.203795", "n_pass": [979, 39, 39], "score": "0.8668", "loss": "12.1599", "code": " { if (!isReady()) { throw new IOException(this.getClass()+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), hashToStringArray(env), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:46.333954", "n_pass": [986, 41, 40], "score": "0.7765", "loss": "11.8513", "code": " { if (!isReady()) { throw new IOException(this.getClass()+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { commandsStdIn = new BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:47.923264", "n_pass": [993, 42, 41], "score": "0.7351", "loss": "12.457", "code": " { if (!isReady()) { throw new IOException(this.getClass()+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean isRunning = true; commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:49.492238", "n_pass": [997, 43, 42], "score": "0.5961", "loss": "10.5092", "code": " { if (!isReady()) { throw new IOException(this.getClass()+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:52.151544", "n_pass": [1123, 44, 43], "score": "0.875", "loss": "12.5733", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt = Runtime.getRuntime(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:53.866680", "n_pass": [1158, 45, 44], "score": "0.6176", "loss": "10.7502", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); String sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:57.971398", "n_pass": [1679, 46, 45], "score": "0.8006", "loss": "11.5245", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);sContentLength = env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:57:59.542673", "n_pass": [1680, 47, 46], "score": "0.5766", "loss": "9.979", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd); env.get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:01.105303", "n_pass": [1681, 48, 47], "score": "0.7493", "loss": "11.1321", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"CONTENT_LENGTH\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:02.666683", "n_pass": [1683, 49, 48], "score": "0.3406", "loss": "10.0594", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); IOTools; } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:05.806785", "n_pass": [1693, 51, 49], "score": "0.5621", "loss": "10.3258", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } boolean  commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:07.380605", "n_pass": [1695, 52, 50], "score": "0.4117", "loss": "10.4721", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader(new InputStreamReader(proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:08.959720", "n_pass": [1699, 53, 51], "score": "0.755", "loss": "11.1502", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() { @Override public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:10.576267", "n_pass": [1707, 54, 52], "score": "0.654", "loss": "10.698", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() { public void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:12.144878", "n_pass": [1708, 55, 53], "score": "0.6805", "loss": "10.975", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog(stdErrRdr); } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:13.717709", "n_pass": [1712, 56, 54], "score": "0.8923", "loss": "12.0934", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } }; errReaderThread.BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:15.282066", "n_pass": [1715, 57, 55], "score": "0.8083", "loss": "11.057", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line = cgiHeaderReader.readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:16.934130", "n_pass": [1727, 58, 56], "score": "0.7972", "loss": "11.2695", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals(line))) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:18.528371", "n_pass": [1735, 59, 57], "score": "0.572", "loss": "10.4473", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"runCGI: addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:20.162773", "n_pass": [1743, 60, 58], "score": "0.4768", "loss": "9.965", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\" + line + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:21.982504", "n_pass": [1746, 61, 59], "score": "0.4357", "loss": "11.2429", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) { response.setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:23.606505", "n_pass": [1756, 62, 60], "score": "0.7471", "loss": "10.6892", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine(line)); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:25.180235", "n_pass": [1758, 63, 61], "score": "0.636", "loss": "11.5901", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0, line.indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:26.806292", "n_pass": [1770, 64, 62], "score": "0.7334", "loss": "10.911", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf(\":\") + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:28.394790", "n_pass": [1776, 65, 63], "score": "0.3321", "loss": "10.4465", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if (header.equalsIgnoreCase(\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:29.970841", "n_pass": [1782, 66, 64], "score": "0.2869", "loss": "10.7305", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { response.setStatus(getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:31.562828", "n_pass": [1786, 67, 65], "score": "0.5717", "loss": "11.5276", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); } else { response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:33.160491", "n_pass": [1790, 68, 66], "score": "0.7751", "loss": "10.8965", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(header, value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:34.720405", "n_pass": [1793, 69, 67], "score": "0.7382", "loss": "11.2133", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } byte[]out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:37.827587", "n_pass": [1803, 71, 68], "score": "0.5418", "loss": "10.9882", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } out = response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:39.392084", "n_pass": [1804, 72, 69], "score": "0.7669", "loss": "11.0574", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } }  response.getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:40.945281", "n_pass": [1805, 73, 70], "score": "0.3291", "loss": "11.4189", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } getOutputStream(); cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:42.498183", "n_pass": [1806, 74, 71], "score": "0.6113", "loss": "11.0467", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) != -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:44.100820", "n_pass": [1814, 75, 72], "score": "0.5484", "loss": "10.3908", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI: output of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:45.693061", "n_pass": [1823, 76, 73], "score": "0.4043", "loss": "10.1838", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:of data\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:47.232138", "n_pass": [1824, 77, 74], "score": "0.6301", "loss": "11.0242", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead != -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:50.371185", "n_pass": [1836, 79, 75], "score": "0.6875", "loss": "11.0484", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead = cgiOutput.read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:51.956385", "n_pass": [1841, 80, 76], "score": "0.4113", "loss": "10.7041", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunning = false; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:55.497720", "n_pass": [1850, 82, 77], "score": "0.5293", "loss": "10.0407", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught exception \" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:58:58.722544", "n_pass": [1872, 84, 78], "score": "0.712", "loss": "10.7084", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception closing header reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:00.416797", "n_pass": [1893, 85, 79], "score": "0.6317", "loss": "11.1172", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception  reader \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:01.979515", "n_pass": [1894, 86, 80], "score": "0.637", "loss": "10.6896", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted waiting for\"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:03.724153", "n_pass": [1917, 87, 81], "score": "0.4932", "loss": "10.4576", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug > 4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:05.289919", "n_pass": [1922, 88, 82], "score": "0.5082", "loss": "9.8086", "code": " { if (!isReady()) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:08.454548", "n_pass": [1942, 90, 83], "score": "0.3687", "loss": "10.7228", "code": " { if (!isReady) { throw new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:10.008169", "n_pass": [1945, 91, 84], "score": "0.3489", "loss": "9.8767", "code": " { if (!isReady) { new IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:11.556140", "n_pass": [1946, 92, 85], "score": "0.8551", "loss": "11.4934", "code": " { if (!isReady) { IOException(+ \":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:13.091550", "n_pass": [1948, 93, 86], "score": "0.432", "loss": "10.2402", "code": " { if (!isReady) { IOException(\":  command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:14.642583", "n_pass": [1950, 94, 87], "score": "0.7871", "loss": "10.6087", "code": " { if (!isReady) { IOException(\":command=\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:16.199310", "n_pass": [1951, 95, 88], "score": "0.7867", "loss": "10.9063", "code": " { if (!isReady) { IOException(\":\" + command + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:17.738674", "n_pass": [1954, 96, 89], "score": "0.4823", "loss": "10.0058", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || (command.indexOf(\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:22.354407", "n_pass": [1972, 99, 90], "score": "0.8886", "loss": "11.3024", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" + File.separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:23.890017", "n_pass": [1975, 100, 91], "score": "0.3931", "loss": "10.7047", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) { throw new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:25.440246", "n_pass": [1980, 101, 92], "score": "0.6198", "loss": "10.751", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {new IOException(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:26.974751", "n_pass": [1981, 102, 93], "score": "0.8162", "loss": "11.3004", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal Character  [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:28.523402", "n_pass": [1987, 103, 94], "score": "0.5911", "loss": "10.959", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtime = null; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:30.077990", "n_pass": [1993, 104, 95], "score": "0.83", "loss": "11.5412", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtimenull; InputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:31.604285", "n_pass": [1994, 105, 96], "score": "0.6593", "loss": "11.0664", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } RuntimeInputStream cgiOutput = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:33.129465", "n_pass": [1995, 106, 97], "score": "0.5512", "loss": "10.4322", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtime = null; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:34.688621", "n_pass": [1996, 107, 98], "score": "0.3503", "loss": "10.1749", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtimenull; null; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:36.216025", "n_pass": [1997, 108, 99], "score": "0.8755", "loss": "12.044", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtimenull; Thread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:37.743406", "n_pass": [1998, 109, 100], "score": "0.7294", "loss": "11.3923", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } RuntimeThread errReaderThread = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:39.290907", "n_pass": [1999, 110, 101], "score": "0.8173", "loss": "11.3765", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtime = null; if (cgiExecutable.length0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:42.319335", "n_pass": [2003, 112, 102], "score": "0.6511", "loss": "11.0974", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtime = null; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals(sContentLength)) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:43.924691", "n_pass": [2026, 113, 103], "score": "0.7565", "loss": "10.3996", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtime = null; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"runCGI: \\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:46.216628", "n_pass": [2116, 114, 104], "score": "0.8401", "loss": "11.3389", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtime = null; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, 0, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:47.894328", "n_pass": [2141, 115, 105], "score": "0.8565", "loss": "11.1869", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtime = null; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try { Thread.sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:51.099346", "n_pass": [2166, 117, 106], "score": "0.6903", "loss": "10.7319", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtime = null; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Running finally block\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:53.116451", "n_pass": [2230, 118, 107], "score": "0.4595", "loss": "10.0248", "code": " { if (!isReady) { IOException(\":\" + + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtime = null; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:56.296266", "n_pass": [2252, 120, 108], "score": "0.7359", "loss": "10.6197", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (command.indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtime = null; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:57.853926", "n_pass": [2263, 121, 109], "score": "0.4626", "loss": "10.3723", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtime = null; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 08:59:59.450657", "n_pass": [2285, 122, 110], "score": "0.7377", "loss": "10.6712", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName() + \"Illegal [\" +\"].\"); } Runtimenull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:38.695230", "n_pass": [3114, 124, 111], "score": "0.8751", "loss": "11.3531", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+ \"Illegal [\" +\"].\"); } Runtimenull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:40.241334", "n_pass": [3116, 125, 112], "score": "0.563", "loss": "9.808", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"Illegal [\" +\"].\"); } Runtimenull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:41.798379", "n_pass": [3118, 126, 113], "score": "0.8603", "loss": "11.3604", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\" [\" +\"].\"); } Runtimenull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:43.341077", "n_pass": [3119, 127, 114], "score": "0.4084", "loss": "9.2612", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"[\" +\"].\"); } Runtimenull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:44.889994", "n_pass": [3120, 128, 115], "score": "0.8433", "loss": "10.7875", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\" +\"].\"); } Runtimenull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:46.432308", "n_pass": [3122, 129, 116], "score": "0.4013", "loss": "9.2358", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"].\"); } Runtimenull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:48.003601", "n_pass": [3125, 130, 117], "score": "0.6621", "loss": "10.7429", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\".\"); } Runtimenull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:49.553835", "n_pass": [3126, 131, 118], "score": "0.527", "loss": "10.2305", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\"); } Runtimenull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:51.107548", "n_pass": [3130, 132, 119], "score": "0.8017", "loss": "10.8662", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");} Runtimenull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:52.664076", "n_pass": [3132, 133, 120], "score": "0.7443", "loss": "10.9127", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}Runtimenull; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:54.215680", "n_pass": [3133, 134, 121], "score": "0.4921", "loss": "9.3543", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}null; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:55.758241", "n_pass": [3134, 135, 122], "score": "0.6622", "loss": "10.9499", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}; if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:57.303224", "n_pass": [3135, 136, 123], "score": "0.7577", "loss": "10.4599", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");} if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:00:58.872709", "n_pass": [3136, 137, 124], "score": "0.7212", "loss": "10.7256", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if (0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:00.423148", "n_pass": [3138, 138, 125], "score": "0.5869", "loss": "10.3918", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0) { cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:01.980806", "n_pass": [3142, 139, 126], "score": "0.3341", "loss": "9.6987", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){ cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:03.524611", "n_pass": [3144, 140, 127], "score": "0.8192", "loss": "10.9915", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs.add(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:05.075393", "n_pass": [3146, 141, 128], "score": "0.4303", "loss": "9.8477", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgsadd(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:06.634569", "n_pass": [3147, 142, 129], "score": "0.6578", "loss": "9.8287", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs(cgiExecutable); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:08.177389", "n_pass": [3149, 143, 130], "score": "0.8247", "loss": "10.3216", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs(); } cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:09.729493", "n_pass": [3152, 144, 131], "score": "0.7373", "loss": "11.1447", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs.add.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:12.809512", "n_pass": [3156, 146, 132], "score": "0.7369", "loss": "10.3543", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgsadd.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:14.367243", "n_pass": [3157, 147, 133], "score": "0.5775", "loss": "10.6663", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs.addAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:15.907696", "n_pass": [3158, 148, 134], "score": "0.7537", "loss": "10.5639", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgsaddAll(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:17.443581", "n_pass": [3159, 149, 135], "score": "0.4599", "loss": "9.6497", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(params); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:18.985092", "n_pass": [3161, 150, 136], "score": "0.8365", "loss": "10.7342", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try { rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:22.059476", "n_pass": [3166, 152, 137], "score": "0.8428", "loss": "10.8564", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{ rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:23.612616", "n_pass": [3168, 153, 138], "score": "0.5767", "loss": "11.0039", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs.toArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:25.177663", "n_pass": [3172, 154, 139], "score": "0.3364", "loss": "10.5008", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgstoArray(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:26.710283", "n_pass": [3173, 155, 140], "score": "0.8777", "loss": "11.5881", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(new String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:28.247804", "n_pass": [3175, 156, 141], "score": "0.45", "loss": "10.3592", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs( String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:29.773790", "n_pass": [3176, 157, 142], "score": "0.8617", "loss": "11.7262", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs.size()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:31.337557", "n_pass": [3180, 158, 143], "score": "0.4434", "loss": "9.9554", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgssize()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:32.866314", "n_pass": [3181, 159, 144], "score": "0.7556", "loss": "10.2298", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]), wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:34.419627", "n_pass": [3187, 160, 145], "score": "0.4", "loss": "9.6837", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);get(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:35.971459", "n_pass": [3191, 161, 146], "score": "0.4717", "loss": "10.3877", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\"); if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:37.526419", "n_pass": [3197, 162, 147], "score": "0.4654", "loss": "9.8152", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if (!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:39.085618", "n_pass": [3199, 163, 148], "score": "0.5769", "loss": "9.2072", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(!\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:40.627014", "n_pass": [3201, 164, 149], "score": "0.5363", "loss": "10.0065", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals) { BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:42.188582", "n_pass": [3207, 165, 150], "score": "0.3113", "loss": "9.9626", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){ BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:43.748576", "n_pass": [3209, 166, 151], "score": "0.8389", "loss": "11.1542", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){BufferedOutputStream(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:45.295802", "n_pass": [3210, 167, 152], "score": "0.3066", "loss": "10.1173", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc.getOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:46.833220", "n_pass": [3213, 168, 153], "score": "0.5575", "loss": "9.8754", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(procgetOutputStream()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:48.368288", "n_pass": [3214, 169, 154], "score": "0.874", "loss": "10.7748", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc()); } commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:49.921780", "n_pass": [3219, 170, 155], "score": "0.8101", "loss": "10.9404", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());} commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:51.457696", "n_pass": [3221, 171, 156], "score": "0.3761", "loss": "9.0751", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr = new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:53.016757", "n_pass": [3223, 172, 157], "score": "0.3432", "loss": "10.5758", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr= new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:54.552528", "n_pass": [3225, 173, 158], "score": "0.6532", "loss": "9.9825", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=new BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:56.080491", "n_pass": [3226, 174, 159], "score": "0.764", "loss": "10.6978", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr= BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:57.608692", "n_pass": [3227, 175, 160], "score": "0.88", "loss": "10.7696", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=BufferedReader((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:01:59.137983", "n_pass": [3228, 176, 161], "score": "0.7089", "loss": "10.864", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc.getErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:00.681534", "n_pass": [3232, 177, 162], "score": "0.7504", "loss": "10.4601", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((procgetErrorStream())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:02.224318", "n_pass": [3233, 178, 163], "score": "0.7835", "loss": "11.0336", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc())); errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:03.774742", "n_pass": [3239, 179, 164], "score": "0.9467", "loss": "11.805", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread = new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:05.303688", "n_pass": [3241, 180, 165], "score": "0.9268", "loss": "11.9665", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread= new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:06.835641", "n_pass": [3243, 181, 166], "score": "0.8748", "loss": "11.034", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread() {void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:08.389632", "n_pass": [3249, 182, 167], "score": "0.8934", "loss": "11.0279", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() { sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:12.251236", "n_pass": [3258, 184, 168], "score": "0.5736", "loss": "9.7427", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {sendToLog; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:13.779232", "n_pass": [3259, 185, 169], "score": "0.8946", "loss": "11.0593", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {; } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:15.305455", "n_pass": [3260, 186, 170], "score": "0.9421", "loss": "12.3037", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() { } };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:16.891399", "n_pass": [3261, 187, 171], "score": "0.8984", "loss": "11.5073", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {} };BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:18.419375", "n_pass": [3263, 188, 172], "score": "0.8143", "loss": "11.4099", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};BufferedReader(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:19.960339", "n_pass": [3266, 189, 173], "score": "0.6453", "loss": "10.3401", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};(new InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:21.487954", "n_pass": [3268, 190, 174], "score": "0.5976", "loss": "10.5752", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};( InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:23.028335", "n_pass": [3269, 191, 175], "score": "0.7608", "loss": "10.554", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};(InputStreamReader(cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:24.550626", "n_pass": [3270, 192, 176], "score": "0.7206", "loss": "11.0859", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream)); while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:26.117683", "n_pass": [3276, 193, 177], "score": "0.9295", "loss": "12.0629", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while (isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:27.671320", "n_pass": [3278, 194, 178], "score": "0.8671", "loss": "11.2118", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning) { try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:29.217875", "n_pass": [3282, 195, 179], "score": "0.7306", "loss": "10.8691", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){ try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:30.748205", "n_pass": [3284, 196, 180], "score": "0.6397", "loss": "9.6222", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try { String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:32.277542", "n_pass": [3286, 197, 181], "score": "0.7398", "loss": "10.3893", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{ String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:33.828111", "n_pass": [3288, 198, 182], "score": "0.8913", "loss": "10.8771", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{String; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:35.350650", "n_pass": [3289, 199, 183], "score": "0.8151", "loss": "10.8779", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{; while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:36.874113", "n_pass": [3290, 200, 184], "score": "0.8674", "loss": "11.701", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{ while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:38.397787", "n_pass": [3291, 201, 185], "score": "0.4665", "loss": "9.6485", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while (((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:39.943017", "n_pass": [3293, 202, 186], "score": "0.9112", "loss": "10.9667", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line .readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:41.498660", "n_pass": [3298, 203, 187], "score": "0.437", "loss": "9.244", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line.readLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:43.043220", "n_pass": [3299, 204, 188], "score": "0.4718", "loss": "9.5981", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((linereadLine()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:44.598974", "n_pass": [3300, 205, 189], "score": "0.8413", "loss": "11.2502", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line()) != null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:46.157946", "n_pass": [3304, 206, 190], "score": "0.8106", "loss": "10.9034", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!= null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:48.110635", "n_pass": [3307, 207, 191], "score": "0.8539", "loss": "10.5924", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null) && !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:49.643604", "n_pass": [3310, 208, 192], "score": "0.6226", "loss": "10.3645", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&& !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:51.165189", "n_pass": [3311, 209, 193], "score": "0.3487", "loss": "9.7285", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)& !(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:52.709159", "n_pass": [3313, 210, 194], "score": "0.6485", "loss": "9.9348", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)) { if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:55.750139", "n_pass": [3322, 212, 195], "score": "0.4788", "loss": "8.8534", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){ if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:57.277844", "n_pass": [3324, 213, 196], "score": "0.937", "loss": "11.3712", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if (debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:02:58.804254", "n_pass": [3326, 214, 197], "score": "0.4311", "loss": "9.8055", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug >= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:00.351244", "n_pass": [3329, 215, 198], "score": "0.8286", "loss": "11.1476", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug= 2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:01.885562", "n_pass": [3330, 216, 199], "score": "0.7841", "loss": "10.6075", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) { log(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:03.442319", "n_pass": [3333, 217, 200], "score": "0.819", "loss": "10.5058", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"addHeader(\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:04.964325", "n_pass": [3335, 218, 201], "score": "0.3979", "loss": "8.9483", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\\\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:06.480941", "n_pass": [3336, 219, 202], "score": "0.8394", "loss": "10.1912", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \"\\\")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:08.022102", "n_pass": [3340, 220, 203], "score": "0.5597", "loss": "9.6123", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (line.startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:09.566740", "n_pass": [3346, 221, 204], "score": "0.7706", "loss": "10.5959", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } else if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:11.141866", "n_pass": [3355, 222, 205], "score": "0.8833", "loss": "11.4546", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (line.indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:12.672330", "n_pass": [3358, 223, 206], "score": "0.6358", "loss": "9.0121", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >= 0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:14.612784", "n_pass": [3363, 224, 207], "score": "0.563", "loss": "9.6403", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line.substring(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:16.558581", "n_pass": [3367, 225, 208], "score": "0.7185", "loss": "9.4059", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(line.indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:18.139692", "n_pass": [3375, 226, 209], "score": "0.4443", "loss": "9.495", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim(); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:19.659346", "n_pass": [3381, 227, 210], "score": "0.849", "loss": "9.9459", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value)); }{ response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:21.259358", "n_pass": [3393, 228, 211], "score": "0.5788", "loss": "9.7097", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response.addHeader(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:22.779903", "n_pass": [3395, 229, 212], "score": "0.4971", "loss": "8.9773", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); } log(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:24.312063", "n_pass": [3399, 230, 213], "score": "0.4381", "loss": "9.0829", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\\\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:25.831435", "n_pass": [3401, 231, 214], "score": "0.7528", "loss": "9.7623", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } ; cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:27.376959", "n_pass": [3408, 232, 215], "score": "0.4352", "loss": "8.6461", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput(); try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:28.893114", "n_pass": [3410, 233, 216], "score": "0.7223", "loss": "9.5926", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) -1) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:30.453571", "n_pass": [3419, 234, 217], "score": "0.7535", "loss": "9.6256", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug >= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:31.991993", "n_pass": [3424, 235, 218], "score": "0.4566", "loss": "9.8006", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug= 4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:33.511257", "n_pass": [3425, 236, 219], "score": "0.9165", "loss": "10.1844", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) { log(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:35.033073", "n_pass": [3428, 237, 220], "score": "0.55", "loss": "8.7929", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"runCGI:\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:36.562301", "n_pass": [3430, 238, 221], "score": "0.4878", "loss": "8.9305", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (bufRead -1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:41.112331", "n_pass": [3445, 241, 222], "score": "0.3982", "loss": "9.0606", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead .read(bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:42.674251", "n_pass": [3452, 242, 223], "score": "0.4282", "loss": "9.8524", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } proc.exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:44.253533", "n_pass": [3460, 243, 224], "score": "0.621", "loss": "9.6038", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); isRunningfalse; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:45.770995", "n_pass": [3463, 244, 225], "score": "0.5992", "loss": "9.3462", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue();false; } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:47.278217", "n_pass": [3464, 245, 226], "score": "0.607", "loss": "9.3758", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(500); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:48.841795", "n_pass": [3474, 246, 227], "score": "0.4829", "loss": "9.6386", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); throw e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:50.485002", "n_pass": [3498, 247, 228], "score": "0.4191", "loss": "8.7673", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e); e; } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:52.002995", "n_pass": [3499, 248, 229], "score": "0.3487", "loss": "9.5591", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } finally { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:53.511130", "n_pass": [3501, 249, 230], "score": "0.4777", "loss": "9.7903", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { cgiHeaderReader.close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:55.085273", "n_pass": [3512, 250, 231], "score": "0.4523", "loss": "9.1704", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) { log(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:56.657656", "n_pass": [3521, 251, 232], "score": "0.428", "loss": "9.3956", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"Exception \" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:58.176579", "n_pass": [3523, 252, 233], "score": "0.4058", "loss": "9.4441", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutput != null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:03:59.726989", "n_pass": [3532, 253, 234], "score": "0.4001", "loss": "9.2945", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutput= null) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:04:01.228354", "n_pass": [3533, 254, 235], "score": "0.6256", "loss": "9.4515", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput.close(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:04:02.789684", "n_pass": [3539, 255, 236], "score": "0.3833", "loss": "9.6227", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput(); } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:04:04.290536", "n_pass": [3540, 256, 237], "score": "0.3777", "loss": "9.6194", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) { log(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:04:05.889352", "n_pass": [3554, 257, 238], "score": "0.3269", "loss": "9.551", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc != null) { procproc = null; } } }"}
{"time": "2021-01-20 09:04:11.920961", "n_pass": [3573, 261, 239], "score": "0.4564", "loss": "9.6753", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (proc= null) { procproc = null; } } }"}
{"time": "2021-01-20 09:04:13.416724", "n_pass": [3574, 262, 240], "score": "0.4012", "loss": "9.7981", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) { procproc = null; } } }"}
{"time": "2021-01-20 09:04:14.909203", "n_pass": [3577, 263, 241], "score": "0.6233", "loss": "9.7747", "code": " { if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:16.466223", "n_pass": [3584, 264, 242], "score": "0.6347", "loss": "10.8963", "code": "{ if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:17.964248", "n_pass": [3586, 265, 243], "score": "0.4561", "loss": "9.8162", "code": "{if (!isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:20.937394", "n_pass": [3590, 267, 244], "score": "0.5967", "loss": "10.079", "code": "{if (isReady) { IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:22.436707", "n_pass": [3593, 268, 245], "score": "0.3385", "loss": "9.7449", "code": "{if (isReady){ IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:23.950693", "n_pass": [3595, 269, 246], "score": "0.4923", "loss": "9.1987", "code": "{if (isReady){IOException(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:25.444544", "n_pass": [3596, 270, 247], "score": "0.6362", "loss": "8.6575", "code": "{if (isReady){(\":\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:26.939721", "n_pass": [3599, 271, 248], "score": "0.484", "loss": "9.6035", "code": "{if (isReady){(\"\" + \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:28.434712", "n_pass": [3601, 272, 249], "score": "0.447", "loss": "9.257", "code": "{if (isReady){(\"\"+ \")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:29.932774", "n_pass": [3603, 273, 250], "score": "0.422", "loss": "9.5004", "code": "{if (isReady){(\"\"+\")\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:31.426844", "n_pass": [3605, 274, 251], "score": "0.3842", "loss": "9.4468", "code": "{if (isReady){(\"\"+\"\"); } if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:34.405114", "n_pass": [3611, 276, 252], "score": "0.6592", "loss": "9.992", "code": "{if (isReady){(\"\"+\"\"); }if (( 0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:37.375819", "n_pass": [3616, 278, 253], "score": "0.3583", "loss": "9.4763", "code": "{if (isReady){(\"\"+\"\"); }if ((0) || (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:40.379353", "n_pass": [3620, 280, 254], "score": "0.6681", "loss": "10.0667", "code": "{if (isReady){(\"\"+\"\"); }if ((0) | (indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:41.872607", "n_pass": [3622, 281, 255], "score": "0.5409", "loss": "10.2507", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf() >= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:43.378723", "n_pass": [3627, 282, 256], "score": "0.3998", "loss": "9.3322", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()>= 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:45.282972", "n_pass": [3629, 283, 257], "score": "0.6374", "loss": "9.5119", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0) || ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:48.264158", "n_pass": [3633, 285, 258], "score": "0.4125", "loss": "8.9384", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)|| ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:49.756980", "n_pass": [3634, 286, 259], "score": "0.433", "loss": "9.1507", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"..\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:52.747930", "n_pass": [3640, 288, 260], "score": "0.547", "loss": "9.3257", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\".\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:54.246558", "n_pass": [3641, 289, 261], "score": "0.5113", "loss": "9.2107", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\" .separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:55.740620", "n_pass": [3643, 290, 262], "score": "0.4977", "loss": "9.3517", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator) >= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:57.241959", "n_pass": [3647, 291, 263], "score": "0.6717", "loss": "9.7024", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)>= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:04:58.736736", "n_pass": [3648, 292, 264], "score": "0.5467", "loss": "9.5072", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)= 0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:00.231577", "n_pass": [3650, 293, 265], "score": "0.6234", "loss": "9.8745", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt(cmdAndArgs(String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:07.799775", "n_pass": [3695, 298, 266], "score": "0.3915", "loss": "9.8478", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr=((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:09.427513", "n_pass": [3729, 299, 267], "score": "0.4919", "loss": "9.5026", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1).trim; if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:16.975764", "n_pass": [3833, 303, 268], "score": "0.4793", "loss": "8.9004", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value));  response(value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:18.522557", "n_pass": [3845, 304, 269], "score": "0.3881", "loss": "8.4978", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(bBuf, bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:23.148860", "n_pass": [3877, 307, 270], "score": "0.3928", "loss": "9.3096", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write( bufRead); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:24.639566", "n_pass": [3878, 308, 271], "score": "0.422", "loss": "9.0003", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while ((bufRead (bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:26.198921", "n_pass": [3891, 309, 272], "score": "0.4798", "loss": "8.9357", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try { cgiOutput; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:28.132497", "n_pass": [3965, 310, 273], "score": "0.5595", "loss": "9.615", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"Interupted \"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:31.191228", "n_pass": [3980, 312, 274], "score": "0.4576", "loss": "9.6693", "code": "{if (isReady){(\"\"+\"\"); }if ((0) |(indexOf()> 0)| ((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:37.302688", "n_pass": [4020, 316, 275], "score": "0.3824", "loss": "9.5354", "code": "{if (isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)| ((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:43.288169", "n_pass": [4039, 320, 276], "score": "0.4344", "loss": "9.4611", "code": "{if (isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)|((\"\".separator)=0)) {(this.getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:46.328740", "n_pass": [4055, 322, 277], "score": "0.4079", "loss": "9.0317", "code": "{if (isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();} cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:48.814747", "n_pass": [4082, 323, 278], "score": "0.3668", "loss": "8.398", "code": "{if (isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run() {}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:54.281224", "n_pass": [4146, 326, 279], "score": "0.4395", "loss": "9.0737", "code": "{if (isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&!(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:56.309526", "n_pass": [4177, 327, 280], "score": "0.4384", "loss": "9.4074", "code": "{if (isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(debug2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:57.841466", "n_pass": [4188, 328, 281], "score": "0.4077", "loss": "9.1955", "code": "{if (isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } } cgiOutput; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:05:59.603650", "n_pass": [4249, 329, 282], "score": "0.4515", "loss": "9.579", "code": "{if (isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }; try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:01.103879", "n_pass": [4250, 330, 283], "score": "0.4105", "loss": "8.9756", "code": "{if (isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {; } catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:04.674833", "n_pass": [4355, 332, 284], "score": "0.3759", "loss": "9.5146", "code": "{if (isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"Runningblock\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:07.832170", "n_pass": [4379, 334, 285], "score": "0.6358", "loss": "9.9451", "code": "{if (isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:09.421826", "n_pass": [4395, 335, 286], "score": "0.6279", "loss": "9.2069", "code": "{if(isReady){(\"\"+\"\");}if ((0) |(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:10.952927", "n_pass": [4410, 336, 287], "score": "0.7069", "loss": "9.2705", "code": "{if(isReady){(\"\"+\"\");}if((0) |(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:12.472394", "n_pass": [4415, 337, 288], "score": "0.5451", "loss": "9.7212", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()> 0)|((\"\".separator)=0)) {(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:15.491035", "n_pass": [4437, 339, 289], "score": "0.5994", "loss": "10.4298", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()> 0)|((\"\".separator)=0)){(thisgetClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:16.989616", "n_pass": [4440, 340, 290], "score": "0.5377", "loss": "9.3782", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()> 0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}commandsStdErr((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:20.189321", "n_pass": [4508, 342, 291], "score": "0.4118", "loss": "8.6764", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()> 0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } out.write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:23.501076", "n_pass": [4647, 343, 292], "score": "0.5269", "loss": "9.1837", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()> 0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) { log(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:25.608717", "n_pass": [4755, 344, 293], "score": "0.4076", "loss": "8.8165", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()> 0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:27.257561", "n_pass": [4796, 345, 294], "score": "0.3815", "loss": "9.1346", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs(); try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:06:28.909691", "n_pass": [4843, 346, 295], "score": "0.3886", "loss": "8.5487", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2) {(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:23.396256", "n_pass": [5609, 347, 296], "score": "0.3329", "loss": "9.034", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"  + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:24.903909", "n_pass": [5613, 348, 297], "score": "0.4159", "loss": "9.557", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\" + \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:26.442587", "n_pass": [5614, 349, 298], "score": "0.4889", "loss": "9.2381", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+ \")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:27.951170", "n_pass": [5616, 350, 299], "score": "0.3717", "loss": "9.3535", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\"); } if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:30.947492", "n_pass": [5622, 352, 300], "score": "0.4704", "loss": "9.386", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");} if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:32.474539", "n_pass": [5624, 353, 301], "score": "0.409", "loss": "9.1051", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if (startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:33.981641", "n_pass": [5626, 354, 302], "score": "0.5855", "loss": "10.0369", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if(startsWith(\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:35.486401", "n_pass": [5628, 355, 303], "score": "0.4047", "loss": "8.6766", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")) {setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:38.498600", "n_pass": [5635, 357, 304], "score": "0.3295", "loss": "9.4511", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){setStatus(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:40.003187", "n_pass": [5637, 358, 305], "score": "0.383", "loss": "8.8354", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine); } if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:41.552166", "n_pass": [5642, 359, 306], "score": "0.5372", "loss": "9.5926", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);} if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:43.084808", "n_pass": [5644, 360, 307], "score": "0.4921", "loss": "9.0757", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if (indexOf(\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:46.078989", "n_pass": [5648, 362, 308], "score": "0.5304", "loss": "9.4476", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\":\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:47.582896", "n_pass": [5651, 363, 309], "score": "0.5525", "loss": "9.4158", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\") >0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:49.085008", "n_pass": [5654, 364, 310], "score": "0.4676", "loss": "8.949", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0) { line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:50.597251", "n_pass": [5658, 365, 311], "score": "0.4656", "loss": "9.0146", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){ line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:52.116627", "n_pass": [5660, 366, 312], "score": "0.4118", "loss": "8.9843", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,indexOf(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:53.676869", "n_pass": [5665, 367, 313], "score": "0.6391", "loss": "8.9199", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\":\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:55.197945", "n_pass": [5668, 368, 314], "score": "0.4028", "loss": "9.2217", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).trimsubstring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:56.708720", "n_pass": [5673, 369, 315], "score": "0.4915", "loss": "9.3599", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() + 1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:07:59.703404", "n_pass": [5681, 371, 316], "score": "0.509", "loss": "9.2088", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1); if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:01.235744", "n_pass": [5685, 372, 317], "score": "0.5006", "loss": "9.0392", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"status\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:04.216649", "n_pass": [5691, 374, 318], "score": "0.5579", "loss": "8.3021", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) { (getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:07.229750", "n_pass": [5697, 376, 319], "score": "0.4801", "loss": "9.2472", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {(getSCFromCGIStatusHeader(value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:08.734217", "n_pass": [5699, 377, 320], "score": "0.3398", "loss": "9.3083", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value)); (value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:10.281603", "n_pass": [5705, 378, 321], "score": "0.5341", "loss": "9.1282", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value); }(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:11.796731", "n_pass": [5710, 379, 322], "score": "0.5542", "loss": "9.1447", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\" + \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:13.316343", "n_pass": [5715, 380, 323], "score": "0.3528", "loss": "8.972", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+ \"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:14.822086", "n_pass": [5717, 381, 324], "score": "0.3399", "loss": "8.6278", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\"); } }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:16.376364", "n_pass": [5722, 382, 325], "score": "0.5484", "loss": "8.7128", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");} }try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:17.881040", "n_pass": [5724, 383, 326], "score": "0.4359", "loss": "8.8756", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try { while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:19.388877", "n_pass": [5727, 384, 327], "score": "0.4088", "loss": "9.1408", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{ while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:20.890037", "n_pass": [5729, 385, 328], "score": "0.4415", "loss": "8.8998", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while ((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:22.405709", "n_pass": [5731, 386, 329], "score": "0.4236", "loss": "9.4137", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while((read(bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:23.926974", "n_pass": [5734, 387, 330], "score": "0.3728", "loss": "8.6968", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf)) ) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:25.451988", "n_pass": [5739, 388, 331], "score": "0.433", "loss": "9.1673", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))) { if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:26.966397", "n_pass": [5741, 389, 332], "score": "0.4147", "loss": "8.5702", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){ if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:28.472065", "n_pass": [5743, 390, 333], "score": "0.412", "loss": "8.4581", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if (debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:29.973623", "n_pass": [5745, 391, 334], "score": "0.3721", "loss": "8.2581", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug4) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:32.961268", "n_pass": [5748, 393, 335], "score": "0.3539", "loss": "9.0687", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug) {(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:34.462183", "n_pass": [5750, 394, 336], "score": "0.4963", "loss": "9.299", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\"); } write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:35.997001", "n_pass": [5757, 395, 337], "score": "0.4277", "loss": "8.801", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");} write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:37.517034", "n_pass": [5759, 396, 338], "score": "0.5516", "loss": "9.6854", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write(); } } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:39.032648", "n_pass": [5764, 397, 339], "score": "0.3831", "loss": "8.29", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();} } finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:40.535849", "n_pass": [5766, 398, 340], "score": "0.4394", "loss": "9.6085", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}} finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:42.050139", "n_pass": [5768, 399, 341], "score": "0.4574", "loss": "8.4192", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally { if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:43.569340", "n_pass": [5770, 400, 342], "score": "0.3968", "loss": "9.4457", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{ if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:45.069796", "n_pass": [5772, 401, 343], "score": "0.4543", "loss": "9.4461", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if (-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:46.597074", "n_pass": [5774, 402, 344], "score": "0.4013", "loss": "9.0486", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(-1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:48.116118", "n_pass": [5776, 403, 345], "score": "0.3378", "loss": "8.2546", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1) { while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:49.652368", "n_pass": [5779, 404, 346], "score": "0.6606", "loss": "9.3749", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){ while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:51.159246", "n_pass": [5781, 405, 347], "score": "0.4868", "loss": "8.9517", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while (((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:52.678216", "n_pass": [5783, 406, 348], "score": "0.6172", "loss": "9.5906", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))) { } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:54.216128", "n_pass": [5791, 407, 349], "score": "0.6758", "loss": "9.5782", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){ } } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:55.715841", "n_pass": [5793, 408, 350], "score": "0.4519", "loss": "9.1623", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){} } } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:57.216493", "n_pass": [5795, 409, 351], "score": "0.6263", "loss": "9.1488", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}} } exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:08:58.737001", "n_pass": [5797, 410, 352], "score": "0.5042", "loss": "9.524", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}} exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:00.239336", "n_pass": [5799, 411, 353], "score": "0.4085", "loss": "8.6165", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue(); } catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:01.752296", "n_pass": [5804, 412, 354], "score": "0.4922", "loss": "8.889", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e) { try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:06.246078", "n_pass": [5814, 415, 355], "score": "0.5324", "loss": "9.2837", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){ try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:07.744620", "n_pass": [5816, 416, 356], "score": "0.3887", "loss": "8.5256", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try {sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:09.239780", "n_pass": [5818, 417, 357], "score": "0.5155", "loss": "9.3377", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{sleep(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:10.740705", "n_pass": [5820, 418, 358], "score": "0.5264", "loss": "8.9688", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0); } catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:12.283492", "n_pass": [5825, 419, 359], "score": "0.58", "loss": "9.6532", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);} catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:13.785717", "n_pass": [5827, 420, 360], "score": "0.4213", "loss": "9.2054", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch (InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:15.283543", "n_pass": [5829, 421, 361], "score": "0.5104", "loss": "9.0023", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored) { } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:16.808461", "n_pass": [5835, 422, 362], "score": "0.3509", "loss": "9.2537", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ } } } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:19.794998", "n_pass": [5839, 424, 363], "score": "0.4449", "loss": "8.802", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }} } } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:21.301843", "n_pass": [5841, 425, 364], "score": "0.5109", "loss": "9.8291", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}} } catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:22.799954", "n_pass": [5843, 426, 365], "score": "0.7663", "loss": "9.872", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}} catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:24.299165", "n_pass": [5845, 427, 366], "score": "0.3887", "loss": "9.3441", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch (IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:25.828952", "n_pass": [5847, 428, 367], "score": "0.4636", "loss": "9.0373", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e) { log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:27.350600", "n_pass": [5853, 429, 368], "score": "0.381", "loss": "8.7526", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){ log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:28.845598", "n_pass": [5855, 430, 369], "score": "0.3156", "loss": "9.637", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){log(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:30.335781", "n_pass": [5856, 431, 370], "score": "0.4292", "loss": "8.9881", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"Caught\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:31.859186", "n_pass": [5859, 432, 371], "score": "0.5491", "loss": "9.3914", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\" + e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:33.383223", "n_pass": [5861, 433, 372], "score": "0.3262", "loss": "8.9851", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e);  } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:36.383805", "n_pass": [5867, 435, 373], "score": "0.3672", "loss": "8.9726", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } { if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:40.826486", "n_pass": [5872, 438, 374], "score": "0.4476", "loss": "9.2152", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if (cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:42.352862", "n_pass": [5874, 439, 375], "score": "0.4107", "loss": "8.334", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader != null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:43.854619", "n_pass": [5877, 440, 376], "score": "0.4837", "loss": "9.0309", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader!= null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:45.344487", "n_pass": [5878, 441, 377], "score": "0.5916", "loss": "9.1117", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader= null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:46.858010", "n_pass": [5880, 442, 378], "score": "0.6887", "loss": "9.0949", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null) { try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:48.362479", "n_pass": [5883, 443, 379], "score": "0.3851", "loss": "8.5181", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){ try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:49.883732", "n_pass": [5885, 444, 380], "score": "0.4609", "loss": "8.6975", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try { close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:51.398143", "n_pass": [5887, 445, 381], "score": "0.3326", "loss": "8.6862", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{ close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:52.906603", "n_pass": [5889, 446, 382], "score": "0.406", "loss": "9.3215", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch (IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:09:57.382444", "n_pass": [5898, 449, 383], "score": "0.5452", "loss": "9.1397", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\" + ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:00.416884", "n_pass": [5909, 451, 384], "score": "0.3287", "loss": "8.8868", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:01.933642", "n_pass": [5911, 452, 385], "score": "0.4427", "loss": "8.974", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe); } } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:03.442038", "n_pass": [5915, 453, 386], "score": "0.4939", "loss": "9.0159", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);} } if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:04.967580", "n_pass": [5917, 454, 387], "score": "0.4762", "loss": "8.8734", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}} if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:06.461531", "n_pass": [5919, 455, 388], "score": "0.3323", "loss": "8.7879", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if (cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:07.956838", "n_pass": [5921, 456, 389], "score": "0.5665", "loss": "8.7737", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(cgiOutputnull) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:09.450105", "n_pass": [5923, 457, 390], "score": "0.6572", "loss": "8.9318", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null) { try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:10.964210", "n_pass": [5926, 458, 391], "score": "0.5311", "loss": "8.1396", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){ try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:12.459081", "n_pass": [5928, 459, 392], "score": "0.5129", "loss": "8.4846", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try {} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:13.952403", "n_pass": [5930, 460, 393], "score": "0.366", "loss": "8.2963", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{} catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:15.450360", "n_pass": [5933, 461, 394], "score": "0.4312", "loss": "8.8229", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch (IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:16.949585", "n_pass": [5935, 462, 395], "score": "0.4817", "loss": "8.1443", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe) {; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:18.470179", "n_pass": [5941, 463, 396], "score": "0.4604", "loss": "9.2199", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){; } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:19.990205", "n_pass": [5943, 464, 397], "score": "0.5578", "loss": "8.1795", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ } catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:22.951638", "n_pass": [5946, 466, 398], "score": "0.3921", "loss": "8.3256", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch (InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:24.460966", "n_pass": [5948, 467, 399], "score": "0.6955", "loss": "9.1333", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\"); } } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:27.474886", "n_pass": [5961, 469, 400], "score": "0.5162", "loss": "8.5214", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");} } if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:28.969533", "n_pass": [5963, 470, 401], "score": "0.7002", "loss": "9.7572", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if (debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:31.969383", "n_pass": [5967, 472, 402], "score": "0.3827", "loss": "9.0981", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(debug4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:33.471196", "n_pass": [5969, 473, 403], "score": "0.7318", "loss": "9.1988", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4) {(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:34.995797", "n_pass": [5972, 474, 404], "score": "0.3993", "loss": "8.123", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\"); } if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:36.528909", "n_pass": [5979, 475, 405], "score": "0.4378", "loss": "10.0607", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");} if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:38.049225", "n_pass": [5981, 476, 406], "score": "0.5568", "loss": "9.0032", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if (procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:39.588091", "n_pass": [5983, 477, 407], "score": "0.6162", "loss": "8.2209", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(procnull) {proc = null; } } }"}
{"time": "2021-01-20 09:10:41.101387", "n_pass": [5985, 478, 408], "score": "0.5784", "loss": "9.0947", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null) {proc = null; } } }"}
{"time": "2021-01-20 09:10:42.623330", "n_pass": [5988, 479, 409], "score": "0.5328", "loss": "8.7503", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc = null; } } }"}
{"time": "2021-01-20 09:10:45.599413", "n_pass": [5993, 481, 410], "score": "0.5219", "loss": "8.3614", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null; } } }"}
{"time": "2021-01-20 09:10:47.101195", "n_pass": [5996, 482, 411], "score": "0.342", "loss": "8.0347", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;} } }"}
{"time": "2021-01-20 09:10:48.610316", "n_pass": [5998, 483, 412], "score": "0.5309", "loss": "8.4962", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}} }"}
{"time": "2021-01-20 09:10:50.131466", "n_pass": [6000, 484, 413], "score": "0.5662", "loss": "9.9376", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\")\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:10:53.404317", "n_pass": [6179, 485, 414], "score": "0.5532", "loss": "8.4964", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"HTTP\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:10:54.924434", "n_pass": [6188, 486, 415], "score": "0.4138", "loss": "9.0534", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if ((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:10:56.451372", "n_pass": [6199, 487, 416], "score": "0.5056", "loss": "8.4597", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf() +1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:10:58.061028", "n_pass": [6224, 488, 417], "score": "0.3475", "loss": "9.0716", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if ((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:10:59.593018", "n_pass": [6230, 489, 418], "score": "0.5998", "loss": "8.01", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")) {((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:01.124916", "n_pass": [6237, 490, 419], "score": "0.477", "loss": "8.2065", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();} catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:02.964398", "n_pass": [6312, 491, 420], "score": "0.6143", "loss": "8.9817", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch (IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:04.459104", "n_pass": [6314, 492, 421], "score": "0.5498", "loss": "9.061", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){ }}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:06.066181", "n_pass": [6335, 493, 422], "score": "0.5681", "loss": "9.2763", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+ e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:07.626908", "n_pass": [6351, 494, 423], "score": "0.4016", "loss": "8.7565", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e); } {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:09.158383", "n_pass": [6355, 495, 424], "score": "0.4626", "loss": "9.3225", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);} {if(cgiHeaderReader=null){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:12.147567", "n_pass": [6362, 497, 425], "score": "0.6792", "loss": "9.4059", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);} {if(cgiHeaderReadernull){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:13.636364", "n_pass": [6363, 498, 426], "score": "0.499", "loss": "9.7176", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);} {if(cgiHeaderReader){try{close(); } catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:15.195055", "n_pass": [6372, 499, 427], "score": "0.4281", "loss": "8.8803", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);} {if(cgiHeaderReader){try{close();} catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:16.689570", "n_pass": [6374, 500, 428], "score": "0.6882", "loss": "9.8253", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);} {if(cgiHeaderReader){try{close();}catch(IOException ioe) {(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:18.252879", "n_pass": [6381, 501, 429], "score": "0.4406", "loss": "8.7806", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);} {if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){ }catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:19.877187", "n_pass": [6407, 502, 430], "score": "0.3684", "loss": "9.5156", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);} {if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e) {(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:21.406461", "n_pass": [6415, 503, 431], "score": "0.3987", "loss": "9.5301", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);} {if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}} if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:22.933563", "n_pass": [6424, 504, 432], "score": "0.3619", "loss": "7.9372", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);} {if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc =null;}}}"}
{"time": "2021-01-20 09:11:24.513454", "n_pass": [6442, 505, 433], "score": "0.605", "loss": "9.3502", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);} {if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc=null;}}}"}
{"time": "2021-01-20 09:11:30.044954", "n_pass": [6793, 507, 434], "score": "0.5046", "loss": "9.2306", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc=null;}}}"}
{"time": "2021-01-20 09:11:31.979535", "n_pass": [6870, 508, 435], "score": "0.5355", "loss": "8.3318", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){procnull;}}}"}
{"time": "2021-01-20 09:11:33.482163", "n_pass": [6871, 509, 436], "score": "0.3926", "loss": "9.9068", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){proc;}}}"}
{"time": "2021-01-20 09:11:38.614325", "n_pass": [7295, 510, 437], "score": "0.4263", "loss": "7.7717", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){;}}}"}
{"time": "2021-01-20 09:11:40.118575", "n_pass": [7296, 511, 438], "score": "0.3872", "loss": "8.3917", "code": "{if(isReady){(\"\"+\"\");}if((0)|(indexOf()>0)|((\"\".separator)=0)){(getClass().getName()+\"\"+\"\");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);(\"\");if(\"\".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&(\"\".equals)){if(2){(\"\"+\"\");}if((\"\")){(getSCFromHttpStatusLine);}if((\"\")>0){line(0,(\"\")).substring(indexOf()+1);if((\"\")){((value));(value);}(\"\"+\"\");}}try{while(((bBuf))){if(debug){(\"\");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(\"\"+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(\"\"+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){(\"\");}}if(4){(\"\");}if(null){}}}"}

Minimal simplified code:
{if(isReady){(""+"");}if((0)|(indexOf()>0)|(("".separator)=0)){(getClass().getName()+""+"");}if(0){cmdAndArgs();}cmdAndArgs();try{rt((String[cmdAndArgs()]),wd);("");if("".equals){(proc());}((proc()));errReaderThread=new Thread(){void run(){}};((cgiHeaderStream));while(isRunning){try{while(((line())!=null)&("".equals)){if(2){(""+"");}if(("")){(getSCFromHttpStatusLine);}if(("")>0){line(0,("")).substring(indexOf()+1);if(("")){((value));(value);}(""+"");}}try{while(((bBuf))){if(debug){("");}write();}}finally{if(1){while(((bBuf))){}}}exitValue();}catch(IllegalThreadStateException e){try{(0);}catch(InterruptedException ignored){}}}}catch(IOException e){(""+e);}{if(cgiHeaderReader){try{close();}catch(IOException ioe){(""+ioe);}}if(null){try{}catch(IOException ioe){}catch(InterruptedException e){("");}}if(4){("");}if(null){}}}

