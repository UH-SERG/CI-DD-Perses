
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/codefollower__Tomcat-Research/modules/tomcat-lite/java/org/apache/tomcat/lite/io/NioThread_run.java
method_name = run
method_body = public void run() { int sloops = 0; if (debug) { log.info("Start NIO thread, daemon=" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if (debugWakeup && selected == 0) { if (sleepTime < maxSleep - 1000) { log.info("Wakeup " + selected + " " + slept + " " + sleepTime); } } if (slept < 10 && selected == 0) { if (sloops > 50) { sloops = 0; log.severe("Looping !"); resetSelector(); } sloops++; } if (selected != 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info("Wakeup selCnt=" + selected + " slept=" + (lastWakeup - now) + " ready: " + readyOps + " v=" + sk.isValid() + " ch=" + ch); } if (ch == null) { log.severe("Missing channel"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe("Invalid state, selKey doesn't match "); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe("Invalid state, channel doesn't match "); } if (!sk.isValid()) { if (debug) { log.info("!isValid, closed socket " + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning("Callback too long ! ops=" + ready + " time=" + callbackTime + " ch=" + ch + " " + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, "SelectorThread: Channel error, closing", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, "SelectorThread: Error in select", e); } } log.info("SelectorThread done"); }
predict, score, loss = run, 0.53656805, 1.0333747

Trace of simplified code(s):
{"time": "2021-01-20 09:20:50.973537", "n_pass": [1, 1, 1], "score": "0.7407", "loss": "0.4718", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if (debugWakeup && selected == 0) { if (sleepTime < maxSleep - 1000) { log.info(\"Wakeup \" + selected + \" \" + slept + \" \" + sleepTime); } } if (slept < 10 && selected == 0) { if (sloops > 50) { sloops = 0; log.severe(\"Looping !\"); resetSelector(); } sloops++; } if (selected != 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:20:52.629954", "n_pass": [21, 2, 2], "score": "0.8561", "loss": "0.302", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if ( 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_CONNECT); SocketChannel sc = (SocketChannel) sk.channel(); handleConnect(ch, sc); } if (sk.isValid() && sk.isWritable()) { sk.interestOps(sk.interestOps() & ~SelectionKey.OP_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:20:54.322503", "n_pass": [49, 3, 3], "score": "0.8337", "loss": "0.4157", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if ( 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.severe(\"Missing channel\"); sk.cancel(); continue; } if (ch.selKey != sk) { log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:20:56.858968", "n_pass": [108, 4, 4], "score": "0.8024", "loss": "0.4313", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } int selected = selector.select(sleepTime); lastWakeup = System.currentTimeMillis(); long slept = lastWakeup - now; if ( 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:20:59.303219", "n_pass": [218, 5, 5], "score": "0.801", "loss": "0.4209", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } System.currentTimeMillis(); long slept = lastWakeup - now; if ( 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:00.876224", "n_pass": [219, 6, 6], "score": "0.8334", "loss": "0.3165", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; int callbackCnt = 0; Set<SelectionKey> sel = selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:02.424520", "n_pass": [221, 7, 7], "score": "0.9854", "loss": "0.0616", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; selector.selectedKeys(); Iterator<SelectionKey> i = sel.iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:03.966022", "n_pass": [222, 8, 8], "score": "0.6537", "loss": "0.7571", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt++; long beforeCallback = System.currentTimeMillis(); SelectionKey sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:05.502339", "n_pass": [224, 9, 9], "score": "0.7774", "loss": "0.4815", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0; NioChannel ch = (NioChannel) sk.attachment(); if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:07.057339", "n_pass": [228, 10, 10], "score": "0.9739", "loss": "0.0551", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \" v=\" + sk.isValid() + \" ch=\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:08.581893", "n_pass": [232, 11, 11], "score": "0.8016", "loss": "0.4351", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state, selKey doesn't match \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:11.185176", "n_pass": [366, 12, 12], "score": "0.6087", "loss": "0.855", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid state, channel doesn't match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:12.741596", "n_pass": [373, 13, 13], "score": "0.986", "loss": "0.0289", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid() && sk.isAcceptable()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:14.305844", "n_pass": [384, 14, 14], "score": "0.9698", "loss": "0.0807", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isValid() && sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:15.846883", "n_pass": [387, 15, 15], "score": "0.6759", "loss": "0.594", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + ready + \" time=\" + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:17.426860", "n_pass": [400, 16, 16], "score": "0.9655", "loss": "0.0749", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch=\" + ch + \" \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:18.960283", "n_pass": [402, 17, 17], "score": "0.71", "loss": "0.5372", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } if (callbackTime > maxCallbackTime) { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:20.468952", "n_pass": [404, 18, 18], "score": "0.8722", "loss": "0.2714", "code": "public void run() { int sloops = 0; if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:22.063969", "n_pass": [421, 19, 19], "score": "0.8558", "loss": "0.3019", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } ; if ( 0) { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:23.611339", "n_pass": [432, 20, 20], "score": "0.9374", "loss": "0.1367", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove(); boolean valid = sk.isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:25.135329", "n_pass": [438, 21, 21], "score": "0.8531", "loss": "0.308", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i.next(); i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:27.169728", "n_pass": [668, 22, 22], "score": "0.8947", "loss": "0.1959", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = i; i.remove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:28.672972", "n_pass": [669, 23, 23], "score": "0.9378", "loss": "0.1297", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iremove();isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:30.203124", "n_pass": [670, 24, 24], "score": "0.8989", "loss": "0.1751", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"Wakeup selCnt=\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:31.770884", "n_pass": [681, 25, 25], "score": "0.729", "loss": "0.4945", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel != sk.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:33.360381", "n_pass": [701, 26, 26], "score": "0.9812", "loss": "0.0391", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid, closed socket \" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:35.096262", "n_pass": [715, 27, 27], "score": "0.7941", "loss": "0.4147", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } ch.close(); continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:36.598200", "n_pass": [718, 28, 28], "score": "0.9283", "loss": "0.1378", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } ; continue; } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:38.117018", "n_pass": [719, 29, 29], "score": "0.9591", "loss": "0.0871", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk.interestOps() &_WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:39.691724", "n_pass": [732, 30, 30], "score": "0.8365", "loss": "0.2901", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); ch.writeInterest = false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:41.214670", "n_pass": [734, 31, 31], "score": "0.4462", "loss": "1.0896", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE);  false; handleDataWriteable(ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:42.708084", "n_pass": [735, 32, 32], "score": "0.7443", "loss": "0.4771", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); (ch); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:44.204406", "n_pass": [736, 33, 33], "score": "0.9135", "loss": "0.1901", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid() && sk.isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:45.712073", "n_pass": [739, 34, 34], "score": "0.7191", "loss": "0.5147", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillis() - beforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:47.228466", "n_pass": [745, 35, 35], "score": "0.9632", "loss": "0.0804", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback too long ! ops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:48.766325", "n_pass": [751, 36, 36], "score": "0.9083", "loss": "0.1567", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet(); this.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:50.315404", "n_pass": [760, 37, 37], "score": "0.8363", "loss": "0.3064", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(Level.SEVERE, \"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:51.834616", "n_pass": [766, 38, 38], "score": "0.8478", "loss": "0.2641", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel error, closing\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:53.335880", "n_pass": [768, 39, 39], "score": "0.9668", "loss": "0.0684", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread: Error in select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:55.308418", "n_pass": [781, 40, 40], "score": "0.9362", "loss": "0.124", "code": "public void run() { if (debug) { log.info(\"Start NIO thread, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:57.253264", "n_pass": [793, 41, 41], "score": "0.7782", "loss": "0.3478", "code": "public void run() { if (debug) { log.info(\"Start, daemon=\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:21:58.747202", "n_pass": [794, 42, 42], "score": "0.9758", "loss": "0.0483", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops.incrementAndGet(); processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:00.279101", "n_pass": [801, 43, 43], "score": "0.9487", "loss": "0.1031", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); } { sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:01.825701", "n_pass": [811, 44, 44], "score": "0.7348", "loss": "0.4983", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); sloops = 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:03.319089", "n_pass": [812, 45, 45], "score": "0.7676", "loss": "0.4467", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); 0; iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:04.815256", "n_pass": [813, 46, 46], "score": "0.8594", "loss": "0.2445", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now);iterator(); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:06.313525", "n_pass": [814, 47, 47], "score": "0.7517", "loss": "0.3898", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (i.hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:11.383591", "n_pass": [1195, 48, 48], "score": "0.6064", "loss": "0.5992", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { callbackCnt sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:12.888074", "n_pass": [1198, 49, 49], "score": "0.8863", "loss": "0.1905", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk = iisValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:14.392567", "n_pass": [1201, 50, 50], "score": "0.9669", "loss": "0.0559", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); int readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:15.900301", "n_pass": [1204, 51, 51], "score": "0.9399", "loss": "0.1102", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk.readyOps() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:17.816801", "n_pass": [1211, 52, 52], "score": "0.9669", "loss": "0.0673", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk() : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:19.309572", "n_pass": [1212, 53, 53], "score": "0.9764", "loss": "0.0448", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log.info(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:20.838931", "n_pass": [1220, 54, 54], "score": "0.959", "loss": "0.0678", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + selected + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:22.347972", "n_pass": [1224, 55, 55], "score": "0.74", "loss": "0.4964", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:23.834950", "n_pass": [1225, 56, 56], "score": "0.6774", "loss": "0.5861", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" slept=\" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:25.325222", "n_pass": [1227, 57, 57], "score": "0.9817", "loss": "0.0367", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \" ready: \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:26.844155", "n_pass": [1236, 58, 58], "score": "0.933", "loss": "0.1206", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + readyOps + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:28.360062", "n_pass": [1239, 59, 59], "score": "0.7702", "loss": "0.4046", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:29.865598", "n_pass": [1240, 60, 60], "score": "0.8669", "loss": "0.2286", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (ch == null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:31.409859", "n_pass": [1249, 61, 61], "score": "0.939", "loss": "0.1097", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (ch= null) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:32.895627", "n_pass": [1250, 62, 62], "score": "0.6766", "loss": "0.5534", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log.log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:34.413627", "n_pass": [1254, 63, 63], "score": "0.8688", "loss": "0.2089", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log.severe(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:35.935618", "n_pass": [1255, 64, 64], "score": "0.8786", "loss": "0.2326", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"Invalid state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:37.437379", "n_pass": [1257, 65, 65], "score": "0.9402", "loss": "0.1069", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"state \"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:38.925113", "n_pass": [1258, 66, 66], "score": "0.9321", "loss": "0.1142", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); ch.selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:40.415973", "n_pass": [1261, 67, 67], "score": "0.912", "loss": "0.1521", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey = sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:41.909960", "n_pass": [1263, 68, 68], "score": "0.8861", "loss": "0.2009", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (ch.channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:43.415906", "n_pass": [1268, 69, 69], "score": "0.9737", "loss": "0.0493", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel.channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:44.915199", "n_pass": [1269, 70, 70], "score": "0.9712", "loss": "0.0604", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch.channel = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:46.418736", "n_pass": [1274, 71, 71], "score": "0.8643", "loss": "0.2156", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sk.channel(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:47.943250", "n_pass": [1277, 72, 72], "score": "0.8778", "loss": "0.2325", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sk(); log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:49.421579", "n_pass": [1278, 73, 73], "score": "0.9756", "loss": "0.0541", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sk; log.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:50.912405", "n_pass": [1279, 74, 74], "score": "0.4631", "loss": "0.9192", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sklog.severe(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:52.403041", "n_pass": [1280, 75, 75], "score": "0.9656", "loss": "0.0705", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid match \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:53.893984", "n_pass": [1283, 76, 76], "score": "0.8118", "loss": "0.3716", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk.isValid()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:55.395212", "n_pass": [1290, 77, 77], "score": "0.7217", "loss": "0.5199", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk()) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:56.875587", "n_pass": [1291, 78, 78], "score": "0.9296", "loss": "0.138", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { log.info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:58.388151", "n_pass": [1298, 79, 79], "score": "0.9489", "loss": "0.0881", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!isValid,\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:22:59.884597", "n_pass": [1301, 80, 80], "score": "0.8062", "loss": "0.381", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { int ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:01.409579", "n_pass": [1310, 81, 81], "score": "0.8093", "loss": "0.2776", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready = sk.readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:02.894874", "n_pass": [1312, 82, 82], "score": "0.765", "loss": "0.3222", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch, sk); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:04.587149", "n_pass": [1320, 83, 83], "score": "0.9304", "loss": "0.1246", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(sk._WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:06.117004", "n_pass": [1328, 84, 84], "score": "0.9783", "loss": "0.0456", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid().isReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:07.632535", "n_pass": [1333, 85, 85], "score": "0.6867", "loss": "0.4756", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValidisReadable()) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:09.136763", "n_pass": [1334, 86, 86], "score": "0.9778", "loss": "0.0454", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = System.currentTimeMillisbeforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:10.666724", "n_pass": [1341, 87, 87], "score": "0.4729", "loss": "0.9089", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (callbackTime > 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:12.164562", "n_pass": [1344, 88, 88], "score": "0.953", "loss": "0.0824", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if ( 250) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:13.638011", "n_pass": [1345, 89, 89], "score": "0.9416", "loss": "0.0977", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback tooops=\" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:15.144824", "n_pass": [1350, 90, 90], "score": "0.9603", "loss": "0.063", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + + callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:16.634343", "n_pass": [1352, 91, 91], "score": "0.9668", "loss": "0.0538", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" +callbackTime + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:18.126391", "n_pass": [1353, 92, 92], "score": "0.9871", "loss": "0.0253", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTime = callbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:19.634245", "n_pass": [1360, 93, 93], "score": "0.7627", "loss": "0.4058", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount.incrementAndGet.callbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:21.110884", "n_pass": [1363, 94, 94], "score": "0.7778", "loss": "0.4064", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCountcallbackTotalTime.addAndGet(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:22.590238", "n_pass": [1364, 95, 95], "score": "0.8809", "loss": "0.1963", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount(callbackTime); } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:24.058117", "n_pass": [1365, 96, 96], "score": "0.9821", "loss": "0.035", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\", t); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:25.551764", "n_pass": [1374, 97, 97], "score": "0.9411", "loss": "0.0921", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException = t; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:27.026913", "n_pass": [1377, 98, 98], "score": "0.9038", "loss": "0.1729", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptiont; ch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:28.492515", "n_pass": [1378, 99, 99], "score": "0.9229", "loss": "0.1375", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastExceptionch.close(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:29.959884", "n_pass": [1379, 100, 100], "score": "0.9398", "loss": "0.1159", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"SelectorThread:select\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:31.486749", "n_pass": [1393, 101, 101], "score": "0.7465", "loss": "0.4268", "code": "public void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:32.983951", "n_pass": [1402, 102, 102], "score": "0.7913", "loss": "0.3555", "code": "void run() { if (debug) { log.info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:34.847305", "n_pass": [1411, 103, 103], "score": "0.8317", "loss": "0.2483", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { loops. processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:36.340637", "n_pass": [1425, 104, 104], "score": "0.7208", "loss": "0.4988", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPending(); long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:37.793483", "n_pass": [1427, 105, 105], "score": "0.9491", "loss": "0.0991", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPending; long now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:39.284361", "n_pass": [1428, 106, 106], "score": "0.7611", "loss": "0.4287", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendinglong now = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:40.734976", "n_pass": [1429, 107, 107], "score": "0.9667", "loss": "0.0578", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingnow = System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:42.231682", "n_pass": [1430, 108, 108], "score": "0.9601", "loss": "0.0688", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPending= System.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:43.679769", "n_pass": [1431, 109, 109], "score": "0.8559", "loss": "0.2403", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingSystem.currentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:45.128593", "n_pass": [1432, 110, 110], "score": "0.7693", "loss": "0.4184", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) { updateSleepTimeAndProcessTimeouts(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:46.624999", "n_pass": [1441, 111, 111], "score": "0.8381", "loss": "0.3516", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { sk =isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:48.097016", "n_pass": [1450, 112, 112], "score": "0.5376", "loss": "0.7868", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { skisValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) { log(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:49.983974", "n_pass": [1465, 113, 113], "score": "0.9284", "loss": "0.136", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { skisValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) { log(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:51.529123", "n_pass": [1490, 114, 114], "score": "0.7149", "loss": "0.48", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { skisValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\"); selKey sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:52.985303", "n_pass": [1494, 115, 115], "score": "0.9428", "loss": "0.1095", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { skisValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\"); sk; } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:54.425089", "n_pass": [1495, 116, 116], "score": "0.838", "loss": "0.2953", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { skisValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) { ch = sksevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:55.887887", "n_pass": [1504, 117, 117], "score": "0.864", "loss": "0.2463", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { skisValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) { ch =severe(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTime = beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:57.513213", "n_pass": [1553, 118, 118], "score": "0.8193", "loss": "0.2864", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try {  processPendingcurrentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { skisValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) { ch =severe(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:23:59.564687", "n_pass": [1621, 119, 119], "score": "0.9223", "loss": "0.1239", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) { skisValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) { ch =severe(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:01.043030", "n_pass": [1637, 120, 120], "score": "0.7102", "loss": "0.4657", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) { ch =severe(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:03.200573", "n_pass": [1686, 121, 121], "score": "0.8809", "loss": "0.2007", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) { chsevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } long callbackTimebeforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:04.816620", "n_pass": [1734, 122, 122], "score": "0.7292", "loss": "0.5034", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) { chsevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } beforeCallback; if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:06.245413", "n_pass": [1735, 123, 123], "score": "0.904", "loss": "0.1872", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) { chsevere(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:08.854124", "n_pass": [1864, 124, 124], "score": "0.8589", "loss": "0.2174", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {severe(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:48.200746", "n_pass": [2390, 125, 125], "score": "0.8852", "loss": "0.2072", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"Invalid \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:49.641504", "n_pass": [2392, 126, 126], "score": "0.8847", "loss": "0.2089", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\" \"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:51.108778", "n_pass": [2393, 127, 127], "score": "0.955", "loss": "0.0855", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\"); } if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:52.558309", "n_pass": [2397, 128, 128], "score": "0.9738", "loss": "0.0551", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");} if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:53.996841", "n_pass": [2399, 129, 129], "score": "0.9268", "loss": "0.1298", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if (!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:55.436105", "n_pass": [2401, 130, 130], "score": "0.9344", "loss": "0.1189", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(!sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:56.903817", "n_pass": [2403, 131, 131], "score": "0.9234", "loss": "0.1549", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk) { if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:58.363682", "n_pass": [2406, 132, 132], "score": "0.7453", "loss": "0.48", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){ if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:24:59.803042", "n_pass": [2408, 133, 133], "score": "0.8636", "loss": "0.2042", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if (debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:01.248275", "n_pass": [2410, 134, 134], "score": "0.9327", "loss": "0.1125", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug) { info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:02.699204", "n_pass": [2414, 135, 135], "score": "0.7383", "loss": "0.4415", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){ info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:04.138659", "n_pass": [2416, 136, 136], "score": "0.8861", "loss": "0.2297", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){info(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:05.577879", "n_pass": [2417, 137, 137], "score": "0.9265", "loss": "0.1333", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"!\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:07.031429", "n_pass": [2420, 138, 138], "score": "0.9446", "loss": "0.1063", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\" + ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:08.471032", "n_pass": [2422, 139, 139], "score": "0.819", "loss": "0.3563", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:09.935751", "n_pass": [2424, 140, 140], "score": "0.948", "loss": "0.0943", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch); } } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:11.404951", "n_pass": [2428, 141, 141], "score": "0.9346", "loss": "0.1185", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);} } try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:12.846386", "n_pass": [2430, 142, 142], "score": "0.7102", "loss": "0.4871", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}} try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:14.287626", "n_pass": [2432, 143, 143], "score": "0.9804", "loss": "0.0416", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try { ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:15.730464", "n_pass": [2434, 144, 144], "score": "0.9613", "loss": "0.0726", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:17.171876", "n_pass": [2436, 145, 145], "score": "0.876", "loss": "0.2047", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready .readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:18.612767", "n_pass": [2438, 146, 146], "score": "0.5567", "loss": "0.7544", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps(); if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:21.510836", "n_pass": [2444, 148, 147], "score": "0.8478", "loss": "0.2688", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if (sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:22.976381", "n_pass": [2446, 149, 148], "score": "0.9347", "loss": "0.1225", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk.isValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:24.415292", "n_pass": [2449, 150, 149], "score": "0.9422", "loss": "0.1106", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(skisValid()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:25.853912", "n_pass": [2450, 151, 150], "score": "0.8919", "loss": "0.2443", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()) { handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:27.314982", "n_pass": [2454, 152, 151], "score": "0.9481", "loss": "0.0904", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){ handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:28.753040", "n_pass": [2456, 153, 152], "score": "0.9635", "loss": "0.0745", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){handleAccept(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:30.192783", "n_pass": [2457, 154, 153], "score": "0.74", "loss": "0.3906", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch); } if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:31.647692", "n_pass": [2462, 155, 154], "score": "0.9378", "loss": "0.1211", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);} if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:33.102598", "n_pass": [2464, 156, 155], "score": "0.9466", "loss": "0.1006", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if (sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:34.565691", "n_pass": [2466, 157, 156], "score": "0.9741", "loss": "0.053", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk.isConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:36.003762", "n_pass": [2469, 158, 157], "score": "0.946", "loss": "0.1225", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(skisConnectable()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:37.435675", "n_pass": [2470, 159, 158], "score": "0.8834", "loss": "0.2099", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()) { sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:39.129420", "n_pass": [2474, 160, 159], "score": "0.9117", "loss": "0.1662", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){ sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:40.572307", "n_pass": [2476, 161, 160], "score": "0.969", "loss": "0.0715", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk.interestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:42.011517", "n_pass": [2478, 162, 161], "score": "0.734", "loss": "0.4508", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){skinterestOps(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:43.454297", "n_pass": [2479, 163, 162], "score": "0.8375", "loss": "0.3348", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk(WRITE); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:44.885336", "n_pass": [2481, 164, 163], "score": "0.927", "loss": "0.1424", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk(); } if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:46.365371", "n_pass": [2484, 165, 164], "score": "0.9095", "loss": "0.1885", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();} if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:47.820243", "n_pass": [2486, 166, 165], "score": "0.829", "loss": "0.2976", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if (sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:49.254990", "n_pass": [2488, 167, 166], "score": "0.7774", "loss": "0.3869", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk.isValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:50.689796", "n_pass": [2491, 168, 167], "score": "0.8736", "loss": "0.1988", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(skisValid) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:52.122632", "n_pass": [2492, 169, 168], "score": "0.9171", "loss": "0.1485", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk) { handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:53.568501", "n_pass": [2494, 170, 169], "score": "0.9423", "loss": "0.1031", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){ handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:55.028805", "n_pass": [2496, 171, 170], "score": "0.6579", "loss": "0.5405", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){handleReadable(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:56.468251", "n_pass": [2497, 172, 171], "score": "0.925", "loss": "0.1427", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch); } if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:57.926017", "n_pass": [2502, 173, 172], "score": "0.8184", "loss": "0.3385", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);} if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:25:59.356001", "n_pass": [2504, 174, 173], "score": "0.7977", "loss": "0.3569", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log.warning(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:00.818705", "n_pass": [2510, 175, 174], "score": "0.7927", "loss": "0.3712", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"Callback \" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:02.258715", "n_pass": [2512, 176, 175], "score": "0.9568", "loss": "0.0852", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" ch \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:03.689677", "n_pass": [2516, 177, 176], "score": "0.8189", "loss": "0.3375", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { maxCallbackTimecallbackTime; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:05.150783", "n_pass": [2523, 178, 177], "score": "0.4622", "loss": "0.9248", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { ; } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:06.579564", "n_pass": [2524, 179, 178], "score": "0.8941", "loss": "0.1984", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { } callbackCount; } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:08.020635", "n_pass": [2526, 180, 179], "score": "0.9508", "loss": "0.0991", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log.log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:09.469614", "n_pass": [2534, 181, 180], "score": "0.8485", "loss": "0.2703", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"SelectorThread: Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:10.896191", "n_pass": [2536, 182, 181], "score": "0.8621", "loss": "0.2803", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\" Channel\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:12.316771", "n_pass": [2537, 183, 182], "score": "0.9066", "loss": "0.1674", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); ch.lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:13.746976", "n_pass": [2540, 184, 183], "score": "0.9444", "loss": "0.1072", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel.clear(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:15.184437", "n_pass": [2546, 185, 184], "score": "0.8534", "loss": "0.2652", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel(); } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:16.596411", "n_pass": [2547, 186, 185], "score": "0.8545", "loss": "0.2804", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log.log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:18.049421", "n_pass": [2556, 187, 186], "score": "0.8764", "loss": "0.2475", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log(Level.SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:19.470291", "n_pass": [2558, 188, 187], "score": "0.7411", "loss": "0.4882", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log(SEVERE, \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:20.888665", "n_pass": [2559, 189, 188], "score": "0.6754", "loss": "0.5995", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"SelectorThread done\"); }"}
{"time": "2021-01-20 09:26:23.742298", "n_pass": [2569, 191, 189], "score": "0.9058", "loss": "0.205", "code": "void run() { if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:25.949274", "n_pass": [2578, 192, 190], "score": "0.8849", "loss": "0.2122", "code": "void run(){ if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:27.365849", "n_pass": [2580, 193, 191], "score": "0.8428", "loss": "0.2481", "code": "void run(){if (debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:28.790199", "n_pass": [2582, 194, 192], "score": "0.8728", "loss": "0.2192", "code": "void run(){if(debug) { info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:30.238060", "n_pass": [2586, 195, 193], "score": "0.931", "loss": "0.1345", "code": "void run(){if(debug){ info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:31.658444", "n_pass": [2588, 196, 194], "score": "0.8778", "loss": "0.2298", "code": "void run(){if(debug){info(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:33.075770", "n_pass": [2589, 197, 195], "score": "0.8723", "loss": "0.2302", "code": "void run(){if(debug){(\"Start\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:34.518488", "n_pass": [2592, 198, 196], "score": "0.726", "loss": "0.3901", "code": "void run(){if(debug){(\"\" + daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:35.937334", "n_pass": [2594, 199, 197], "score": "0.8867", "loss": "0.1836", "code": "void run(){if(debug){(\"\"+ daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:37.387337", "n_pass": [2596, 200, 198], "score": "0.8589", "loss": "0.2431", "code": "void run(){if(debug){(\"\"+daemon); } while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:38.836793", "n_pass": [2600, 201, 199], "score": "0.4564", "loss": "0.9134", "code": "void run(){if(debug){(\"\"+daemon);} while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:40.275203", "n_pass": [2602, 202, 200], "score": "0.7391", "loss": "0.4119", "code": "void run(){if(debug){(\"\"+daemon);}while (running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:41.693678", "n_pass": [2604, 203, 201], "score": "0.8792", "loss": "0.209", "code": "void run(){if(debug){(\"\"+daemon);}while(running) { try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:43.115729", "n_pass": [2608, 204, 202], "score": "0.8512", "loss": "0.3769", "code": "void run(){if(debug){(\"\"+daemon);}while(running){ try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:44.552611", "n_pass": [2610, 205, 203], "score": "0.8914", "loss": "0.1694", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try { currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:45.971288", "n_pass": [2612, 206, 204], "score": "0.8749", "loss": "0.2392", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{ currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:47.418715", "n_pass": [2614, 207, 205], "score": "0.9077", "loss": "0.1887", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis(); if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:48.842527", "n_pass": [2619, 208, 206], "score": "0.8806", "loss": "0.2323", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if (nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:50.261289", "n_pass": [2621, 209, 207], "score": "0.751", "loss": "0.3771", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup < now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:51.682478", "n_pass": [2624, 210, 208], "score": "0.9012", "loss": "0.1836", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup< now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:53.121082", "n_pass": [2626, 211, 209], "score": "0.7709", "loss": "0.4084", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now) {(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:54.573412", "n_pass": [2629, 212, 210], "score": "0.8078", "loss": "0.2748", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now); while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:56.012419", "n_pass": [2635, 213, 211], "score": "0.7073", "loss": "0.4206", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while (hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:57.427839", "n_pass": [2637, 214, 212], "score": "0.8933", "loss": "0.2216", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()) {isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:26:58.884530", "n_pass": [2643, 215, 213], "score": "0.8817", "loss": "0.1911", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid(); readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:00.311547", "n_pass": [2649, 216, 214], "score": "0.9188", "loss": "0.1568", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps = (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:01.736477", "n_pass": [2651, 217, 215], "score": "0.796", "loss": "0.3063", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid) ? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:05.001301", "n_pass": [2657, 219, 216], "score": "0.9007", "loss": "0.2245", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk : 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:07.870919", "n_pass": [2661, 221, 217], "score": "0.8224", "loss": "0.3306", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk: 0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:09.294540", "n_pass": [2663, 222, 218], "score": "0.6246", "loss": "0.5856", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if (debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:10.729577", "n_pass": [2667, 223, 219], "score": "0.7403", "loss": "0.3891", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup) {(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:12.152784", "n_pass": [2671, 224, 220], "score": "0.7262", "loss": "0.4062", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\" + \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:13.611341", "n_pass": [2676, 225, 221], "score": "0.8307", "loss": "0.2934", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+ \" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:15.028932", "n_pass": [2678, 226, 222], "score": "0.6396", "loss": "0.5207", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\" \" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:16.447775", "n_pass": [2680, 227, 223], "score": "0.883", "loss": "0.2076", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\" + (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:17.851577", "n_pass": [2682, 228, 224], "score": "0.7436", "loss": "0.3651", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+ (lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:19.302106", "n_pass": [2684, 229, 225], "score": "0.7829", "loss": "0.3418", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(lastWakeup - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:20.718916", "n_pass": [2686, 230, 226], "score": "0.8277", "loss": "0.2545", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+( - now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:22.136254", "n_pass": [2687, 231, 227], "score": "0.7842", "loss": "0.3115", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(- now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:23.552814", "n_pass": [2688, 232, 228], "score": "0.9256", "loss": "0.1399", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+( now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:24.971953", "n_pass": [2689, 233, 229], "score": "0.5644", "loss": "0.6637", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) + \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:26.391769", "n_pass": [2692, 234, 230], "score": "0.8494", "loss": "0.2406", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now)+ \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:27.807558", "n_pass": [2693, 235, 231], "score": "0.8646", "loss": "0.2333", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"  \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:30.651241", "n_pass": [2696, 237, 232], "score": "0.8017", "loss": "0.3034", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \" \" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:32.068498", "n_pass": [2697, 238, 233], "score": "0.8042", "loss": "0.2901", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\" + \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:33.503675", "n_pass": [2699, 239, 234], "score": "0.7864", "loss": "0.3295", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+ \"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:34.922445", "n_pass": [2701, 240, 235], "score": "0.6137", "loss": "0.5479", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\" + ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:36.337213", "n_pass": [2704, 241, 236], "score": "0.9093", "loss": "0.1479", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:37.768244", "n_pass": [2706, 242, 237], "score": "0.6494", "loss": "0.5264", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); } if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:40.626950", "n_pass": [2712, 244, 238], "score": "0.7214", "loss": "0.3929", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if (chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:42.046183", "n_pass": [2714, 245, 239], "score": "0.5608", "loss": "0.6416", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(chnull) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:43.484088", "n_pass": [2716, 246, 240], "score": "0.8144", "loss": "0.2572", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null) {(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:44.912596", "n_pass": [2719, 247, 241], "score": "0.7301", "loss": "0.362", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");  } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:46.359992", "n_pass": [2726, 248, 242], "score": "0.7843", "loss": "0.2998", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\"); } if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:47.772011", "n_pass": [2727, 249, 243], "score": "0.8114", "loss": "0.285", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");} if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:49.205103", "n_pass": [2729, 250, 244], "score": "0.854", "loss": "0.2181", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if (channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:50.639431", "n_pass": [2731, 251, 245], "score": "0.5077", "loss": "0.7896", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()) {(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:52.064664", "n_pass": [2737, 252, 246], "score": "0.9496", "loss": "0.1129", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready.readyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:53.556359", "n_pass": [2767, 253, 247], "score": "0.7441", "loss": "0.3644", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{readyreadyOps();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:54.988383", "n_pass": [2768, 254, 248], "score": "0.7851", "loss": "0.3515", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) { log(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:56.558018", "n_pass": [2810, 255, 249], "score": "0.6872", "loss": "0.4455", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) { log(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:58.037154", "n_pass": [2828, 256, 250], "score": "0.7013", "loss": "0.4238", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } } sel; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:27:59.472325", "n_pass": [2836, 257, 251], "score": "0.8244", "loss": "0.2509", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }; } } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:00.903929", "n_pass": [2837, 258, 252], "score": "0.8869", "loss": "0.1974", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup<now){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:04.615565", "n_pass": [2891, 260, 253], "score": "0.7932", "loss": "0.2853", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeupnow){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:06.025215", "n_pass": [2892, 261, 254], "score": "0.9288", "loss": "0.1151", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps= (valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:07.879116", "n_pass": [2912, 262, 255], "score": "0.9457", "loss": "0.1009", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)? sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:09.301232", "n_pass": [2917, 263, 256], "score": "0.8864", "loss": "0.1714", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now) \"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:10.756734", "n_pass": [2937, 264, 257], "score": "0.8538", "loss": "0.2319", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch); }if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:12.179638", "n_pass": [2947, 265, 258], "score": "0.8963", "loss": "0.1612", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if (0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:29.171771", "n_pass": [3258, 267, 259], "score": "0.8891", "loss": "0.1575", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0) {(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:30.605346", "n_pass": [3261, 268, 260], "score": "0.9528", "loss": "0.0918", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\" + \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:32.065226", "n_pass": [3266, 269, 261], "score": "0.9395", "loss": "0.1095", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+ \" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:33.499017", "n_pass": [3268, 270, 262], "score": "0.8942", "loss": "0.181", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\" \" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:34.916718", "n_pass": [3270, 271, 263], "score": "0.9237", "loss": "0.1262", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\" + callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:36.348950", "n_pass": [3272, 272, 264], "score": "0.9132", "loss": "0.1354", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+ callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:37.762361", "n_pass": [3274, 273, 265], "score": "0.8852", "loss": "0.177", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt); } { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:39.208440", "n_pass": [3278, 274, 266], "score": "0.946", "loss": "0.1042", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);} { }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:40.640248", "n_pass": [3280, 275, 267], "score": "0.8369", "loss": "0.2418", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{ }  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:42.084003", "n_pass": [3282, 276, 268], "score": "0.9008", "loss": "0.1722", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}  } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:43.508623", "n_pass": [3284, 277, 269], "score": "0.8977", "loss": "0.1787", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{} } catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:44.956602", "n_pass": [3285, 278, 270], "score": "0.8872", "loss": "0.1715", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}} catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:46.370255", "n_pass": [3287, 279, 271], "score": "0.8932", "loss": "0.175", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch (Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:47.787920", "n_pass": [3289, 280, 272], "score": "0.939", "loss": "0.1197", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t) {(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:49.216580", "n_pass": [3295, 281, 273], "score": "0.9578", "loss": "0.0772", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\"); lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:50.644888", "n_pass": [3302, 282, 274], "score": "0.8915", "loss": "0.1677", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException(); } }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:52.072061", "n_pass": [3307, 283, 275], "score": "0.8792", "loss": "0.1813", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();} }} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:53.485710", "n_pass": [3309, 284, 276], "score": "0.8724", "loss": "0.187", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}} } catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:54.902981", "n_pass": [3312, 285, 277], "score": "0.9013", "loss": "0.151", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}} catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:56.357221", "n_pass": [3314, 286, 278], "score": "0.8726", "loss": "0.1928", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch (Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:57.773874", "n_pass": [3316, 287, 279], "score": "0.9455", "loss": "0.1086", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e) { log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:28:59.223145", "n_pass": [3322, 288, 280], "score": "0.8894", "loss": "0.164", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){ log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:29:00.635898", "n_pass": [3324, 289, 281], "score": "0.9267", "loss": "0.1265", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){log( \"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:29:02.055995", "n_pass": [3327, 290, 282], "score": "0.9315", "loss": "0.1146", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){log(\"\", e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:29:03.475969", "n_pass": [3331, 291, 283], "score": "0.8961", "loss": "0.1551", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){log(\"\",e); } } log.info(\"done\"); }"}
{"time": "2021-01-20 09:29:04.896431", "n_pass": [3335, 292, 284], "score": "0.9211", "loss": "0.1241", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){log(\"\",e);} } log.info(\"done\"); }"}
{"time": "2021-01-20 09:29:06.319876", "n_pass": [3337, 293, 285], "score": "0.9441", "loss": "0.1028", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){log(\"\",e);}} log.info(\"done\"); }"}
{"time": "2021-01-20 09:29:07.746782", "n_pass": [3339, 294, 286], "score": "0.7998", "loss": "0.2997", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){log(\"\",e);}}log.info(\"done\"); }"}
{"time": "2021-01-20 09:29:10.586712", "n_pass": [3345, 296, 287], "score": "0.9317", "loss": "0.1804", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){log(\"\",e);}}log.info(\"\"); }"}
{"time": "2021-01-20 09:29:12.006267", "n_pass": [3349, 297, 288], "score": "0.9598", "loss": "0.0961", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){log(\"\",e);}}log.info(\"\");}"}
{"time": "2021-01-20 09:29:15.399008", "n_pass": [3576, 298, 289], "score": "0.9281", "loss": "0.1912", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){log(\"\",e);}}loginfo(\"\");}"}
{"time": "2021-01-20 09:29:16.810133", "n_pass": [3577, 299, 290], "score": "0.9336", "loss": "0.1684", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){log(\"\",e);}}log(\"\");}"}
{"time": "2021-01-20 09:29:19.920210", "n_pass": [3808, 300, 291], "score": "0.9631", "loss": "0.0831", "code": "void run(){if(debug){(\"\"+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(\"\"+\"\"+(now)\"\"+\"\"+ch);}if(null){(\"\");}if(channel()){(\"\");}if(sk){if(debug){(\"\"+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(\"\"+\"\"+callbackCnt);}{}}catch(Throwable t){(\"\");lastException();}}}}catch(Throwable e){log(\"\",e);}}(\"\");}"}

Minimal simplified code:
void run(){if(debug){(""+daemon);}while(running){try{currentTimeMillis();if(nextWakeup){(now);while(hasNext()){isValid();readyOps=(valid)?sk:0;if(debugWakeup){(""+""+(now)""+""+ch);}if(null){("");}if(channel()){("");}if(sk){if(debug){(""+ch);}}try{ready();if(sk()){(ch);}if(sk()){sk();}if(sk){(ch);}if(0){(""+""+callbackCnt);}{}}catch(Throwable t){("");lastException();}}}}catch(Throwable e){log("",e);}}("");}

