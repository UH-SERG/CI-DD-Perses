
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/chunker/src/main/java/edu/illinois/cs/cogcomp/chunker/realign/TranslatePOSTagging_main.java
method_name = main
method_body = public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println("Pass in the directory containing both the chunker data and the pos data."); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir = new File(directory, "chunker"); File posTrainDir = new File(directory, "pos"); File outputTrainDir = new File(directory, "revised"); if (chunkerTrainDir.exists() == false) { System.err.println("There is not directory named \"" + chunkerTrainDir.toString() + "\"."); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println("There is no directory named \"" + posTrainDir.toString() + "\"."); System.exit(1); } if (outputTrainDir.exists() == true) { System.out.println("Output directory already exists \"" + outputTrainDir.toString() + "\", destroying"); final File[] files = outputTrainDir.listFiles(); for (File f : files) f.delete(); outputTrainDir.delete(); } outputTrainDir.mkdir(); System.out.println("Created " + outputTrainDir.toString()); String resultspath = outputTrainDir.toString() + File.separator; File[] chunkerfiles = chunkerTrainDir.listFiles(); File[] posFiles = posTrainDir.listFiles(); for (int i = 0; i < chunkerfiles.length; i++) { File chunkfile = chunkerfiles[i]; File posfile = posFiles[i]; if (!chunkfile.getName().equals(posfile.getName())) { System.err.println("Files names were not equal!"); System.exit(1); } try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int line = 0; int diff = 0; StringBuffer result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println("Hell fire."); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException("Sentences differed : \n" + before + "\n" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\n'); } line++; } System.out.println("Of " + line + ", " + diff + " changed."); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }
predict, score, loss = main, 0.97332245, 0.036706917

Trace of simplified code(s):
{"time": "2021-01-20 14:34:34.648124", "n_pass": [1, 1, 1], "score": "0.9956", "loss": "0.0054", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir = new File(directory, \"chunker\"); File posTrainDir = new File(directory, \"pos\"); File outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1); } if (outputTrainDir.exists() == true) { System.out.println(\"Output directory already exists \\\"\" + outputTrainDir.toString() + \"\\\", destroying\"); final File[] files = outputTrainDir.listFiles(); for (File f : files) f.delete(); outputTrainDir.delete(); } outputTrainDir.mkdir(); System.out.println(\"Created \" + outputTrainDir.toString()); String resultspath = outputTrainDir.toString() + File.separator; File[] chunkerfiles = chunkerTrainDir.listFiles(); File[] posFiles = posTrainDir.listFiles(); for (int i = 0; i < chunkerfiles.length; i++) { File chunkfile = chunkerfiles[i]; File posfile = posFiles[i]; if (!chunkfile.getName().equals(posfile.getName())) { System.err.println(\"Files names were not equal!\"); System.exit(1); } try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int line = 0; int diff = 0; StringBuffer result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:36.230531", "n_pass": [9, 2, 2], "score": "0.8764", "loss": "0.2001", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir = new File(directory, \"chunker\"); File posTrainDir = new File(directory, \"pos\"); File outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int line = 0; int diff = 0; StringBuffer result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:38.042287", "n_pass": [91, 3, 3], "score": "0.9894", "loss": "0.0134", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int line = 0; int diff = 0; StringBuffer result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:39.849336", "n_pass": [179, 4, 4], "score": "0.9986", "loss": "0.0018", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int line = 0; int diff = 0; StringBuffer result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:41.408744", "n_pass": [180, 5, 5], "score": "0.9605", "loss": "0.0564", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:42.982826", "n_pass": [185, 6, 6], "score": "0.4465", "loss": "1.3124", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:44.594673", "n_pass": [198, 7, 7], "score": "0.8992", "loss": "0.186", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory containing both the chunker data and the pos data.\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:46.151160", "n_pass": [203, 8, 8], "score": "0.9129", "loss": "0.1237", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:47.691818", "n_pass": [205, 9, 9], "score": "0.876", "loss": "0.2258", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File  =outputTrainDir = new File(directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:49.462267", "n_pass": [326, 10, 10], "score": "0.9938", "loss": "0.0086", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:51.096900", "n_pass": [352, 11, 11], "score": "0.7051", "loss": "0.5427", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\");  String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:52.729637", "n_pass": [371, 12, 12], "score": "0.9297", "loss": "0.1023", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:54.269216", "n_pass": [374, 13, 13], "score": "0.9923", "loss": "0.0113", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\n\" + before + \"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:55.807575", "n_pass": [377, 14, 14], "score": "0.9836", "loss": "0.0239", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:57.356594", "n_pass": [382, 15, 15], "score": "0.8257", "loss": "0.3638", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:34:58.882872", "n_pass": [383, 16, 16], "score": "0.9471", "loss": "0.0814", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:35:00.407986", "n_pass": [385, 17, 17], "score": "0.9539", "loss": "0.065", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + line + \", \" + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:35:01.960331", "n_pass": [392, 18, 18], "score": "0.8824", "loss": "0.2039", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(toString().getBytes(), StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:35:03.483776", "n_pass": [395, 19, 19], "score": "0.9851", "loss": "0.0193", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { SystemSystem.out.println(chunktree);; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:35:05.251391", "n_pass": [457, 20, 20], "score": "0.9764", "loss": "0.0306", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; diff++; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:35:08.174249", "n_pass": [667, 21, 21], "score": "0.9984", "loss": "0.0024", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } System.out.println(\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:35:09.717141", "n_pass": [675, 22, 22], "score": "0.9989", "loss": "0.0014", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write(StandardOpenOption.CREATE); } }"}
{"time": "2021-01-20 14:35:11.231508", "n_pass": [681, 23, 23], "score": "0.9967", "loss": "0.0046", "code": "public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:12.737200", "n_pass": [683, 24, 24], "score": "0.9995", "loss": "0.0006", "code": "void main(String[] args) throws IOException { if (args.length == 0) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:14.250594", "n_pass": [690, 25, 25], "score": "0.9082", "loss": "0.1492", "code": "void main(String[] args) throws IOException { if (args.length ) { System.err.println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:15.734440", "n_pass": [692, 26, 26], "score": "0.9993", "loss": "0.001", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass in the directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:17.235792", "n_pass": [694, 27, 27], "score": "0.9817", "loss": "0.026", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass directory .\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:18.720165", "n_pass": [695, 28, 28], "score": "0.9805", "loss": "0.0294", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists() == false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:20.231152", "n_pass": [704, 29, 29], "score": "0.978", "loss": "0.035", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System.err.println(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:21.746700", "n_pass": [707, 30, 30], "score": "0.9489", "loss": "0.0725", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There is not directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:23.224807", "n_pass": [709, 31, 31], "score": "0.8405", "loss": "0.2504", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There directory named \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:24.707950", "n_pass": [710, 32, 32], "score": "0.9991", "loss": "0.0012", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:26.210674", "n_pass": [720, 33, 33], "score": "0.9941", "loss": "0.0086", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDir == false) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:27.714351", "n_pass": [721, 34, 34], "score": "0.935", "loss": "0.1089", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"There is no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:29.210168", "n_pass": [725, 35, 35], "score": "0.9904", "loss": "0.0117", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"no directory named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:30.680816", "n_pass": [726, 36, 36], "score": "0.9973", "loss": "0.0037", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"named \\\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:32.153227", "n_pass": [727, 37, 37], "score": "0.9994", "loss": "0.0009", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:33.725875", "n_pass": [755, 38, 38], "score": "0.9965", "loss": "0.0043", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl = ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:35.215444", "n_pass": [758, 39, 39], "score": "0.7679", "loss": "0.3752", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:36.698192", "n_pass": [761, 40, 40], "score": "0.998", "loss": "0.0028", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); toString(); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:38.418674", "n_pass": [790, 41, 41], "score": "0.9957", "loss": "0.0057", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed : \\\"\\n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:39.915484", "n_pass": [797, 42, 42], "score": "0.989", "loss": "0.0144", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); Files.write; } }"}
{"time": "2021-01-20 14:35:41.464366", "n_pass": [816, 43, 43], "score": "0.999", "loss": "0.0015", "code": "void main(String[] args) throws IOException { if (args.length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:35:47.269389", "n_pass": [1174, 44, 44], "score": "0.9984", "loss": "0.0024", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); System.exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:35:48.753738", "n_pass": [1181, 45, 45], "score": "0.999", "loss": "0.0017", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDir.exists= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:35:50.255480", "n_pass": [1194, 46, 46], "score": "0.9508", "loss": "0.0664", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDir= false) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:35:51.733132", "n_pass": [1195, 47, 47], "score": "0.9978", "loss": "0.0032", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) { System(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:35:53.245334", "n_pass": [1198, 48, 48], "score": "0.9991", "loss": "0.0012", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"There \\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:35:54.716114", "n_pass": [1200, 49, 49], "score": "0.9819", "loss": "0.0238", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\\\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:35:56.342361", "n_pass": [1201, 50, 50], "score": "0.9208", "loss": "0.1232", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + chunkerTrainDir.toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:35:57.818337", "n_pass": [1204, 51, 51], "score": "0.779", "loss": "0.3175", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \"\\\".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:35:59.299762", "n_pass": [1208, 52, 52], "score": "0.9721", "loss": "0.0392", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); System.exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:00.779351", "n_pass": [1212, 53, 53], "score": "0.9293", "loss": "0.0981", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System.err.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:02.288424", "n_pass": [1222, 54, 54], "score": "0.8861", "loss": "0.1996", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System.println(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:03.763139", "n_pass": [1223, 55, 55], "score": "0.9794", "loss": "0.029", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + posTrainDir.toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:05.236077", "n_pass": [1227, 56, 56], "score": "0.9404", "loss": "0.0927", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \"\\\".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:06.744611", "n_pass": [1231, 57, 57], "score": "0.916", "loss": "0.1366", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); System.exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:08.217328", "n_pass": [1235, 58, 58], "score": "0.9975", "loss": "0.0036", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:09.709084", "n_pass": [1243, 59, 59], "score": "0.9591", "loss": "0.059", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:11.184965", "n_pass": [1245, 60, 60], "score": "0.9043", "loss": "0.1554", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:12.680941", "n_pass": [1255, 61, 61], "score": "0.9406", "loss": "0.0998", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:14.151853", "n_pass": [1257, 62, 62], "score": "0.978", "loss": "0.0328", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:15.635898", "n_pass": [1262, 63, 63], "score": "0.968", "loss": "0.0461", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { String cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:17.131175", "n_pass": [1271, 64, 64], "score": "0.9402", "loss": "0.0862", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = chunkreader.readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:18.614692", "n_pass": [1274, 65, 65], "score": "0.9118", "loss": "0.1463", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) break; pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:20.092953", "n_pass": [1281, 66, 66], "score": "0.9298", "loss": "0.1209", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =new ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:21.556022", "n_pass": [1284, 67, 67], "score": "0.7728", "loss": "0.4132", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String .sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:23.037475", "n_pass": [1289, 68, 68], "score": "0.726", "loss": "0.4912", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String (); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:24.486872", "n_pass": [1290, 69, 69], "score": "0.8344", "loss": "0.2766", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:25.945418", "n_pass": [1294, 70, 70], "score": "0.906", "loss": "0.1537", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:27.414849", "n_pass": [1299, 71, 71], "score": "0.949", "loss": "0.0813", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(ctsent, ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:28.888337", "n_pass": [1301, 72, 72], "score": "0.9159", "loss": "0.1249", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put( ct); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:30.352362", "n_pass": [1302, 73, 73], "score": "0.988", "loss": "0.0196", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { ChunkTree pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:31.841691", "n_pass": [1312, 74, 74], "score": "0.9284", "loss": "0.1067", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences.add(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:33.298667", "n_pass": [1316, 75, 75], "score": "0.6613", "loss": "0.7566", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } int result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:34.783890", "n_pass": [1323, 76, 76], "score": "0.9937", "loss": "0.0091", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:36.241785", "n_pass": [1326, 77, 77], "score": "0.9058", "loss": "0.164", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:37.693975", "n_pass": [1328, 78, 78], "score": "0.8332", "loss": "0.3057", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:39.193225", "n_pass": [1337, 79, 79], "score": "0.8007", "loss": "0.3683", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree= chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:40.656801", "n_pass": [1338, 80, 80], "score": "0.959", "loss": "0.0701", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); chunktree.merge(postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:42.149489", "n_pass": [1352, 81, 81], "score": "0.9713", "loss": "0.0445", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); (postree); if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:43.593593", "n_pass": [1353, 82, 82], "score": "0.9693", "loss": "0.0491", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throw new RuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:45.054957", "n_pass": [1358, 83, 83], "score": "0.925", "loss": "0.1315", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\"Sentences differed n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:46.523645", "n_pass": [1360, 84, 84], "score": "0.9782", "loss": "0.0389", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System; } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:48.012081", "n_pass": [1372, 85, 85], "score": "0.9078", "loss": "0.1587", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } result.append(chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:49.455360", "n_pass": [1374, 86, 86], "score": "0.9789", "loss": "0.0389", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); result.append('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:50.943122", "n_pass": [1378, 87, 87], "score": "0.9783", "loss": "0.0373", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + + diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:52.404017", "n_pass": [1387, 88, 88], "score": "0.9692", "loss": "0.0483", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" +diff + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:53.839463", "n_pass": [1388, 89, 89], "score": "0.9429", "loss": "0.0914", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) { System(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:55.821992", "n_pass": [1441, 90, 90], "score": "0.9684", "loss": "0.0543", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  pl =ChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:57.564725", "n_pass": [1490, 91, 91], "score": "0.9795", "loss": "0.034", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  plChunkTree(cl); String ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:36:59.007385", "n_pass": [1494, 92, 92], "score": "0.9749", "loss": "0.0398", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  plChunkTree(cl); ; if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:00.437804", "n_pass": [1495, 93, 93], "score": "0.9494", "loss": "0.084", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  plChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { pt =  posSentences(pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:01.931189", "n_pass": [1514, 94, 94], "score": "0.9956", "loss": "0.0066", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  plChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { pt = (pt); } } } } result = StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:03.390345", "n_pass": [1522, 95, 95], "score": "0.9586", "loss": "0.0631", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  plChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { pt = (pt); } } } } result StringBuffer; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:04.840309", "n_pass": [1523, 96, 96], "score": "0.9524", "loss": "0.0706", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null)  plChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { pt = (pt); } } } } result; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:07.110493", "n_pass": [1672, 97, 97], "score": "0.9603", "loss": "0.0626", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { pt = (pt); } } } } result; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:08.614508", "n_pass": [1693, 98, 98], "score": "0.9391", "loss": "0.1049", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { pt (pt); } } } } result; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:10.068865", "n_pass": [1700, 99, 99], "score": "0.9799", "loss": "0.036", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { pt (pt); } } } }; for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:11.533908", "n_pass": [1701, 100, 100], "score": "0.9942", "loss": "0.0091", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { pt (pt); } } } }for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:14.062658", "n_pass": [1868, 101, 101], "score": "0.9343", "loss": "0.1041", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt); } } } }for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:52.312922", "n_pass": [2389, 102, 102], "score": "0.8677", "loss": "0.2384", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);} } } }for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:53.773536", "n_pass": [2390, 103, 103], "score": "0.9767", "loss": "0.0419", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}} } }for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:55.216096", "n_pass": [2392, 104, 104], "score": "0.9101", "loss": "0.1631", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}} }for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:56.654333", "n_pass": [2394, 105, 105], "score": "0.9885", "loss": "0.0177", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for (ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:58.113411", "n_pass": [2397, 106, 106], "score": "0.9895", "loss": "0.0172", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree : posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:37:59.573285", "n_pass": [2402, 107, 107], "score": "0.9947", "loss": "0.0081", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree: posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:00.999504", "n_pass": [2404, 108, 108], "score": "0.9168", "loss": "0.1363", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences) { ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:02.447350", "n_pass": [2407, 109, 109], "score": "0.9987", "loss": "0.002", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:03.883658", "n_pass": [2409, 110, 110], "score": "0.9439", "loss": "0.0863", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree.get(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:05.364469", "n_pass": [2411, 111, 111], "score": "0.8415", "loss": "0.3325", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTreeget(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:06.795874", "n_pass": [2412, 112, 112], "score": "0.9581", "loss": "0.0684", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree.sentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:08.238873", "n_pass": [2415, 113, 113], "score": "0.9852", "loss": "0.0227", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postreesentence()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:09.671244", "n_pass": [2416, 114, 114], "score": "0.8771", "loss": "0.2442", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree()); if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:11.140129", "n_pass": [2421, 115, 115], "score": "0.9649", "loss": "0.064", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if (chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:12.581033", "n_pass": [2423, 116, 116], "score": "0.8025", "loss": "0.4289", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree == null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:14.023443", "n_pass": [2426, 117, 117], "score": "0.9474", "loss": "0.0908", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree== null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:15.462963", "n_pass": [2427, 118, 118], "score": "0.9921", "loss": "0.0129", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree= null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:16.901044", "n_pass": [2429, 119, 119], "score": "0.904", "loss": "0.1896", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null) { System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:18.346757", "n_pass": [2432, 120, 120], "score": "0.9966", "loss": "0.0053", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){ System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:19.788673", "n_pass": [2434, 121, 121], "score": "0.9943", "loss": "0.0092", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System.err.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:21.229522", "n_pass": [2436, 122, 122], "score": "0.9809", "loss": "0.0327", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){Systemerr.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:22.661357", "n_pass": [2437, 123, 123], "score": "0.9947", "loss": "0.0081", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System.println(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:24.088989", "n_pass": [2438, 124, 124], "score": "0.9847", "loss": "0.0247", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){Systemprintln(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:25.523675", "n_pass": [2439, 125, 125], "score": "0.9528", "loss": "0.0817", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"Hell fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:26.961994", "n_pass": [2442, 126, 126], "score": "0.9876", "loss": "0.0205", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\" fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:28.392909", "n_pass": [2443, 127, 127], "score": "0.9861", "loss": "0.0232", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"fire.\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:29.861618", "n_pass": [2444, 128, 128], "score": "0.9827", "loss": "0.0291", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\".\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:31.293086", "n_pass": [2445, 129, 129], "score": "0.9875", "loss": "0.0228", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\"); ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:32.723056", "n_pass": [2448, 130, 130], "score": "0.9958", "loss": "0.0067", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\") ; if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:34.182792", "n_pass": [2449, 131, 131], "score": "0.9937", "loss": "0.0108", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\"); if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:35.615294", "n_pass": [2451, 132, 132], "score": "0.9823", "loss": "0.0311", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if (!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:37.078588", "n_pass": [2453, 133, 133], "score": "0.9364", "loss": "0.1159", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) { throwRuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:38.550416", "n_pass": [2457, 134, 134], "score": "0.984", "loss": "0.0252", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:40.032630", "n_pass": [2463, 135, 135], "score": "0.95", "loss": "0.0889", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree()); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:41.461508", "n_pass": [2464, 136, 136], "score": "0.9664", "loss": "0.0652", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet.equals(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:42.937770", "n_pass": [2470, 137, 137], "score": "0.9873", "loss": "0.0232", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree.toString())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:44.370540", "n_pass": [2472, 138, 138], "score": "0.99", "loss": "0.0187", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree())) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:45.833710", "n_pass": [2473, 139, 139], "score": "0.96", "loss": "0.0694", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (chunktree.toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:47.277843", "n_pass": [2478, 140, 140], "score": "0.9894", "loss": "0.0194", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \" changed.\"); } }"}
{"time": "2021-01-20 14:38:49.091041", "n_pass": [2495, 141, 141], "score": "0.9517", "loss": "0.0954", "code": "void main(String[] args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:38:51.328267", "n_pass": [2507, 142, 142], "score": "0.9894", "loss": "0.018", "code": "void main(String[]args) throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:38:52.764119", "n_pass": [2510, 143, 143], "score": "0.9785", "loss": "0.0423", "code": "void main(String[]args)throws IOException { if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:38:54.199021", "n_pass": [2514, 144, 144], "score": "0.9922", "loss": "0.0128", "code": "void main(String[]args)throws IOException{ if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:38:55.655648", "n_pass": [2516, 145, 145], "score": "0.9949", "loss": "0.0087", "code": "void main(String[]args)throws IOException{if (length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:38:57.102916", "n_pass": [2518, 146, 146], "score": "0.9926", "loss": "0.0116", "code": "void main(String[]args)throws IOException{if(length ) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:38:58.534774", "n_pass": [2521, 147, 147], "score": "0.9571", "loss": "0.0897", "code": "void main(String[]args)throws IOException{if(length) { println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:38:59.965438", "n_pass": [2523, 148, 148], "score": "0.9977", "loss": "0.0041", "code": "void main(String[]args)throws IOException{if(length){ println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:01.393629", "n_pass": [2525, 149, 149], "score": "0.956", "loss": "0.0909", "code": "void main(String[]args)throws IOException{if(length){println(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:02.833338", "n_pass": [2526, 150, 150], "score": "0.9924", "loss": "0.0137", "code": "void main(String[]args)throws IOException{if(length){(\"Pass\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:04.264296", "n_pass": [2529, 151, 151], "score": "0.997", "loss": "0.0056", "code": "void main(String[]args)throws IOException{if(length){(\"\"); exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:05.699671", "n_pass": [2533, 152, 152], "score": "0.9908", "loss": "0.0177", "code": "void main(String[]args)throws IOException{if(length){(\"\");exit(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:07.124057", "n_pass": [2534, 153, 153], "score": "0.9955", "loss": "0.008", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1); } File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:08.555153", "n_pass": [2539, 154, 154], "score": "0.9361", "loss": "0.1305", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);} File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:10.015687", "n_pass": [2541, 155, 155], "score": "0.9098", "loss": "0.1724", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File (directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:11.440475", "n_pass": [2543, 156, 156], "score": "0.9863", "loss": "0.0243", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory, \"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:12.894996", "n_pass": [2547, 157, 157], "score": "0.9799", "loss": "0.0355", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"revised\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:14.327968", "n_pass": [2549, 158, 158], "score": "0.9962", "loss": "0.007", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\"); if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:15.757126", "n_pass": [2553, 159, 159], "score": "0.9964", "loss": "0.0072", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if (chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:17.211730", "n_pass": [2555, 160, 160], "score": "0.9907", "loss": "0.0161", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(chunkerTrainDirfalse) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:18.640914", "n_pass": [2557, 161, 161], "score": "0.9798", "loss": "0.0444", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false) {(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:20.084113", "n_pass": [2560, 162, 162], "score": "0.9915", "loss": "0.0169", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\" + toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:21.528102", "n_pass": [2565, 163, 163], "score": "0.9904", "loss": "0.0195", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+ toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:22.956245", "n_pass": [2567, 164, 164], "score": "0.9951", "loss": "0.0111", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString() + \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:24.388692", "n_pass": [2571, 165, 165], "score": "0.9899", "loss": "0.0203", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+ \".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:25.815186", "n_pass": [2573, 166, 166], "score": "0.9747", "loss": "0.0533", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\".\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:27.270907", "n_pass": [2575, 167, 167], "score": "0.9758", "loss": "0.0517", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\"); exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:28.727729", "n_pass": [2579, 168, 168], "score": "0.9849", "loss": "0.0301", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");exit(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:30.149922", "n_pass": [2580, 169, 169], "score": "0.9574", "loss": "0.0877", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1); } if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:31.588318", "n_pass": [2585, 170, 170], "score": "0.9257", "loss": "0.1576", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);} if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:33.044785", "n_pass": [2587, 171, 171], "score": "0.9269", "loss": "0.1563", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if (posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:34.472998", "n_pass": [2589, 172, 172], "score": "0.9569", "loss": "0.0922", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(posTrainDirfalse) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:35.897656", "n_pass": [2591, 173, 173], "score": "0.9957", "loss": "0.0079", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false) {(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:37.323998", "n_pass": [2594, 174, 174], "score": "0.9476", "loss": "0.1042", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\" + toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:38.754005", "n_pass": [2599, 175, 175], "score": "0.9901", "loss": "0.0202", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+ toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:40.211852", "n_pass": [2601, 176, 176], "score": "0.9947", "loss": "0.0113", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString() + \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:41.643890", "n_pass": [2605, 177, 177], "score": "0.9723", "loss": "0.0554", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+ \".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:43.073184", "n_pass": [2607, 178, 178], "score": "0.9717", "loss": "0.0594", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\".\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:44.517268", "n_pass": [2609, 179, 179], "score": "0.813", "loss": "0.4161", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\"); exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:45.983569", "n_pass": [2613, 180, 180], "score": "0.9403", "loss": "0.1195", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");exit(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:47.415319", "n_pass": [2614, 181, 181], "score": "0.9882", "loss": "0.0211", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try (BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:48.858758", "n_pass": [2620, 182, 182], "score": "0.9593", "loss": "0.0784", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader = BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:50.288894", "n_pass": [2625, 183, 183], "score": "0.3622", "loss": "1.54", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader= BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:51.714155", "n_pass": [2627, 184, 184], "score": "0.9857", "loss": "0.0273", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=BufferedReader(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:53.136417", "n_pass": [2628, 185, 185], "score": "0.8164", "loss": "0.3634", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=(FileReader(chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:54.558670", "n_pass": [2630, 186, 186], "score": "0.9804", "loss": "0.0382", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))) { try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:56.002551", "n_pass": [2636, 187, 187], "score": "0.9372", "loss": "0.1159", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){ try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:57.422469", "n_pass": [2638, 188, 188], "score": "0.8888", "loss": "0.2232", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try (BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:39:58.853863", "n_pass": [2640, 189, 189], "score": "0.9873", "loss": "0.0242", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader = BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:00.288125", "n_pass": [2645, 190, 190], "score": "0.9885", "loss": "0.0213", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader= BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:01.710569", "n_pass": [2647, 191, 191], "score": "0.8678", "loss": "0.275", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=BufferedReader(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:03.132256", "n_pass": [2648, 192, 192], "score": "0.9708", "loss": "0.0608", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=(FileReader(posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:04.553493", "n_pass": [2650, 193, 193], "score": "0.9847", "loss": "0.0294", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))) { pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:06.015531", "n_pass": [2656, 194, 194], "score": "0.9967", "loss": "0.0067", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){ pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:07.453268", "n_pass": [2658, 195, 195], "score": "0.8678", "loss": "0.2945", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl = null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:08.878382", "n_pass": [2660, 196, 196], "score": "0.7972", "loss": "0.4772", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl= null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:10.297929", "n_pass": [2662, 197, 197], "score": "0.9744", "loss": "0.0472", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null; while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:11.751460", "n_pass": [2665, 198, 198], "score": "0.682", "loss": "0.7057", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while (true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:13.212832", "n_pass": [2667, 199, 199], "score": "0.993", "loss": "0.0147", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true) { cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:14.648368", "n_pass": [2671, 200, 200], "score": "0.9776", "loss": "0.0461", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){ cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:16.086248", "n_pass": [2673, 201, 201], "score": "0.9929", "loss": "0.0136", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl = readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:17.511954", "n_pass": [2675, 202, 202], "score": "0.9856", "loss": "0.029", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl= readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:18.935495", "n_pass": [2677, 203, 203], "score": "0.8229", "loss": "0.3999", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine(); if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:20.379595", "n_pass": [2682, 204, 204], "score": "0.956", "loss": "0.0918", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if ( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:21.799617", "n_pass": [2684, 205, 205], "score": "0.9912", "loss": "0.0152", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if( null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:23.218403", "n_pass": [2686, 206, 206], "score": "0.9891", "loss": "0.0231", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null) ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:24.644334", "n_pass": [2689, 207, 207], "score": "0.9798", "loss": "0.0419", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)ChunkTree(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:26.065583", "n_pass": [2690, 208, 208], "score": "0.9598", "loss": "0.0805", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl); if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:27.493340", "n_pass": [2695, 209, 209], "score": "0.9026", "loss": "0.2269", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if (!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:28.914616", "n_pass": [2697, 210, 210], "score": "0.99", "loss": "0.0192", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if(!containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:30.336646", "n_pass": [2699, 211, 211], "score": "0.9921", "loss": "0.0163", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if(containsKey(ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:31.774577", "n_pass": [2700, 212, 212], "score": "0.9781", "loss": "0.0477", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)) { put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:33.225098", "n_pass": [2705, 213, 213], "score": "0.6963", "loss": "0.6955", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){ put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:34.644620", "n_pass": [2707, 214, 214], "score": "0.9699", "loss": "0.0593", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put(); } if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:36.075074", "n_pass": [2712, 215, 215], "score": "0.8782", "loss": "0.2715", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();} if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:37.526276", "n_pass": [2714, 216, 216], "score": "0.9882", "loss": "0.026", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if (pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:38.963644", "n_pass": [2716, 217, 217], "score": "0.9699", "loss": "0.0598", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl != null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:40.385313", "n_pass": [2719, 218, 218], "score": "0.9907", "loss": "0.0194", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl!= null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:41.832065", "n_pass": [2720, 219, 219], "score": "0.9647", "loss": "0.0688", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl= null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:43.252802", "n_pass": [2722, 220, 220], "score": "0.7662", "loss": "0.604", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl=null) { (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:44.693185", "n_pass": [2725, 221, 221], "score": "0.9955", "loss": "0.0079", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl=null){ (pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:46.124977", "n_pass": [2727, 222, 222], "score": "0.9946", "loss": "0.0105", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl=null){(pt);}}}}for(ChunkTree postree:posSentences){ChunkTree(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:47.616993", "n_pass": [2745, 223, 223], "score": "0.9956", "loss": "0.0082", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl=null){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree=null){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:49.300210", "n_pass": [2755, 224, 224], "score": "0.6766", "loss": "0.6999", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl=null){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktreenull){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:50.735960", "n_pass": [2756, 225, 225], "score": "0.9131", "loss": "0.1695", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl=null){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){System(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:52.157975", "n_pass": [2759, 226, 226], "score": "0.9848", "loss": "0.0264", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl=null){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if (!beforet(chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:53.624386", "n_pass": [2778, 227, 227], "score": "0.9026", "loss": "0.1934", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl=null;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl=null){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:56.425134", "n_pass": [2910, 228, 228], "score": "0.9805", "loss": "0.0373", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){plnull;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl=null){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:57.857810", "n_pass": [2911, 229, 229], "score": "0.9162", "loss": "0.1825", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl;while(true){cl=readLine();if(null)(cl);if((ctsent)){put();}if(pl=null){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:40:59.317725", "n_pass": [2919, 230, 230], "score": "0.9941", "loss": "0.0114", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl;while(true){clreadLine();if(null)(cl);if((ctsent)){put();}if(pl=null){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:00.740979", "n_pass": [2920, 231, 231], "score": "0.9929", "loss": "0.0136", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl;while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl=null){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:02.219857", "n_pass": [2947, 232, 232], "score": "0.9921", "loss": "0.0148", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl;while(true){cl();if(null)(cl);if((ctsent)){put();}if(plnull){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:03.628443", "n_pass": [2948, 233, 233], "score": "0.9872", "loss": "0.0277", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){pl;while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:06.586585", "n_pass": [3127, 234, 234], "score": "0.9972", "loss": "0.0053", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){;while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:08.009853", "n_pass": [3128, 235, 235], "score": "0.988", "loss": "0.0255", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(!chunktree) {RuntimeException(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:19.713679", "n_pass": [3414, 236, 236], "score": "0.9565", "loss": "0.0922", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree) {RuntimeException(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:21.148214", "n_pass": [3417, 237, 237], "score": "0.9781", "loss": "0.0406", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){RuntimeException(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:22.560720", "n_pass": [3419, 238, 238], "score": "0.9837", "loss": "0.0311", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\" n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:23.976990", "n_pass": [3422, 239, 239], "score": "0.9876", "loss": "0.0247", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"n\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:25.385575", "n_pass": [3423, 240, 240], "score": "0.9957", "loss": "0.008", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\" + chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:26.822621", "n_pass": [3425, 241, 241], "score": "0.9917", "loss": "0.0161", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+ chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:28.251873", "n_pass": [3427, 242, 242], "score": "0.9205", "loss": "0.1708", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree); } if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:29.671244", "n_pass": [3431, 243, 243], "score": "0.99", "loss": "0.0205", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);} if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:31.099374", "n_pass": [3433, 244, 244], "score": "0.9951", "loss": "0.0098", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if ((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:32.512449", "n_pass": [3435, 245, 245], "score": "0.9967", "loss": "0.0062", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)) { } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:33.941585", "n_pass": [3441, 246, 246], "score": "0.7426", "loss": "0.6356", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){ } (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:35.355203", "n_pass": [3443, 247, 247], "score": "0.9689", "loss": "0.0611", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){} (toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:36.767912", "n_pass": [3445, 248, 248], "score": "0.9938", "loss": "0.0112", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString()); ('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:38.195576", "n_pass": [3452, 249, 249], "score": "0.9876", "loss": "0.0251", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('\\n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:39.610577", "n_pass": [3455, 250, 250], "score": "0.9932", "loss": "0.0128", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n'); } line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:41.376642", "n_pass": [3460, 251, 251], "score": "0.9929", "loss": "0.0139", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n');} line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:42.789720", "n_pass": [3462, 252, 252], "score": "0.9968", "loss": "0.0063", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n');}line++; } (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:44.212674", "n_pass": [3467, 253, 253], "score": "0.9845", "loss": "0.0289", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n');}line++;} (\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:45.639682", "n_pass": [3469, 254, 254], "score": "0.9742", "loss": "0.0531", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n');}line++;}(\"Of \" + \".\"); } }"}
{"time": "2021-01-20 14:41:47.053799", "n_pass": [3472, 255, 255], "score": "0.9805", "loss": "0.0365", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n');}line++;}(\" \" + \".\"); } }"}
{"time": "2021-01-20 14:41:48.461575", "n_pass": [3473, 256, 256], "score": "0.8848", "loss": "0.2552", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n');}line++;}(\"\" + \".\"); } }"}
{"time": "2021-01-20 14:41:49.872548", "n_pass": [3475, 257, 257], "score": "0.9898", "loss": "0.0203", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n');}line++;}(\"\"+ \".\"); } }"}
{"time": "2021-01-20 14:41:51.285438", "n_pass": [3477, 258, 258], "score": "0.963", "loss": "0.0794", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n');}line++;}(\"\"+\".\"); } }"}
{"time": "2021-01-20 14:41:52.713779", "n_pass": [3479, 259, 259], "score": "0.997", "loss": "0.0066", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n');}line++;}(\"\"+\"\"); } }"}
{"time": "2021-01-20 14:41:54.136036", "n_pass": [3483, 260, 260], "score": "0.9936", "loss": "0.013", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n');}line++;}(\"\"+\"\");} }"}
{"time": "2021-01-20 14:41:55.551040", "n_pass": [3485, 261, 261], "score": "0.9895", "loss": "0.0212", "code": "void main(String[]args)throws IOException{if(length){(\"\");(1);}File(directory,\"\");if(false){(\"\"+toString()+\"\");(1);}if(false){(\"\"+toString()+\"\");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){(\"\");if(chunktree){(\"\"+chunktree);}if((chunktree)){}(toString());('n');}line++;}(\"\"+\"\");}}"}

Minimal simplified code:
void main(String[]args)throws IOException{if(length){("");(1);}File(directory,"");if(false){(""+toString()+"");(1);}if(false){(""+toString()+"");(1);try(BufferedReader chunkreader=((chunkfile))){try(BufferedReader posreader=((posfile))){while(true){cl();if(null)(cl);if((ctsent)){put();}if(pl){(pt);}}}}for(ChunkTree postree:posSentences){(postree());if(chunktree){("");if(chunktree){(""+chunktree);}if((chunktree)){}(toString());('n');}line++;}(""+"");}}

