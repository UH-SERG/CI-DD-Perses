
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bcgit__bc-java/core/src/main/java/org/bouncycastle/crypto/examples/JPAKEExample_main.java
method_name = main
method_body = public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_3072; BigInteger p = group.getP(); BigInteger q = group.getQ(); BigInteger g = group.getG(); String alicePassword = "password"; String bobPassword = "password"; System.out.println("********* Initialization **********"); System.out.println("Public parameters for the cyclic group:"); System.out.println("p (" + p.bitLength() + " bits): " + p.toString(16)); System.out.println("q (" + q.bitLength() + " bits): " + q.toString(16)); System.out.println("g (" + p.bitLength() + " bits): " + g.toString(16)); System.out.println("p mod q = " + p.mod(q).toString(16)); System.out.println("g^{q} mod p = " + g.modPow(q, p).toString(16)); System.out.println(""); System.out.println("(Secret passwords used by Alice and Bob: " + "\"" + alicePassword + "\" and \"" + bobPassword + "\")\n"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant("alice", alicePassword.toCharArray(), group, digest, random); JPAKEParticipant bob = new JPAKEParticipant("bob", bobPassword.toCharArray(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload bobRound1Payload = bob.createRound1PayloadToSend(); System.out.println("************ Round 1 **************"); System.out.println("Alice sends to Bob: "); System.out.println("g^{x1}=" + aliceRound1Payload.getGx1().toString(16)); System.out.println("g^{x2}=" + aliceRound1Payload.getGx2().toString(16)); System.out.println("KP{x1}={" + aliceRound1Payload.getKnowledgeProofForX1()[0].toString(16) + "};{" + aliceRound1Payload.getKnowledgeProofForX1()[1].toString(16) + "}"); System.out.println("KP{x2}={" + aliceRound1Payload.getKnowledgeProofForX2()[0].toString(16) + "};{" + aliceRound1Payload.getKnowledgeProofForX2()[1].toString(16) + "}"); System.out.println(""); System.out.println("Bob sends to Alice: "); System.out.println("g^{x3}=" + bobRound1Payload.getGx1().toString(16)); System.out.println("g^{x4}=" + bobRound1Payload.getGx2().toString(16)); System.out.println("KP{x3}={" + bobRound1Payload.getKnowledgeProofForX1()[0].toString(16) + "};{" + bobRound1Payload.getKnowledgeProofForX1()[1].toString(16) + "}"); System.out.println("KP{x4}={" + bobRound1Payload.getKnowledgeProofForX2()[0].toString(16) + "};{" + bobRound1Payload.getKnowledgeProofForX2()[1].toString(16) + "}"); System.out.println(""); alice.validateRound1PayloadReceived(bobRound1Payload); System.out.println("Alice checks g^{x4}!=1: OK"); System.out.println("Alice checks KP{x3}: OK"); System.out.println("Alice checks KP{x4}: OK"); System.out.println(""); bob.validateRound1PayloadReceived(aliceRound1Payload); System.out.println("Bob checks g^{x2}!=1: OK"); System.out.println("Bob checks KP{x1},: OK"); System.out.println("Bob checks KP{x2},: OK"); System.out.println(""); JPAKERound2Payload aliceRound2Payload = alice.createRound2PayloadToSend(); JPAKERound2Payload bobRound2Payload = bob.createRound2PayloadToSend(); System.out.println("************ Round 2 **************"); System.out.println("Alice sends to Bob: "); System.out.println("A=" + aliceRound2Payload.getA().toString(16)); System.out.println("KP{x2*s}={" + aliceRound2Payload.getKnowledgeProofForX2s()[0].toString(16) + "},{" + aliceRound2Payload.getKnowledgeProofForX2s()[1].toString(16) + "}"); System.out.println(""); System.out.println("Bob sends to Alice"); System.out.println("B=" + bobRound2Payload.getA().toString(16)); System.out.println("KP{x4*s}={" + bobRound2Payload.getKnowledgeProofForX2s()[0].toString(16) + "},{" + bobRound2Payload.getKnowledgeProofForX2s()[1].toString(16) + "}"); System.out.println(""); alice.validateRound2PayloadReceived(bobRound2Payload); System.out.println("Alice checks KP{x4*s}: OK\n"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println("Bob checks KP{x2*s}: OK\n"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println("********* After round 2 ***********"); System.out.println("Alice computes key material \t K=" + aliceKeyingMaterial.toString(16)); System.out.println("Bob computes key material \t K=" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial); JPAKERound3Payload aliceRound3Payload = alice.createRound3PayloadToSend(aliceKeyingMaterial); JPAKERound3Payload bobRound3Payload = bob.createRound3PayloadToSend(bobKeyingMaterial); System.out.println("************ Round 3 **************"); System.out.println("Alice sends to Bob: "); System.out.println("MacTag=" + aliceRound3Payload.getMacTag().toString(16)); System.out.println(""); System.out.println("Bob sends to Alice: "); System.out.println("MacTag=" + bobRound3Payload.getMacTag().toString(16)); System.out.println(""); alice.validateRound3PayloadReceived(bobRound3Payload, aliceKeyingMaterial); System.out.println("Alice checks MacTag: OK\n"); bob.validateRound3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println("Bob checks MacTag: OK\n"); System.out.println(); System.out.println("MacTags validated, therefore the keying material matches."); }
predict, score, loss = main, 0.99574393, 0.004858321

Trace of simplified code(s):
{"time": "2021-01-20 12:21:32.521291", "n_pass": [1, 1, 1], "score": "0.9978", "loss": "0.0026", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_3072; BigInteger p = group.getP(); BigInteger q = group.getQ(); BigInteger g = group.getG(); String alicePassword = \"password\"; String bobPassword = \"password\"; System.out.println(\"********* Initialization **********\"); System.out.println(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q (\" + q.bitLength() + \" bits): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"p mod q = \" + p.mod(q).toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(Secret passwords used by Alice and Bob: \" + \"\\\"\" + alicePassword + \"\\\" and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword.toCharArray(), group, digest, random); JPAKEParticipant bob = new JPAKEParticipant(\"bob\", bobPassword.toCharArray(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload bobRound1Payload = bob.createRound1PayloadToSend(); System.out.println(\"************ Round 1 **************\"); System.out.println(\"Alice sends to Bob: \"); System.out.println(\"g^{x1}=\" + aliceRound1Payload.getGx1().toString(16)); System.out.println(\"g^{x2}=\" + aliceRound1Payload.getGx2().toString(16)); System.out.println(\"KP{x1}={\" + aliceRound1Payload.getKnowledgeProofForX1()[0].toString(16) + \"};{\" + aliceRound1Payload.getKnowledgeProofForX1()[1].toString(16) + \"}\"); System.out.println(\"KP{x2}={\" + aliceRound1Payload.getKnowledgeProofForX2()[0].toString(16) + \"};{\" + aliceRound1Payload.getKnowledgeProofForX2()[1].toString(16) + \"}\"); System.out.println(\"\"); System.out.println(\"Bob sends to Alice: \"); System.out.println(\"g^{x3}=\" + bobRound1Payload.getGx1().toString(16)); System.out.println(\"g^{x4}=\" + bobRound1Payload.getGx2().toString(16)); System.out.println(\"KP{x3}={\" + bobRound1Payload.getKnowledgeProofForX1()[0].toString(16) + \"};{\" + bobRound1Payload.getKnowledgeProofForX1()[1].toString(16) + \"}\"); System.out.println(\"KP{x4}={\" + bobRound1Payload.getKnowledgeProofForX2()[0].toString(16) + \"};{\" + bobRound1Payload.getKnowledgeProofForX2()[1].toString(16) + \"}\"); System.out.println(\"\"); alice.validateRound1PayloadReceived(bobRound1Payload); System.out.println(\"Alice checks g^{x4}!=1: OK\"); System.out.println(\"Alice checks KP{x3}: OK\"); System.out.println(\"Alice checks KP{x4}: OK\"); System.out.println(\"\"); bob.validateRound1PayloadReceived(aliceRound1Payload); System.out.println(\"Bob checks g^{x2}!=1: OK\"); System.out.println(\"Bob checks KP{x1},: OK\"); System.out.println(\"Bob checks KP{x2},: OK\"); System.out.println(\"\"); JPAKERound2Payload aliceRound2Payload = alice.createRound2PayloadToSend(); JPAKERound2Payload bobRound2Payload = bob.createRound2PayloadToSend(); System.out.println(\"************ Round 2 **************\"); System.out.println(\"Alice sends to Bob: \"); System.out.println(\"A=\" + aliceRound2Payload.getA().toString(16)); System.out.println(\"KP{x2*s}={\" + aliceRound2Payload.getKnowledgeProofForX2s()[0].toString(16) + \"},{\" + aliceRound2Payload.getKnowledgeProofForX2s()[1].toString(16) + \"}\"); System.out.println(\"\"); System.out.println(\"Bob sends to Alice\"); System.out.println(\"B=\" + bobRound2Payload.getA().toString(16)); System.out.println(\"KP{x4*s}={\" + bobRound2Payload.getKnowledgeProofForX2s()[0].toString(16) + \"},{\" + bobRound2Payload.getKnowledgeProofForX2s()[1].toString(16) + \"}\"); System.out.println(\"\"); alice.validateRound2PayloadReceived(bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial); JPAKERound3Payload aliceRound3Payload = alice.createRound3PayloadToSend(aliceKeyingMaterial); JPAKERound3Payload bobRound3Payload = bob.createRound3PayloadToSend(bobKeyingMaterial); System.out.println(\"************ Round 3 **************\"); System.out.println(\"Alice sends to Bob: \"); System.out.println(\"MacTag=\" + aliceRound3Payload.getMacTag().toString(16)); System.out.println(\"\"); System.out.println(\"Bob sends to Alice: \"); System.out.println(\"MacTag=\" + bobRound3Payload.getMacTag().toString(16)); System.out.println(\"\"); alice.validateRound3PayloadReceived(bobRound3Payload, aliceKeyingMaterial); System.out.println(\"Alice checks MacTag: OK\\n\"); bob.validateRound3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:34.186984", "n_pass": [9, 2, 2], "score": "0.9969", "loss": "0.0034", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_3072; BigInteger p = group.getP(); BigInteger q = group.getQ(); BigInteger g = group.getG(); String alicePassword = \"password\"; String bobPassword = \"password\"; System.out.println(\"********* Initialization **********\"); System.out.println(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q (\" + q.bitLength() + \" bits): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"p mod q = \" + p.mod(q).toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(Secret passwords used by Alice and Bob: \" + \"\\\"\" + alicePassword + \"\\\" and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword.toCharArray(), group, digest, random); JPAKEParticipant bob = new JPAKEParticipant(\"bob\", bobPassword.toCharArray(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload .validateRound1PayloadReceived(bobRound1Payload); System.out.println(\"Alice checks g^{x4}!=1: OK\"); System.out.println(\"Alice checks KP{x3}: OK\"); System.out.println(\"Alice checks KP{x4}: OK\"); System.out.println(\"\"); bob.validateRound1PayloadReceived(aliceRound1Payload); System.out.println(\"Bob checks g^{x2}!=1: OK\"); System.out.println(\"Bob checks KP{x1},: OK\"); System.out.println(\"Bob checks KP{x2},: OK\"); System.out.println(\"\"); JPAKERound2Payload aliceRound2Payload = alice.createRound2PayloadToSend(); JPAKERound2Payload bobRound2Payload = bob.createRound2PayloadToSend(); System.out.println(\"************ Round 2 **************\"); System.out.println(\"Alice sends to Bob: \"); System.out.println(\"A=\" + aliceRound2Payload.getA().toString(16)); System.out.println(\"KP{x2*s}={\" + aliceRound2Payload.getKnowledgeProofForX2s()[0].toString(16) + \"},{\" + aliceRound2Payload.getKnowledgeProofForX2s()[1].toString(16) + \"}\"); System.out.println(\"\"); System.out.println(\"Bob sends to Alice\"); System.out.println(\"B=\" + bobRound2Payload.getA().toString(16)); System.out.println(\"KP{x4*s}={\" + bobRound2Payload.getKnowledgeProofForX2s()[0].toString(16) + \"},{\" + bobRound2Payload.getKnowledgeProofForX2s()[1].toString(16) + \"}\"); System.out.println(\"\"); alice.validateRound2PayloadReceived(bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial); JPAKERound3Payload aliceRound3Payload = alice.createRound3PayloadToSend(aliceKeyingMaterial); JPAKERound3Payload bobRound3Payload = bob.createRound3PayloadToSend(bobKeyingMaterial); System.out.println(\"************ Round 3 **************\"); System.out.println(\"Alice sends to Bob: \"); System.out.println(\"MacTag=\" + aliceRound3Payload.getMacTag().toString(16)); System.out.println(\"\"); System.out.println(\"Bob sends to Alice: \"); System.out.println(\"MacTag=\" + bobRound3Payload.getMacTag().toString(16)); System.out.println(\"\"); alice.validateRound3PayloadReceived(bobRound3Payload, aliceKeyingMaterial); System.out.println(\"Alice checks MacTag: OK\\n\"); bob.validateRound3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:35.738020", "n_pass": [10, 3, 3], "score": "0.9969", "loss": "0.0034", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_3072; BigInteger p = group.getP(); BigInteger q = group.getQ(); BigInteger g = group.getG(); String alicePassword = \"password\"; String bobPassword = \"password\"; System.out.println(\"********* Initialization **********\"); System.out.println(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q (\" + q.bitLength() + \" bits): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"p mod q = \" + p.mod(q).toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(Secret passwords used by Alice and Bob: \" + \"\\\"\" + alicePassword + \"\\\" and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword.toCharArray(), group, digest, random); JPAKEParticipant bob = new JPAKEParticipant(\"bob\", bobPassword.toCharArray(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial); JPAKERound3Payload aliceRound3Payload = alice.createRound3PayloadToSend(aliceKeyingMaterial); JPAKERound3Payload bobRound3Payload = bob.createRound3PayloadToSend(bobKeyingMaterial); System.out.println(\"************ Round 3 **************\"); System.out.println(\"Alice sends to Bob: \"); System.out.println(\"MacTag=\" + aliceRound3Payload.getMacTag().toString(16)); System.out.println(\"\"); System.out.println(\"Bob sends to Alice: \"); System.out.println(\"MacTag=\" + bobRound3Payload.getMacTag().toString(16)); System.out.println(\"\"); alice.validateRound3PayloadReceived(bobRound3Payload, aliceKeyingMaterial); System.out.println(\"Alice checks MacTag: OK\\n\"); bob.validateRound3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:37.309795", "n_pass": [29, 4, 4], "score": "0.985", "loss": "0.017", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_3072; BigInteger p = group.getP(); BigInteger q = group.getQ(); BigInteger g = group.getG(); String alicePassword = \"password\"; String bobPassword = \"password\"; System.out.println(\"********* Initialization **********\"); System.out.println(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q (\" + q.bitLength() + \" bits): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"p mod q = \" + p.mod(q).toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(Secret passwords used by Alice and Bob: \" + \"\\\"\" + alicePassword + \"\\\" and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword.toCharArray(), group, digest, random); JPAKEParticipant bob = new JPAKEParticipant(\"bob\", bobPassword.toCharArray(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial); JPAKERound3Payload aliceRound3Payload = alice.createRound3PayloadToSend(aliceKeyingMaterial); JPAKERound3Payload bobRound3Payload = bob.createRound3PayloadToSend(+ bobRound3Payload.getMacTag().toString(16)); System.out.println(\"\"); alice.validateRound3PayloadReceived(bobRound3Payload, aliceKeyingMaterial); System.out.println(\"Alice checks MacTag: OK\\n\"); bob.validateRound3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:38.865559", "n_pass": [50, 5, 5], "score": "0.9994", "loss": "0.0007", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_3072; BigInteger p = group.getP(); BigInteger q = group.getQ(); BigInteger g = group.getG(); String alicePassword = \"password\"; String bobPassword = \"password\"; System.out.println(\"********* Initialization **********\"); System.out.println(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q (\" + q.bitLength() + \" bits): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"p mod q = \" + p.mod(q).toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(Secret passwords used by Alice and Bob: \" + \"\\\"\" + alicePassword + \"\\\" and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword.toCharArray(), group, digest, random); JPAKEParticipant bob = new JPAKEParticipant(\"bob\", bobPassword.toCharArray(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial); JPAKERound3Payload aliceRound3Payload = alice.createRound3PayloadToSend(aliceKeyingMaterial); JPAKERound3Payload bobRound3Payload = bob.createRound3PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:40.377713", "n_pass": [53, 6, 6], "score": "0.997", "loss": "0.0035", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_3072; BigInteger p = group.getP(); BigInteger q = group.getQ(); BigInteger g =(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q (\" + q.bitLength() + \" bits): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"p mod q = \" + p.mod(q).toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(Secret passwords used by Alice and Bob: \" + \"\\\"\" + alicePassword + \"\\\" and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword.toCharArray(), group, digest, random); JPAKEParticipant bob = new JPAKEParticipant(\"bob\", bobPassword.toCharArray(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial); JPAKERound3Payload aliceRound3Payload = alice.createRound3PayloadToSend(aliceKeyingMaterial); JPAKERound3Payload bobRound3Payload = bob.createRound3PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:41.943054", "n_pass": [94, 7, 7], "score": "0.9981", "loss": "0.0022", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_3072; BigInteger p = group.getP(); BigInteger q = group.getQ(); BigInteger g =(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q (\" + q.bitLength() + \" bits): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(Secret passwords used by Alice and Bob: \" + \"\\\"\" + alicePassword + \"\\\" and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword.toCharArray(), group, digest, random); JPAKEParticipant bob = new JPAKEParticipant(\"bob\", bobPassword.toCharArray(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial); JPAKERound3Payload aliceRound3Payload = alice.createRound3PayloadToSend(aliceKeyingMaterial); JPAKERound3Payload bobRound3Payload = bob.createRound3PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:43.445349", "n_pass": [96, 8, 8], "score": "0.9978", "loss": "0.0027", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_3072; BigInteger p = group.getP(); BigInteger q = group.getQ(); BigInteger g =(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q (\" + q.bitLength() + \" bits): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword.toCharArray(), group, digest, random); JPAKEParticipant bob = new JPAKEParticipant(\"bob\", bobPassword.toCharArray(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial); JPAKERound3Payload aliceRound3Payload = alice.createRound3PayloadToSend(aliceKeyingMaterial); JPAKERound3Payload bobRound3Payload = bob.createRound3PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:44.941068", "n_pass": [99, 9, 9], "score": "0.9926", "loss": "0.0083", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_3072; BigInteger p = group.getP(); BigInteger q = group.getQ(); BigInteger g =(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q (\" + q.bitLength() + \" bits): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial); JPAKERound3Payload aliceRound3Payload = alice.createRound3PayloadToSend(aliceKeyingMaterial); JPAKERound3Payload bobRound3Payload = bob.createRound3PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:46.451727", "n_pass": [108, 10, 10], "score": "0.9919", "loss": "0.0095", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_3072; BigInteger p = group.getP(); BigInteger q = group.getQ(); BigInteger g =(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q (\" + q.bitLength() + \" bits): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:47.950273", "n_pass": [112, 11, 11], "score": "0.9915", "loss": "0.0103", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q (\" + q.bitLength() + \" bits): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:49.607748", "n_pass": [174, 12, 12], "score": "0.9987", "loss": "0.0017", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLength() + \" bits): \" + g.toString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:51.080158", "n_pass": [176, 13, 13], "score": "0.9991", "loss": "0.0011", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(and \\\"\" + bobPassword + \"\\\")\\n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:52.554011", "n_pass": [181, 14, 14], "score": "0.9988", "loss": "0.0014", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload aliceRound1Payload = alice.createRound1PayloadToSend(); JPAKERound1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:54.044433", "n_pass": [186, 15, 15], "score": "0.9947", "loss": "0.0059", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterial(); BigInteger bobKeyingMaterial = bob.calculateKeyingMaterial(); System.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:55.510491", "n_pass": [192, 16, 16], "score": "0.9895", "loss": "0.0116", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* After round 2 ***********\"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:56.990299", "n_pass": [194, 17, 17], "score": "0.9999", "loss": "0.0002", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* \"); System.out.println(\"Alice computes key material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:58.447061", "n_pass": [195, 18, 18], "score": "0.979", "loss": "0.0255", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.out.println(\"Bob checks MacTag: OK\\n\"); System.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:21:59.915097", "n_pass": [202, 19, 19], "score": "0.9931", "loss": "0.0084", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(); System.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:22:01.443270", "n_pass": [293, 20, 20], "score": "0.9995", "loss": "0.0006", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags validated, therefore the keying material matches.\"); }"}
{"time": "2021-01-20 12:22:02.909185", "n_pass": [294, 21, 21], "score": "0.9998", "loss": "0.0002", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters for the cyclic group:\"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:04.364625", "n_pass": [301, 22, 22], "score": "0.9978", "loss": "0.0029", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + p.bitLength() + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:05.804422", "n_pass": [304, 23, 23], "score": "0.9969", "loss": "0.0034", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g^{q} mod p = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:07.268382", "n_pass": [315, 24, 24], "score": "0.9965", "loss": "0.0038", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.modPow(q, p).toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:08.713445", "n_pass": [317, 25, 25], "score": "0.9998", "loss": "0.0002", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.println(\"(n\"); Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:10.259292", "n_pass": [321, 26, 26], "score": "0.9934", "loss": "0.0073", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out. Digest digest = new SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:11.694379", "n_pass": [322, 27, 27], "score": "0.9994", "loss": "0.0007", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out. SHA256Digest(); SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:13.127273", "n_pass": [323, 28, 28], "score": "0.9898", "loss": "0.0126", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out. SecureRandom random = new SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:14.571944", "n_pass": [324, 29, 29], "score": "0.9981", "loss": "0.0026", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP{x2*s}: OK\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:16.036366", "n_pass": [336, 30, 30], "score": "0.9974", "loss": "0.0029", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"********* material \\t K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:17.482907", "n_pass": [340, 31, 31], "score": "0.9982", "loss": "0.0021", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes key material \\t K=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:18.924905", "n_pass": [344, 32, 32], "score": "0.9991", "loss": "0.001", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.out.println(); BigInteger aliceKey = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:20.393992", "n_pass": [347, 33, 33], "score": "0.9998", "loss": "0.0003", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.out = deriveSessionKey(aliceKeyingMaterial); BigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:21.815643", "n_pass": [348, 34, 34], "score": "0.9945", "loss": "0.0064", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial);PayloadToSend3PayloadReceived(aliceRound3Payload, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:23.238920", "n_pass": [350, 35, 35], "score": "0.9952", "loss": "0.0058", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.outSystem.out.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:24.799117", "n_pass": [485, 36, 36], "score": "0.9907", "loss": "0.0109", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags material matches.\"); }"}
{"time": "2021-01-20 12:22:26.237079", "n_pass": [487, 37, 37], "score": "0.9954", "loss": "0.0053", "code": "public static void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:27.663214", "n_pass": [489, 38, 38], "score": "0.9999", "loss": "0.0001", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups.NIST_307(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:29.092496", "n_pass": [496, 39, 39], "score": "0.9984", "loss": "0.0022", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"Public parameters \"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:30.526923", "n_pass": [498, 40, 40], "score": "0.9996", "loss": "0.0005", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); System.out.println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:31.944289", "n_pass": [500, 41, 41], "score": "0.9854", "loss": "0.0192", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" bits): \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:33.359931", "n_pass": [504, 42, 42], "score": "0.9986", "loss": "0.0017", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" + q.toString(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:34.819225", "n_pass": [512, 43, 43], "score": "0.999", "loss": "0.0012", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System.out.println(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:36.256644", "n_pass": [515, 44, 44], "score": "0.9988", "loss": "0.0017", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" + p.bitLengthtoString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:37.672172", "n_pass": [518, 45, 45], "score": "0.9998", "loss": "0.0002", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); System.out.println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:39.086441", "n_pass": [521, 46, 46], "score": "0.9945", "loss": "0.0067", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \" + g.toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:40.496369", "n_pass": [524, 47, 47], "score": "0.9962", "loss": "0.0045", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\"); System.out.SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:41.948281", "n_pass": [530, 48, 48], "score": "0.9968", "loss": "0.0036", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\"); SecureRandom(); JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:43.371098", "n_pass": [531, 49, 49], "score": "0.9993", "loss": "0.0008", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", alicePassword(), group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:44.780399", "n_pass": [536, 50, 50], "score": "0.9707", "loss": "0.0365", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\",  group, digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:46.201764", "n_pass": [537, 51, 51], "score": "0.9974", "loss": "0.003", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound1Payload1Payload (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:47.638905", "n_pass": [540, 52, 52], "score": "0.999", "loss": "0.0012", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); System.out.println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:49.049824", "n_pass": [543, 53, 53], "score": "0.9977", "loss": "0.0027", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"Alice checks KP{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:50.485386", "n_pass": [545, 54, 54], "score": "0.9998", "loss": "0.0002", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"Alice{x4*s}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:51.888841", "n_pass": [546, 55, 55], "score": "0.9928", "loss": "0.0079", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"Alices}: OK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:53.289581", "n_pass": [547, 56, 56], "score": "0.9976", "loss": "0.0029", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob.validateRound2PayloadReceived(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:54.694816", "n_pass": [550, 57, 57], "score": "0.9852", "loss": "0.0197", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System.out.println(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:56.135201", "n_pass": [553, 58, 58], "score": "0.9999", "loss": "0.0002", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger aliceKeyingMaterial = alice.calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:57.539797", "n_pass": [557, 59, 59], "score": "0.9997", "loss": "0.0004", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .calculateKeyingMaterialSystem.out.println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:22:58.937678", "n_pass": [558, 60, 60], "score": "0.9945", "loss": "0.0068", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"***** K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:00.355431", "n_pass": [560, 61, 61], "score": "0.9874", "loss": "0.015", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16)); System.out.println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:01.756973", "n_pass": [564, 62, 62], "score": "0.9964", "loss": "0.0045", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); System.outBigInteger bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:03.171449", "n_pass": [569, 63, 63], "score": "0.9998", "loss": "0.0002", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16)); bobKey = deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:04.568158", "n_pass": [570, 64, 64], "score": "0.9995", "loss": "0.0006", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial, bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:07.903497", "n_pass": [750, 65, 65], "score": "0.9982", "loss": "0.0023", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial); System.println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:09.328041", "n_pass": [752, 66, 66], "score": "0.9997", "loss": "0.0004", "code": "void main(String[] args) throws CryptoException { JPAKEPrimeOrderGroup group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:11.133139", "n_pass": [764, 67, 67], "score": "0.9852", "loss": "0.0189", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups07(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:12.535641", "n_pass": [768, 68, 68], "score": "0.9969", "loss": "0.0037", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p (\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:13.935986", "n_pass": [774, 69, 69], "score": "0.9994", "loss": "0.0008", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + p.toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:15.333085", "n_pass": [780, 70, 70], "score": "0.9969", "loss": "0.0036", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString(16)); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:16.731386", "n_pass": [782, 71, 71], "score": "0.9849", "loss": "0.0196", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); System.out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:18.121608", "n_pass": [785, 72, 72], "score": "0.9946", "loss": "0.0085", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); out.println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:19.513666", "n_pass": [786, 73, 73], "score": "0.9991", "loss": "0.0011", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q): \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:20.913631", "n_pass": [789, 74, 74], "score": "0.9979", "loss": "0.0025", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16)); System(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:22.309491", "n_pass": [795, 75, 75], "score": "0.9937", "loss": "0.0083", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"g (\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:23.725201", "n_pass": [797, 76, 76], "score": "0.998", "loss": "0.0025", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString(16)); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:25.119810", "n_pass": [801, 77, 77], "score": "0.9952", "loss": "0.0061", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g = \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:26.521269", "n_pass": [806, 78, 78], "score": "0.9996", "loss": "0.0006", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System.out.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:27.942348", "n_pass": [813, 79, 79], "score": "0.9946", "loss": "0.0065", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System.println(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:29.352566", "n_pass": [814, 80, 80], "score": "0.9995", "loss": "0.0006", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  JPAKEParticipant alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:30.763884", "n_pass": [818, 81, 81], "score": "0.9994", "loss": "0.0008", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = new JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:32.161872", "n_pass": [821, 82, 82], "score": "0.9943", "loss": "0.0074", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\", digest, random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:33.546994", "n_pass": [826, 83, 83], "score": "0.9864", "loss": "0.0198", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); JPAKERound (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:34.929445", "n_pass": [829, 84, 84], "score": "0.9989", "loss": "0.0012", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (bobRound2Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:36.311969", "n_pass": [831, 85, 85], "score": "0.9924", "loss": "0.0094", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"AliceOK\\n\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:38.105420", "n_pass": [836, 86, 86], "score": "0.9994", "loss": "0.0007", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\"); bob(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:39.486208", "n_pass": [839, 87, 87], "score": "0.9945", "loss": "0.007", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound2Payload); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:40.866658", "n_pass": [841, 88, 88], "score": "0.9866", "loss": "0.018", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound); System(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:42.249149", "n_pass": [843, 89, 89], "score": "0.9986", "loss": "0.0019", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"Bob checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:43.628718", "n_pass": [845, 90, 90], "score": "0.9984", "loss": "0.002", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"checks KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:45.004595", "n_pass": [846, 91, 91], "score": "0.9986", "loss": "0.0019", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"KP\\n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:46.387013", "n_pass": [847, 92, 92], "score": "0.9937", "loss": "0.008", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\"); BigInteger .println(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:47.769461", "n_pass": [851, 93, 93], "score": "0.9991", "loss": "0.0012", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\"); BigIntegerprintln(\"*K=\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:49.155914", "n_pass": [854, 94, 94], "score": "0.9994", "loss": "0.0009", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\"); BigIntegerprintln(\"*\" + aliceKeyingMaterial.toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:50.535990", "n_pass": [857, 95, 95], "score": "0.9978", "loss": "0.0027", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\"); BigIntegerprintln(\"*\" + toString(16));println(\"Bob computes=\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:51.948081", "n_pass": [862, 96, 96], "score": "0.9828", "loss": "0.0251", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\"); BigIntegerprintln(\"*\" + toString(16));println(\"Bob\" + bobKeyingMaterial.toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:53.335041", "n_pass": [864, 97, 97], "score": "0.9974", "loss": "0.0035", "code": "void main(String[] args) throws CryptoException { group = JPAKEPrimeOrderGroups(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\"); BigIntegerprintln(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:55.110561", "n_pass": [882, 98, 98], "score": "0.997", "loss": "0.0041", "code": "void main(String[] args) throws CryptoException { group =(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16)); System(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\"); BigIntegerprintln(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:56.526134", "n_pass": [916, 99, 99], "score": "0.9885", "loss": "0.0169", "code": "void main(String[] args) throws CryptoException { group =(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\"); BigIntegerprintln(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:23:58.309748", "n_pass": [940, 100, 100], "score": "0.997", "loss": "0.0038", "code": "void main(String[] args) throws CryptoException { group =(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:00.101125", "n_pass": [966, 101, 101], "score": "0.9741", "loss": "0.0366", "code": "void main(String[] args) throws CryptoException { group(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:02.325984", "n_pass": [1047, 102, 102], "score": "0.9625", "loss": "0.0613", "code": "void main(String[] args) throws CryptoException {(\"\"); println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:18.232954", "n_pass": [1293, 103, 103], "score": "0.9932", "loss": "0.0104", "code": "void main(String[] args) throws CryptoException {(\"\");println(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:19.623929", "n_pass": [1294, 104, 104], "score": "0.9962", "loss": "0.0056", "code": "void main(String[] args) throws CryptoException {(\"\");(\"p\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:20.999530", "n_pass": [1297, 105, 105], "score": "0.9761", "loss": "0.0336", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\" + \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:22.402329", "n_pass": [1299, 106, 106], "score": "0.9938", "loss": "0.0085", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+ \" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:23.776982", "n_pass": [1301, 107, 107], "score": "0.9977", "loss": "0.0031", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\" \" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:25.150189", "n_pass": [1303, 108, 108], "score": "0.9967", "loss": "0.0048", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\" + toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:26.530136", "n_pass": [1305, 109, 109], "score": "0.9974", "loss": "0.0038", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+ toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:27.913629", "n_pass": [1307, 110, 110], "score": "0.9972", "loss": "0.0038", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString()); println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:29.292266", "n_pass": [1313, 111, 111], "score": "0.9778", "loss": "0.0314", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());println(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:30.671677", "n_pass": [1314, 112, 112], "score": "0.9577", "loss": "0.0665", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"q \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:32.045471", "n_pass": [1317, 113, 113], "score": "0.9435", "loss": "0.0912", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\" \" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:33.415859", "n_pass": [1318, 114, 114], "score": "0.9717", "loss": "0.0438", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\" +(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:34.793666", "n_pass": [1320, 115, 115], "score": "0.997", "loss": "0.0044", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(16));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:36.190101", "n_pass": [1323, 116, 116], "score": "0.9947", "loss": "0.0075", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"(\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:37.570629", "n_pass": [1330, 117, 117], "score": "0.9698", "loss": "0.045", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\" +toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:38.943368", "n_pass": [1332, 118, 118], "score": "0.9861", "loss": "0.02", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString()); println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:40.481201", "n_pass": [1339, 119, 119], "score": "0.9936", "loss": "0.009", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());println(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:41.854027", "n_pass": [1340, 120, 120], "score": "0.9483", "loss": "0.0768", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"g \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:43.227162", "n_pass": [1343, 121, 121], "score": "0.9546", "loss": "0.0666", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\" \".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:44.635346", "n_pass": [1344, 122, 122], "score": "0.9948", "loss": "0.0081", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString(16));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:46.046792", "n_pass": [1349, 123, 123], "score": "0.9945", "loss": "0.0076", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString(6));(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:47.418645", "n_pass": [1350, 124, 124], "score": "0.9916", "loss": "0.0117", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");  alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:48.808621", "n_pass": [1359, 125, 125], "score": "0.9923", "loss": "0.0112", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\"); alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:50.178222", "n_pass": [1360, 126, 126], "score": "0.9906", "loss": "0.0137", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice = JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:51.550665", "n_pass": [1362, 127, 127], "score": "0.9919", "loss": "0.0126", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice= JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:52.939290", "n_pass": [1364, 128, 128], "score": "0.9646", "loss": "0.0551", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"alice\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:54.314647", "n_pass": [1368, 129, 129], "score": "0.9831", "loss": "0.0259", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",  random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:55.662698", "n_pass": [1371, 130, 130], "score": "0.9881", "loss": "0.0179", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\", random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:57.029721", "n_pass": [1372, 131, 131], "score": "0.9399", "loss": "0.0957", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random); (Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:24:58.401239", "n_pass": [1376, 132, 132], "score": "0.9887", "loss": "0.0167", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload); println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:00.180047", "n_pass": [1381, 133, 133], "score": "0.9804", "loss": "0.0325", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);println(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:01.542836", "n_pass": [1382, 134, 134], "score": "0.9812", "loss": "0.0289", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"Alicen\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:02.911532", "n_pass": [1385, 135, 135], "score": "0.9208", "loss": "0.1357", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"n\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:04.285237", "n_pass": [1386, 136, 136], "score": "0.9666", "loss": "0.0528", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"n\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:06.039427", "n_pass": [1396, 137, 137], "score": "0.9711", "loss": "0.0431", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");println(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:07.409449", "n_pass": [1400, 138, 138], "score": "0.8417", "loss": "0.256", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"*\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:08.774846", "n_pass": [1403, 139, 139], "score": "0.9271", "loss": "0.1223", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\" + toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:10.142666", "n_pass": [1405, 140, 140], "score": "0.9548", "loss": "0.0714", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+ toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:11.512137", "n_pass": [1407, 141, 141], "score": "0.9645", "loss": "0.054", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+toString(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:12.880464", "n_pass": [1408, 142, 142], "score": "0.9466", "loss": "0.0848", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(16));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:14.246755", "n_pass": [1410, 143, 143], "score": "0.8323", "loss": "0.291", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));println(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:15.616834", "n_pass": [1415, 144, 144], "score": "0.8466", "loss": "0.2578", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"Bob\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:16.981368", "n_pass": [1418, 145, 145], "score": "0.8327", "loss": "0.3033", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\" +toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:18.345856", "n_pass": [1420, 146, 146], "score": "0.8031", "loss": "0.3473", "code": "void main(String[] args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:20.482078", "n_pass": [1439, 147, 147], "score": "0.8456", "loss": "0.2761", "code": "void main(String[]args) throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:21.849666", "n_pass": [1442, 148, 148], "score": "0.7807", "loss": "0.411", "code": "void main(String[]args)throws CryptoException {(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:23.219798", "n_pass": [1446, 149, 149], "score": "0.8444", "loss": "0.279", "code": "void main(String[]args)throws CryptoException{(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice=JPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:24.633377", "n_pass": [1498, 150, 150], "score": "0.7426", "loss": "0.4749", "code": "void main(String[]args)throws CryptoException{(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");aliceJPAKEParticipant(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:25.993147", "n_pass": [1499, 151, 151], "score": "0.825", "loss": "0.3106", "code": "void main(String[]args)throws CryptoException{(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+toString(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:30.352374", "n_pass": [1634, 152, 152], "score": "0.7749", "loss": "0.4035", "code": "void main(String[]args)throws CryptoException{(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+(16));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:31.730265", "n_pass": [1636, 153, 153], "score": "0.7749", "loss": "0.4035", "code": "void main(String[]args)throws CryptoException{(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+(6));deriveSessionKey(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:33.118010", "n_pass": [1641, 154, 154], "score": "0.8324", "loss": "0.3068", "code": "void main(String[]args)throws CryptoException{(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+(6));(bobKeyingMaterial);println(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:34.859590", "n_pass": [1646, 155, 155], "score": "0.6191", "loss": "0.7952", "code": "void main(String[]args)throws CryptoException{(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+(6));(bobKeyingMaterial);(\"MacTags\"); }"}
{"time": "2021-01-20 12:25:36.239591", "n_pass": [1649, 156, 156], "score": "0.6462", "loss": "0.7297", "code": "void main(String[]args)throws CryptoException{(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+(6));(bobKeyingMaterial);(\"\"); }"}
{"time": "2021-01-20 12:25:37.602438", "n_pass": [1653, 157, 157], "score": "0.6462", "loss": "0.7297", "code": "void main(String[]args)throws CryptoException{(\"\");(\"\"+\"\"+toString());(\"\"+(6));(\"\"+toString());(\"\".toString());(\"\");alice(\"\",random);(Payload);(\"\");(aliceRound);(\"\");(\"\"+(6));(\"\"+(6));(bobKeyingMaterial);(\"\");}"}

Minimal simplified code:
void main(String[]args)throws CryptoException{("");(""+""+toString());(""+(6));(""+toString());("".toString());("");alice("",random);(Payload);("");(aliceRound);("");(""+(6));(""+(6));(bobKeyingMaterial);("");}

