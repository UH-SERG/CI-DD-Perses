
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/yahoo__FEL/src/main/java/com/yahoo/semsearch/fastlinking/hash/QuasiSuccinctEntityHash_main.java
method_name = main
method_body = public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), "Creates a MPHF from a file with the candidates info", new Parameter[] { new FlaggedOption("input", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', "input", "Input " + "file"), new FlaggedOption("entity2id", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'e', "entities", "TAB-separated entity names and corresponding ids"), new FlaggedOption("wikiThreshold", JSAP.INTEGER_PARSER, "0", JSAP.NOT_REQUIRED, 'w', "wikiThreshold", "Minimum number of anchors to store a candidate"), new FlaggedOption("queryThreshold", JSAP.INTEGER_PARSER, "0", JSAP.NOT_REQUIRED, 'q', "queryThreshold", "Minimum number of clicks to store a candidate"), new FlaggedOption("output", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', "output", "Compressed version") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString("input"), jsapResult.getInt("queryThreshold"), jsapResult.getInt("wikiThreshold")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString("entity2id"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split("\t"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC.close(); final BufferedReader lines = new BufferedReader(new FileReader(jsapResult.getString("entity2id"))); ObjectArrayList<String> entityNames = new ObjectArrayList<>(maxIndex); LOGGER.info("Storing entity names"); while ((line = lines.readLine()) != null) { String[] parts = line.split("\t"); try { final int index = Integer.parseInt(parts[1]); if (index >= entityNames.size()) entityNames.size(index + 1); final String oldValue = entityNames.set(index, parts[0]); if (oldValue != null) LOGGER.warn("Duplicate index " + index + " for names \"" + parts[0] + "\" and \"" + oldValue + "\""); } catch (NumberFormatException e) { LOGGER.error("Wrong line (skipping) --> " + line); } } LOGGER.info("done"); lines.close(); for (int i = 0; i < entityNames.size(); i++) if (entityNames.get(i) == null) { entityNames.set(i, ""); } HashMap<Integer, DataOutputStream> valuesArray = new HashMap<Integer, DataOutputStream>(); HashMap<Integer, LongArrayList> pointersArray = new HashMap<Integer, LongArrayList>(); HashMap<Integer, File> tempFiles = new HashMap<Integer, File>(); LongArrayList cutPoints = new LongArrayList(); File tempFile = File.createTempFile("values", "tempfile"); tempFile.deleteOnExit(); int batchNumber = 0; tempFiles.put(batchNumber, tempFile); DataOutputStream values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); long valuesSize = 0; final IntBigArrayBigList entityValues = new IntBigArrayBigList(); entityValues.size(entityNames.size() * PER_ENTITY_FEATURES); ProgressLogger pl = new ProgressLogger(LOGGER); pl.itemsName = "aliases"; int numberOfCandidates = 0; for (StringAndCandidate sc : stringAndCandidates) { pl.lightUpdate(); if (numberOfCandidates++ > ALIASESPERBATCH - 1) { numberOfCandidates = 1; batchNumber++; tempFile = File.createTempFile("values", "tempfile"); tempFile.deleteOnExit(); values.close(); values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints = new LongArrayList(); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); tempFiles.put(batchNumber, tempFile); valuesSize = 0; } CandidatesInfo ci = sc.candidatesInfo; values.writeInt((int) ci.QAF); values.writeInt((int) ci.QAT); values.writeInt((int) ci.QAC); values.writeInt((int) ci.LAF); values.writeInt((int) ci.LAT); valuesSize += PER_CANDIDATE_FEATURES; for (Entity e : ci.entities) { values.writeInt(e.id); values.writeInt((int) e.LAET); values.writeInt((int) e.QAEF); valuesSize += PER_ENTITY_CANDIDATE_FEATURES; entityValues.set(e.id * PER_ENTITY_FEATURES, (int) e.QEF); entityValues.set(e.id * PER_ENTITY_FEATURES + 1, (int) e.LET); entityValues.set(e.id * PER_ENTITY_FEATURES + 2, e.type); } cutPoints.add(valuesSize); } values.close(); pl.done(); Iterable<CharSequence> surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); } LOGGER.info("#Batches= " + tempFiles.size()); QuasiSuccinctEntityHash quasiSuccinctEntityHash = new QuasiSuccinctEntityHash(surfaceForm2Position, cutPointsArray, valuesA, new EliasFanoLongBigList(entityValues), new FrontCodedStringList(entityNames, 8, true)); LOGGER.info("Creating stats"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString("output")); LOGGER.info("... done"); assert checkMap(jsapResult, stringAndCandidates); }
predict, score, loss = main, 0.7798791, 0.43788

Trace of simplified code(s):
{"time": "2021-01-20 10:33:02.864022", "n_pass": [1, 1, 1], "score": "0.3707", "loss": "1.5353", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'e', \"entities\", \"TAB-separated entity names and corresponding ids\"), new FlaggedOption(\"wikiThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"output\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', \"output\", \"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC.close(); final BufferedReader lines = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); ObjectArrayList<String> entityNames = new ObjectArrayList<>(maxIndex); LOGGER.info(\"Storing entity names\"); while ((line = lines.readLine()) != null) { String[] parts = line.split(\"\\t\"); try { final int index = Integer.parseInt(parts[1]); if (index >= entityNames.size()) entityNames.size(index + 1); final String oldValue = entityNames.set(index, parts[0]); if (oldValue != null) LOGGER.warn(\"Duplicate index \" + index + \" for names \\\"\" + parts[0] + \"\\\" and \\\"\" + oldValue + \"\\\"\"); } catch (NumberFormatException e) { LOGGER.error(\"Wrong line (skipping) --> \" + line); } } LOGGER.info(\"done\"); lines.close(); for (int i = 0; i < entityNames.size(); i++) if (entityNames.get(i) == null) { entityNames.set(i, \"\"); } HashMap<Integer, DataOutputStream> valuesArray = new HashMap<Integer, DataOutputStream>(); HashMap<Integer, LongArrayList> pointersArray = new HashMap<Integer, LongArrayList>(); HashMap<Integer, File> tempFiles = new HashMap<Integer, File>(); LongArrayList cutPoints = new LongArrayList(); File tempFile = File.createTempFile(\"values\", \"tempfile\"); tempFile.deleteOnExit(); int batchNumber = 0; tempFiles.put(batchNumber, tempFile); DataOutputStream values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); long valuesSize = 0; final IntBigArrayBigList entityValues = new IntBigArrayBigList(); entityValues.size(entityNames.size() * PER_ENTITY_FEATURES); ProgressLogger pl = new ProgressLogger(LOGGER); pl.itemsName = \"aliases\"; int numberOfCandidates = 0; for (StringAndCandidate sc : stringAndCandidates) { pl.lightUpdate(); if (numberOfCandidates++ > ALIASESPERBATCH - 1) { numberOfCandidates = 1; batchNumber++; tempFile = File.createTempFile(\"values\", \"tempfile\"); tempFile.deleteOnExit(); values.close(); values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints = new LongArrayList(); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); tempFiles.put(batchNumber, tempFile); valuesSize = 0; } CandidatesInfo ci = sc.candidatesInfo; values.writeInt((int) ci.QAF); values.writeInt((int) ci.QAT); values.writeInt((int) ci.QAC); values.writeInt((int) ci.LAF); values.writeInt((int) ci.LAT); valuesSize += PER_CANDIDATE_FEATURES; for (Entity e : ci.entities) { values.writeInt(e.id); values.writeInt((int) e.LAET); values.writeInt((int) e.QAEF); valuesSize += PER_ENTITY_CANDIDATE_FEATURES; entityValues.set(e.id * PER_ENTITY_FEATURES, (int) e.QEF); entityValues.set(e.id * PER_ENTITY_FEATURES + 1, (int) e.LET); entityValues.set(e.id * PER_ENTITY_FEATURES + 2, e.type); } cutPoints.add(valuesSize); } values.close(); pl.done(); Iterable<CharSequence> surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); } LOGGER.info(\"#Batches= \" + tempFiles.size()); QuasiSuccinctEntityHash quasiSuccinctEntityHash = new QuasiSuccinctEntityHash(surfaceForm2Position, cutPointsArray, valuesA, new EliasFanoLongBigList(entityValues), new FrontCodedStringList(entityNames, 8, true)); LOGGER.info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:04.627261", "n_pass": [9, 2, 2], "score": "0.9524", "loss": "0.0722", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'e', \"entities\", \"TAB-separated entity names and corresponding ids\"), new FlaggedOption(\"wikiThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"output\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', \"output\", \"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesCput(batchNumber, values); pointersArray.put(batchNumber, cutPoints); long valuesSize = 0; final IntBigArrayBigList entityValues = new IntBigArrayBigList(); entityValues.size(entityNames.size() * PER_ENTITY_FEATURES); ProgressLogger pl = new ProgressLogger(LOGGER); pl.itemsName = \"aliases\"; int numberOfCandidates = 0; for (StringAndCandidate sc : stringAndCandidates) { pl.lightUpdate(); if (numberOfCandidates++ > ALIASESPERBATCH - 1) { numberOfCandidates = 1; batchNumber++; tempFile = File.createTempFile(\"values\", \"tempfile\"); tempFile.deleteOnExit(); values.close(); values = new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(tempFile))); cutPoints = new LongArrayList(); cutPoints.add(0); valuesArray.put(batchNumber, values); pointersArray.put(batchNumber, cutPoints); tempFiles.put(batchNumber, tempFile); valuesSize = 0; } CandidatesInfo ci = sc.candidatesInfo; values.writeInt((int) ci.QAF); values.writeInt((int) ci.QAT); values.writeInt((int) ci.QAC); values.writeInt((int) ci.LAF); values.writeInt((int) ci.LAT); valuesSize += PER_CANDIDATE_FEATURES; for (Entity e : ci.entities) { values.writeInt(e.id); values.writeInt((int) e.LAET); values.writeInt((int) e.QAEF); valuesSize += PER_ENTITY_CANDIDATE_FEATURES; entityValues.set(e.id * PER_ENTITY_FEATURES, (int) e.QEF); entityValues.set(e.id * PER_ENTITY_FEATURES + 1, (int) e.LET); entityValues.set(e.id * PER_ENTITY_FEATURES + 2, e.type); } cutPoints.add(valuesSize); } values.close(); pl.done(); Iterable<CharSequence> surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); } LOGGER.info(\"#Batches= \" + tempFiles.size()); QuasiSuccinctEntityHash quasiSuccinctEntityHash = new QuasiSuccinctEntityHash(surfaceForm2Position, cutPointsArray, valuesA, new EliasFanoLongBigList(entityValues), new FrontCodedStringList(entityNames, 8, true)); LOGGER.info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:06.242036", "n_pass": [10, 3, 3], "score": "0.9975", "loss": "0.0034", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'e', \"entities\", \"TAB-separated entity names and corresponding ids\"), new FlaggedOption(\"wikiThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"output\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', \"output\", \"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); } LOGGER.info(\"#Batches= \" + tempFiles.size()); QuasiSuccinctEntityHash quasiSuccinctEntityHash = new QuasiSuccinctEntityHash(surfaceForm2Position, cutPointsArray, valuesA, new EliasFanoLongBigList(entityValues), new FrontCodedStringList(entityNames, 8, true)); LOGGER.info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:07.967453", "n_pass": [57, 4, 4], "score": "0.9703", "loss": "0.0335", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'e', \"entities\", \"TAB-separated entity names and corresponding ids\"), new FlaggedOption(\"wikiThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"output\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', \"output\", \"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:09.548366", "n_pass": [60, 5, 5], "score": "0.2969", "loss": "1.64", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"output\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'o', \"output\", \"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:11.201763", "n_pass": [106, 6, 6], "score": "0.944", "loss": "0.0698", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator(), new MWHCFunction.Builder<CharSequence>().keys(surfaceForms).transform(TransformationStrategies.utf16()).build()); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:12.801327", "n_pass": [117, 7, 7], "score": "0.971", "loss": "0.0427", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED, 'i', \"input\", \"Input \" + \"file\"), new FlaggedOption(\"entity2id\", JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:14.428889", "n_pass": [130, 8, 8], "score": "0.8807", "loss": "0.2055", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicks to store a candidate\"), new FlaggedOption(\"Compressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:16.138409", "n_pass": [211, 9, 9], "score": "0.9823", "loss": "0.0229", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap.parse(args); if (jsap.messagePrinted()) return; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:17.681717", "n_pass": [213, 10, 10], "score": "0.6903", "loss": "0.574", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsapreturn; final Iterable<StringAndCandidate> stringAndCandidates = FormatReader.stringAndCandidates(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:19.239975", "n_pass": [214, 11, 11], "score": "0.8588", "loss": "0.2528", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] parts = line.split(\"\\t\"); int x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:20.793253", "n_pass": [221, 12, 12], "score": "0.8151", "loss": "0.2952", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); } @Override public String next() { return i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:22.357293", "n_pass": [229, 13, 13], "score": "0.9089", "loss": "0.1735", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong()); cutPointsArray[i] = new EliasFanoMonotoneLongBigList(pointersArray.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:23.965101", "n_pass": [243, 14, 14], "score": "0.9727", "loss": "0.043", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP.STRING_PARSER, JSAP.NO_DEFAULT, JSAP.REQUIRED,  JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:25.576601", "n_pass": [255, 15, 15], "score": "0.9437", "loss": "0.0801", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", JSAP. JSAPJSAP.NOT_REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:27.670746", "n_pass": [385, 16, 16], "score": "0.6359", "loss": "0.5854", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", REQUIRED, 'w', \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:29.202798", "n_pass": [386, 17, 17], "score": "0.9798", "loss": "0.0263", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum number of anchors to store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:30.718228", "n_pass": [388, 18, 18], "score": "0.9539", "loss": "0.0612", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER, \"0\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:32.250610", "n_pass": [392, 19, 19], "score": "0.9932", "loss": "0.0084", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \"Minimum number of clicksCompressed version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:33.805427", "n_pass": [395, 20, 20], "score": "0.7574", "loss": "0.4182", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); final BufferedReader linesC = new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:35.333057", "n_pass": [402, 21, 21], "score": "0.9699", "loss": "0.0372", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int maxIndex = 0; String line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:36.859578", "n_pass": [406, 22, 22], "score": "0.9939", "loss": "0.0068", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { return i.hasNext(); i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:38.449078", "n_pass": [424, 23, 23], "score": "0.2946", "loss": "1.6313", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { i.next().surfaceForm; } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:39.968636", "n_pass": [425, 24, 24], "score": "0.9568", "loss": "0.0604", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; i < tempFiles.size(); i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:41.529837", "n_pass": [435, 25, 25], "score": "0.9876", "loss": "0.0147", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { final File xx = tempFiles.get(i); LongIterable lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:43.043798", "n_pass": [438, 26, 26], "score": "0.9991", "loss": "0.0012", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { final File xx = tempFileslI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } }; long lowerBound = Long.MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:44.570239", "n_pass": [444, 27, 27], "score": "0.9496", "loss": "0.0723", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { final File xx = tempFileslI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator(); while (iterator.hasNext()) lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:46.080558", "n_pass": [447, 28, 28], "score": "0.9993", "loss": "0.0008", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from a file with the candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { final File xx = tempFileslI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:47.661573", "n_pass": [467, 29, 29], "score": "0.964", "loss": "0.0431", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { final File xx = tempFileslI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:49.354946", "n_pass": [513, 30, 30], "score": "0.9996", "loss": "0.0005", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { lI = new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:51.180749", "n_pass": [730, 31, 31], "score": "0.9856", "loss": "0.0157", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() { public LongIterator iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:52.696501", "n_pass": [733, 32, 32], "score": "0.7187", "loss": "0.5296", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() { iterator() { return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:54.224255", "n_pass": [734, 33, 33], "score": "0.9903", "loss": "0.0117", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.asIntIterable(xx).iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:55.753963", "n_pass": [737, 34, 34], "score": "0.9226", "loss": "0.0991", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } };MAX_VALUE; LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:57.259878", "n_pass": [740, 35, 35], "score": "0.98", "loss": "0.023", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } };LongIterator iterator = lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:33:58.759312", "n_pass": [741, 36, 36], "score": "0.8362", "loss": "0.236", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBound = Math.min(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:00.263974", "n_pass": [744, 37, 37], "score": "0.8399", "loss": "0.226", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, iterator.nextLong.get(i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:01.758693", "n_pass": [746, 38, 38], "score": "0.9481", "loss": "0.0621", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator(), lowerBound, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:03.270509", "n_pass": [751, 39, 39], "score": "0.9598", "loss": "0.0473", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.stats = CountAndRecordStats.createStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:05.181776", "n_pass": [756, 40, 40], "score": "0.907", "loss": "0.1177", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(quasiSuccinctEntityHash, jsapResult.getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:06.691720", "n_pass": [759, 41, 41], "score": "0.9837", "loss": "0.0197", "code": "public static void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:08.200214", "n_pass": [767, 42, 42], "score": "0.997", "loss": "0.0033", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash.class.getName(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:09.693853", "n_pass": [775, 43, 43], "score": "0.9435", "loss": "0.0762", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a MPHF from candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:11.199242", "n_pass": [778, 44, 44], "score": "0.9968", "loss": "0.0037", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a candidates info\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:12.671880", "n_pass": [779, 45, 45], "score": "0.9984", "loss": "0.0018", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\", \"wikiThreshold\", \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:14.156201", "n_pass": [785, 46, 46], "score": "0.9916", "loss": "0.0099", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum store a candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:15.659679", "n_pass": [787, 47, 47], "score": "0.9669", "loss": "0.0426", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.INTEGER_PARSER,NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:17.158876", "n_pass": [792, 48, 48], "score": "0.9935", "loss": "0.0075", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold\", \" version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:18.649010", "n_pass": [796, 49, 49], "score": "0.9856", "loss": "0.0164", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"), jsapResult.getInt(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:20.168256", "n_pass": [806, 50, 50], "score": "0.9925", "loss": "0.0098", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((line = linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:21.668637", "n_pass": [817, 51, 51], "score": "0.9985", "loss": "0.0018", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String[] x = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:23.172295", "n_pass": [822, 52, 52], "score": "0.9982", "loss": "0.002", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String = Integer.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:24.660569", "n_pass": [823, 53, 53], "score": "0.9696", "loss": "0.0381", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) maxIndex = x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:26.145160", "n_pass": [829, 54, 54], "score": "0.9993", "loss": "0.0009", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override public Iterator<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:27.662288", "n_pass": [836, 55, 55], "score": "0.9929", "loss": "0.0084", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap surfaceForm2Position = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:29.203710", "n_pass": [853, 56, 56], "score": "0.9976", "loss": "0.0028", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); EliasFanoLongBigList[] valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:30.683250", "n_pass": [857, 57, 57], "score": "0.9991", "loss": "0.001", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); valuesA = new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:32.171772", "n_pass": [858, 58, 58], "score": "0.8613", "loss": "0.195", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[] cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:33.647540", "n_pass": [862, 59, 59], "score": "0.9698", "loss": "0.0347", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; cutPointsArray = new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:35.145703", "n_pass": [863, 60, 60], "score": "0.9742", "loss": "0.036", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; new EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:41.550612", "n_pass": [1200, 61, 61], "score": "0.9906", "loss": "0.011", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[tempFiles.size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:43.033184", "n_pass": [1201, 62, 62], "score": "0.9895", "loss": "0.0138", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ return LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:44.582613", "n_pass": [1220, 63, 63], "score": "0.9868", "loss": "0.0172", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ LongIterators.wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:46.058965", "n_pass": [1221, 64, 64], "score": "0.9586", "loss": "0.0614", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(BinIO.iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:47.525532", "n_pass": [1223, 65, 65], "score": "0.9787", "loss": "0.0293", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI.iterator();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:49.025839", "n_pass": [1230, 66, 66], "score": "0.9862", "loss": "0.0177", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI();  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:50.497170", "n_pass": [1231, 67, 67], "score": "0.9986", "loss": "0.0018", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI;  lowerBoundmin(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:51.996873", "n_pass": [1233, 68, 68], "score": "0.9799", "loss": "0.0245", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min(lowerBound, (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:53.471659", "n_pass": [1235, 69, 69], "score": "0.9128", "loss": "0.1354", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); quasiSuccinctEntityHash.statscreateStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:55.004897", "n_pass": [1251, 70, 70], "score": "0.9867", "loss": "0.0176", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); BinIO.storeObject(getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:56.503697", "n_pass": [1254, 71, 71], "score": "0.9902", "loss": "0.0125", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString(\"output\")); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:58.009618", "n_pass": [1256, 72, 72], "score": "0.9935", "loss": "0.0077", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString()); LOGGER.info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:34:59.479615", "n_pass": [1258, 73, 73], "score": "0.9853", "loss": "0.0195", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\"... done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:00.949559", "n_pass": [1260, 74, 74], "score": "0.983", "loss": "0.0187", "code": "void main(String[] args) throws Exception { SimpleJSAP jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:02.852178", "n_pass": [1275, 75, 75], "score": "0.9694", "loss": "0.0358", "code": "void main(String[] args) throws Exception { jsap = new SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:04.304193", "n_pass": [1278, 76, 76], "score": "0.9742", "loss": "0.0325", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash(), \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:05.764163", "n_pass": [1281, 77, 77], "score": "0.9946", "loss": "0.0059", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates a\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:07.223605", "n_pass": [1284, 78, 78], "score": "0.9949", "loss": "0.007", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { new FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:08.701366", "n_pass": [1290, 79, 79], "score": "0.9902", "loss": "0.0122", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"Minimum candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:10.175089", "n_pass": [1296, 80, 80], "score": "0.9922", "loss": "0.0092", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), new FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:11.645612", "n_pass": [1299, 81, 81], "score": "0.9457", "loss": "0.0879", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\", JSAP.NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:13.148670", "n_pass": [1304, 82, 82], "score": "0.9939", "loss": "0.0076", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\", NOT_REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:14.609430", "n_pass": [1305, 83, 83], "score": "0.9959", "loss": "0.0052", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\", REQUIRED, 'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:16.086483", "n_pass": [1306, 84, 84], "score": "0.9917", "loss": "0.0089", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold version\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:17.554391", "n_pass": [1311, 85, 85], "score": "0.9106", "loss": "0.139", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); JSAPResult jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:19.042490", "n_pass": [1315, 86, 86], "score": "0.9862", "loss": "0.0184", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult.getString(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:20.520737", "n_pass": [1320, 87, 87], "score": "0.9859", "loss": "0.0187", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult.getInt(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:22.021565", "n_pass": [1325, 88, 88], "score": "0.9887", "loss": "0.0128", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); new BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:23.501090", "n_pass": [1333, 89, 89], "score": "0.9802", "loss": "0.0268", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(new FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:24.967916", "n_pass": [1335, 90, 90], "score": "0.9903", "loss": "0.0128", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(jsapResult.getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:26.434293", "n_pass": [1337, 91, 91], "score": "0.9947", "loss": "0.006", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity2id\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:27.918006", "n_pass": [1340, 92, 92], "score": "0.9583", "loss": "0.0591", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); int  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:29.380190", "n_pass": [1344, 93, 93], "score": "0.9307", "loss": "0.0914", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\")));  line; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:30.831820", "n_pass": [1345, 94, 94], "score": "0.7617", "loss": "0.3784", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); ; while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:32.319689", "n_pass": [1346, 95, 95], "score": "0.975", "loss": "0.036", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((linesC.readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:33.777154", "n_pass": [1349, 96, 96], "score": "0.981", "loss": "0.0252", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String.parseInt(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:35.640634", "n_pass": [1357, 97, 97], "score": "0.9851", "loss": "0.0199", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } linesC surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:37.132309", "n_pass": [1369, 98, 98], "score": "0.9542", "loss": "0.0669", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { @Override<CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:38.642344", "n_pass": [1378, 99, 99], "score": "0.9924", "loss": "0.0104", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { return new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:40.132296", "n_pass": [1384, 100, 100], "score": "0.922", "loss": "0.1082", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = stringAndCandidates.iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:41.777824", "n_pass": [1395, 101, 101], "score": "0.9896", "loss": "0.0128", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override public boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:43.232167", "n_pass": [1400, 102, 102], "score": "0.9653", "loss": "0.0516", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override boolean hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:44.710562", "n_pass": [1401, 103, 103], "score": "0.9909", "loss": "0.0132", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = new ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:46.200354", "n_pass": [1412, 104, 104], "score": "0.984", "loss": "0.0203", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(surfaceForms.iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:47.642060", "n_pass": [1414, 105, 105], "score": "0.9791", "loss": "0.0312", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); new EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:49.097621", "n_pass": [1417, 106, 106], "score": "0.9955", "loss": "0.0065", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[tempFiles.size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:50.542699", "n_pass": [1419, 107, 107], "score": "0.9671", "loss": "0.0477", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } }; lI; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:52.108797", "n_pass": [1448, 108, 108], "score": "0.9972", "loss": "0.0034", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };; min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:53.555053", "n_pass": [1449, 109, 109], "score": "0.972", "loss": "0.0406", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"), jsapResult(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:55.585145", "n_pass": [1521, 110, 110], "score": "0.992", "loss": "0.0108", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) { String(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:57.472749", "n_pass": [1544, 111, 111], "score": "0.9959", "loss": "0.0054", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator(); @Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:35:59.029142", "n_pass": [1581, 112, 112], "score": "0.9963", "loss": "0.0044", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();Override hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:00.481061", "n_pass": [1582, 113, 113], "score": "0.9965", "loss": "0.0041", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext() { } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:37.631489", "n_pass": [2099, 114, 114], "score": "0.9924", "loss": "0.0094", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){ } }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:39.090696", "n_pass": [2101, 115, 115], "score": "0.9797", "loss": "0.0305", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){} }; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:40.572785", "n_pass": [2103, 116, 116], "score": "0.9926", "loss": "0.0088", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}}; } }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:42.033820", "n_pass": [2106, 117, 117], "score": "0.9953", "loss": "0.006", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};} }; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:43.518748", "n_pass": [2108, 118, 118], "score": "0.9906", "loss": "0.0121", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}}; ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:44.975664", "n_pass": [2111, 119, 119], "score": "0.9874", "loss": "0.0158", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap = ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:46.430583", "n_pass": [2113, 120, 120], "score": "0.9918", "loss": "0.0103", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap= ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:47.931921", "n_pass": [2115, 121, 121], "score": "0.9814", "loss": "0.0251", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=ShiftAddXorSignedStringMap(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:49.397582", "n_pass": [2116, 122, 122], "score": "0.9845", "loss": "0.019", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator); EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:50.869292", "n_pass": [2120, 123, 123], "score": "0.9955", "loss": "0.0056", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator) EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:52.333485", "n_pass": [2121, 124, 124], "score": "0.9686", "loss": "0.0467", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)EliasFanoLongBigList[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:53.803336", "n_pass": [2122, 125, 125], "score": "0.9855", "loss": "0.0191", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()]; EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:55.284764", "n_pass": [2129, 126, 126], "score": "0.9696", "loss": "0.0479", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()]; for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:56.772636", "n_pass": [2137, 127, 127], "score": "0.9957", "loss": "0.0056", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for (int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:58.262348", "n_pass": [2139, 128, 128], "score": "0.993", "loss": "0.0091", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(int i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:36:59.712419", "n_pass": [2141, 129, 129], "score": "0.9959", "loss": "0.0055", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for( i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:01.160980", "n_pass": [2142, 130, 130], "score": "0.9805", "loss": "0.0257", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i = 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:02.634728", "n_pass": [2144, 131, 131], "score": "0.9821", "loss": "0.0241", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i= 0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:04.084586", "n_pass": [2146, 132, 132], "score": "0.9681", "loss": "0.0446", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0; ; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:05.557512", "n_pass": [2149, 133, 133], "score": "0.9773", "loss": "0.0285", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;; i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:07.009860", "n_pass": [2151, 134, 134], "score": "0.9964", "loss": "0.0051", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++) { new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:08.472981", "n_pass": [2156, 135, 135], "score": "0.9481", "loss": "0.0798", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){ new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:09.925712", "n_pass": [2158, 136, 136], "score": "0.7727", "loss": "0.375", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable() {{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:11.388868", "n_pass": [2164, 137, 137], "score": "0.9707", "loss": "0.0433", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{ wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:12.844833", "n_pass": [2167, 138, 138], "score": "0.9893", "loss": "0.0145", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{wrap(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:14.318547", "n_pass": [2168, 139, 139], "score": "0.9794", "loss": "0.0281", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator()); } };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:15.790643", "n_pass": [2175, 140, 140], "score": "0.9974", "loss": "0.0031", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());} };min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:17.238700", "n_pass": [2177, 141, 141], "score": "0.9979", "loss": "0.0027", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};min( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:18.704671", "n_pass": [2180, 142, 142], "score": "0.989", "loss": "0.0143", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};( (i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:20.376733", "n_pass": [2182, 143, 143], "score": "0.97", "loss": "0.0419", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i)); valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:21.836253", "n_pass": [2188, 144, 144], "score": "0.9966", "loss": "0.004", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i] = new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:23.297877", "n_pass": [2193, 145, 145], "score": "0.9978", "loss": "0.0028", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]= new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:24.744988", "n_pass": [2195, 146, 146], "score": "0.9949", "loss": "0.0065", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=new EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:26.186609", "n_pass": [2196, 147, 147], "score": "0.9951", "loss": "0.0067", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]= EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:27.629964", "n_pass": [2197, 148, 148], "score": "0.983", "loss": "0.0234", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI.iterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:29.086829", "n_pass": [2201, 149, 149], "score": "0.9897", "loss": "0.0141", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lIiterator, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:30.555057", "n_pass": [2202, 150, 150], "score": "0.9422", "loss": "0.0826", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI, true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:32.003890", "n_pass": [2204, 151, 151], "score": "0.9509", "loss": "0.0691", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true); }info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:33.452746", "n_pass": [2208, 152, 152], "score": "0.9746", "loss": "0.0313", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}info(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:34.898675", "n_pass": [2210, 153, 153], "score": "0.999", "loss": "0.0013", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"Creating stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:36.341248", "n_pass": [2213, 154, 154], "score": "0.9906", "loss": "0.0126", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\" stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:37.781519", "n_pass": [2214, 155, 155], "score": "0.9425", "loss": "0.0841", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\"); createStats(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:39.226986", "n_pass": [2217, 156, 156], "score": "0.9749", "loss": "0.0345", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\" done\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:40.691652", "n_pass": [2225, 157, 157], "score": "0.9657", "loss": "0.051", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); assert checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:42.137470", "n_pass": [2228, 158, 158], "score": "0.9906", "loss": "0.0126", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(jsapResult, stringAndCandidates); }"}
{"time": "2021-01-20 10:37:43.582196", "n_pass": [2230, 159, 159], "score": "0.9863", "loss": "0.0179", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap( stringAndCandidates); }"}
{"time": "2021-01-20 10:37:45.019735", "n_pass": [2231, 160, 160], "score": "0.9807", "loss": "0.0291", "code": "void main(String[] args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:37:47.268733", "n_pass": [2241, 161, 161], "score": "0.9895", "loss": "0.0135", "code": "void main(String[]args) throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:37:48.703458", "n_pass": [2244, 162, 162], "score": "0.9513", "loss": "0.0758", "code": "void main(String[]args)throws Exception { jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:37:50.176222", "n_pass": [2248, 163, 163], "score": "0.9791", "loss": "0.0331", "code": "void main(String[]args)throws Exception{ jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:37:51.624425", "n_pass": [2250, 164, 164], "score": "0.9898", "loss": "0.0131", "code": "void main(String[]args)throws Exception{jsap = SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:37:53.084861", "n_pass": [2252, 165, 165], "score": "0.9957", "loss": "0.006", "code": "void main(String[]args)throws Exception{jsap= SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:37:54.525831", "n_pass": [2254, 166, 166], "score": "0.9982", "loss": "0.0023", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash, \"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:37:55.990839", "n_pass": [2259, 167, 167], "score": "0.9527", "loss": "0.0781", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"Creates\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:37:57.430589", "n_pass": [2261, 168, 168], "score": "0.9961", "loss": "0.0057", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\", new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:37:58.879356", "n_pass": [2264, 169, 169], "score": "0.9985", "loss": "0.002", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[] { FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:00.324781", "n_pass": [2270, 170, 170], "score": "0.9953", "loss": "0.0065", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{ FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:01.781216", "n_pass": [2272, 171, 171], "score": "0.9971", "loss": "0.0039", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"input\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:03.219334", "n_pass": [2276, 172, 172], "score": "0.9978", "loss": "0.003", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",  \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:04.660656", "n_pass": [2279, 173, 173], "score": "0.9882", "loss": "0.0173", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\", \"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:06.089028", "n_pass": [2280, 174, 174], "score": "0.993", "loss": "0.0097", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"candidate\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:07.525153", "n_pass": [2282, 175, 175], "score": "0.9854", "loss": "0.0209", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"), FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:08.969009", "n_pass": [2286, 176, 176], "score": "0.9926", "loss": "0.0107", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"queryThreshold\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:10.411648", "n_pass": [2290, 177, 177], "score": "0.9663", "loss": "0.0496", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",  'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:11.871374", "n_pass": [2293, 178, 178], "score": "0.9965", "loss": "0.005", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\", 'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:13.330555", "n_pass": [2294, 179, 179], "score": "0.9977", "loss": "0.0036", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q', \"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:15.105168", "n_pass": [2299, 180, 180], "score": "0.998", "loss": "0.0031", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"queryThreshold\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:16.537907", "n_pass": [2301, 181, 181], "score": "0.9909", "loss": "0.0129", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\") }); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:17.978356", "n_pass": [2304, 182, 182], "score": "0.973", "loss": "0.0461", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")}); jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:19.420722", "n_pass": [2308, 183, 183], "score": "0.995", "loss": "0.007", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult = jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:20.856708", "n_pass": [2310, 184, 184], "score": "0.9969", "loss": "0.0044", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult= jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:22.296526", "n_pass": [2312, 185, 185], "score": "0.9974", "loss": "0.004", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap(jsapResult(\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:23.767579", "n_pass": [2315, 186, 186], "score": "0.9807", "loss": "0.0278", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"input\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:25.212654", "n_pass": [2318, 187, 187], "score": "0.866", "loss": "0.2377", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"queryThreshold\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:26.666914", "n_pass": [2324, 188, 188], "score": "0.9962", "loss": "0.0058", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"wikiThreshold\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:28.109726", "n_pass": [2330, 189, 189], "score": "0.9785", "loss": "0.0342", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\")); BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:29.552219", "n_pass": [2335, 190, 190], "score": "0.9861", "loss": "0.022", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));BufferedReader(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:30.995298", "n_pass": [2336, 191, 191], "score": "0.9602", "loss": "0.0667", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(FileReader(getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:32.430495", "n_pass": [2338, 192, 192], "score": "0.9927", "loss": "0.011", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));((getString(\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:33.858168", "n_pass": [2340, 193, 193], "score": "0.9891", "loss": "0.0162", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"entity\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:35.287693", "n_pass": [2343, 194, 194], "score": "0.9841", "loss": "0.0273", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\"))); while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:36.748709", "n_pass": [2349, 195, 195], "score": "0.993", "loss": "0.0103", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while ((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:38.183536", "n_pass": [2351, 196, 196], "score": "0.988", "loss": "0.017", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine()) != null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:39.650378", "n_pass": [2358, 197, 197], "score": "0.9292", "loss": "0.1217", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!= null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:41.485790", "n_pass": [2361, 198, 198], "score": "0.9911", "loss": "0.0141", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null) {(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:42.943643", "n_pass": [2364, 199, 199], "score": "0.8987", "loss": "0.1629", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]); if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:44.404184", "n_pass": [2373, 200, 200], "score": "0.9884", "loss": "0.0168", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if (x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:45.838440", "n_pass": [2375, 201, 201], "score": "0.9942", "loss": "0.0087", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x > maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:47.272901", "n_pass": [2378, 202, 202], "score": "0.9959", "loss": "0.0062", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x> maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:48.725366", "n_pass": [2380, 203, 203], "score": "0.9877", "loss": "0.019", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex) x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:50.202220", "n_pass": [2383, 204, 204], "score": "0.9897", "loss": "0.0165", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex)x; } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:51.666693", "n_pass": [2384, 205, 205], "score": "0.8957", "loss": "0.1741", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex); } surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:53.097930", "n_pass": [2386, 206, 206], "score": "0.9959", "loss": "0.0059", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);} surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:54.535160", "n_pass": [2388, 207, 207], "score": "0.9834", "loss": "0.0247", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms = new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:55.968828", "n_pass": [2390, 208, 208], "score": "0.9946", "loss": "0.0076", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms= new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:57.401087", "n_pass": [2392, 209, 209], "score": "0.9955", "loss": "0.0066", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<CharSequence>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:38:58.880505", "n_pass": [2397, 210, 210], "score": "0.8172", "loss": "0.3107", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>() { <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:00.317310", "n_pass": [2401, 211, 211], "score": "0.9328", "loss": "0.1071", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){ <CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:01.752741", "n_pass": [2403, 212, 212], "score": "0.9649", "loss": "0.0537", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence> iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:03.183176", "n_pass": [2407, 213, 213], "score": "0.9851", "loss": "0.0241", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator() { new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:04.622592", "n_pass": [2411, 214, 214], "score": "0.9841", "loss": "0.0238", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){ new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:06.047225", "n_pass": [2413, 215, 215], "score": "0.9914", "loss": "0.0132", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<CharSequence>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:07.501670", "n_pass": [2418, 216, 216], "score": "0.976", "loss": "0.0393", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>() { Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:08.939140", "n_pass": [2422, 217, 217], "score": "0.9931", "loss": "0.0105", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){ Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:10.389088", "n_pass": [2424, 218, 218], "score": "0.9919", "loss": "0.0119", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate> i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:11.851419", "n_pass": [2429, 219, 219], "score": "0.9919", "loss": "0.0129", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i = iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:13.285737", "n_pass": [2431, 220, 220], "score": "0.9928", "loss": "0.0114", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i= iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:14.724597", "n_pass": [2433, 221, 221], "score": "0.9418", "loss": "0.0933", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap=(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:16.195028", "n_pass": [2449, 222, 222], "score": "0.9955", "loss": "0.0072", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap(iterator)[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:17.624468", "n_pass": [2451, 223, 223], "score": "0.9972", "loss": "0.0042", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i=0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:19.105618", "n_pass": [2469, 224, 224], "score": "0.9851", "loss": "0.0246", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i0;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:20.533914", "n_pass": [2470, 225, 225], "score": "0.9856", "loss": "0.0217", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI,true);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:22.084384", "n_pass": [2508, 226, 226], "score": "0.9887", "loss": "0.0184", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lItrue);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:23.510618", "n_pass": [2509, 227, 227], "score": "0.9869", "loss": "0.0207", "code": "void main(String[]args)throws Exception{jsap=SimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:25.802695", "n_pass": [2543, 228, 228], "score": "0.985", "loss": "0.0275", "code": "void main(String[]args)throws Exception{jsapSimpleJSAP(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:27.229487", "n_pass": [2544, 229, 229], "score": "0.9679", "loss": "0.0505", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult=jsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:29.034153", "n_pass": [2582, 230, 230], "score": "0.9438", "loss": "0.0911", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResultjsap((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:30.453979", "n_pass": [2583, 231, 231], "score": "0.9662", "loss": "0.0563", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);if(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:32.346798", "n_pass": [2629, 232, 232], "score": "0.966", "loss": "0.0602", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x>maxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:33.762410", "n_pass": [2632, 233, 233], "score": "0.9515", "loss": "0.0784", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(xmaxIndex);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:35.190279", "n_pass": [2633, 234, 234], "score": "0.9833", "loss": "0.0263", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i=iterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:36.685825", "n_pass": [2667, 235, 235], "score": "0.9696", "loss": "0.0542", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>iiterator();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:38.106583", "n_pass": [2668, 236, 236], "score": "0.9943", "loss": "0.0076", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(i;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:39.606698", "n_pass": [2700, 237, 237], "score": "0.989", "loss": "0.0152", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=EliasFanoLongBigList(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:41.102599", "n_pass": [2735, 238, 238], "score": "0.9357", "loss": "0.0981", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"stats\");(quasiSuccinctEntityHash); (getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:47.904668", "n_pass": [2984, 239, 239], "score": "0.9722", "loss": "0.0567", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"stats\");(quasiSuccinctEntityHash);(getString());info(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:49.357184", "n_pass": [2990, 240, 240], "score": "0.9319", "loss": "0.1076", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"stats\");(quasiSuccinctEntityHash);(getString());(\"\"); checkMap(); }"}
{"time": "2021-01-20 10:39:50.777392", "n_pass": [2996, 241, 241], "score": "0.988", "loss": "0.0164", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"stats\");(quasiSuccinctEntityHash);(getString());(\"\");checkMap(); }"}
{"time": "2021-01-20 10:39:52.191255", "n_pass": [3001, 242, 242], "score": "0.9868", "loss": "0.0191", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"stats\");(quasiSuccinctEntityHash);(getString());(\"\");checkMap();}"}
{"time": "2021-01-20 10:39:55.564905", "n_pass": [3206, 243, 243], "score": "0.9314", "loss": "0.1049", "code": "void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,\"\",new Parameter[]{FlaggedOption(\"\",\"\"),FlaggedOption(\"\",'q',\"\")});jsapResult((\"\"),(\"\"),(\"\"));(((\"\")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}(\"\");(quasiSuccinctEntityHash);(getString());(\"\");checkMap();}"}

Minimal simplified code:
void main(String[]args)throws Exception{jsap(QuasiSuccinctEntityHash,"",new Parameter[]{FlaggedOption("",""),FlaggedOption("",'q',"")});jsapResult((""),(""),(""));((("")));while((readLine())!=null){(parts[1]);(x);}surfaceForms=new Iterable<>(){<CharSequence>iterator(){new AbstractObjectIterator<>(){Iterator<StringAndCandidate>i();hasNext(){}};}};ShiftAddXorSignedStringMap()[size()];EliasFanoMonotoneLongBigList[size()];for(;;i++){new LongIterable(){{(iterator());}};((i));valuesA[i]=(lI);}("");(quasiSuccinctEntityHash);(getString());("");checkMap();}

