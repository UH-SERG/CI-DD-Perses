
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/reset-pass/account-validator-impl/src/java/org/sakaiproject/accountvalidator/impl/jobs/CheckValidations_execute.java
method_name = execute
method_body = public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId("admin"); sakaiSession.setUserEid("admin"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString("accountValidator.maxDays", null); if (maxDaysLocalStr == null) { log.warn("accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays"); } maxDaysLocalStr = serverConfigurationService.getString("accountValidator.maxReminderDays", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = "" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString("accountValidator.maxResendAttempts", "" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT); List<ValidationAccount> list2 = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_RESENT); if (list2 != null) { list.addAll(list2); } int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug("account " + account.getUserId() + " created on " + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info("looks like this user logged in!"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean("accountValidator.resendValidations", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } else if (validationLogic.isTokenExpired(account)) { } else { } usedAccounts.append(account.getUserId() + "\n"); } else { log.debug("realm: " + "/site/~" + account.getUserId() + " does not seem to exist"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info("users have logged in: " + loggedInAccounts + " not logged in: " + notLogedIn); log.info("we would delete: " + oldAccounts.size() + " accounts"); if (log.isDebugEnabled()) { log.debug("users:" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String, List<String>>> entrySet = addedMap.entrySet(); Iterator<Entry<String, List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); List<String> users = entry.getValue(); StringBuilder userText = new StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + " (" + str + ")\n"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = new ArrayList<String>(); userReferences.add(creator.getReference()); Map<String, String> replacementValues = new HashMap<String, String>(); replacementValues.put("userList", userText.toString()); replacementValues.put("creatorName", creator.getDisplayName()); replacementValues.put("deleteDays", Integer.valueOf(maxDays).toString()); replacementValues.put("institution", serverConfigurationService.getString("ui.institution")); String fromEmail = serverConfigurationService.getString("accountValidator.checkValidations.fromEmailAddress", serverConfigurationService.getString("mail.support")); String fromName = serverConfigurationService.getString("accountValidator.checkValidations.fromEmailName", serverConfigurationService.getString("mail.support")); emailTemplateService.sendRenderedMessages("validate.deleted", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }
predict, score, loss = execute, 0.75777173, 0.6078776

Trace of simplified code(s):
{"time": "2021-01-20 09:37:50.431111", "n_pass": [1, 1, 1], "score": "0.7564", "loss": "0.5614", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT); List<ValidationAccount> list2 = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_RESENT); if (list2 != null) { list.addAll(list2); } int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } else if (validationLogic.isTokenExpired(account)) { } else { } usedAccounts.append(account.getUserId() + \"\\n\"); } else { log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String, List<String>>> entrySet = addedMap.entrySet(); Iterator<Entry<String, List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); List<String> users = entry.getValue(); StringBuilder userText = new StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = new ArrayList<String>(); userReferences.add(creator.getReference()); Map<String, String> replacementValues = new HashMap<String, String>(); replacementValues.put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\", creator.getDisplayName()); replacementValues.put(\"deleteDays\", Integer.valueOf(maxDays).toString()); replacementValues.put(\"institution\", serverConfigurationService.getString(\"ui.institution\")); String fromEmail = serverConfigurationService.getString(\"accountValidator.checkValidations.fromEmailAddress\", serverConfigurationService.getString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator.checkValidations.fromEmailName\", serverConfigurationService.getString(\"mail.support\")); emailTemplateService.sendRenderedMessages(\"validate.deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:37:54.435846", "n_pass": [119, 3, 2], "score": "0.7216", "loss": "0.7706", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT); List<ValidationAccount> list2 = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_RESENT); if (list2 != null) { list.addAll(list2); } int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } else if (validationLogic.isTokenExpired(account)) { } else { } usedAccounts.append(account.getUserId() + \"\\n\"); } else { log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String, List<String>>> entrySet = addedMap.entrySet(); Iterator<Entry<String, List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); List<String> users = entry.getValue(); StringBuilder userText = new StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\", creator.getDisplayName()); replacementValues.put(\"deleteDays\", Integer.valueOf(maxDays).toString()); replacementValues.put(\"institution\", serverConfigurationService.getString(\"ui.institution\")); String fromEmail = serverConfigurationService.getString(\"accountValidator.checkValidations.fromEmailAddress\", serverConfigurationService.getString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator.checkValidations.fromEmailName\", serverConfigurationService.getString(\"mail.support\")); emailTemplateService.sendRenderedMessages(\"validate.deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:37:56.107315", "n_pass": [121, 4, 3], "score": "0.6879", "loss": "0.7888", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT); List<ValidationAccount> list2 = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_RESENT); if (list2 != null) { list.addAll(list2); } int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } else if (validationLogic.isTokenExpired(account)) { } else { } usedAccounts.append(account.getUserId() + \"\\n\"); } else { log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String, List<String>>> entrySet = addedMap.entrySet(); Iterator<Entry<String, List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); List<String> users = entry.getValue(); StringBuilder userText = new StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\", creator.getDisplayName()); replacementValues.put(\"deleteDays\", Integer.valueOf(maxDays).toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator.checkValidations.fromEmailName\", serverConfigurationService.getString(\"mail.support\")); emailTemplateService.sendRenderedMessages(\"validate.deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:37:58.197090", "n_pass": [213, 5, 4], "score": "0.3938", "loss": "1.4584", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT); List<ValidationAccount> list2 = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_RESENT); if (list2 != null) { list.addAll(list2); } int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } else if (validationLogic.isTokenExpired(account)) { } else { } usedAccounts.append(account.getUserId() + \"\\n\"); } else { log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String, List<String>>> entrySet = addedMap.entrySet(); Iterator<Entry<String, List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); List<String> users = entry.getValue(); StringBuilder userText = new StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\", creator.getDisplayName()); replacementValues.put(\"deleteDays\", Integer.valueOf(maxDays).toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:37:59.993651", "n_pass": [232, 6, 5], "score": "0.745", "loss": "0.6556", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT); List<ValidationAccount> list2 = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_RESENT); ifint loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } else if (validationLogic.isTokenExpired(account)) { } else { } usedAccounts.append(account.getUserId() + \"\\n\"); } else { log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String, List<String>>> entrySet = addedMap.entrySet(); Iterator<Entry<String, List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); List<String> users = entry.getValue(); StringBuilder userText = new StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\", creator.getDisplayName()); replacementValues.put(\"deleteDays\", Integer.valueOf(maxDays).toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:01.888791", "n_pass": [245, 7, 6], "score": "0.6937", "loss": "0.6695", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT); List<ValidationAccount> list2 = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_RESENT); ifint loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); }usedAccounts.append(account.getUserId() + \"\\n\"); } else { log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String, List<String>>> entrySet = addedMap.entrySet(); Iterator<Entry<String, List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); List<String> users = entry.getValue(); StringBuilder userText = new StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\", creator.getDisplayName()); replacementValues.put(\"deleteDays\", Integer.valueOf(maxDays).toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:03.558426", "n_pass": [246, 8, 7], "score": "0.6078", "loss": "0.9317", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT); List<ValidationAccount> list2 = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_RESENT); ifint loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String, List<String>>> entrySet = addedMap.entrySet(); Iterator<Entry<String, List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); List<String> users = entry.getValue(); StringBuilder userText = new StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\", creator.getDisplayName()); replacementValues.put(\"deleteDays\", Integer.valueOf(maxDays).toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:05.267145", "n_pass": [256, 9, 8], "score": "0.7431", "loss": "0.6445", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT); List<ValidationAccount> list2 = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_RESENT); ifint loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); List<String> users = entry.getValue(); StringBuilder userText = new StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\", creator.getDisplayName()); replacementValues.put(\"deleteDays\", Integer.valueOf(maxDays).toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:06.934695", "n_pass": [261, 10, 9], "score": "0.7167", "loss": "0.7326", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT); List<ValidationAccount> list2 = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_RESENT); ifint loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\", creator.getDisplayName()); replacementValues.put(\"deleteDays\", Integer.valueOf(maxDays).toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:10.375963", "n_pass": [290, 12, 10], "score": "0.7467", "loss": "0.6197", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\", creator.getDisplayName()); replacementValues.put(\"deleteDays\", Integer.valueOf(maxDays).toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:12.442387", "n_pass": [325, 13, 11], "score": "0.6034", "loss": "0.9807", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:15.339449", "n_pass": [493, 14, 12], "score": "0.7542", "loss": "0.5424", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null); if (maxDaysLocalStr == null) { log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:16.954363", "n_pass": [495, 15, 13], "score": "0.7115", "loss": "0.6535", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:18.581026", "n_pass": [497, 16, 14], "score": "0.8615", "loss": "0.2999", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:20.408184", "n_pass": [507, 17, 15], "score": "0.3155", "loss": "1.7842", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));; int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:22.020002", "n_pass": [508, 18, 16], "score": "0.7832", "loss": "0.4621", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:24.155989", "n_pass": [522, 19, 17], "score": "0.8166", "loss": "0.469", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:25.854713", "n_pass": [534, 20, 18], "score": "0.5223", "loss": "1.2278", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:27.525217", "n_pass": [539, 21, 19], "score": "0.8222", "loss": "0.3458", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:29.116319", "n_pass": [540, 22, 20], "score": "0.4793", "loss": "1.1867", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" + \"/site/~\" + account.getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:30.749091", "n_pass": [543, 23, 21], "score": "0.7889", "loss": "0.4749", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged in: \" + loggedInAccounts + \" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:32.406878", "n_pass": [550, 24, 22], "score": "0.8415", "loss": "0.3638", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:34.121220", "n_pass": [567, 25, 23], "score": "0.8453", "loss": "0.4064", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:35.738376", "n_pass": [572, 26, 24], "score": "0.8642", "loss": "0.3003", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:37.366018", "n_pass": [576, 27, 25], "score": "0.5882", "loss": "1.0719", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmtuserText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:39.127504", "n_pass": [582, 28, 26], "score": "0.8352", "loss": "0.3866", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmtuserText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\", userText.toString()); replacementValues.put(\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:40.710286", "n_pass": [585, 29, 27], "score": "0.8471", "loss": "0.3439", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmtuserText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\",\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:43.236507", "n_pass": [666, 30, 28], "score": "0.7037", "loss": "0.6798", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() + \" (\" + str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\",\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:46.043850", "n_pass": [930, 31, 29], "score": "0.6224", "loss": "0.9339", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\",\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:47.657879", "n_pass": [936, 32, 30], "score": "0.5506", "loss": "1.1777", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List<String> userReferences = put(\"userList\",\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:49.261597", "n_pass": [939, 33, 31], "score": "0.7317", "loss": "0.6722", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String fromName = serverConfigurationService.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:50.842019", "n_pass": [944, 34, 32], "score": "0.7126", "loss": "0.6551", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:52.510269", "n_pass": [956, 35, 33], "score": "0.7689", "loss": "0.507", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException { sessionManager.getCurrentSession(); sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:54.082230", "n_pass": [957, 36, 34], "score": "0.7856", "loss": "0.527", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:56.143748", "n_pass": [977, 37, 35], "score": "0.6695", "loss": "0.7788", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:57.740855", "n_pass": [982, 38, 36], "score": "0.4401", "loss": "1.4333", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));String maxAttemptsStr = serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:38:59.332974", "n_pass": [985, 39, 37], "score": "0.3878", "loss": "1.6852", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator.maxResendAttempts\", \"\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:00.889255", "n_pass": [987, 40, 38], "score": "0.6221", "loss": "0.9114", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:02.451692", "n_pass": [990, 41, 39], "score": "0.4762", "loss": "1.3447", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:04.006434", "n_pass": [991, 42, 40], "score": "0.7057", "loss": "0.71", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:06.035303", "n_pass": [1003, 43, 41], "score": "0.6805", "loss": "0.7393", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:07.632228", "n_pass": [1008, 44, 42], "score": "0.5281", "loss": "1.1347", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug(\"account \" + account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:09.213113", "n_pass": [1012, 45, 43], "score": "0.8174", "loss": "0.4267", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( account.getUserId() + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:10.765977", "n_pass": [1013, 46, 44], "score": "0.6172", "loss": "0.8984", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like this user logged in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:12.376952", "n_pass": [1024, 47, 45], "score": "0.7288", "loss": "0.6129", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:13.957023", "n_pass": [1026, 48, 46], "score": "0.7144", "loss": "0.669", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:15.559215", "n_pass": [1028, 49, 47], "score": "0.8541", "loss": "0.325", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent < maxAttempts && serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:17.111603", "n_pass": [1029, 50, 48], "score": "0.4095", "loss": "1.5628", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean(\"accountValidator.resendValidations\", true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:18.664056", "n_pass": [1031, 51, 49], "score": "0.7022", "loss": "0.7263", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +getUserId() + \" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:20.293065", "n_pass": [1045, 52, 50], "score": "0.7278", "loss": "0.5835", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:22.067356", "n_pass": [1050, 53, 51], "score": "0.6822", "loss": "0.7699", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\"users have logged  not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:23.653781", "n_pass": [1056, 54, 52], "score": "0.6266", "loss": "0.9982", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\" not logged in: \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:25.224430", "n_pass": [1057, 55, 53], "score": "0.5714", "loss": "1.0828", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:27.342648", "n_pass": [1083, 56, 54], "score": "0.7233", "loss": "0.7117", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it. creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:28.932791", "n_pass": [1088, 57, 55], "score": "0.7795", "loss": "0.5454", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it. creatorId = entry.getKey(); try { User creator = userDirectoryService.StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:30.522010", "n_pass": [1092, 58, 56], "score": "0.8069", "loss": "0.3669", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it. creatorId = entry.getKey(); try { User creator = userDirectoryService.StringBuilder(); for (int i = 0; i(); i++) { try { User u = userDirectoryService.getUserdt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:32.127352", "n_pass": [1096, 59, 57], "score": "0.8413", "loss": "0.3405", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it. creatorId = entry.getKey(); try { User creator = userDirectoryService.StringBuilder(); for (int i = 0; i(); i++) { try { User udt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u.getEid() +  str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:33.734206", "n_pass": [1102, 60, 58], "score": "0.5411", "loss": "1.1261", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it. creatorId = entry.getKey(); try { User creator = userDirectoryService.StringBuilder(); for (int i = 0; i(); i++) { try { User udt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:37.234012", "n_pass": [1231, 61, 59], "score": "0.7555", "loss": "0.5311", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try { User creator = userDirectoryService.StringBuilder(); for (int i = 0; i(); i++) { try { User udt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:41.531205", "n_pass": [1666, 62, 60], "score": "0.6706", "loss": "0.7561", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {creator = userDirectoryService.StringBuilder(); for (int i = 0; i(); i++) { try { User udt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:43.099036", "n_pass": [1667, 63, 61], "score": "0.6848", "loss": "0.6423", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try { userDirectoryService.StringBuilder(); for (int i = 0; i(); i++) { try { User udt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:44.677387", "n_pass": [1668, 64, 62], "score": "0.858", "loss": "0.2648", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {StringBuilder(); for (int i = 0; i(); i++) { try { User udt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:46.227315", "n_pass": [1669, 65, 63], "score": "0.7157", "loss": "0.6184", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i = 0; i(); i++) { try { User udt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:47.796849", "n_pass": [1673, 66, 64], "score": "0.6909", "loss": "0.7486", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { User udt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:49.394156", "n_pass": [1680, 67, 65], "score": "0.4458", "loss": "1.3411", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:50.934827", "n_pass": [1681, 68, 66], "score": "0.682", "loss": "0.7727", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try {  new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:52.489130", "n_pass": [1682, 69, 67], "score": "0.5796", "loss": "1.0143", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.userText.append(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:55.601577", "n_pass": [1688, 71, 68], "score": "0.8721", "loss": "0.3053", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =userText.append(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:57.147434", "n_pass": [1689, 72, 69], "score": "0.3783", "loss": "1.7207", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \")\\n\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:39:58.723694", "n_pass": [1693, 73, 70], "score": "0.7102", "loss": "0.6842", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List= put(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:00.375492", "n_pass": [1707, 74, 71], "score": "0.5272", "loss": "1.0958", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userList\",\"creatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:01.927193", "n_pass": [1709, 75, 72], "score": "0.5762", "loss": "0.9591", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"mail.support\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:03.506549", "n_pass": [1712, 76, 73], "score": "0.6547", "loss": "0.9115", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")); String.getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:05.064746", "n_pass": [1714, 77, 74], "score": "0.8241", "loss": "0.3812", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:06.618256", "n_pass": [1718, 78, 75], "score": "0.8189", "loss": "0.4092", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\", replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:08.178528", "n_pass": [1719, 79, 76], "score": "0.6746", "loss": "0.7128", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\", fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:09.716951", "n_pass": [1720, 80, 77], "score": "0.701", "loss": "0.6902", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\", fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:11.254203", "n_pass": [1721, 81, 78], "score": "0.6512", "loss": "0.8347", "code": "public void execute(JobExecutionContext arg0) throws JobExecutionException {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:13.321565", "n_pass": [1735, 82, 79], "score": "0.5668", "loss": "1.0993", "code": "public void execute(JobExecutionContext arg0)  {  sakaiSession.setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:14.861154", "n_pass": [1737, 83, 80], "score": "0.308", "loss": "1.9623", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\"); sakaiSession.setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:16.400297", "n_pass": [1740, 84, 81], "score": "0.2259", "loss": "2.2373", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(\"admin\"); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:17.938310", "n_pass": [1742, 85, 82], "score": "0.3432", "loss": "1.8186", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = new GregorianCalendargetString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:19.504673", "n_pass": [1746, 86, 83], "score": "0.4409", "loss": "1.5156", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"accountValidator.maxDays\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:21.063400", "n_pass": [1748, 87, 84], "score": "0.3316", "loss": "1.9066", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.maxDays wasaccountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:22.629232", "n_pass": [1754, 88, 85], "score": "0.4193", "loss": "1.5167", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.accountValidator.maxReminderDays\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:24.162959", "n_pass": [1755, 89, 86], "score": "0.2862", "loss": "2.1309", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } maxDaysLocalStr = serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:25.728079", "n_pass": [1758, 90, 87], "score": "0.3567", "loss": "1.8472", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); }  serverConfigurationService.getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:27.270313", "n_pass": [1759, 91, 88], "score": "0.4247", "loss": "1.5966", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = \"\" + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:30.368768", "n_pass": [1770, 93, 89], "score": "0.2476", "loss": "2.2308", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:31.915400", "n_pass": [1775, 94, 90], "score": "0.2403", "loss": "2.2217", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { } cal.add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:33.470881", "n_pass": [1781, 95, 91], "score": "0.4276", "loss": "1.5503", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));serverConfigurationService.getString(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:36.559223", "n_pass": [1787, 97, 92], "score": "0.2743", "loss": "2.1083", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:38.137723", "n_pass": [1798, 98, 93], "score": "0.3193", "loss": "2.1271", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:40.132037", "n_pass": [1806, 99, 94], "score": "0.2458", "loss": "2.464", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:44.387138", "n_pass": [1813, 101, 95], "score": "0.4447", "loss": "1.487", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);0; int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:45.919896", "n_pass": [1815, 102, 96], "score": "0.4422", "loss": "1.3615", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn = 0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:47.447144", "n_pass": [1817, 103, 97], "score": "0.2843", "loss": "2.0455", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i = 0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:48.994454", "n_pass": [1821, 104, 98], "score": "0.5175", "loss": "1.2381", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; size(); i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:50.523502", "n_pass": [1823, 105, 99], "score": "0.2447", "loss": "2.3613", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug( + \" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:52.100050", "n_pass": [1829, 106, 100], "score": "0.341", "loss": "1.8039", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created on \" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:53.633640", "n_pass": [1831, 107, 101], "score": "0.5357", "loss": "1.1924", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:55.181633", "n_pass": [1833, 108, 102], "score": "0.2253", "loss": "2.3441", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:56.734143", "n_pass": [1838, 109, 103], "score": "0.2413", "loss": "2.4484", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:40:58.294373", "n_pass": [1843, 110, 104], "score": "0.3194", "loss": "1.9651", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"looks like in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:01.576352", "n_pass": [1848, 112, 105], "score": "0.3099", "loss": "1.9829", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\" in!\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:03.119283", "n_pass": [1849, 113, 106], "score": "0.2476", "loss": "2.1767", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent& serverConfigurationService.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:04.662173", "n_pass": [1853, 114, 107], "score": "0.2441", "loss": "2.174", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:06.220531", "n_pass": [1862, 115, 108], "score": "0.2581", "loss": "2.1438", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:07.739711", "n_pass": [1864, 116, 109], "score": "0.2785", "loss": "2.1639", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:09.269080", "n_pass": [1870, 117, 110], "score": "0.3053", "loss": "1.8966", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount.STATUS_); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:10.787994", "n_pass": [1872, 118, 111], "score": "0.466", "loss": "1.35", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save(account); } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:13.804924", "n_pass": [1875, 120, 112], "score": "0.4314", "loss": "1.5206", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; } log.debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:15.315497", "n_pass": [1877, 121, 113], "score": "0.4121", "loss": "1.8131", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"realm: \" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:16.830735", "n_pass": [1879, 122, 114], "score": "0.4246", "loss": "1.4972", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does not seem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:18.351664", "n_pass": [1882, 123, 115], "score": "0.2905", "loss": "2.1036", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" doesseem to exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:19.862682", "n_pass": [1883, 124, 116], "score": "0.366", "loss": "1.7474", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); notLogedIn++; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:21.380713", "n_pass": [1886, 125, 117], "score": "0.18", "loss": "2.7651", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:22.898783", "n_pass": [1889, 126, 118], "score": "0.2113", "loss": "2.398", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) { oldAccounts.add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:24.417799", "n_pass": [1891, 127, 119], "score": "0.2801", "loss": "2.2053", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } } log.info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:25.959465", "n_pass": [1897, 128, 120], "score": "0.4428", "loss": "1.4268", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn); log.info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:27.483400", "n_pass": [1902, 129, 121], "score": "0.3703", "loss": "1.8642", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\"we would delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:28.992729", "n_pass": [1904, 130, 122], "score": "0.217", "loss": "2.0985", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" delete: \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:30.499067", "n_pass": [1905, 131, 123], "score": "0.2252", "loss": "2.2206", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:33.603983", "n_pass": [1920, 133, 124], "score": "0.3375", "loss": "1.8654", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:35.165752", "n_pass": [1929, 134, 125], "score": "0.3666", "loss": "1.7762", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry<String,  List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:36.682000", "n_pass": [1932, 135, 126], "score": "0.4967", "loss": "1.3478", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:39.089798", "n_pass": [1944, 136, 127], "score": "0.3705", "loss": "1.6089", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate()); DateTimeFormatter fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:41.122470", "n_pass": [1964, 137, 128], "score": "0.3224", "loss": "1.9097", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());fmt =(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:42.642660", "n_pass": [1965, 138, 129], "score": "0.3227", "loss": "1.9939", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"accountValidator.maxReminderDays\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:44.800136", "n_pass": [2018, 139, 130], "score": "0.274", "loss": "2.098", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, (maxDays * -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:46.811618", "n_pass": [2038, 140, 131], "score": "0.4445", "loss": "1.4475", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);int notLogedIn0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:51.503326", "n_pass": [2065, 142, 132], "score": "0.2247", "loss": "2.3073", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);0; for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:53.010808", "n_pass": [2066, 143, 133], "score": "0.4894", "loss": "1.3106", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);for (int i0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:54.509303", "n_pass": [2068, 144, 134], "score": "0.6494", "loss": "0.7225", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) { log.info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:41:56.105969", "n_pass": [2087, 145, 135], "score": "0.1809", "loss": "2.5347", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" + oldAccounts.size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:42:00.748285", "n_pass": [2129, 148, 136], "score": "0.2799", "loss": "1.9822", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap = buildAddedMap; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:42:02.381350", "n_pass": [2149, 149, 137], "score": "0.2762", "loss": "2.3103", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before ||getValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:42:10.433112", "n_pass": [2310, 151, 138], "score": "0.2368", "loss": "2.3971", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().beforegetValidationsSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:42:11.928607", "n_pass": [2311, 152, 139], "score": "0.4159", "loss": "1.5117", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); validationLogic.save; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:42:13.453541", "n_pass": [2318, 153, 140], "score": "0.2248", "loss": "2.2831", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:42:19.756837", "n_pass": [2484, 154, 141], "score": "0.4015", "loss": "1.4983", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"accountValidator\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:42:54.936244", "n_pass": [3098, 155, 142], "score": "0.5341", "loss": "1.2683", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\" + maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:42:56.448345", "n_pass": [3100, 156, 143], "score": "0.1995", "loss": "2.6732", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try { } catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:02.465990", "n_pass": [3110, 160, 144], "score": "0.4536", "loss": "1.5666", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {} catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:03.979711", "n_pass": [3112, 161, 145], "score": "0.2966", "loss": "2.0777", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch (Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:05.492327", "n_pass": [3114, 162, 146], "score": "0.2879", "loss": "2.3243", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e) { } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:07.034092", "n_pass": [3120, 163, 147], "score": "0.3735", "loss": "1.6308", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){ } StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:08.556215", "n_pass": [3122, 164, 148], "score": "0.4877", "loss": "1.2717", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){} StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:10.084407", "n_pass": [3124, 165, 149], "score": "0.2837", "loss": "2.4023", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= new StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:13.089595", "n_pass": [3128, 167, 150], "score": "0.328", "loss": "1.8949", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder=  StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:14.627750", "n_pass": [3129, 168, 151], "score": "0.4081", "loss": "1.6137", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder(); List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:16.168367", "n_pass": [3134, 169, 152], "score": "0.4832", "loss": "1.3577", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String> oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:18.068596", "n_pass": [3139, 170, 153], "score": "0.3615", "loss": "1.7843", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts = new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:19.576208", "n_pass": [3141, 171, 154], "score": "0.5121", "loss": "1.3119", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= new ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:22.569616", "n_pass": [3144, 173, 155], "score": "0.353", "loss": "1.8773", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts=  ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:24.091197", "n_pass": [3145, 174, 156], "score": "0.2515", "loss": "2.3876", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList(); List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:25.610854", "n_pass": [3150, 175, 157], "score": "0.3158", "loss": "2.1638", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount> list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:27.510228", "n_pass": [3155, 176, 158], "score": "0.3771", "loss": "1.7513", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus(ValidationAccountSENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:32.023761", "n_pass": [3161, 179, 159], "score": "0.4196", "loss": "1.7236", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus(SENT);for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:33.525364", "n_pass": [3162, 180, 160], "score": "0.3163", "loss": "2.117", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for (0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:35.041992", "n_pass": [3166, 181, 161], "score": "0.3574", "loss": "1.9645", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(0; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:36.545972", "n_pass": [3168, 182, 162], "score": "0.3335", "loss": "2.0155", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { ; log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:38.420237", "n_pass": [3174, 183, 163], "score": "0.2242", "loss": "2.3933", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log.debug(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:39.933990", "n_pass": [3176, 184, 164], "score": "0.4243", "loss": "1.4705", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\" created\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:41.458786", "n_pass": [3178, 185, 165], "score": "0.4228", "loss": "1.6337", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent()); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:42.963543", "n_pass": [3181, 186, 166], "score": "0.4234", "loss": "1.6659", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); String userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:44.468190", "n_pass": [3183, 187, 167], "score": "0.4561", "loss": "1.4765", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (account.getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:47.476852", "n_pass": [3187, 189, 168], "score": "0.325", "loss": "1.9412", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (account.getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:49.022130", "n_pass": [3200, 190, 169], "score": "0.3329", "loss": "1.9713", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean( true)) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:52.017153", "n_pass": [3203, 192, 170], "score": "0.3401", "loss": "2.0002", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } else if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:53.537524", "n_pass": [3207, 193, 171], "score": "0.3602", "loss": "1.8632", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (account.getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:55.049691", "n_pass": [3210, 194, 172], "score": "0.1907", "loss": "2.5341", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); ; }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:58.079629", "n_pass": [3222, 196, 173], "score": "0.2352", "loss": "2.2616", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\"\" +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:43:59.602920", "n_pass": [3225, 197, 174], "score": "0.4301", "loss": "1.4756", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug( +\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:01.099994", "n_pass": [3226, 198, 175], "score": "0.5815", "loss": "1.0442", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" does exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:02.634740", "n_pass": [3228, 199, 176], "score": "0.4149", "loss": "1.7292", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); ; if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:04.162978", "n_pass": [3231, 200, 177], "score": "0.5032", "loss": "1.3565", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(account.getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:05.681821", "n_pass": [3237, 201, 178], "score": "0.4613", "loss": "1.4041", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (log.isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:08.775517", "n_pass": [3261, 203, 179], "score": "0.2585", "loss": "2.237", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log.debug(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:10.318960", "n_pass": [3266, 204, 180], "score": "0.6634", "loss": "0.8377", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString()); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:13.295477", "n_pass": [3271, 206, 181], "score": "0.367", "loss": "1.7237", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<String, List<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:14.823672", "n_pass": [3276, 207, 182], "score": "0.4159", "loss": "1.5466", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:19.635112", "n_pass": [3290, 208, 183], "score": "0.474", "loss": "1.3572", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (it.hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:21.144956", "n_pass": [3295, 209, 184], "score": "0.5143", "loss": "1.248", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = entry.getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:24.973560", "n_pass": [3306, 211, 185], "score": "0.2778", "loss": "2.2331", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {; for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:26.485832", "n_pass": [3311, 212, 186], "score": "0.6029", "loss": "1.0158", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i(); i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:28.015558", "n_pass": [3317, 213, 187], "score": "0.3012", "loss": "1.9973", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try { DateTime(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:29.564143", "n_pass": [3324, 214, 188], "score": "0.3953", "loss": "1.7169", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u.getCreatedDate());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:31.077202", "n_pass": [3326, 215, 189], "score": "0.3707", "loss": "1.8104", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u());(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:32.579801", "n_pass": [3327, 216, 190], "score": "0.2269", "loss": "2.2677", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u. str + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:34.080571", "n_pass": [3330, 217, 191], "score": "0.4568", "loss": "1.5299", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(ustr + \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:35.596837", "n_pass": [3331, 218, 192], "score": "0.4631", "loss": "1.3773", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:37.103607", "n_pass": [3335, 219, 193], "score": "0.5643", "loss": "1.1365", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:38.594817", "n_pass": [3337, 220, 194], "score": "0.4748", "loss": "1.3393", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount.deleteValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:41.612231", "n_pass": [3347, 222, 195], "score": "0.4623", "loss": "1.2951", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } } List(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:43.114430", "n_pass": [3352, 223, 196], "score": "0.2522", "loss": "2.1195", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString(\"\")).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:46.108699", "n_pass": [3357, 225, 197], "score": "0.2606", "loss": "2.2177", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"accountValidator..deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:47.621321", "n_pass": [3361, 226, 198], "score": "0.4965", "loss": "1.3833", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\".deleted\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:49.107111", "n_pass": [3362, 227, 199], "score": "0.5189", "loss": "1.3182", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:52.108362", "n_pass": [3373, 229, 200], "score": "0.3888", "loss": "1.598", "code": "public void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:53.644836", "n_pass": [3381, 230, 201], "score": "0.2196", "loss": "2.3995", "code": " void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:55.124813", "n_pass": [3382, 231, 202], "score": "0.2641", "loss": "2.1601", "code": "void execute(JobExecutionContext arg0)  { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:44:58.883912", "n_pass": [3392, 233, 203], "score": "0.4489", "loss": "1.4655", "code": "void execute(JobExecutionContext arg0) { setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:01.835080", "n_pass": [3395, 235, 204], "score": "0.6294", "loss": "1.0074", "code": "void execute(JobExecutionContext arg0) {setUserId(\"admin\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:04.811949", "n_pass": [3399, 237, 205], "score": "0.2823", "loss": "2.1062", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid(); Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:06.315799", "n_pass": [3407, 238, 206], "score": "0.5219", "loss": "1.2999", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();Calendar cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:07.843026", "n_pass": [3408, 239, 207], "score": "0.316", "loss": "1.946", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid(); cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:09.350643", "n_pass": [3409, 240, 208], "score": "0.4607", "loss": "1.436", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{ log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:15.260037", "n_pass": [3424, 244, 209], "score": "0.5106", "loss": "1.2055", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log.warn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:16.761971", "n_pass": [3426, 245, 210], "score": "0.2875", "loss": "1.8974", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{logwarn(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:18.262194", "n_pass": [3427, 246, 211], "score": "0.2615", "loss": "2.122", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator.\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:21.206673", "n_pass": [3431, 248, 212], "score": "0.2838", "loss": "2.0416", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\"); } getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:22.717981", "n_pass": [3435, 249, 213], "score": "0.3183", "loss": "1.8881", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:25.695463", "n_pass": [3443, 251, 214], "score": "0.4089", "loss": "1.5831", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:28.656512", "n_pass": [3449, 253, 215], "score": "0.5067", "loss": "1.1958", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr == null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:31.627808", "n_pass": [3453, 255, 216], "score": "0.5063", "loss": "1.2588", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr = null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:33.132249", "n_pass": [3455, 256, 217], "score": "0.3785", "loss": "1.638", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null) { maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:34.616111", "n_pass": [3458, 257, 218], "score": "0.2556", "loss": "2.2455", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){ maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:36.112383", "n_pass": [3460, 258, 219], "score": "0.371", "loss": "1.7976", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr = + maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:39.466602", "n_pass": [3464, 260, 220], "score": "0.4364", "loss": "1.5595", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =+ maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:40.960911", "n_pass": [3465, 261, 221], "score": "0.2436", "loss": "2.2967", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr = maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:42.477153", "n_pass": [3466, 262, 222], "score": "0.2129", "loss": "2.2969", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays; } try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:43.974909", "n_pass": [3469, 263, 223], "score": "0.4139", "loss": "1.6247", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;} try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:45.501008", "n_pass": [3471, 264, 224], "score": "0.3388", "loss": "1.8338", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays; } catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:51.415536", "n_pass": [3478, 268, 225], "score": "0.3411", "loss": "1.8116", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;} catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:52.892632", "n_pass": [3480, 269, 226], "score": "0.1967", "loss": "2.4925", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch (Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:54.374639", "n_pass": [3482, 270, 227], "score": "0.3424", "loss": "1.7358", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) { }add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:57.342222", "n_pass": [3490, 272, 228], "score": "0.3448", "loss": "1.7643", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar, ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:45:58.834120", "n_pass": [3495, 273, 229], "score": "0.3223", "loss": "1.8535", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar ( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:00.309809", "n_pass": [3496, 274, 230], "score": "0.3209", "loss": "1.8245", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+ maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:04.764563", "n_pass": [3508, 277, 231], "score": "0.4829", "loss": "1.22", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts); try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:06.284567", "n_pass": [3512, 278, 232], "score": "0.4066", "loss": "1.5281", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder= StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:09.270172", "n_pass": [3527, 280, 233], "score": "0.2913", "loss": "1.8942", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list =getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:14.252611", "n_pass": [3548, 282, 234], "score": "0.3701", "loss": "1.7046", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) { log(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:16.209285", "n_pass": [3561, 283, 235], "score": "0.1839", "loss": "2.4074", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId = (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:19.159741", "n_pass": [3567, 285, 236], "score": "0.2364", "loss": "2.1997", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getValidationsSent.getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:20.678820", "n_pass": [3581, 286, 237], "score": "0.3811", "loss": "1.583", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().before.intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:22.192107", "n_pass": [3590, 287, 238], "score": "0.2572", "loss": "2.1361", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) { log(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:25.368077", "n_pass": [3635, 289, 239], "score": "0.5871", "loss": "1.0392", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>  creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:34.347232", "n_pass": [3668, 292, 240], "score": "0.3089", "loss": "1.9684", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ; i; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:36.278287", "n_pass": [3679, 293, 241], "score": "0.2191", "loss": "2.2717", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"userListcreatorName\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:40.841546", "n_pass": [3707, 296, 242], "score": "0.3789", "loss": "1.7193", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { log.error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:42.379119", "n_pass": [3721, 297, 243], "score": "0.3826", "loss": "1.63", "code": "void execute(JobExecutionContext arg0) {setUserId(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:47.674231", "n_pass": [3741, 300, 244], "score": "0.4836", "loss": "1.2629", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\", null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:52.096893", "n_pass": [3760, 303, 245], "score": "0.3214", "loss": "1.8003", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"accountValidator\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:55.060933", "n_pass": [3768, 305, 246], "score": "0.3108", "loss": "1.8375", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr); if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:46:58.045931", "n_pass": [3782, 307, 247], "score": "0.2635", "loss": "2.1625", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr =maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:01.019511", "n_pass": [3792, 309, 248], "score": "0.4427", "loss": "1.4479", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { maxDays;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:07.307637", "n_pass": [3801, 313, 249], "score": "0.3799", "loss": "1.7097", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e) {}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:10.292300", "n_pass": [3810, 315, 250], "score": "0.3878", "loss": "1.6874", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(Calendar( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:13.235342", "n_pass": [3815, 317, 251], "score": "0.4701", "loss": "1.4188", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(( -1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:16.203735", "n_pass": [3818, 319, 252], "score": "0.4319", "loss": "1.5124", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try {}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:17.707020", "n_pass": [3831, 320, 253], "score": "0.402", "loss": "1.6586", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" +getValidationSent); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:25.033840", "n_pass": [3878, 323, 254], "score": "0.4864", "loss": "1.2892", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); userSiteId (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:26.507506", "n_pass": [3880, 324, 255], "score": "0.2973", "loss": "1.98", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u()); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:38.153509", "n_pass": [4001, 328, 256], "score": "0.3151", "loss": "2.0479", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) { ValidationAccount(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:39.676150", "n_pass": [4009, 329, 257], "score": "0.2897", "loss": "2.083", "code": "void execute(JobExecutionContext arg0) {(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:43.569144", "n_pass": [4045, 331, 258], "score": "0.4097", "loss": "1.6128", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();cal = getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:45.071350", "n_pass": [4057, 332, 259], "score": "0.2704", "loss": "2.193", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();cal= getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:46.545144", "n_pass": [4059, 333, 260], "score": "0.3355", "loss": "1.7787", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();cal=getString(\"\",null);{log(\"\");} getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:49.509179", "n_pass": [4076, 335, 261], "score": "0.4784", "loss": "1.327", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();cal=getString(\"\",null);{log(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try { ;}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:55.410665", "n_pass": [4101, 339, 262], "score": "0.3897", "loss": "1.7178", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();cal=getString(\"\",null);{log(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try {;}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:56.908664", "n_pass": [4102, 340, 263], "score": "0.3328", "loss": "1.8479", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();cal=getString(\"\",null);{log(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try {}catch(Exception e){}add(( 1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:47:59.900901", "n_pass": [4115, 342, 264], "score": "0.3818", "loss": "1.6558", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();cal=getString(\"\",null);{log(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try {}catch(Exception e){}add((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" +toString); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:10.442469", "n_pass": [4243, 347, 265], "score": "0.2745", "loss": "2.2047", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();cal=getString(\"\",null);{log(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try {}catch(Exception e){}add((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:19.870462", "n_pass": [4348, 349, 266], "score": "0.4787", "loss": "1.4349", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();calgetString(\"\",null);{log(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try {}catch(Exception e){}add((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:22.836700", "n_pass": [4358, 351, 267], "score": "0.3694", "loss": "1.5978", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();calgetString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr =null){maxDaysLocalStr=maxDays;}try {}catch(Exception e){}add((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:24.347147", "n_pass": [4376, 352, 268], "score": "0.6369", "loss": "0.9101", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();calgetString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStr=null){maxDaysLocalStr=maxDays;}try {}catch(Exception e){}add((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:25.812571", "n_pass": [4377, 353, 269], "score": "0.6241", "loss": "0.9328", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();calgetString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStrnull){maxDaysLocalStr=maxDays;}try {}catch(Exception e){}add((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:30.231314", "n_pass": [4387, 356, 270], "score": "0.3928", "loss": "1.8301", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();calgetString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStrnull){maxDaysLocalStr=maxDays;}try{}catch(Exception e){}add((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:31.731965", "n_pass": [4398, 357, 271], "score": "0.2651", "loss": "2.2217", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();calgetString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStrnull){maxDaysLocalStr=maxDays;}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"users:\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:40.821781", "n_pass": [4526, 361, 272], "score": "0.5275", "loss": "1.2337", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();calgetString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStrnull){maxDaysLocalStr=maxDays;}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:50.294964", "n_pass": [4631, 363, 273], "score": "0.3278", "loss": "1.8212", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(maxDaysLocalStrnull){maxDaysLocalStr=maxDays;}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:51.824924", "n_pass": [4657, 364, 274], "score": "0.5408", "loss": "1.1571", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){maxDaysLocalStr=maxDays;}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:53.331852", "n_pass": [4662, 365, 275], "score": "0.4784", "loss": "1.3819", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){maxDaysLocalStrmaxDays;}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:54.814864", "n_pass": [4663, 366, 276], "score": "0.3578", "loss": "1.7751", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){maxDaysLocalStr;}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder=StringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:48:56.879292", "n_pass": [4702, 367, 277], "score": "0.5429", "loss": "1.1778", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){maxDaysLocalStr;}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilderStringBuilder();List<String>oldAccounts= ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:49:01.014347", "n_pass": [4713, 369, 278], "score": "0.5507", "loss": "1.1402", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){maxDaysLocalStr;}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilderStringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:49:13.886068", "n_pass": [4936, 372, 279], "score": "0.3994", "loss": "1.7193", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){;}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilderStringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:49:15.352898", "n_pass": [4937, 373, 280], "score": "0.3588", "loss": "1.88", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilderStringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:49:16.940182", "n_pass": [4974, 374, 281], "score": "0.3049", "loss": "2.0917", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\": \" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:49:21.867570", "n_pass": [5055, 375, 282], "score": "0.3022", "loss": "2.1208", "code": "void execute(JobExecutionContext arg0){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:49:29.883786", "n_pass": [5167, 376, 283], "score": "0.2967", "loss": "2.1183", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(; ; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:16.809518", "n_pass": [5751, 377, 284], "score": "0.4816", "loss": "1.4172", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;; i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:18.285128", "n_pass": [5753, 378, 285], "score": "0.4401", "loss": "1.5372", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\" ); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:21.269762", "n_pass": [5763, 380, 286], "score": "0.2786", "loss": "2.2163", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\"); (getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:22.752676", "n_pass": [5766, 381, 287], "score": "0.4134", "loss": "1.4632", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId()); if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:24.249179", "n_pass": [5773, 382, 288], "score": "0.2859", "loss": "2.2785", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if (getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:30.177326", "n_pass": [5790, 386, 289], "score": "0.3393", "loss": "1.8973", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) { } if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:33.132514", "n_pass": [5798, 388, 290], "score": "0.4905", "loss": "1.3782", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if (getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:36.123158", "n_pass": [5802, 390, 291], "score": "0.5457", "loss": "1.116", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue() >= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:37.626080", "n_pass": [5811, 391, 292], "score": "0.4548", "loss": "1.4618", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>= maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:40.970594", "n_pass": [5814, 393, 293], "score": "0.4426", "loss": "1.5938", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount); }debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:46.842475", "n_pass": [5824, 397, 294], "score": "0.2046", "loss": "2.5455", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}debug(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:48.362744", "n_pass": [5826, 398, 295], "score": "0.3981", "loss": "1.6123", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\" exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:49.860793", "n_pass": [5829, 399, 296], "score": "0.3716", "loss": "1.8322", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"exist\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:51.331762", "n_pass": [5830, 400, 297], "score": "0.4721", "loss": "1.3555", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if (account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:54.296245", "n_pass": [5836, 402, 298], "score": "0.346", "loss": "2.0473", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account) {add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:55.779382", "n_pass": [5840, 403, 299], "score": "0.3886", "loss": "1.6112", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId()); } } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:50:58.748973", "n_pass": [5849, 405, 300], "score": "0.3811", "loss": "1.7343", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());} } }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:00.228854", "n_pass": [5851, 406, 301], "score": "0.4589", "loss": "1.4694", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}} }info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:01.705642", "n_pass": [5853, 407, 302], "score": "0.2327", "loss": "2.4121", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\" + notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:04.658755", "n_pass": [5859, 409, 303], "score": "0.3227", "loss": "1.9601", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);info(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:07.635621", "n_pass": [5865, 411, 304], "score": "0.4496", "loss": "1.3536", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \" .size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:10.556990", "n_pass": [5870, 413, 305], "score": "0.2719", "loss": "2.1647", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() + \" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:13.501601", "n_pass": [5877, 415, 306], "score": "0.3855", "loss": "1.5998", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\" accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:14.972586", "n_pass": [5879, 416, 307], "score": "0.4019", "loss": "1.5853", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\"); if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:17.923568", "n_pass": [5884, 418, 308], "score": "0.2849", "loss": "2.1221", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if (isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:19.398211", "n_pass": [5886, 419, 309], "score": "0.3858", "loss": "1.7028", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\" ); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:22.365415", "n_pass": [5897, 421, 310], "score": "0.4109", "loss": "1.5521", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\"); } Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:23.846478", "n_pass": [5900, 422, 311], "score": "0.3208", "loss": "1.896", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");} Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:25.321805", "n_pass": [5902, 423, 312], "score": "0.412", "loss": "1.7596", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<StringList<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:27.210973", "n_pass": [5905, 424, 313], "score": "0.4223", "loss": "1.5464", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>> addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:30.320827", "n_pass": [5911, 425, 314], "score": "0.4662", "loss": "1.4673", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap ; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:31.798166", "n_pass": [5913, 426, 315], "score": "0.4562", "loss": "1.3758", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>> it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:38.699265", "n_pass": [5927, 429, 316], "score": "0.4449", "loss": "1.4704", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it = iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:40.184661", "n_pass": [5929, 430, 317], "score": "0.4521", "loss": "1.3529", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it= iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:41.681671", "n_pass": [5931, 431, 318], "score": "0.3287", "loss": "1.8236", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while (hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:44.657468", "n_pass": [5938, 433, 319], "score": "0.2639", "loss": "2.0509", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) { Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:47.613581", "n_pass": [5946, 435, 320], "score": "0.507", "loss": "1.1577", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId = getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:51.144029", "n_pass": [5955, 436, 321], "score": "0.3255", "loss": "1.8625", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey(); try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:54.149567", "n_pass": [5962, 438, 322], "score": "0.2996", "loss": "2.114", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try {for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:55.628409", "n_pass": [5964, 439, 323], "score": "0.4101", "loss": "1.5013", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for (int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:51:57.126123", "n_pass": [5967, 440, 324], "score": "0.297", "loss": "2.0186", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(int i ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:52:00.047999", "n_pass": [5970, 442, 325], "score": "0.2764", "loss": "2.1457", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;; i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:52:02.996817", "n_pass": [5975, 444, 326], "score": "0.2565", "loss": "2.0721", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) { try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:52:05.953912", "n_pass": [5982, 446, 327], "score": "0.35", "loss": "1.8568", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try {(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:52:07.430251", "n_pass": [5984, 447, 328], "score": "0.2923", "loss": "2.1165", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u); } catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:52:12.313867", "n_pass": [6002, 450, 329], "score": "0.3389", "loss": "1.8878", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch (UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:52:15.272899", "n_pass": [6006, 452, 330], "score": "0.6182", "loss": "0.8966", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e) {(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:52:16.793406", "n_pass": [6012, 453, 331], "score": "0.33", "loss": "1.8983", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); } catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:52:22.747036", "n_pass": [6039, 457, 332], "score": "0.4454", "loss": "1.5175", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch (UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:52:24.241382", "n_pass": [6041, 458, 333], "score": "0.323", "loss": "1.9597", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) { error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:52:27.237295", "n_pass": [6049, 460, 334], "score": "0.3798", "loss": "1.5098", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(), e); } } }"}
{"time": "2021-01-20 09:52:28.774877", "n_pass": [6056, 461, 335], "score": "0.2549", "loss": "2.1963", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e); } } }"}
{"time": "2021-01-20 09:52:30.275132", "n_pass": [6060, 462, 336], "score": "0.4408", "loss": "1.4888", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} } }"}
{"time": "2021-01-20 09:52:33.206850", "n_pass": [6064, 464, 337], "score": "0.388", "loss": "1.6812", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++) {(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:52:39.008630", "n_pass": [6180, 465, 338], "score": "0.4276", "loss": "1.599", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if ((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:52:40.517153", "n_pass": [6194, 466, 339], "score": "0.3304", "loss": "1.682", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()) {} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:52:44.985420", "n_pass": [6214, 469, 340], "score": "0.3325", "loss": "1.8058", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){} if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:52:46.464273", "n_pass": [6217, 470, 341], "score": "0.3658", "loss": "1.7062", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){}if(getValidationSent().intValue()>=maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:52:48.388314", "n_pass": [6228, 471, 342], "score": "0.4281", "loss": "1.5636", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts) {setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:52:49.862626", "n_pass": [6231, 472, 343], "score": "0.3188", "loss": "1.8987", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+ notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:52:58.749586", "n_pass": [6265, 478, 344], "score": "0.451", "loss": "1.3483", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\" \".size() +\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:53:02.291727", "n_pass": [6277, 480, 345], "score": "0.3631", "loss": "1.7726", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\" \".size()+\"accounts\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:53:03.762633", "n_pass": [6280, 481, 346], "score": "0.3518", "loss": "1.7162", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\" \".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap; Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:53:08.818107", "n_pass": [6307, 483, 347], "score": "0.3176", "loss": "1.9554", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\" \".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++) {try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:53:24.910226", "n_pass": [6361, 490, 348], "score": "0.461", "loss": "1.3562", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\" \".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(u+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:53:26.825317", "n_pass": [6370, 491, 349], "score": "0.381", "loss": "1.7908", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\" \".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(+ \"\");(u);} catch(UserNotDefinedException e){(va); } }(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:53:34.267688", "n_pass": [6396, 496, 350], "score": "0.3113", "loss": "1.9091", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\" \".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(+ \"\");(u);} catch(UserNotDefinedException e){(va); }}(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);} }}"}
{"time": "2021-01-20 09:53:38.809295", "n_pass": [6433, 499, 351], "score": "0.3564", "loss": "1.7687", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {info(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\" \".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(+ \"\");(u);} catch(UserNotDefinedException e){(va); }}(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);}}}"}
{"time": "2021-01-20 09:53:46.122161", "n_pass": [6570, 501, 352], "score": "0.2774", "loss": "1.8767", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){setStatus(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\" \".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(+ \"\");(u);} catch(UserNotDefinedException e){(va); }}(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);}}}"}
{"time": "2021-01-20 09:53:47.675969", "n_pass": [6597, 502, 353], "score": "0.3669", "loss": "1.7529", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\" \".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(+ \"\");(u);} catch(UserNotDefinedException e){(va); }}(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e) {error(getMessage(),e);}}}"}
{"time": "2021-01-20 09:54:21.749968", "n_pass": [6778, 519, 354], "score": "0.3986", "loss": "1.5161", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\" \".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(+ \"\");(u);} catch(UserNotDefinedException e){(va); }}(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e){error(getMessage(),e);}}}"}
{"time": "2021-01-20 09:54:33.690288", "n_pass": [6988, 524, 355], "score": "0.3218", "loss": "1.836", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\"\".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(+ \"\");(u);} catch(UserNotDefinedException e){(va); }}(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e){error(getMessage(),e);}}}"}
{"time": "2021-01-20 09:54:57.217109", "n_pass": [7094, 534, 356], "score": "0.4224", "loss": "1.5418", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\"\".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(+ \"\");(u);}catch(UserNotDefinedException e){(va); }}(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e){error(getMessage(),e);}}}"}
{"time": "2021-01-20 09:55:32.729600", "n_pass": [7436, 549, 357], "score": "0.3744", "loss": "1.5591", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\"\".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(+\"\");(u);}catch(UserNotDefinedException e){(va); }}(\"\".toString()).getString(\"\"); }catch(UserNotDefinedException e){error(getMessage(),e);}}}"}
{"time": "2021-01-20 09:55:35.826147", "n_pass": [7475, 551, 358], "score": "0.3352", "loss": "1.8132", "code": "void execute(JobExecutionContext arg){(\"\").setUserEid();getString(\"\",null);{(\"\");}getString(\"\",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(\"\"+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){(\"\");(getUserId());if((userSiteId)) {(\"\");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){(ValidationAccount);}(\"\"); if(account){add(getUserId());}}}info(\"\"+notLogedIn);(\"\".size()+\"\");if(isDebugEnabled()) {(\"\");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(+\"\");(u);}catch(UserNotDefinedException e){(va); }}(\"\".toString()).getString(\"\");}catch(UserNotDefinedException e){error(getMessage(),e);}}}"}

Minimal simplified code:
void execute(JobExecutionContext arg){("").setUserEid();getString("",null);{("");}getString("",maxDaysLocalStr);if(null){}try{}catch(Exception e){}((1));(""+maxAttempts);try{}catch(Exception e){}StringBuilder();List<String>oldAccounts=ArrayList();List<ValidationAccount>list=getValidationAccountsByStatus();for(;;i++){("");(getUserId());if((userSiteId)) {("");if(getBoolean()){}if(getValidationSent().intValue()>maxAttempts){(ValidationAccount);}(""); if(account){add(getUserId());}}}info(""+notLogedIn);("".size()+"");if(isDebugEnabled()) {("");}Map<List<String>>addedMap;Set<Entry< List<String>>>it=iterator(); while(hasNext()) {Entry<List<String>>creatorId= getKey();try{for(inti ;;i++){try{(u);(+"");(u);}catch(UserNotDefinedException e){(va); }}("".toString()).getString("");}catch(UserNotDefinedException e){error(getMessage(),e);}}}

