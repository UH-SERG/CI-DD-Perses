
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/yandex-qatools__postgresql-embedded/src/test/java/ru/yandex/qatools/embed/postgresql/AbstractPsqlTest_setUp.java
method_name = setUp
method_body = @Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getDefaultInstance(); final PostgresConfig config = new PostgresConfig(PRODUCTION, new AbstractPostgresConfig.Net("localhost", findFreePort()), new AbstractPostgresConfig.Storage("test"), new AbstractPostgresConfig.Timeout(), new AbstractPostgresConfig.Credentials("user", "password")); config.getAdditionalInitDbParams().addAll(asList("-E", "SQL_ASCII", "--locale=C", "--lc-collate=C", "--lc-ctype=C")); PostgresExecutable exec = runtime.prepare(config); process = exec.start(); String url = format("jdbc:postgresql://%s:%s/%s?user=%s&password=%s", config.net().host(), config.net().port(), config.storage().dbName(), config.credentials().username(), config.credentials().password()); conn = DriverManager.getConnection(url); }
predict, score, loss = setUp, 0.5271662, 0.68399125

Trace of simplified code(s):
{"time": "2020-12-28 00:17:46.734540", "n_pass": [1, 1, 1], "score": "0.4525", "loss": "0.8319", "code": "@Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getDefaultInstance(); final PostgresConfig config = new PostgresConfig(PRODUCTION, new AbstractPostgresConfig.Net(\"localhost\", findFreePort()), new AbstractPostgresConfig.Storage(\"test\"), new AbstractPostgresConfig.Timeout(), new AbstractPostgresConfig.Credentials(\"user\", \"password\")); config.getAdditionalInitDbParams().addAll(asList(\"-E\", \"SQL_ASCII\", \"--locale=C\", \"--lc-collate=C\", \"--lc-ctype=C\")); PostgresExecutable exec = runtime.prepare(config); process = exec.start(); String url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().host(), config.net().port(), config.storage().dbName(), config.credentials().username(), config.credentials().password()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:17:49.563616", "n_pass": [24, 3, 2], "score": "0.521", "loss": "0.6867", "code": "@Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getDefaultInstance(); final PostgresConfig config = new PostgresConfig(PRODUCTION, new AbstractPostgresConfig.Net(\"localhost\", findFreePort()), new AbstractPostgresConfig.Storage(\"test\"), new AbstractPostgresConfig.Timeout(), new AbstractPostgresConfig.Credentials(\"user\", \"password\")); config.getAddstgresExecutable exec = runtime.prepare(config); process = exec.start(); String url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().host(), config.net().port(), config.storage().dbName(), config.credentials().username(), config.credentials().password()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:17:50.949015", "n_pass": [29, 4, 3], "score": "0.5341", "loss": "0.6674", "code": "@Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getDefaultInstance(); final PostgresConfig config = new PostgresConfig(PRODUCTION, newbstractPostgresConfig.Timeout(), new AbstractPostgresConfig.Credentials(\"user\", \"password\")); config.getAddstgresExecutable exec = runtime.prepare(config); process = exec.start(); String url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().host(), config.net().port(), config.storage().dbName(), config.credentials().username(), config.credentials().password()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:17:52.356410", "n_pass": [48, 5, 4], "score": "0.6046", "loss": "0.5427", "code": "@Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getDefaultInstance(); final PostgresConfig config = new PostgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAddstgresExecutable exec = runtime.prepare(config); process = exec.start(); String url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().host(), config.net().port(), config.storage().dbName(), config.credentials().username(), config.credentials().password()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:17:53.747106", "n_pass": [50, 6, 5], "score": "0.6539", "loss": "0.5189", "code": "@Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getDefaultInstance(); final PostgresConfig config = new PostgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAdcess = exec.start(); String url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().host(), config.net().port(), config.storage().dbName(), config.credentials().username(), config.credentials().password()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:17:55.132378", "n_pass": [53, 7, 6], "score": "0.6335", "loss": "0.6156", "code": "@Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getDefaultInstance(); final PostgresConfig config = new PostgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAdcess = exec.start(); String url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().hosonfig.credentials().username(), config.credentials().password()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:17:56.543633", "n_pass": [54, 8, 7], "score": "0.653", "loss": "0.4772", "code": "@Before public void setUp() throws Exception { PostgresStarter<PostgresExecutable, PostgresProcess> runtime = PostgresStarter.getDefaultInstance(); final PostgresConfig config = new PostgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAdcess = exec.start(); String url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().hosassword()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:17:57.923934", "n_pass": [57, 9, 8], "score": "0.624", "loss": "0.4923", "code": "@Before public void setUp() throws Exception { Postgre = PostgresStarter.getDefaultInstance(); final PostgresConfig config = new PostgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAdcess = exec.start(); String url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().hosassword()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:17:59.272346", "n_pass": [58, 10, 9], "score": "0.54", "loss": "0.673", "code": "@Before public void setUp() throws Exception { PostgrresConfig config = new PostgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAdcess = exec.start(); String url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().hosassword()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:18:00.756614", "n_pass": [77, 11, 10], "score": "0.4775", "loss": "0.7865", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAdcess = exec.start(); String url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().hosassword()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:18:02.140316", "n_pass": [81, 12, 11], "score": "0.4873", "loss": "0.7654", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAg url = format(\"jdbc:postgresql://%s:%s/%s?user=%s&password=%s\", config.net().hosassword()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:18:03.523253", "n_pass": [83, 13, 12], "score": "0.4873", "loss": "0.7654", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAg url = format(\"jdbc:postgrsword=%s\", config.net().hosassword()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:18:04.906268", "n_pass": [112, 14, 13], "score": "0.4663", "loss": "0.8135", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAg url = format(\"jdbc:postgrsword=%s\", osassword()); conn = DriverManager.getConnection(url); }"}
{"time": "2020-12-28 00:18:06.246654", "n_pass": [114, 15, 14], "score": "0.3883", "loss": "1.1184", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAg url = format(\"jdbc:postgrsword=%s\", osassword()); anager.getConnection(url); }"}
{"time": "2020-12-28 00:18:07.657240", "n_pass": [115, 16, 15], "score": "0.3654", "loss": "1.5644", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(PRODUCTION, newConfig.Credentials(\"user\", \"password\")); config.getAg url = format(\"jdbc:postgrsword=%s\", osassword()); ection(url); }"}
{"time": "2020-12-28 00:18:08.995678", "n_pass": [122, 17, 16], "score": "0.297", "loss": "1.8657", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(ewConfig.Credentials(\"user\", \"password\")); config.getAg url = format(\"jdbc:postgrsword=%s\", osassword()); ection(url); }"}
{"time": "2020-12-28 00:18:10.358098", "n_pass": [123, 18, 17], "score": "0.2557", "loss": "2.242", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(entials(\"user\", \"password\")); config.getAg url = format(\"jdbc:postgrsword=%s\", osassword()); ection(url); }"}
{"time": "2020-12-28 00:18:11.776121", "n_pass": [127, 19, 18], "score": "0.325", "loss": "1.7446", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(entials(\"user\", \"password\")); config.gemat(\"jdbc:postgrsword=%s\", osassword()); ection(url); }"}
{"time": "2020-12-28 00:18:13.140318", "n_pass": [165, 20, 19], "score": "0.325", "loss": "1.7446", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(entials(\"user\", \"password\")); config.gemat(\"jtgrsword=%s\", osassword()); ection(url); }"}
{"time": "2020-12-28 00:18:14.475764", "n_pass": [166, 21, 20], "score": "0.3628", "loss": "1.6421", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(entials(\"user\", \"password\")); config.gemat(\"jd=%s\", osassword()); ection(url); }"}
{"time": "2020-12-28 00:18:15.831959", "n_pass": [168, 22, 21], "score": "0.3361", "loss": "1.719", "code": "@Before public void setUp() throws Exception { PostgstgresConfig(entials(\"user\", \"password\")); config.gemat(\"jd=%s\", rd()); ection(url); }"}
{"time": "2020-12-28 00:18:21.540256", "n_pass": [180, 26, 22], "score": "0.3361", "loss": "1.719", "code": "@Before public void setUp() throws Exception { PgresConfig(entials(\"user\", \"password\")); config.gemat(\"jd=%s\", rd()); ection(url); }"}
{"time": "2020-12-28 00:18:22.855719", "n_pass": [181, 27, 23], "score": "0.2983", "loss": "1.8336", "code": "@Before public void setUp() throws Exception { Pfig(entials(\"user\", \"password\")); config.gemat(\"jd=%s\", rd()); ection(url); }"}
{"time": "2020-12-28 00:18:32.710621", "n_pass": [239, 34, 24], "score": "0.338", "loss": "1.7232", "code": "@Before public void setUp() throws Exception { P(entials(\"user\", \"password\")); config.gemat(\"jd=%s\", rd()); ection(url); }"}
{"time": "2020-12-28 00:18:34.065428", "n_pass": [241, 35, 25], "score": "0.4091", "loss": "1.45", "code": "@Before public void setUp() throws Exception { P(enls(\"user\", \"password\")); config.gemat(\"jd=%s\", rd()); ection(url); }"}
{"time": "2020-12-28 00:18:35.387740", "n_pass": [246, 36, 26], "score": "0.3793", "loss": "1.3977", "code": "@Before public void setUp() throws Exception { P(enls(\"user\", \"sword\")); config.gemat(\"jd=%s\", rd()); ection(url); }"}
{"time": "2020-12-28 00:18:36.737410", "n_pass": [247, 37, 27], "score": "0.4345", "loss": "1.2811", "code": "@Before public void setUp() throws Exception { P(enls(\"user\", \"rd\")); config.gemat(\"jd=%s\", rd()); ection(url); }"}
{"time": "2020-12-28 00:18:40.886313", "n_pass": [252, 40, 28], "score": "0.4206", "loss": "1.3355", "code": "@Before public void setUp() throws Exception { P(enls(\"user\", \"rd\")); config.t(\"jd=%s\", rd()); ection(url); }"}
{"time": "2020-12-28 00:18:42.229254", "n_pass": [254, 41, 29], "score": "0.373", "loss": "1.3662", "code": "@Before public void setUp() throws Exception { P(enls(\"user\", \"rd\")); config.t(\"j\", rd()); ection(url); }"}
{"time": "2020-12-28 00:18:43.560299", "n_pass": [258, 42, 30], "score": "0.2444", "loss": "1.7328", "code": "@Before public void setUp() throws Exception { P(enls(\"user\", \"rd\")); config.t(\"j\", rd()); ec(url); }"}
{"time": "2020-12-28 00:18:59.450029", "n_pass": [353, 52, 31], "score": "0.2376", "loss": "1.7532", "code": "@Before public void setUp() throws Exception { P(enls(\"user\", \"rd\")); config.t(\"j\", rd()); ec(u); }"}
{"time": "2020-12-28 00:19:27.126956", "n_pass": [393, 71, 32], "score": "0.2512", "loss": "1.6664", "code": "@Before public void setUp() throws Exception { P(en(\"user\", \"rd\")); config.t(\"j\", rd()); ec(u); }"}
{"time": "2020-12-28 00:19:28.494414", "n_pass": [395, 72, 33], "score": "0.2883", "loss": "1.5268", "code": "@Before public void setUp() throws Exception { P(en(\"er\", \"rd\")); config.t(\"j\", rd()); ec(u); }"}
{"time": "2020-12-28 00:19:31.189936", "n_pass": [399, 74, 34], "score": "0.3123", "loss": "1.513", "code": "@Before public void setUp() throws Exception { P(en(\"er\", \"\")); config.t(\"j\", rd()); ec(u); }"}
{"time": "2020-12-28 00:19:37.937323", "n_pass": [409, 79, 35], "score": "0.4407", "loss": "1.1382", "code": "@Before public void setUp() throws Exception { P(en(\"er\", \"\")); config.t(\"j\",d()); ec(u); }"}
{"time": "2020-12-28 00:19:39.298329", "n_pass": [413, 80, 36], "score": "0.7551", "loss": "0.3792", "code": "@Before public void setUp() throws Exception { P(en(\"er\", \"\")); config.t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:19:58.789306", "n_pass": [446, 93, 37], "score": "0.6789", "loss": "0.557", "code": "@Before public void setUp() throws ception { P(en(\"er\", \"\")); config.t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:00.143476", "n_pass": [447, 94, 38], "score": "0.6861", "loss": "0.5105", "code": "@Before public void setUp() throws ption { P(en(\"er\", \"\")); config.t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:01.498101", "n_pass": [448, 95, 39], "score": "0.6334", "loss": "0.5933", "code": "@Before public void setUp() throws ion { P(en(\"er\", \"\")); config.t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:02.865026", "n_pass": [449, 96, 40], "score": "0.729", "loss": "0.4444", "code": "@Before public void setUp() throws n { P(en(\"er\", \"\")); config.t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:04.215773", "n_pass": [455, 97, 41], "score": "0.6529", "loss": "0.5392", "code": "@Before public void setUp() throws n { P(en(\"\", \"\")); config.t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:05.727536", "n_pass": [460, 98, 42], "score": "0.6415", "loss": "0.6006", "code": "@Before public void setUp() throws n { P(en(\"\", \"\"));onfig.t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:07.061055", "n_pass": [461, 99, 43], "score": "0.6993", "loss": "0.574", "code": "@Before public void setUp() throws n { P(en(\"\", \"\"));fig.t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:08.443723", "n_pass": [462, 100, 44], "score": "0.6914", "loss": "0.5131", "code": "@Before public void setUp() throws n { P(en(\"\", \"\"));g.t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:09.811669", "n_pass": [463, 101, 45], "score": "0.5808", "loss": "0.8659", "code": "@Before public void setUp() throws n { P(en(\"\", \"\"));t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:22.082125", "n_pass": [488, 110, 46], "score": "0.2197", "loss": "2.1736", "code": "@Before public oid setUp() throws n { P(en(\"\", \"\"));t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:23.416277", "n_pass": [489, 111, 47], "score": "0.3097", "loss": "1.8141", "code": "@Before public id setUp() throws n { P(en(\"\", \"\"));t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:24.822912", "n_pass": [490, 112, 48], "score": "0.2848", "loss": "2.0244", "code": "@Before public d setUp() throws n { P(en(\"\", \"\"));t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:42.743765", "n_pass": [584, 121, 49], "score": "0.2848", "loss": "2.0244", "code": "@Before public d setUp()throws n { P(en(\"\", \"\"));t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:44.075042", "n_pass": [592, 122, 50], "score": "0.2848", "loss": "2.0244", "code": "@Before public d setUp()throws n{ P(en(\"\", \"\"));t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:45.450834", "n_pass": [594, 123, 51], "score": "0.2848", "loss": "2.0244", "code": "@Before public d setUp()throws n{P(en(\"\", \"\"));t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:48.146569", "n_pass": [597, 125, 52], "score": "0.2825", "loss": "2.2755", "code": "@Before public d setUp()throws n{P(n(\"\", \"\"));t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:49.579264", "n_pass": [603, 126, 53], "score": "0.2825", "loss": "2.2755", "code": "@Before public d setUp()throws n{P(n(\"\",\"\"));t(\"j\",d()); (u); }"}
{"time": "2020-12-28 00:20:50.948076", "n_pass": [612, 127, 54], "score": "0.3032", "loss": "2.3882", "code": "@Before public d setUp()throws n{P(n(\"\",\"\"));t(\"\",d()); (u); }"}
{"time": "2020-12-28 00:20:52.280089", "n_pass": [620, 128, 55], "score": "0.3032", "loss": "2.3882", "code": "@Before public d setUp()throws n{P(n(\"\",\"\"));t(\"\",d());(u); }"}
{"time": "2020-12-28 00:20:53.609623", "n_pass": [625, 129, 56], "score": "0.3032", "loss": "2.3882", "code": "@Before public d setUp()throws n{P(n(\"\",\"\"));t(\"\",d());(u);}"}

Minimal simplified code:
@Before public d setUp()throws n{P(n("",""));t("",d());(u);}

