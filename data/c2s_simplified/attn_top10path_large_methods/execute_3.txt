
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/sakaiproject__sakai/reset-pass/account-validator-impl/src/java/org/sakaiproject/accountvalidator/impl/jobs/CheckValidations_execute.java
method_name = execute
method_body = public void execute(JobExecutionContext arg0) throws JobExecutionException { Session sakaiSession = sessionManager.getCurrentSession(); sakaiSession.setUserId("admin"); sakaiSession.setUserEid("admin"); Calendar cal = new GregorianCalendar(); String maxDaysLocalStr = serverConfigurationService.getString("accountValidator.maxDays", null); if (maxDaysLocalStr == null) { log.warn("accountValidator.maxDays was found. The new property is accountValidator.maxReminderDays"); } maxDaysLocalStr = serverConfigurationService.getString("accountValidator.maxReminderDays", maxDaysLocalStr); if (maxDaysLocalStr == null) { maxDaysLocalStr = "" + maxDays; } try { maxDays = Integer.parseInt(maxDaysLocalStr); } catch (Exception e) { } cal.add(Calendar.DAY_OF_MONTH, (maxDays * -1)); Date maxAge = cal.getTime(); int maxAttempts = 10; String maxAttemptsStr = serverConfigurationService.getString("accountValidator.maxResendAttempts", "" + maxAttempts); try { maxAttempts = Integer.parseInt(maxAttemptsStr); } catch (Exception e) { } StringBuilder usedAccounts = new StringBuilder(); List<String> oldAccounts = new ArrayList<String>(); List<ValidationAccount> list = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_SENT); List<ValidationAccount> list2 = validationLogic.getValidationAccountsByStatus(ValidationAccount.STATUS_RESENT); if (list2 != null) { list.addAll(list2); } int loggedInAccounts = 0; int notLogedIn = 0; for (int i = 0; i < list.size(); i++) { ValidationAccount account = list.get(i); log.debug("account " + account.getUserId() + " created on " + account.getValidationSent()); String userSiteId = siteService.getUserSiteId(account.getUserId()); if (siteService.siteExists(userSiteId)) { log.info("looks like this user logged in!"); loggedInAccounts++; if (account.getValidationsSent().intValue() < maxAttempts && serverConfigurationService.getBoolean("accountValidator.resendValidations", true)) { validationLogic.resendValidation(account.getValidationToken()); } else if (account.getValidationSent().before(maxAge) || account.getValidationsSent().intValue() >= maxAttempts) { account.setStatus(ValidationAccount.STATUS_EXPIRED); cal = new GregorianCalendar(); account.setvalidationReceived(cal.getTime()); validationLogic.save(account); } else if (validationLogic.isTokenExpired(account)) { } else { } usedAccounts.append(account.getUserId() + "\n"); } else { log.debug("realm: " + "/site/~" + account.getUserId() + " does not seem to exist"); notLogedIn++; if (account.getValidationSent().before(maxAge)) { oldAccounts.add(account.getUserId()); } } } log.info("users have logged in: " + loggedInAccounts + " not logged in: " + notLogedIn); log.info("we would delete: " + oldAccounts.size() + " accounts"); if (log.isDebugEnabled()) { log.debug("users:" + usedAccounts.toString()); } Map<String, List<String>> addedMap = buildAddedMap(oldAccounts); Set<Entry<String, List<String>>> entrySet = addedMap.entrySet(); Iterator<Entry<String, List<String>>> it = entrySet.iterator(); while (it.hasNext()) { Entry<String, List<String>> entry = it.next(); String creatorId = entry.getKey(); try { User creator = userDirectoryService.getUser(creatorId); Locale locale = getUserLocale(creatorId); List<String> users = entry.getValue(); StringBuilder userText = new StringBuilder(); for (int i = 0; i < users.size(); i++) { try { User u = userDirectoryService.getUser(users.get(i)); DateTime dt = new DateTime(u.getCreatedDate()); DateTimeFormatter fmt = DateTimeFormat.longDate(); String str = fmt.withLocale(locale).print(dt); userText.append(u.getEid() + " (" + str + ")\n"); removeCleaUpUser(u.getId()); } catch (UserNotDefinedException e) { ValidationAccount va = validationLogic.getVaLidationAcountByUserId(users.get(i)); validationLogic.deleteValidationAccount(va); } } List<String> userReferences = new ArrayList<String>(); userReferences.add(creator.getReference()); Map<String, String> replacementValues = new HashMap<String, String>(); replacementValues.put("userList", userText.toString()); replacementValues.put("creatorName", creator.getDisplayName()); replacementValues.put("deleteDays", Integer.valueOf(maxDays).toString()); replacementValues.put("institution", serverConfigurationService.getString("ui.institution")); String fromEmail = serverConfigurationService.getString("accountValidator.checkValidations.fromEmailAddress", serverConfigurationService.getString("mail.support")); String fromName = serverConfigurationService.getString("accountValidator.checkValidations.fromEmailName", serverConfigurationService.getString("mail.support")); emailTemplateService.sendRenderedMessages("validate.deleted", userReferences, replacementValues, fromEmail, fromName); } catch (UserNotDefinedException e) { log.error(e.getMessage(), e); } } }

topk path-contexts for sub-token: execute
[0.1595] job|execution|context,ClassOrInterfaceType1|Parameter|MethodDeclaration|BlockStmt|ExpressionStmt|VariableDeclarationExpr|PrimitiveType0,int
[0.1533] job|execution|context,ClassOrInterfaceType1|Parameter|MethodDeclaration|BlockStmt|IfStmt|BinaryExpr:equals|NullLiteralExpr1,null
[0.0585] job|execution|context,ClassOrInterfaceType1|Parameter|MethodDeclaration|BlockStmt|ExpressionStmt|VariableDeclarationExpr|VariableDeclarator|MethodCallExpr1|NameExpr0,validation|logic
[0.0562] job|execution|context,ClassOrInterfaceType1|Parameter|MethodDeclaration|BlockStmt|IfStmt|BlockStmt|ExpressionStmt|MethodCallExpr0|NameExpr0,list
[0.0439] site|service,NameExpr0|MethodCallExpr|IfStmt|BlockStmt|IfStmt|BlockStmt|ExpressionStmt|MethodCallExpr0|NameExpr3,resend|validation
[0.0294] arg,VariableDeclaratorId0|Parameter|MethodDeclaration|BlockStmt|ExpressionStmt|VariableDeclarationExpr|VariableDeclarator|IntegerLiteralExpr1,<NUM>
[0.0289] site|exists,NameExpr3|MethodCallExpr|IfStmt|BlockStmt|IfStmt|BlockStmt|ExpressionStmt|MethodCallExpr0|NameExpr3,resend|validation
[0.0277] job|execution|exception,ClassOrInterfaceType3|MethodDeclaration|BlockStmt|IfStmt|BinaryExpr:equals|NullLiteralExpr1,null
[0.0265] job|execution|exception,ClassOrInterfaceType3|MethodDeclaration|BlockStmt|ExpressionStmt|VariableDeclarationExpr|ClassOrInterfaceType|ClassOrInterfaceType0,validation|account
[0.0240] job|execution|exception,ClassOrInterfaceType3|MethodDeclaration|BlockStmt|TryStmt|CatchClause|Parameter|VariableDeclaratorId0,e

topk terminals for sub-token: execute
['job|execution|context', 'int', 'job|execution|context', 'null', 'job|execution|context', 'validation|logic', 'job|execution|context', 'list', 'site|service', 'resend|validation', 'arg', '<NUM>', 'site|exists', 'resend|validation', 'job|execution|exception', 'null', 'job|execution|exception', 'validation|account', 'job|execution|exception', 'e']

