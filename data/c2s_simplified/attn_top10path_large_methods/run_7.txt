
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/bluestreak01__questdb/core/src/main/java/com/questdb/net/ha/JournalClient_run.java
method_name = run
method_body = @Override public void run() { running = true; notifyCallback(JournalClientEvents.EVT_RUNNING); int event = JournalClientEvents.EVT_NONE; boolean connected = false; try { while (true) { if (!connected) { int retryCount = config.getReconnectPolicy().getRetryCount(); int loginRetryCount = config.getReconnectPolicy().getLoginRetryCount(); do { try { closeChannel(); try { openChannel(); counter.incrementAndGet(); } catch (JournalNetworkException e) { if (retryCount-- > 0) { continue; } else { break; } } sendProtocolVersion(); checkAuthAndSendCredential(); resubscribe(); sendReady(); connected = true; notifyCallback(JournalClientEvents.EVT_CONNECTED); } catch (UnauthorizedException e) { notifyCallback(JournalClientEvents.EVT_AUTH_ERROR); loginRetryCount--; } catch (AuthenticationConfigException | AuthenticationProviderException e) { closeChannel(); close0(); notifyCallback(JournalClientEvents.EVT_AUTH_CONFIG_ERROR); return; } catch (JournalNetworkException e) { LOG.info().$(e.getMessage()).$(); closeChannel(); } if (!connected && retryCount-- > 0 && loginRetryCount > 0) { LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(config.getReconnectPolicy().getSleepBetweenRetriesMillis())); LOG.info().$("Retrying reconnect ... [").$(retryCount + 1).$(']').$(); } else { break; } } while (true); if (!connected && (retryCount == 0 || loginRetryCount == 0)) { event = JournalClientEvents.EVT_SERVER_ERROR; } } try { if (connected && channel.isOpen() && isRunning()) { commandConsumer.read(channel); byte cmd = commandConsumer.getCommand(); switch(cmd) { case Command.JOURNAL_DELTA_CMD: statsChannel.setDelegate(channel); int index = intResponseConsumer.getValue(statsChannel); deltaConsumers.getQuick(index).read(statsChannel); statusSentList.set(index, 0); statsChannel.logStats(); break; case Command.SERVER_READY_CMD: sendState(); sendReady(); break; case Command.SERVER_HEARTBEAT: if (processSubscriptionQueue()) { sendReady(); } else { event = JournalClientEvents.EVT_CLIENT_HALT; } break; case Command.SERVER_SHUTDOWN: connected = false; break; default: LOG.info().$("Unknown command: ").$(cmd).$(); break; } } else if (event == JournalClientEvents.EVT_NONE) { event = JournalClientEvents.EVT_CLIENT_HALT; } } catch (IncompatibleJournalException e) { LOG.error().$(e.getMessage()).$(); event = JournalClientEvents.EVT_INCOMPATIBLE_JOURNAL; } catch (JournalNetworkException e) { LOG.error().$("Network error. Server died?").$(); LOG.debug().$("Network error details: ").$(e).$(); notifyCallback(JournalClientEvents.EVT_SERVER_DIED); connected = false; } catch (Throwable e) { LOG.error().$("Unhandled exception in client").$(e).$(); event = JournalClientEvents.EVT_CLIENT_EXCEPTION; } if (event != JournalClientEvents.EVT_NONE) { if (channel != null && channel.isOpen()) { sendDisconnect(); } closeChannel(); close0(); notifyCallback(event); break; } } } catch (Throwable e) { LOG.error().$("Fatal exception when closing client").$(e).$(); closeChannel(); close0(); } finally { running = false; notifyCallback(JournalClientEvents.EVT_TERMINATED); haltLatch.countDown(); LOG.info().$("Terminated").$(); } }

topk path-contexts for sub-token: run
[0.0545] void,VoidType1|MethodDeclaration|BlockStmt|TryStmt|BlockStmt|ExpressionStmt|MethodCallExpr0|FieldAccessExpr1|NameExpr0,journal|client|events
[0.0334] true,BooleanLiteralExpr0|WhileStmt|BlockStmt|TryStmt|BlockStmt|IfStmt|IfStmt|BinaryExpr:equals|NameExpr0,event
[0.0329] METHOD_NAME,NameExpr2|MethodDeclaration|BlockStmt|ExpressionStmt|MethodCallExpr0|NameExpr2,notify|callback
[0.0193] cmd,NameExpr0|SwitchStmt|SwitchEntryStmt|FieldAccessExpr0|NameExpr2,server|ready|cmd
[0.0166] journal|client|events,NameExpr0|FieldAccessExpr1|MethodCallExpr|ExpressionStmt|BlockStmt|ExpressionStmt|VariableDeclarationExpr|PrimitiveType0,int
[0.0165] true,BooleanLiteralExpr0|WhileStmt|BlockStmt|TryStmt|BlockStmt|IfStmt|BinaryExpr:and|BinaryExpr:and|NameExpr0,connected
[0.0138] byte,PrimitiveType0|VariableDeclarationExpr|ExpressionStmt|BlockStmt|SwitchStmt|SwitchEntryStmt|ExpressionStmt|MethodCallExpr0|NameExpr1,send|ready
[0.0130] channel,NameExpr0|MethodCallExpr|NameExpr2,is|open
[0.0128] e,VariableDeclaratorId0|Parameter|CatchClause|BlockStmt|ExpressionStmt|MethodCallExpr0|MethodCallExpr0|StringLiteralExpr2,network|error|server|died
[0.0124] true,BooleanLiteralExpr1|DoStmt|BlockStmt|IfStmt|BlockStmt|TryStmt|CatchClause|Parameter|ClassOrInterfaceType1,journal|network|exception

topk terminals for sub-token: run
['void', 'journal|client|events', 'true', 'event', 'METHOD_NAME', 'notify|callback', 'cmd', 'server|ready|cmd', 'journal|client|events', 'int', 'true', 'connected', 'byte', 'send|ready', 'channel', 'is|open', 'e', 'network|error|server|died', 'true', 'journal|network|exception']

