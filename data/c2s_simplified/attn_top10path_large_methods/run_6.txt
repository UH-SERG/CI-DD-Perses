
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/OpenRock__OpenAM/openam-core/src/main/java/com/iplanet/services/comm/https/JSSProxy_run.java
method_name = run
method_body = public void run() { Integer remotePort = new Integer(inconnection.getPort()); byte[] prebuffer = new byte[1]; DataInputStream inFrom; try { inFrom = new DataInputStream(inconnection.getInputStream()); inFrom.readFully(prebuffer, 0, 1); } catch (IOException e) { debug.error("JSSProxySessionRunnable: Unable to open input stream on " + inconnection, e); connectHashMap.remove(remotePort); closeSockets(); return; } String info = (String) connectHashMap.remove(remotePort); StringTokenizer st = new StringTokenizer(info); String host = st.nextToken(); int port; try { port = Integer.parseInt(st.nextToken()); } catch (Exception ex) { port = 8080; } try { toProxySocket = new Socket(host, port); toProxySocket.setTcpNoDelay(true); } catch (Exception ex) { toProxySocket = null; if (debug.messageEnabled()) { debug.message("JSSProxySessionRunnable: " + "Unable to connect to " + host + ":" + port + ". ", ex); } } if (toProxySocket == null) { closeSockets(); return; } String desthost = st.nextToken(); String destport = st.nextToken(); OutputStream out = null; InputStream in = null; byte[] reply = new byte[200]; int replyLen = 0; int newlinesSeen = 0; boolean headerDone = false; try { out = toProxySocket.getOutputStream(); String msg = "CONNECT " + desthost + ":" + destport + " HTTP/1.0\n" + "User-Agent: " + sun.net.www.protocol.http.HttpURLConnection.userAgent + "\r\n\r\n"; debug.message(msg); byte[] b; try { b = msg.getBytes("ASCII7"); } catch (UnsupportedEncodingException ignored) { b = msg.getBytes(); } out.write(b); out.flush(); in = toProxySocket.getInputStream(); boolean error = false; while (newlinesSeen < 2) { int i = in.read(); if (i < 0) { debug.error("JSSProxySessionRunnable: " + "Unexpected EOF from proxy"); closeSockets(); return; } if (i == '\n') { headerDone = true; ++newlinesSeen; } else if (i != '\r') { newlinesSeen = 0; if (!headerDone && replyLen < reply.length) { reply[replyLen++] = (byte) i; } } } } catch (IOException ioe) { debug.error("JSSProxySessionRunnable: " + "Unable to get OutputStream", ioe); closeSockets(); return; } String replyStr; try { replyStr = new String(reply, 0, replyLen, "ASCII7"); } catch (UnsupportedEncodingException ignored) { replyStr = new String(reply, 0, replyLen); } if (!replyStr.startsWith("HTTP/1.0 200")) { debug.error("JSSProxySessionRunnable: Unable to tunnel through "); closeSockets(); return; } try { out.write(prebuffer); out.flush(); } catch (IOException ioe) { debug.error("JSSProxySessionRunnable: " + "Unable to write prebuffer.", ioe); closeSockets(); return; } new RWGroupJSSProxy(inconnection, toProxySocket); }

topk path-contexts for sub-token: run
[0.0713] debug,NameExpr0|MethodCallExpr|BinaryExpr:plus|StringLiteralExpr1,unexpected|eof|from|proxy
[0.0442] void,VoidType0|MethodDeclaration|BlockStmt|TryStmt|BlockStmt|WhileStmt|BinaryExpr:less|IntegerLiteralExpr1,<NUM>
[0.0268] i,NameExpr0|BinaryExpr:less|IfStmt|BlockStmt|ExpressionStmt|MethodCallExpr0|BinaryExpr:plus|StringLiteralExpr0,jss|proxy|session|runnable
[0.0266] connect,StringLiteralExpr0|BinaryExpr:plus|BinaryExpr:plus|BinaryExpr:plus|BinaryExpr:plus|BinaryExpr:plus|StringLiteralExpr1,useragent
[0.0249] void,VoidType0|MethodDeclaration|BlockStmt|ExpressionStmt|ObjectCreationExpr|ClassOrInterfaceType0,rw|group|jss|proxy
[0.0211] flush,NameExpr2|MethodCallExpr|ExpressionStmt|BlockStmt|TryStmt|BlockStmt|ExpressionStmt|ObjectCreationExpr|NameExpr2,to|proxy|socket
[0.0171] void,VoidType0|MethodDeclaration|BlockStmt|IfStmt|BlockStmt|ExpressionStmt|MethodCallExpr0|NameExpr1,close|sockets
[0.0170] void,VoidType0|MethodDeclaration|BlockStmt|ExpressionStmt|VariableDeclarationExpr|VariableDeclarator|CastExpr|MethodCallExpr1|NameExpr0,connect|hash|map
[0.0165] METHOD_NAME,NameExpr1|MethodDeclaration|BlockStmt|TryStmt|BlockStmt|WhileStmt|BinaryExpr:less|NameExpr0,newlines|seen
[0.0155] jss|proxy|session|runnable|unable|to|open|input|stream|on,StringLiteralExpr0|BinaryExpr:plus2|MethodCallExpr|NameExpr3,error

topk terminals for sub-token: run
['debug', 'unexpected|eof|from|proxy', 'void', '<NUM>', 'i', 'jss|proxy|session|runnable', 'connect', 'useragent', 'void', 'rw|group|jss|proxy', 'flush', 'to|proxy|socket', 'void', 'close|sockets', 'void', 'connect|hash|map', 'METHOD_NAME', 'newlines|seen', 'jss|proxy|session|runnable|unable|to|open|input|stream|on', 'error']

