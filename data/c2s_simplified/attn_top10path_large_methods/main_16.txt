
path = /scratch/rabin/data/code2vec/transforms/Methods_Test/java-large/test/CogComp__cogcomp-nlp/chunker/src/main/java/edu/illinois/cs/cogcomp/chunker/realign/TranslatePOSTagging_main.java
method_name = main
method_body = public static void main(String[] args) throws IOException { if (args.length == 0) { System.err.println("Pass in the directory containing both the chunker data and the pos data."); System.exit(1); } File directory = new File(args[0]); File chunkerTrainDir = new File(directory, "chunker"); File posTrainDir = new File(directory, "pos"); File outputTrainDir = new File(directory, "revised"); if (chunkerTrainDir.exists() == false) { System.err.println("There is not directory named \"" + chunkerTrainDir.toString() + "\"."); System.exit(1); } if (posTrainDir.exists() == false) { System.err.println("There is no directory named \"" + posTrainDir.toString() + "\"."); System.exit(1); } if (outputTrainDir.exists() == true) { System.out.println("Output directory already exists \"" + outputTrainDir.toString() + "\", destroying"); final File[] files = outputTrainDir.listFiles(); for (File f : files) f.delete(); outputTrainDir.delete(); } outputTrainDir.mkdir(); System.out.println("Created " + outputTrainDir.toString()); String resultspath = outputTrainDir.toString() + File.separator; File[] chunkerfiles = chunkerTrainDir.listFiles(); File[] posFiles = posTrainDir.listFiles(); for (int i = 0; i < chunkerfiles.length; i++) { File chunkfile = chunkerfiles[i]; File posfile = posFiles[i]; if (!chunkfile.getName().equals(posfile.getName())) { System.err.println("Files names were not equal!"); System.exit(1); } try (BufferedReader chunkreader = new BufferedReader(new FileReader(chunkfile))) { try (BufferedReader posreader = new BufferedReader(new FileReader(posfile))) { String pl = null; while (true) { String cl = chunkreader.readLine(); if (cl == null) break; pl = posreader.readLine(); ChunkTree ct = new ChunkTree(cl); String ctsent = ct.sentence(); if (!chunkedSentences.containsKey(ctsent)) { chunkedSentences.put(ctsent, ct); } if (pl != null) { ChunkTree pt = new ChunkTree(pl); if (pl != null) posSentences.add(pt); } } } } int line = 0; int diff = 0; StringBuffer result = new StringBuffer(); for (ChunkTree postree : posSentences) { ChunkTree chunktree = chunkedSentences.get(postree.sentence()); if (chunktree == null) { System.err.println("Hell fire."); } else { String before = chunktree.sentence(); String beforet = chunktree.toString(); chunktree.merge(postree); if (!chunktree.sentence().equals(before)) { throw new RuntimeException("Sentences differed : \n" + before + "\n" + chunktree.sentence()); } if (!beforet.equals(chunktree.toString())) { System.out.println(); System.out.println(beforet); System.out.println(chunktree); System.out.println(postree); diff++; } result.append(chunktree.toString()); result.append('\n'); } line++; } System.out.println("Of " + line + ", " + diff + " changed."); Files.write(Paths.get(resultspath + chunkfile.getName()), result.toString().getBytes(), StandardOpenOption.CREATE); } }

topk path-contexts for sub-token: main
[0.1232] string,ClassOrInterfaceType1|Parameter|ArrayBracketPair2,[]
[0.0850] args,VariableDeclaratorId0|Parameter|MethodDeclaration|BlockStmt|ForStmt|BlockStmt|ExpressionStmt|VariableDeclarationExpr|ClassOrInterfaceType0,file
[0.0733] args,VariableDeclaratorId0|Parameter|MethodDeclaration|BlockStmt|IfStmt|BinaryExpr:equals|BooleanLiteralExpr1,false
[0.0659] args,VariableDeclaratorId0|Parameter|MethodDeclaration|BlockStmt|IfStmt|BlockStmt|ExpressionStmt|MethodCallExpr0|NameExpr0,system
[0.0656] args,NameExpr0|ArrayAccessExpr|IntegerLiteralExpr1,0
[0.0427] METHOD_NAME,NameExpr1|MethodDeclaration|Parameter|ArrayBracketPair2,[]
[0.0422] METHOD_NAME,NameExpr1|MethodDeclaration|Parameter|VariableDeclaratorId0,args
[0.0301] args,VariableDeclaratorId0|Parameter|MethodDeclaration|BlockStmt|IfStmt|BlockStmt|ExpressionStmt|MethodCallExpr0|NameExpr3,println
[0.0266] args,VariableDeclaratorId0|Parameter|MethodDeclaration|BlockStmt|ForStmt|BinaryExpr:less|FieldAccessExpr1|NameExpr2,length
[0.0245] [],ArrayBracketPair2|Parameter|MethodDeclaration|BlockStmt|ExpressionStmt|MethodCallExpr0|NameExpr0,output|train|dir

topk terminals for sub-token: main
['string', '[]', 'args', 'file', 'args', 'false', 'args', 'system', 'args', '0', 'METHOD_NAME', '[]', 'METHOD_NAME', 'args', 'args', 'println', 'args', 'length', '[]', 'output|train|dir']

